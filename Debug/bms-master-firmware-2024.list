
bms-master-firmware-2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ec84  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006d80  0801ee58  0801ee58  0002ee58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08025bd8  08025bd8  00040330  2**0
                  CONTENTS
  4 .ARM          00000008  08025bd8  08025bd8  00035bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08025be0  08025be0  00040330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08025be0  08025be0  00035be0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08025be4  08025be4  00035be4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000330  20000000  08025be8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013470  20000330  08025f18  00040330  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200137a0  08025f18  000437a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040330  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00040360  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002ed84  00000000  00000000  000403a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006532  00000000  00000000  0006f127  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002550  00000000  00000000  00075660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001cfe  00000000  00000000  00077bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ab12  00000000  00000000  000798ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000356ad  00000000  00000000  000a43c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f4845  00000000  00000000  000d9a6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000b848  00000000  00000000  001ce2b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009d  00000000  00000000  001d9afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000330 	.word	0x20000330
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801ee3c 	.word	0x0801ee3c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000334 	.word	0x20000334
 800020c:	0801ee3c 	.word	0x0801ee3c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a6 	b.w	800102c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9e08      	ldr	r6, [sp, #32]
 8000d6a:	460d      	mov	r5, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	460f      	mov	r7, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4694      	mov	ip, r2
 8000d78:	d965      	bls.n	8000e46 <__udivmoddi4+0xe2>
 8000d7a:	fab2 f382 	clz	r3, r2
 8000d7e:	b143      	cbz	r3, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d84:	f1c3 0220 	rsb	r2, r3, #32
 8000d88:	409f      	lsls	r7, r3
 8000d8a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d8e:	4317      	orrs	r7, r2
 8000d90:	409c      	lsls	r4, r3
 8000d92:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d96:	fa1f f58c 	uxth.w	r5, ip
 8000d9a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d9e:	0c22      	lsrs	r2, r4, #16
 8000da0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000da4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000da8:	fb01 f005 	mul.w	r0, r1, r5
 8000dac:	4290      	cmp	r0, r2
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db0:	eb1c 0202 	adds.w	r2, ip, r2
 8000db4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000db8:	f080 811c 	bcs.w	8000ff4 <__udivmoddi4+0x290>
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	f240 8119 	bls.w	8000ff4 <__udivmoddi4+0x290>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	4462      	add	r2, ip
 8000dc6:	1a12      	subs	r2, r2, r0
 8000dc8:	b2a4      	uxth	r4, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dd6:	fb00 f505 	mul.w	r5, r0, r5
 8000dda:	42a5      	cmp	r5, r4
 8000ddc:	d90a      	bls.n	8000df4 <__udivmoddi4+0x90>
 8000dde:	eb1c 0404 	adds.w	r4, ip, r4
 8000de2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de6:	f080 8107 	bcs.w	8000ff8 <__udivmoddi4+0x294>
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	f240 8104 	bls.w	8000ff8 <__udivmoddi4+0x294>
 8000df0:	4464      	add	r4, ip
 8000df2:	3802      	subs	r0, #2
 8000df4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df8:	1b64      	subs	r4, r4, r5
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11e      	cbz	r6, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40dc      	lsrs	r4, r3
 8000e00:	2300      	movs	r3, #0
 8000e02:	e9c6 4300 	strd	r4, r3, [r6]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0xbc>
 8000e0e:	2e00      	cmp	r6, #0
 8000e10:	f000 80ed 	beq.w	8000fee <__udivmoddi4+0x28a>
 8000e14:	2100      	movs	r1, #0
 8000e16:	e9c6 0500 	strd	r0, r5, [r6]
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e20:	fab3 f183 	clz	r1, r3
 8000e24:	2900      	cmp	r1, #0
 8000e26:	d149      	bne.n	8000ebc <__udivmoddi4+0x158>
 8000e28:	42ab      	cmp	r3, r5
 8000e2a:	d302      	bcc.n	8000e32 <__udivmoddi4+0xce>
 8000e2c:	4282      	cmp	r2, r0
 8000e2e:	f200 80f8 	bhi.w	8001022 <__udivmoddi4+0x2be>
 8000e32:	1a84      	subs	r4, r0, r2
 8000e34:	eb65 0203 	sbc.w	r2, r5, r3
 8000e38:	2001      	movs	r0, #1
 8000e3a:	4617      	mov	r7, r2
 8000e3c:	2e00      	cmp	r6, #0
 8000e3e:	d0e2      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	e9c6 4700 	strd	r4, r7, [r6]
 8000e44:	e7df      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e46:	b902      	cbnz	r2, 8000e4a <__udivmoddi4+0xe6>
 8000e48:	deff      	udf	#255	; 0xff
 8000e4a:	fab2 f382 	clz	r3, r2
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f040 8090 	bne.w	8000f74 <__udivmoddi4+0x210>
 8000e54:	1a8a      	subs	r2, r1, r2
 8000e56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e5a:	fa1f fe8c 	uxth.w	lr, ip
 8000e5e:	2101      	movs	r1, #1
 8000e60:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e64:	fb07 2015 	mls	r0, r7, r5, r2
 8000e68:	0c22      	lsrs	r2, r4, #16
 8000e6a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e6e:	fb0e f005 	mul.w	r0, lr, r5
 8000e72:	4290      	cmp	r0, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x124>
 8000e76:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x122>
 8000e80:	4290      	cmp	r0, r2
 8000e82:	f200 80cb 	bhi.w	800101c <__udivmoddi4+0x2b8>
 8000e86:	4645      	mov	r5, r8
 8000e88:	1a12      	subs	r2, r2, r0
 8000e8a:	b2a4      	uxth	r4, r4
 8000e8c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e90:	fb07 2210 	mls	r2, r7, r0, r2
 8000e94:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e98:	fb0e fe00 	mul.w	lr, lr, r0
 8000e9c:	45a6      	cmp	lr, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x14e>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ea8:	d202      	bcs.n	8000eb0 <__udivmoddi4+0x14c>
 8000eaa:	45a6      	cmp	lr, r4
 8000eac:	f200 80bb 	bhi.w	8001026 <__udivmoddi4+0x2c2>
 8000eb0:	4610      	mov	r0, r2
 8000eb2:	eba4 040e 	sub.w	r4, r4, lr
 8000eb6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eba:	e79f      	b.n	8000dfc <__udivmoddi4+0x98>
 8000ebc:	f1c1 0720 	rsb	r7, r1, #32
 8000ec0:	408b      	lsls	r3, r1
 8000ec2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ec6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eca:	fa05 f401 	lsl.w	r4, r5, r1
 8000ece:	fa20 f307 	lsr.w	r3, r0, r7
 8000ed2:	40fd      	lsrs	r5, r7
 8000ed4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed8:	4323      	orrs	r3, r4
 8000eda:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ede:	fa1f fe8c 	uxth.w	lr, ip
 8000ee2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ee6:	0c1c      	lsrs	r4, r3, #16
 8000ee8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eec:	fb08 f50e 	mul.w	r5, r8, lr
 8000ef0:	42a5      	cmp	r5, r4
 8000ef2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef6:	fa00 f001 	lsl.w	r0, r0, r1
 8000efa:	d90b      	bls.n	8000f14 <__udivmoddi4+0x1b0>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f04:	f080 8088 	bcs.w	8001018 <__udivmoddi4+0x2b4>
 8000f08:	42a5      	cmp	r5, r4
 8000f0a:	f240 8085 	bls.w	8001018 <__udivmoddi4+0x2b4>
 8000f0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f12:	4464      	add	r4, ip
 8000f14:	1b64      	subs	r4, r4, r5
 8000f16:	b29d      	uxth	r5, r3
 8000f18:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f1c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f20:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f24:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f28:	45a6      	cmp	lr, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x1da>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f34:	d26c      	bcs.n	8001010 <__udivmoddi4+0x2ac>
 8000f36:	45a6      	cmp	lr, r4
 8000f38:	d96a      	bls.n	8001010 <__udivmoddi4+0x2ac>
 8000f3a:	3b02      	subs	r3, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f42:	fba3 9502 	umull	r9, r5, r3, r2
 8000f46:	eba4 040e 	sub.w	r4, r4, lr
 8000f4a:	42ac      	cmp	r4, r5
 8000f4c:	46c8      	mov	r8, r9
 8000f4e:	46ae      	mov	lr, r5
 8000f50:	d356      	bcc.n	8001000 <__udivmoddi4+0x29c>
 8000f52:	d053      	beq.n	8000ffc <__udivmoddi4+0x298>
 8000f54:	b156      	cbz	r6, 8000f6c <__udivmoddi4+0x208>
 8000f56:	ebb0 0208 	subs.w	r2, r0, r8
 8000f5a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f62:	40ca      	lsrs	r2, r1
 8000f64:	40cc      	lsrs	r4, r1
 8000f66:	4317      	orrs	r7, r2
 8000f68:	e9c6 7400 	strd	r7, r4, [r6]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	2100      	movs	r1, #0
 8000f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f74:	f1c3 0120 	rsb	r1, r3, #32
 8000f78:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f7c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f80:	fa25 f101 	lsr.w	r1, r5, r1
 8000f84:	409d      	lsls	r5, r3
 8000f86:	432a      	orrs	r2, r5
 8000f88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f8c:	fa1f fe8c 	uxth.w	lr, ip
 8000f90:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f94:	fb07 1510 	mls	r5, r7, r0, r1
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f9e:	fb00 f50e 	mul.w	r5, r0, lr
 8000fa2:	428d      	cmp	r5, r1
 8000fa4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fa8:	d908      	bls.n	8000fbc <__udivmoddi4+0x258>
 8000faa:	eb1c 0101 	adds.w	r1, ip, r1
 8000fae:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fb2:	d22f      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fb4:	428d      	cmp	r5, r1
 8000fb6:	d92d      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fb8:	3802      	subs	r0, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	1b49      	subs	r1, r1, r5
 8000fbe:	b292      	uxth	r2, r2
 8000fc0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fc4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fc8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fcc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fd0:	4291      	cmp	r1, r2
 8000fd2:	d908      	bls.n	8000fe6 <__udivmoddi4+0x282>
 8000fd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fd8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fdc:	d216      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000fde:	4291      	cmp	r1, r2
 8000fe0:	d914      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000fe2:	3d02      	subs	r5, #2
 8000fe4:	4462      	add	r2, ip
 8000fe6:	1a52      	subs	r2, r2, r1
 8000fe8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fec:	e738      	b.n	8000e60 <__udivmoddi4+0xfc>
 8000fee:	4631      	mov	r1, r6
 8000ff0:	4630      	mov	r0, r6
 8000ff2:	e708      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000ff4:	4639      	mov	r1, r7
 8000ff6:	e6e6      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	e6fb      	b.n	8000df4 <__udivmoddi4+0x90>
 8000ffc:	4548      	cmp	r0, r9
 8000ffe:	d2a9      	bcs.n	8000f54 <__udivmoddi4+0x1f0>
 8001000:	ebb9 0802 	subs.w	r8, r9, r2
 8001004:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001008:	3b01      	subs	r3, #1
 800100a:	e7a3      	b.n	8000f54 <__udivmoddi4+0x1f0>
 800100c:	4645      	mov	r5, r8
 800100e:	e7ea      	b.n	8000fe6 <__udivmoddi4+0x282>
 8001010:	462b      	mov	r3, r5
 8001012:	e794      	b.n	8000f3e <__udivmoddi4+0x1da>
 8001014:	4640      	mov	r0, r8
 8001016:	e7d1      	b.n	8000fbc <__udivmoddi4+0x258>
 8001018:	46d0      	mov	r8, sl
 800101a:	e77b      	b.n	8000f14 <__udivmoddi4+0x1b0>
 800101c:	3d02      	subs	r5, #2
 800101e:	4462      	add	r2, ip
 8001020:	e732      	b.n	8000e88 <__udivmoddi4+0x124>
 8001022:	4608      	mov	r0, r1
 8001024:	e70a      	b.n	8000e3c <__udivmoddi4+0xd8>
 8001026:	4464      	add	r4, ip
 8001028:	3802      	subs	r0, #2
 800102a:	e742      	b.n	8000eb2 <__udivmoddi4+0x14e>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <adBms6830_init_config>:
 *******************************************************************************
 * @brief Set configuration register A. Refer to the data sheet
 *        Set configuration register B. Refer to the data sheet
 *******************************************************************************
 */
void adBms6830_init_config(uint8_t tIC, cell_asic *ic) {
 8001030:	b590      	push	{r4, r7, lr}
 8001032:	b087      	sub	sp, #28
 8001034:	af02      	add	r7, sp, #8
 8001036:	4603      	mov	r3, r0
 8001038:	6039      	str	r1, [r7, #0]
 800103a:	71fb      	strb	r3, [r7, #7]
	for (uint8_t cic = 0; cic < tIC; cic++) {
 800103c:	2300      	movs	r3, #0
 800103e:	73fb      	strb	r3, [r7, #15]
 8001040:	e17d      	b.n	800133e <adBms6830_init_config+0x30e>
		/* Init config A */
		ic[cic].tx_cfga.refon = 0;
 8001042:	7bfb      	ldrb	r3, [r7, #15]
 8001044:	f44f 724a 	mov.w	r2, #808	; 0x328
 8001048:	fb02 f303 	mul.w	r3, r2, r3
 800104c:	683a      	ldr	r2, [r7, #0]
 800104e:	441a      	add	r2, r3
 8001050:	7813      	ldrb	r3, [r2, #0]
 8001052:	f36f 0300 	bfc	r3, #0, #1
 8001056:	7013      	strb	r3, [r2, #0]
		ic[cic].tx_cfga.cth = 1;
 8001058:	7bfb      	ldrb	r3, [r7, #15]
 800105a:	f44f 724a 	mov.w	r2, #808	; 0x328
 800105e:	fb02 f303 	mul.w	r3, r2, r3
 8001062:	683a      	ldr	r2, [r7, #0]
 8001064:	441a      	add	r2, r3
 8001066:	7813      	ldrb	r3, [r2, #0]
 8001068:	2101      	movs	r1, #1
 800106a:	f361 0343 	bfi	r3, r1, #1, #3
 800106e:	7013      	strb	r3, [r2, #0]
		ic[cic].tx_cfga.flag_d = 0;
 8001070:	7bfb      	ldrb	r3, [r7, #15]
 8001072:	f44f 724a 	mov.w	r2, #808	; 0x328
 8001076:	fb02 f303 	mul.w	r3, r2, r3
 800107a:	683a      	ldr	r2, [r7, #0]
 800107c:	4413      	add	r3, r2
 800107e:	2200      	movs	r2, #0
 8001080:	705a      	strb	r2, [r3, #1]
		ic[cic].tx_cfga.gpo = 1023; /* All GPIO pull down off */
 8001082:	7bfb      	ldrb	r3, [r7, #15]
 8001084:	f44f 724a 	mov.w	r2, #808	; 0x328
 8001088:	fb02 f303 	mul.w	r3, r2, r3
 800108c:	683a      	ldr	r2, [r7, #0]
 800108e:	441a      	add	r2, r3
 8001090:	8853      	ldrh	r3, [r2, #2]
 8001092:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001096:	f361 134e 	bfi	r3, r1, #5, #10
 800109a:	8053      	strh	r3, [r2, #2]
		ic[cic].tx_cfga.soakon = 0;
 800109c:	7bfb      	ldrb	r3, [r7, #15]
 800109e:	f44f 724a 	mov.w	r2, #808	; 0x328
 80010a2:	fb02 f303 	mul.w	r3, r2, r3
 80010a6:	683a      	ldr	r2, [r7, #0]
 80010a8:	441a      	add	r2, r3
 80010aa:	7893      	ldrb	r3, [r2, #2]
 80010ac:	f36f 0300 	bfc	r3, #0, #1
 80010b0:	7093      	strb	r3, [r2, #2]
		ic[cic].tx_cfga.comm_bk = 0;
 80010b2:	7bfb      	ldrb	r3, [r7, #15]
 80010b4:	f44f 724a 	mov.w	r2, #808	; 0x328
 80010b8:	fb02 f303 	mul.w	r3, r2, r3
 80010bc:	683a      	ldr	r2, [r7, #0]
 80010be:	441a      	add	r2, r3
 80010c0:	7913      	ldrb	r3, [r2, #4]
 80010c2:	f36f 0341 	bfc	r3, #1, #1
 80010c6:	7113      	strb	r3, [r2, #4]
		ic[cic].tx_cfga.mute_st = 0;
 80010c8:	7bfb      	ldrb	r3, [r7, #15]
 80010ca:	f44f 724a 	mov.w	r2, #808	; 0x328
 80010ce:	fb02 f303 	mul.w	r3, r2, r3
 80010d2:	683a      	ldr	r2, [r7, #0]
 80010d4:	441a      	add	r2, r3
 80010d6:	7913      	ldrb	r3, [r2, #4]
 80010d8:	f36f 0300 	bfc	r3, #0, #1
 80010dc:	7113      	strb	r3, [r2, #4]
		ic[cic].tx_cfga.comm_bk = 0;
 80010de:	7bfb      	ldrb	r3, [r7, #15]
 80010e0:	f44f 724a 	mov.w	r2, #808	; 0x328
 80010e4:	fb02 f303 	mul.w	r3, r2, r3
 80010e8:	683a      	ldr	r2, [r7, #0]
 80010ea:	441a      	add	r2, r3
 80010ec:	7913      	ldrb	r3, [r2, #4]
 80010ee:	f36f 0341 	bfc	r3, #1, #1
 80010f2:	7113      	strb	r3, [r2, #4]
		ic[cic].tx_cfga.owrng = 0;
 80010f4:	7bfb      	ldrb	r3, [r7, #15]
 80010f6:	f44f 724a 	mov.w	r2, #808	; 0x328
 80010fa:	fb02 f303 	mul.w	r3, r2, r3
 80010fe:	683a      	ldr	r2, [r7, #0]
 8001100:	441a      	add	r2, r3
 8001102:	7893      	ldrb	r3, [r2, #2]
 8001104:	f36f 0341 	bfc	r3, #1, #1
 8001108:	7093      	strb	r3, [r2, #2]
		ic[cic].tx_cfga.owa = 0;
 800110a:	7bfb      	ldrb	r3, [r7, #15]
 800110c:	f44f 724a 	mov.w	r2, #808	; 0x328
 8001110:	fb02 f303 	mul.w	r3, r2, r3
 8001114:	683a      	ldr	r2, [r7, #0]
 8001116:	441a      	add	r2, r3
 8001118:	7893      	ldrb	r3, [r2, #2]
 800111a:	f36f 0384 	bfc	r3, #2, #3
 800111e:	7093      	strb	r3, [r2, #2]
		ic[cic].tx_cfga.fc = IIR_FPA256;
 8001120:	7bfb      	ldrb	r3, [r7, #15]
 8001122:	f44f 724a 	mov.w	r2, #808	; 0x328
 8001126:	fb02 f303 	mul.w	r3, r2, r3
 800112a:	683a      	ldr	r2, [r7, #0]
 800112c:	441a      	add	r2, r3
 800112e:	7913      	ldrb	r3, [r2, #4]
 8001130:	f043 031c 	orr.w	r3, r3, #28
 8001134:	7113      	strb	r3, [r2, #4]

		/* Init config B */
		ic[cic].tx_cfgb.dcto = 1;
 8001136:	7bfb      	ldrb	r3, [r7, #15]
 8001138:	f44f 724a 	mov.w	r2, #808	; 0x328
 800113c:	fb02 f303 	mul.w	r3, r2, r3
 8001140:	683a      	ldr	r2, [r7, #0]
 8001142:	441a      	add	r2, r3
 8001144:	7c13      	ldrb	r3, [r2, #16]
 8001146:	2101      	movs	r1, #1
 8001148:	f361 0387 	bfi	r3, r1, #2, #6
 800114c:	7413      	strb	r3, [r2, #16]
		ic[cic].tx_cfgb.dtrng = 0;
 800114e:	7bfb      	ldrb	r3, [r7, #15]
 8001150:	f44f 724a 	mov.w	r2, #808	; 0x328
 8001154:	fb02 f303 	mul.w	r3, r2, r3
 8001158:	683a      	ldr	r2, [r7, #0]
 800115a:	441a      	add	r2, r3
 800115c:	7c13      	ldrb	r3, [r2, #16]
 800115e:	f36f 0341 	bfc	r3, #1, #1
 8001162:	7413      	strb	r3, [r2, #16]
		ic[cic].tx_cfgb.dtmen = DTMEN_ON;
 8001164:	7bfb      	ldrb	r3, [r7, #15]
 8001166:	f44f 724a 	mov.w	r2, #808	; 0x328
 800116a:	fb02 f303 	mul.w	r3, r2, r3
 800116e:	683a      	ldr	r2, [r7, #0]
 8001170:	441a      	add	r2, r3
 8001172:	7c13      	ldrb	r3, [r2, #16]
 8001174:	f043 0301 	orr.w	r3, r3, #1
 8001178:	7413      	strb	r3, [r2, #16]
		ic[cic].tx_cfgb.vov = SetOverVoltageThreshold(OV_THRESHOLD);
 800117a:	eddf 7a8e 	vldr	s15, [pc, #568]	; 80013b4 <adBms6830_init_config+0x384>
 800117e:	7bfb      	ldrb	r3, [r7, #15]
 8001180:	f44f 724a 	mov.w	r2, #808	; 0x328
 8001184:	fb02 f303 	mul.w	r3, r2, r3
 8001188:	683a      	ldr	r2, [r7, #0]
 800118a:	18d4      	adds	r4, r2, r3
 800118c:	eeb0 0a67 	vmov.f32	s0, s15
 8001190:	f001 fd36 	bl	8002c00 <SetOverVoltageThreshold>
 8001194:	4603      	mov	r3, r0
 8001196:	81e3      	strh	r3, [r4, #14]
		ic[cic].tx_cfgb.vuv = SetUnderVoltageThreshold(UV_THRESHOLD);
 8001198:	eddf 7a87 	vldr	s15, [pc, #540]	; 80013b8 <adBms6830_init_config+0x388>
 800119c:	7bfb      	ldrb	r3, [r7, #15]
 800119e:	f44f 724a 	mov.w	r2, #808	; 0x328
 80011a2:	fb02 f303 	mul.w	r3, r2, r3
 80011a6:	683a      	ldr	r2, [r7, #0]
 80011a8:	18d4      	adds	r4, r2, r3
 80011aa:	eeb0 0a67 	vmov.f32	s0, s15
 80011ae:	f001 fd67 	bl	8002c80 <SetUnderVoltageThreshold>
 80011b2:	4603      	mov	r3, r0
 80011b4:	81a3      	strh	r3, [r4, #12]
		ic[cic].tx_cfgb.dcc = 0;
 80011b6:	7bfb      	ldrb	r3, [r7, #15]
 80011b8:	f44f 724a 	mov.w	r2, #808	; 0x328
 80011bc:	fb02 f303 	mul.w	r3, r2, r3
 80011c0:	683a      	ldr	r2, [r7, #0]
 80011c2:	4413      	add	r3, r2
 80011c4:	2200      	movs	r2, #0
 80011c6:	825a      	strh	r2, [r3, #18]

		/* Clearflag */
		ic[cic].clflag.cl_csflt = 0;
 80011c8:	7bfb      	ldrb	r3, [r7, #15]
 80011ca:	f44f 724a 	mov.w	r2, #808	; 0x328
 80011ce:	fb02 f303 	mul.w	r3, r2, r3
 80011d2:	683a      	ldr	r2, [r7, #0]
 80011d4:	4413      	add	r3, r2
 80011d6:	2200      	movs	r2, #0
 80011d8:	839a      	strh	r2, [r3, #28]
		ic[cic].clflag.cl_smed = 0;
 80011da:	7bfb      	ldrb	r3, [r7, #15]
 80011dc:	f44f 724a 	mov.w	r2, #808	; 0x328
 80011e0:	fb02 f303 	mul.w	r3, r2, r3
 80011e4:	683a      	ldr	r2, [r7, #0]
 80011e6:	441a      	add	r2, r3
 80011e8:	7f93      	ldrb	r3, [r2, #30]
 80011ea:	f36f 0300 	bfc	r3, #0, #1
 80011ee:	7793      	strb	r3, [r2, #30]
		ic[cic].clflag.cl_sed = 0;
 80011f0:	7bfb      	ldrb	r3, [r7, #15]
 80011f2:	f44f 724a 	mov.w	r2, #808	; 0x328
 80011f6:	fb02 f303 	mul.w	r3, r2, r3
 80011fa:	683a      	ldr	r2, [r7, #0]
 80011fc:	441a      	add	r2, r3
 80011fe:	7f93      	ldrb	r3, [r2, #30]
 8001200:	f36f 0341 	bfc	r3, #1, #1
 8001204:	7793      	strb	r3, [r2, #30]
		ic[cic].clflag.cl_cmed = 0;
 8001206:	7bfb      	ldrb	r3, [r7, #15]
 8001208:	f44f 724a 	mov.w	r2, #808	; 0x328
 800120c:	fb02 f303 	mul.w	r3, r2, r3
 8001210:	683a      	ldr	r2, [r7, #0]
 8001212:	441a      	add	r2, r3
 8001214:	7f93      	ldrb	r3, [r2, #30]
 8001216:	f36f 0382 	bfc	r3, #2, #1
 800121a:	7793      	strb	r3, [r2, #30]
		ic[cic].clflag.cl_ced = 0;
 800121c:	7bfb      	ldrb	r3, [r7, #15]
 800121e:	f44f 724a 	mov.w	r2, #808	; 0x328
 8001222:	fb02 f303 	mul.w	r3, r2, r3
 8001226:	683a      	ldr	r2, [r7, #0]
 8001228:	441a      	add	r2, r3
 800122a:	7f93      	ldrb	r3, [r2, #30]
 800122c:	f36f 03c3 	bfc	r3, #3, #1
 8001230:	7793      	strb	r3, [r2, #30]
		ic[cic].clflag.cl_vduv = 0;
 8001232:	7bfb      	ldrb	r3, [r7, #15]
 8001234:	f44f 724a 	mov.w	r2, #808	; 0x328
 8001238:	fb02 f303 	mul.w	r3, r2, r3
 800123c:	683a      	ldr	r2, [r7, #0]
 800123e:	441a      	add	r2, r3
 8001240:	7f93      	ldrb	r3, [r2, #30]
 8001242:	f36f 1304 	bfc	r3, #4, #1
 8001246:	7793      	strb	r3, [r2, #30]
		ic[cic].clflag.cl_vdov = 0;
 8001248:	7bfb      	ldrb	r3, [r7, #15]
 800124a:	f44f 724a 	mov.w	r2, #808	; 0x328
 800124e:	fb02 f303 	mul.w	r3, r2, r3
 8001252:	683a      	ldr	r2, [r7, #0]
 8001254:	441a      	add	r2, r3
 8001256:	7f93      	ldrb	r3, [r2, #30]
 8001258:	f36f 1345 	bfc	r3, #5, #1
 800125c:	7793      	strb	r3, [r2, #30]
		ic[cic].clflag.cl_vauv = 0;
 800125e:	7bfb      	ldrb	r3, [r7, #15]
 8001260:	f44f 724a 	mov.w	r2, #808	; 0x328
 8001264:	fb02 f303 	mul.w	r3, r2, r3
 8001268:	683a      	ldr	r2, [r7, #0]
 800126a:	441a      	add	r2, r3
 800126c:	7f93      	ldrb	r3, [r2, #30]
 800126e:	f36f 1386 	bfc	r3, #6, #1
 8001272:	7793      	strb	r3, [r2, #30]
		ic[cic].clflag.cl_vaov = 0;
 8001274:	7bfb      	ldrb	r3, [r7, #15]
 8001276:	f44f 724a 	mov.w	r2, #808	; 0x328
 800127a:	fb02 f303 	mul.w	r3, r2, r3
 800127e:	683a      	ldr	r2, [r7, #0]
 8001280:	441a      	add	r2, r3
 8001282:	7f93      	ldrb	r3, [r2, #30]
 8001284:	f36f 13c7 	bfc	r3, #7, #1
 8001288:	7793      	strb	r3, [r2, #30]
		ic[cic].clflag.cl_oscchk = 0;
 800128a:	7bfb      	ldrb	r3, [r7, #15]
 800128c:	f44f 724a 	mov.w	r2, #808	; 0x328
 8001290:	fb02 f303 	mul.w	r3, r2, r3
 8001294:	683a      	ldr	r2, [r7, #0]
 8001296:	441a      	add	r2, r3
 8001298:	7fd3      	ldrb	r3, [r2, #31]
 800129a:	f36f 0300 	bfc	r3, #0, #1
 800129e:	77d3      	strb	r3, [r2, #31]
		ic[cic].clflag.cl_tmode = 0;
 80012a0:	7bfb      	ldrb	r3, [r7, #15]
 80012a2:	f44f 724a 	mov.w	r2, #808	; 0x328
 80012a6:	fb02 f303 	mul.w	r3, r2, r3
 80012aa:	683a      	ldr	r2, [r7, #0]
 80012ac:	441a      	add	r2, r3
 80012ae:	7fd3      	ldrb	r3, [r2, #31]
 80012b0:	f36f 0341 	bfc	r3, #1, #1
 80012b4:	77d3      	strb	r3, [r2, #31]
		ic[cic].clflag.cl_thsd = 0;
 80012b6:	7bfb      	ldrb	r3, [r7, #15]
 80012b8:	f44f 724a 	mov.w	r2, #808	; 0x328
 80012bc:	fb02 f303 	mul.w	r3, r2, r3
 80012c0:	683a      	ldr	r2, [r7, #0]
 80012c2:	441a      	add	r2, r3
 80012c4:	7fd3      	ldrb	r3, [r2, #31]
 80012c6:	f36f 0382 	bfc	r3, #2, #1
 80012ca:	77d3      	strb	r3, [r2, #31]
		ic[cic].clflag.cl_sleep = 0;
 80012cc:	7bfb      	ldrb	r3, [r7, #15]
 80012ce:	f44f 724a 	mov.w	r2, #808	; 0x328
 80012d2:	fb02 f303 	mul.w	r3, r2, r3
 80012d6:	683a      	ldr	r2, [r7, #0]
 80012d8:	441a      	add	r2, r3
 80012da:	7fd3      	ldrb	r3, [r2, #31]
 80012dc:	f36f 03c3 	bfc	r3, #3, #1
 80012e0:	77d3      	strb	r3, [r2, #31]
		ic[cic].clflag.cl_spiflt = 0;
 80012e2:	7bfb      	ldrb	r3, [r7, #15]
 80012e4:	f44f 724a 	mov.w	r2, #808	; 0x328
 80012e8:	fb02 f303 	mul.w	r3, r2, r3
 80012ec:	683a      	ldr	r2, [r7, #0]
 80012ee:	441a      	add	r2, r3
 80012f0:	7fd3      	ldrb	r3, [r2, #31]
 80012f2:	f36f 1304 	bfc	r3, #4, #1
 80012f6:	77d3      	strb	r3, [r2, #31]
		ic[cic].clflag.cl_vdel = 0;
 80012f8:	7bfb      	ldrb	r3, [r7, #15]
 80012fa:	f44f 724a 	mov.w	r2, #808	; 0x328
 80012fe:	fb02 f303 	mul.w	r3, r2, r3
 8001302:	683a      	ldr	r2, [r7, #0]
 8001304:	441a      	add	r2, r3
 8001306:	7fd3      	ldrb	r3, [r2, #31]
 8001308:	f36f 1345 	bfc	r3, #5, #1
 800130c:	77d3      	strb	r3, [r2, #31]
		ic[cic].clflag.cl_vde = 0;
 800130e:	7bfb      	ldrb	r3, [r7, #15]
 8001310:	f44f 724a 	mov.w	r2, #808	; 0x328
 8001314:	fb02 f303 	mul.w	r3, r2, r3
 8001318:	683a      	ldr	r2, [r7, #0]
 800131a:	441a      	add	r2, r3
 800131c:	7fd3      	ldrb	r3, [r2, #31]
 800131e:	f36f 1386 	bfc	r3, #6, #1
 8001322:	77d3      	strb	r3, [r2, #31]

		ic[cic].TempOpenWire = 0;
 8001324:	7bfb      	ldrb	r3, [r7, #15]
 8001326:	f44f 724a 	mov.w	r2, #808	; 0x328
 800132a:	fb02 f303 	mul.w	r3, r2, r3
 800132e:	683a      	ldr	r2, [r7, #0]
 8001330:	4413      	add	r3, r2
 8001332:	2200      	movs	r2, #0
 8001334:	f8a3 2324 	strh.w	r2, [r3, #804]	; 0x324
	for (uint8_t cic = 0; cic < tIC; cic++) {
 8001338:	7bfb      	ldrb	r3, [r7, #15]
 800133a:	3301      	adds	r3, #1
 800133c:	73fb      	strb	r3, [r7, #15]
 800133e:	7bfa      	ldrb	r2, [r7, #15]
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	429a      	cmp	r2, r3
 8001344:	f4ff ae7d 	bcc.w	8001042 <adBms6830_init_config+0x12>
	}
//	adBmsWakeupIc(tIC);
	adBmsCsLow();
 8001348:	f000 f842 	bl	80013d0 <adBmsCsLow>
	HAL_Delay(4);
 800134c:	2004      	movs	r0, #4
 800134e:	f009 f9dd 	bl	800a70c <HAL_Delay>
	adBmsCsHigh();
 8001352:	f000 f849 	bl	80013e8 <adBmsCsHigh>
	HAL_Delay(4);
 8001356:	2004      	movs	r0, #4
 8001358:	f009 f9d8 	bl	800a70c <HAL_Delay>
	adBmsWriteData(tIC, &ic[0], CLRFLAG, Clrflag, B);
 800135c:	79f8      	ldrb	r0, [r7, #7]
 800135e:	2302      	movs	r3, #2
 8001360:	9300      	str	r3, [sp, #0]
 8001362:	230b      	movs	r3, #11
 8001364:	4a15      	ldr	r2, [pc, #84]	; (80013bc <adBms6830_init_config+0x38c>)
 8001366:	6839      	ldr	r1, [r7, #0]
 8001368:	f000 fda0 	bl	8001eac <adBmsWriteData>
	adBmsWriteData(tIC, &ic[0], WRCFGA, Config, A);
 800136c:	79f8      	ldrb	r0, [r7, #7]
 800136e:	2301      	movs	r3, #1
 8001370:	9300      	str	r3, [sp, #0]
 8001372:	2308      	movs	r3, #8
 8001374:	4a12      	ldr	r2, [pc, #72]	; (80013c0 <adBms6830_init_config+0x390>)
 8001376:	6839      	ldr	r1, [r7, #0]
 8001378:	f000 fd98 	bl	8001eac <adBmsWriteData>
	adBmsWriteData(tIC, &ic[0], WRCFGB, Config, B);
 800137c:	79f8      	ldrb	r0, [r7, #7]
 800137e:	2302      	movs	r3, #2
 8001380:	9300      	str	r3, [sp, #0]
 8001382:	2308      	movs	r3, #8
 8001384:	4a0f      	ldr	r2, [pc, #60]	; (80013c4 <adBms6830_init_config+0x394>)
 8001386:	6839      	ldr	r1, [r7, #0]
 8001388:	f000 fd90 	bl	8001eac <adBmsWriteData>
	adBmsWriteData(tIC, &ic[0], WRPWM2, Pwm, B);
 800138c:	79f8      	ldrb	r0, [r7, #7]
 800138e:	2302      	movs	r3, #2
 8001390:	9300      	str	r3, [sp, #0]
 8001392:	2304      	movs	r3, #4
 8001394:	4a0c      	ldr	r2, [pc, #48]	; (80013c8 <adBms6830_init_config+0x398>)
 8001396:	6839      	ldr	r1, [r7, #0]
 8001398:	f000 fd88 	bl	8001eac <adBmsWriteData>
	adBmsWriteData(tIC, &ic[0], WRPWM1, Pwm, A);
 800139c:	79f8      	ldrb	r0, [r7, #7]
 800139e:	2301      	movs	r3, #1
 80013a0:	9300      	str	r3, [sp, #0]
 80013a2:	2304      	movs	r3, #4
 80013a4:	4a09      	ldr	r2, [pc, #36]	; (80013cc <adBms6830_init_config+0x39c>)
 80013a6:	6839      	ldr	r1, [r7, #0]
 80013a8:	f000 fd80 	bl	8001eac <adBmsWriteData>

}
 80013ac:	bf00      	nop
 80013ae:	3714      	adds	r7, #20
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd90      	pop	{r4, r7, pc}
 80013b4:	40866666 	.word	0x40866666
 80013b8:	404ccccd 	.word	0x404ccccd
 80013bc:	20000050 	.word	0x20000050
 80013c0:	20000004 	.word	0x20000004
 80013c4:	20000008 	.word	0x20000008
 80013c8:	2000004c 	.word	0x2000004c
 80013cc:	20000048 	.word	0x20000048

080013d0 <adBmsCsLow>:
 *
 * @return None
 *
 *******************************************************************************
 */
void adBmsCsLow() {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 80013d4:	2200      	movs	r2, #0
 80013d6:	2101      	movs	r1, #1
 80013d8:	4802      	ldr	r0, [pc, #8]	; (80013e4 <adBmsCsLow+0x14>)
 80013da:	f00b fce9 	bl	800cdb0 <HAL_GPIO_WritePin>
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40020800 	.word	0x40020800

080013e8 <adBmsCsHigh>:
 *
 * @return None
 *
 *******************************************************************************
 */
void adBmsCsHigh() {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 80013ec:	2201      	movs	r2, #1
 80013ee:	2101      	movs	r1, #1
 80013f0:	4802      	ldr	r0, [pc, #8]	; (80013fc <adBmsCsHigh+0x14>)
 80013f2:	f00b fcdd 	bl	800cdb0 <HAL_GPIO_WritePin>
}
 80013f6:	bf00      	nop
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40020800 	.word	0x40020800

08001400 <adBmsWakeupIc>:
 *
 * @return None
 *
 *******************************************************************************
 */
void adBmsWakeupIc(uint8_t total_ic) {
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	71fb      	strb	r3, [r7, #7]
	for (uint8_t ic = 0; ic < total_ic; ic++) {
 800140a:	2300      	movs	r3, #0
 800140c:	73fb      	strb	r3, [r7, #15]
 800140e:	e00c      	b.n	800142a <adBmsWakeupIc+0x2a>
		adBmsCsLow();
 8001410:	f7ff ffde 	bl	80013d0 <adBmsCsLow>
		vTaskDelay(4);
 8001414:	2004      	movs	r0, #4
 8001416:	f016 f891 	bl	801753c <vTaskDelay>
		adBmsCsHigh();
 800141a:	f7ff ffe5 	bl	80013e8 <adBmsCsHigh>
		vTaskDelay(4);
 800141e:	2004      	movs	r0, #4
 8001420:	f016 f88c 	bl	801753c <vTaskDelay>
	for (uint8_t ic = 0; ic < total_ic; ic++) {
 8001424:	7bfb      	ldrb	r3, [r7, #15]
 8001426:	3301      	adds	r3, #1
 8001428:	73fb      	strb	r3, [r7, #15]
 800142a:	7bfa      	ldrb	r2, [r7, #15]
 800142c:	79fb      	ldrb	r3, [r7, #7]
 800142e:	429a      	cmp	r2, r3
 8001430:	d3ee      	bcc.n	8001410 <adBmsWakeupIc+0x10>
//		adBmsCsLow();
//		HAL_Delay(4);
//		adBmsCsHigh();
//		HAL_Delay(4);
	}
}
 8001432:	bf00      	nop
 8001434:	bf00      	nop
 8001436:	3710      	adds	r7, #16
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <adBmsReadData>:
 * @return None
 *
 *******************************************************************************
 */
void adBmsReadData(uint8_t tIC, cell_asic *ic, uint8_t cmd_arg[2], TYPE type,
		GRP group) {
 800143c:	b580      	push	{r7, lr}
 800143e:	b090      	sub	sp, #64	; 0x40
 8001440:	af02      	add	r7, sp, #8
 8001442:	60b9      	str	r1, [r7, #8]
 8001444:	607a      	str	r2, [r7, #4]
 8001446:	461a      	mov	r2, r3
 8001448:	4603      	mov	r3, r0
 800144a:	73fb      	strb	r3, [r7, #15]
 800144c:	4613      	mov	r3, r2
 800144e:	73bb      	strb	r3, [r7, #14]
	uint16_t rBuff_size;
	uint8_t regData_size;
	if (group == ALL_GRP) {
 8001450:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001454:	2b00      	cmp	r3, #0
 8001456:	d142      	bne.n	80014de <adBmsReadData+0xa2>
		if (type == Rdcvall) {
 8001458:	7bbb      	ldrb	r3, [r7, #14]
 800145a:	2b0c      	cmp	r3, #12
 800145c:	d105      	bne.n	800146a <adBmsReadData+0x2e>
			rBuff_size = RDCVALL_SIZE;
 800145e:	2322      	movs	r3, #34	; 0x22
 8001460:	86fb      	strh	r3, [r7, #54]	; 0x36
			regData_size = RDCVALL_SIZE;
 8001462:	2322      	movs	r3, #34	; 0x22
 8001464:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8001468:	e040      	b.n	80014ec <adBmsReadData+0xb0>
		} else if (type == Rdsall) {
 800146a:	7bbb      	ldrb	r3, [r7, #14]
 800146c:	2b0e      	cmp	r3, #14
 800146e:	d105      	bne.n	800147c <adBmsReadData+0x40>
			rBuff_size = RDSALL_SIZE;
 8001470:	2322      	movs	r3, #34	; 0x22
 8001472:	86fb      	strh	r3, [r7, #54]	; 0x36
			regData_size = RDSALL_SIZE;
 8001474:	2322      	movs	r3, #34	; 0x22
 8001476:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800147a:	e037      	b.n	80014ec <adBmsReadData+0xb0>
		} else if (type == Rdacall) {
 800147c:	7bbb      	ldrb	r3, [r7, #14]
 800147e:	2b0d      	cmp	r3, #13
 8001480:	d105      	bne.n	800148e <adBmsReadData+0x52>
			rBuff_size = RDACALL_SIZE;
 8001482:	2322      	movs	r3, #34	; 0x22
 8001484:	86fb      	strh	r3, [r7, #54]	; 0x36
			regData_size = RDACALL_SIZE;
 8001486:	2322      	movs	r3, #34	; 0x22
 8001488:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800148c:	e02e      	b.n	80014ec <adBmsReadData+0xb0>
		} else if (type == Rdfcall) {
 800148e:	7bbb      	ldrb	r3, [r7, #14]
 8001490:	2b11      	cmp	r3, #17
 8001492:	d105      	bne.n	80014a0 <adBmsReadData+0x64>
			rBuff_size = RDFCALL_SIZE;
 8001494:	2322      	movs	r3, #34	; 0x22
 8001496:	86fb      	strh	r3, [r7, #54]	; 0x36
			regData_size = RDFCALL_SIZE;
 8001498:	2322      	movs	r3, #34	; 0x22
 800149a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800149e:	e025      	b.n	80014ec <adBmsReadData+0xb0>
		} else if (type == Rdcsall) {
 80014a0:	7bbb      	ldrb	r3, [r7, #14]
 80014a2:	2b0f      	cmp	r3, #15
 80014a4:	d105      	bne.n	80014b2 <adBmsReadData+0x76>
			rBuff_size = RDCSALL_SIZE;
 80014a6:	2342      	movs	r3, #66	; 0x42
 80014a8:	86fb      	strh	r3, [r7, #54]	; 0x36
			regData_size = RDCSALL_SIZE;
 80014aa:	2342      	movs	r3, #66	; 0x42
 80014ac:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80014b0:	e01c      	b.n	80014ec <adBmsReadData+0xb0>
		} else if (type == Rdasall) {
 80014b2:	7bbb      	ldrb	r3, [r7, #14]
 80014b4:	2b12      	cmp	r3, #18
 80014b6:	d105      	bne.n	80014c4 <adBmsReadData+0x88>
			rBuff_size = RDASALL_SIZE;
 80014b8:	2346      	movs	r3, #70	; 0x46
 80014ba:	86fb      	strh	r3, [r7, #54]	; 0x36
			regData_size = RDASALL_SIZE;
 80014bc:	2346      	movs	r3, #70	; 0x46
 80014be:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80014c2:	e013      	b.n	80014ec <adBmsReadData+0xb0>
		} else if (type == Rdacsall) {
 80014c4:	7bbb      	ldrb	r3, [r7, #14]
 80014c6:	2b10      	cmp	r3, #16
 80014c8:	d105      	bne.n	80014d6 <adBmsReadData+0x9a>
			rBuff_size = RDACSALL_SIZE;
 80014ca:	2342      	movs	r3, #66	; 0x42
 80014cc:	86fb      	strh	r3, [r7, #54]	; 0x36
			regData_size = RDACSALL_SIZE;
 80014ce:	2342      	movs	r3, #66	; 0x42
 80014d0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80014d4:	e00a      	b.n	80014ec <adBmsReadData+0xb0>
		} else {
			printf("Read All cmd wrong type select \n");
 80014d6:	48bc      	ldr	r0, [pc, #752]	; (80017c8 <adBmsReadData+0x38c>)
 80014d8:	f01a f894 	bl	801b604 <puts>
 80014dc:	e006      	b.n	80014ec <adBmsReadData+0xb0>
		}
	} else {
		rBuff_size = (tIC * RX_DATA);
 80014de:	7bfb      	ldrb	r3, [r7, #15]
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	00db      	lsls	r3, r3, #3
 80014e4:	86fb      	strh	r3, [r7, #54]	; 0x36
		regData_size = RX_DATA;
 80014e6:	2308      	movs	r3, #8
 80014e8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	}
	uint8_t *read_buffer, *pec_error, *cmd_count;
	read_buffer = (uint8_t*) calloc(rBuff_size, sizeof(uint8_t));
 80014ec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80014ee:	2101      	movs	r1, #1
 80014f0:	4618      	mov	r0, r3
 80014f2:	f019 f80f 	bl	801a514 <calloc>
 80014f6:	4603      	mov	r3, r0
 80014f8:	61bb      	str	r3, [r7, #24]
	pec_error = (uint8_t*) calloc(tIC, sizeof(uint8_t));
 80014fa:	7bfb      	ldrb	r3, [r7, #15]
 80014fc:	2101      	movs	r1, #1
 80014fe:	4618      	mov	r0, r3
 8001500:	f019 f808 	bl	801a514 <calloc>
 8001504:	4603      	mov	r3, r0
 8001506:	617b      	str	r3, [r7, #20]
	cmd_count = (uint8_t*) calloc(tIC, sizeof(uint8_t));
 8001508:	7bfb      	ldrb	r3, [r7, #15]
 800150a:	2101      	movs	r1, #1
 800150c:	4618      	mov	r0, r3
 800150e:	f019 f801 	bl	801a514 <calloc>
 8001512:	4603      	mov	r3, r0
 8001514:	613b      	str	r3, [r7, #16]
	if ((pec_error == NULL) || (cmd_count == NULL) || (read_buffer == NULL)) {
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d005      	beq.n	8001528 <adBmsReadData+0xec>
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d002      	beq.n	8001528 <adBmsReadData+0xec>
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d105      	bne.n	8001534 <adBmsReadData+0xf8>
		printf(" Failed to allocate memory \n");
 8001528:	48a8      	ldr	r0, [pc, #672]	; (80017cc <adBmsReadData+0x390>)
 800152a:	f01a f86b 	bl	801b604 <puts>

		exit(0);
 800152e:	2000      	movs	r0, #0
 8001530:	f019 f80e 	bl	801a550 <exit>
	} else {
		spiReadData(tIC, &cmd_arg[0], &read_buffer[0], &pec_error[0],
 8001534:	7bf8      	ldrb	r0, [r7, #15]
 8001536:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800153a:	9301      	str	r3, [sp, #4]
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	9300      	str	r3, [sp, #0]
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	6879      	ldr	r1, [r7, #4]
 8001546:	f000 fe55 	bl	80021f4 <spiReadData>
				&cmd_count[0], regData_size);
		switch (type) {
 800154a:	7bbb      	ldrb	r3, [r7, #14]
 800154c:	2b12      	cmp	r3, #18
 800154e:	f200 849e 	bhi.w	8001e8e <adBmsReadData+0xa52>
 8001552:	a201      	add	r2, pc, #4	; (adr r2, 8001558 <adBmsReadData+0x11c>)
 8001554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001558:	0800160f 	.word	0x0800160f
 800155c:	080017b1 	.word	0x080017b1
 8001560:	08001823 	.word	0x08001823
 8001564:	0800188b 	.word	0x0800188b
 8001568:	08001959 	.word	0x08001959
 800156c:	08001679 	.word	0x08001679
 8001570:	080016e1 	.word	0x080016e1
 8001574:	08001749 	.word	0x08001749
 8001578:	080015a5 	.word	0x080015a5
 800157c:	080018f3 	.word	0x080018f3
 8001580:	080019c1 	.word	0x080019c1
 8001584:	08001e8f 	.word	0x08001e8f
 8001588:	08001a27 	.word	0x08001a27
 800158c:	08001a8f 	.word	0x08001a8f
 8001590:	08001af7 	.word	0x08001af7
 8001594:	08001bc7 	.word	0x08001bc7
 8001598:	08001c97 	.word	0x08001c97
 800159c:	08001b5f 	.word	0x08001b5f
 80015a0:	08001d67 	.word	0x08001d67
		case Config:
			adBms6830ParseConfig(tIC, ic, group, &read_buffer[0]);
 80015a4:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 80015a8:	7bf8      	ldrb	r0, [r7, #15]
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	68b9      	ldr	r1, [r7, #8]
 80015ae:	f001 fdce 	bl	800314e <adBms6830ParseConfig>
			for (uint8_t cic = 0; cic < tIC; cic++) {
 80015b2:	2300      	movs	r3, #0
 80015b4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80015b8:	e022      	b.n	8001600 <adBmsReadData+0x1c4>
				ic[cic].cccrc.cfgr_pec = pec_error[cic];
 80015ba:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80015be:	697a      	ldr	r2, [r7, #20]
 80015c0:	441a      	add	r2, r3
 80015c2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80015c6:	f44f 714a 	mov.w	r1, #808	; 0x328
 80015ca:	fb01 f303 	mul.w	r3, r1, r3
 80015ce:	68b9      	ldr	r1, [r7, #8]
 80015d0:	440b      	add	r3, r1
 80015d2:	7812      	ldrb	r2, [r2, #0]
 80015d4:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190
				ic[cic].cccrc.cmd_cntr = cmd_count[cic];
 80015d8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80015dc:	693a      	ldr	r2, [r7, #16]
 80015de:	441a      	add	r2, r3
 80015e0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80015e4:	f44f 714a 	mov.w	r1, #808	; 0x328
 80015e8:	fb01 f303 	mul.w	r3, r1, r3
 80015ec:	68b9      	ldr	r1, [r7, #8]
 80015ee:	440b      	add	r3, r1
 80015f0:	7812      	ldrb	r2, [r2, #0]
 80015f2:	f883 218f 	strb.w	r2, [r3, #399]	; 0x18f
			for (uint8_t cic = 0; cic < tIC; cic++) {
 80015f6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80015fa:	3301      	adds	r3, #1
 80015fc:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8001600:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8001604:	7bfb      	ldrb	r3, [r7, #15]
 8001606:	429a      	cmp	r2, r3
 8001608:	d3d7      	bcc.n	80015ba <adBmsReadData+0x17e>
			}
			break;
 800160a:	f000 bc41 	b.w	8001e90 <adBmsReadData+0xa54>

		case Cell:
			adBms6830ParseCell(tIC, ic, group, &read_buffer[0]);
 800160e:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8001612:	7bf8      	ldrb	r0, [r7, #15]
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	68b9      	ldr	r1, [r7, #8]
 8001618:	f001 fdba 	bl	8003190 <adBms6830ParseCell>
			for (uint8_t cic = 0; cic < tIC; cic++) {
 800161c:	2300      	movs	r3, #0
 800161e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8001622:	e022      	b.n	800166a <adBmsReadData+0x22e>
				ic[cic].cccrc.cell_pec = pec_error[cic];
 8001624:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001628:	697a      	ldr	r2, [r7, #20]
 800162a:	441a      	add	r2, r3
 800162c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001630:	f44f 714a 	mov.w	r1, #808	; 0x328
 8001634:	fb01 f303 	mul.w	r3, r1, r3
 8001638:	68b9      	ldr	r1, [r7, #8]
 800163a:	440b      	add	r3, r1
 800163c:	7812      	ldrb	r2, [r2, #0]
 800163e:	f883 2191 	strb.w	r2, [r3, #401]	; 0x191
				ic[cic].cccrc.cmd_cntr = cmd_count[cic];
 8001642:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	441a      	add	r2, r3
 800164a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800164e:	f44f 714a 	mov.w	r1, #808	; 0x328
 8001652:	fb01 f303 	mul.w	r3, r1, r3
 8001656:	68b9      	ldr	r1, [r7, #8]
 8001658:	440b      	add	r3, r1
 800165a:	7812      	ldrb	r2, [r2, #0]
 800165c:	f883 218f 	strb.w	r2, [r3, #399]	; 0x18f
			for (uint8_t cic = 0; cic < tIC; cic++) {
 8001660:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001664:	3301      	adds	r3, #1
 8001666:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800166a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800166e:	7bfb      	ldrb	r3, [r7, #15]
 8001670:	429a      	cmp	r2, r3
 8001672:	d3d7      	bcc.n	8001624 <adBmsReadData+0x1e8>
			}
			break;
 8001674:	f000 bc0c 	b.w	8001e90 <adBmsReadData+0xa54>

		case AvgCell:
			adBms6830ParseAverageCell(tIC, ic, group, &read_buffer[0]);
 8001678:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 800167c:	7bf8      	ldrb	r0, [r7, #15]
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	68b9      	ldr	r1, [r7, #8]
 8001682:	f002 f881 	bl	8003788 <adBms6830ParseAverageCell>
			for (uint8_t cic = 0; cic < tIC; cic++) {
 8001686:	2300      	movs	r3, #0
 8001688:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800168c:	e022      	b.n	80016d4 <adBmsReadData+0x298>
				ic[cic].cccrc.acell_pec = pec_error[cic];
 800168e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001692:	697a      	ldr	r2, [r7, #20]
 8001694:	441a      	add	r2, r3
 8001696:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800169a:	f44f 714a 	mov.w	r1, #808	; 0x328
 800169e:	fb01 f303 	mul.w	r3, r1, r3
 80016a2:	68b9      	ldr	r1, [r7, #8]
 80016a4:	440b      	add	r3, r1
 80016a6:	7812      	ldrb	r2, [r2, #0]
 80016a8:	f883 2192 	strb.w	r2, [r3, #402]	; 0x192
				ic[cic].cccrc.cmd_cntr = cmd_count[cic];
 80016ac:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	441a      	add	r2, r3
 80016b4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80016b8:	f44f 714a 	mov.w	r1, #808	; 0x328
 80016bc:	fb01 f303 	mul.w	r3, r1, r3
 80016c0:	68b9      	ldr	r1, [r7, #8]
 80016c2:	440b      	add	r3, r1
 80016c4:	7812      	ldrb	r2, [r2, #0]
 80016c6:	f883 218f 	strb.w	r2, [r3, #399]	; 0x18f
			for (uint8_t cic = 0; cic < tIC; cic++) {
 80016ca:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80016ce:	3301      	adds	r3, #1
 80016d0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80016d4:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 80016d8:	7bfb      	ldrb	r3, [r7, #15]
 80016da:	429a      	cmp	r2, r3
 80016dc:	d3d7      	bcc.n	800168e <adBmsReadData+0x252>
			}
			break;
 80016de:	e3d7      	b.n	8001e90 <adBmsReadData+0xa54>

		case S_volt:
			adBms6830ParseSCell(tIC, ic, group, &read_buffer[0]);
 80016e0:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 80016e4:	7bf8      	ldrb	r0, [r7, #15]
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	68b9      	ldr	r1, [r7, #8]
 80016ea:	f002 fb69 	bl	8003dc0 <adBms6830ParseSCell>
			for (uint8_t cic = 0; cic < tIC; cic++) {
 80016ee:	2300      	movs	r3, #0
 80016f0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 80016f4:	e022      	b.n	800173c <adBmsReadData+0x300>
				ic[cic].cccrc.scell_pec = pec_error[cic];
 80016f6:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80016fa:	697a      	ldr	r2, [r7, #20]
 80016fc:	441a      	add	r2, r3
 80016fe:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001702:	f44f 714a 	mov.w	r1, #808	; 0x328
 8001706:	fb01 f303 	mul.w	r3, r1, r3
 800170a:	68b9      	ldr	r1, [r7, #8]
 800170c:	440b      	add	r3, r1
 800170e:	7812      	ldrb	r2, [r2, #0]
 8001710:	f883 2193 	strb.w	r2, [r3, #403]	; 0x193
				ic[cic].cccrc.cmd_cntr = cmd_count[cic];
 8001714:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001718:	693a      	ldr	r2, [r7, #16]
 800171a:	441a      	add	r2, r3
 800171c:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001720:	f44f 714a 	mov.w	r1, #808	; 0x328
 8001724:	fb01 f303 	mul.w	r3, r1, r3
 8001728:	68b9      	ldr	r1, [r7, #8]
 800172a:	440b      	add	r3, r1
 800172c:	7812      	ldrb	r2, [r2, #0]
 800172e:	f883 218f 	strb.w	r2, [r3, #399]	; 0x18f
			for (uint8_t cic = 0; cic < tIC; cic++) {
 8001732:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001736:	3301      	adds	r3, #1
 8001738:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 800173c:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 8001740:	7bfb      	ldrb	r3, [r7, #15]
 8001742:	429a      	cmp	r2, r3
 8001744:	d3d7      	bcc.n	80016f6 <adBmsReadData+0x2ba>
			}
			break;
 8001746:	e3a3      	b.n	8001e90 <adBmsReadData+0xa54>

		case F_volt:
			adBms6830ParseFCell(tIC, ic, group, &read_buffer[0]);
 8001748:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 800174c:	7bf8      	ldrb	r0, [r7, #15]
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	68b9      	ldr	r1, [r7, #8]
 8001752:	f002 fe51 	bl	80043f8 <adBms6830ParseFCell>
			for (uint8_t cic = 0; cic < tIC; cic++) {
 8001756:	2300      	movs	r3, #0
 8001758:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 800175c:	e022      	b.n	80017a4 <adBmsReadData+0x368>
				ic[cic].cccrc.fcell_pec = pec_error[cic];
 800175e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001762:	697a      	ldr	r2, [r7, #20]
 8001764:	441a      	add	r2, r3
 8001766:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800176a:	f44f 714a 	mov.w	r1, #808	; 0x328
 800176e:	fb01 f303 	mul.w	r3, r1, r3
 8001772:	68b9      	ldr	r1, [r7, #8]
 8001774:	440b      	add	r3, r1
 8001776:	7812      	ldrb	r2, [r2, #0]
 8001778:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
				ic[cic].cccrc.cmd_cntr = cmd_count[cic];
 800177c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	441a      	add	r2, r3
 8001784:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001788:	f44f 714a 	mov.w	r1, #808	; 0x328
 800178c:	fb01 f303 	mul.w	r3, r1, r3
 8001790:	68b9      	ldr	r1, [r7, #8]
 8001792:	440b      	add	r3, r1
 8001794:	7812      	ldrb	r2, [r2, #0]
 8001796:	f883 218f 	strb.w	r2, [r3, #399]	; 0x18f
			for (uint8_t cic = 0; cic < tIC; cic++) {
 800179a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800179e:	3301      	adds	r3, #1
 80017a0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 80017a4:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80017a8:	7bfb      	ldrb	r3, [r7, #15]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d3d7      	bcc.n	800175e <adBmsReadData+0x322>
			}
			break;
 80017ae:	e36f      	b.n	8001e90 <adBmsReadData+0xa54>

		case Aux:
			adBms6830ParseAux(tIC, ic, group, &read_buffer[0]);
 80017b0:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 80017b4:	7bf8      	ldrb	r0, [r7, #15]
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	68b9      	ldr	r1, [r7, #8]
 80017ba:	f003 f939 	bl	8004a30 <adBms6830ParseAux>
			for (uint8_t cic = 0; cic < tIC; cic++) {
 80017be:	2300      	movs	r3, #0
 80017c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80017c4:	e027      	b.n	8001816 <adBmsReadData+0x3da>
 80017c6:	bf00      	nop
 80017c8:	0801ee58 	.word	0x0801ee58
 80017cc:	0801ee78 	.word	0x0801ee78
				ic[cic].cccrc.aux_pec = pec_error[cic];
 80017d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80017d4:	697a      	ldr	r2, [r7, #20]
 80017d6:	441a      	add	r2, r3
 80017d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80017dc:	f44f 714a 	mov.w	r1, #808	; 0x328
 80017e0:	fb01 f303 	mul.w	r3, r1, r3
 80017e4:	68b9      	ldr	r1, [r7, #8]
 80017e6:	440b      	add	r3, r1
 80017e8:	7812      	ldrb	r2, [r2, #0]
 80017ea:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
				ic[cic].cccrc.cmd_cntr = cmd_count[cic];
 80017ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	441a      	add	r2, r3
 80017f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80017fa:	f44f 714a 	mov.w	r1, #808	; 0x328
 80017fe:	fb01 f303 	mul.w	r3, r1, r3
 8001802:	68b9      	ldr	r1, [r7, #8]
 8001804:	440b      	add	r3, r1
 8001806:	7812      	ldrb	r2, [r2, #0]
 8001808:	f883 218f 	strb.w	r2, [r3, #399]	; 0x18f
			for (uint8_t cic = 0; cic < tIC; cic++) {
 800180c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001810:	3301      	adds	r3, #1
 8001812:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001816:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800181a:	7bfb      	ldrb	r3, [r7, #15]
 800181c:	429a      	cmp	r2, r3
 800181e:	d3d7      	bcc.n	80017d0 <adBmsReadData+0x394>
			}
			break;
 8001820:	e336      	b.n	8001e90 <adBmsReadData+0xa54>

		case RAux:
			adBms6830ParseRAux(tIC, ic, group, &read_buffer[0]);
 8001822:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8001826:	7bf8      	ldrb	r0, [r7, #15]
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	68b9      	ldr	r1, [r7, #8]
 800182c:	f003 fb68 	bl	8004f00 <adBms6830ParseRAux>
			for (uint8_t cic = 0; cic < tIC; cic++) {
 8001830:	2300      	movs	r3, #0
 8001832:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8001836:	e022      	b.n	800187e <adBmsReadData+0x442>
				ic[cic].cccrc.raux_pec = pec_error[cic];
 8001838:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800183c:	697a      	ldr	r2, [r7, #20]
 800183e:	441a      	add	r2, r3
 8001840:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001844:	f44f 714a 	mov.w	r1, #808	; 0x328
 8001848:	fb01 f303 	mul.w	r3, r1, r3
 800184c:	68b9      	ldr	r1, [r7, #8]
 800184e:	440b      	add	r3, r1
 8001850:	7812      	ldrb	r2, [r2, #0]
 8001852:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
				ic[cic].cccrc.cmd_cntr = cmd_count[cic];
 8001856:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	441a      	add	r2, r3
 800185e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001862:	f44f 714a 	mov.w	r1, #808	; 0x328
 8001866:	fb01 f303 	mul.w	r3, r1, r3
 800186a:	68b9      	ldr	r1, [r7, #8]
 800186c:	440b      	add	r3, r1
 800186e:	7812      	ldrb	r2, [r2, #0]
 8001870:	f883 218f 	strb.w	r2, [r3, #399]	; 0x18f
			for (uint8_t cic = 0; cic < tIC; cic++) {
 8001874:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001878:	3301      	adds	r3, #1
 800187a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800187e:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8001882:	7bfb      	ldrb	r3, [r7, #15]
 8001884:	429a      	cmp	r2, r3
 8001886:	d3d7      	bcc.n	8001838 <adBmsReadData+0x3fc>
			}
			break;
 8001888:	e302      	b.n	8001e90 <adBmsReadData+0xa54>

		case Status:
			adBms6830ParseStatus(tIC, ic, group, &read_buffer[0]);
 800188a:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 800188e:	7bf8      	ldrb	r0, [r7, #15]
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	68b9      	ldr	r1, [r7, #8]
 8001894:	f004 fc1a 	bl	80060cc <adBms6830ParseStatus>
			for (uint8_t cic = 0; cic < tIC; cic++) {
 8001898:	2300      	movs	r3, #0
 800189a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800189e:	e022      	b.n	80018e6 <adBmsReadData+0x4aa>
				ic[cic].cccrc.stat_pec = pec_error[cic];
 80018a0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80018a4:	697a      	ldr	r2, [r7, #20]
 80018a6:	441a      	add	r2, r3
 80018a8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80018ac:	f44f 714a 	mov.w	r1, #808	; 0x328
 80018b0:	fb01 f303 	mul.w	r3, r1, r3
 80018b4:	68b9      	ldr	r1, [r7, #8]
 80018b6:	440b      	add	r3, r1
 80018b8:	7812      	ldrb	r2, [r2, #0]
 80018ba:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
				ic[cic].cccrc.cmd_cntr = cmd_count[cic];
 80018be:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	441a      	add	r2, r3
 80018c6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80018ca:	f44f 714a 	mov.w	r1, #808	; 0x328
 80018ce:	fb01 f303 	mul.w	r3, r1, r3
 80018d2:	68b9      	ldr	r1, [r7, #8]
 80018d4:	440b      	add	r3, r1
 80018d6:	7812      	ldrb	r2, [r2, #0]
 80018d8:	f883 218f 	strb.w	r2, [r3, #399]	; 0x18f
			for (uint8_t cic = 0; cic < tIC; cic++) {
 80018dc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80018e0:	3301      	adds	r3, #1
 80018e2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80018e6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80018ea:	7bfb      	ldrb	r3, [r7, #15]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d3d7      	bcc.n	80018a0 <adBmsReadData+0x464>
			}
			break;
 80018f0:	e2ce      	b.n	8001e90 <adBmsReadData+0xa54>

		case Comm:
			adBms6830ParseComm(tIC, ic, &read_buffer[0]);
 80018f2:	7bfb      	ldrb	r3, [r7, #15]
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	68b9      	ldr	r1, [r7, #8]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f004 fc61 	bl	80061c0 <adBms6830ParseComm>
			for (uint8_t cic = 0; cic < tIC; cic++) {
 80018fe:	2300      	movs	r3, #0
 8001900:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8001904:	e022      	b.n	800194c <adBmsReadData+0x510>
				ic[cic].cccrc.comm_pec = pec_error[cic];
 8001906:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800190a:	697a      	ldr	r2, [r7, #20]
 800190c:	441a      	add	r2, r3
 800190e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001912:	f44f 714a 	mov.w	r1, #808	; 0x328
 8001916:	fb01 f303 	mul.w	r3, r1, r3
 800191a:	68b9      	ldr	r1, [r7, #8]
 800191c:	440b      	add	r3, r1
 800191e:	7812      	ldrb	r2, [r2, #0]
 8001920:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
				ic[cic].cccrc.cmd_cntr = cmd_count[cic];
 8001924:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	441a      	add	r2, r3
 800192c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001930:	f44f 714a 	mov.w	r1, #808	; 0x328
 8001934:	fb01 f303 	mul.w	r3, r1, r3
 8001938:	68b9      	ldr	r1, [r7, #8]
 800193a:	440b      	add	r3, r1
 800193c:	7812      	ldrb	r2, [r2, #0]
 800193e:	f883 218f 	strb.w	r2, [r3, #399]	; 0x18f
			for (uint8_t cic = 0; cic < tIC; cic++) {
 8001942:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001946:	3301      	adds	r3, #1
 8001948:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800194c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001950:	7bfb      	ldrb	r3, [r7, #15]
 8001952:	429a      	cmp	r2, r3
 8001954:	d3d7      	bcc.n	8001906 <adBmsReadData+0x4ca>
			}
			break;
 8001956:	e29b      	b.n	8001e90 <adBmsReadData+0xa54>

		case Pwm:
			adBms6830ParsePwm(tIC, ic, group, &read_buffer[0]);
 8001958:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 800195c:	7bf8      	ldrb	r0, [r7, #15]
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	68b9      	ldr	r1, [r7, #8]
 8001962:	f004 ff49 	bl	80067f8 <adBms6830ParsePwm>
			for (uint8_t cic = 0; cic < tIC; cic++) {
 8001966:	2300      	movs	r3, #0
 8001968:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800196c:	e022      	b.n	80019b4 <adBmsReadData+0x578>
				ic[cic].cccrc.pwm_pec = pec_error[cic];
 800196e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001972:	697a      	ldr	r2, [r7, #20]
 8001974:	441a      	add	r2, r3
 8001976:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800197a:	f44f 714a 	mov.w	r1, #808	; 0x328
 800197e:	fb01 f303 	mul.w	r3, r1, r3
 8001982:	68b9      	ldr	r1, [r7, #8]
 8001984:	440b      	add	r3, r1
 8001986:	7812      	ldrb	r2, [r2, #0]
 8001988:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
				ic[cic].cccrc.cmd_cntr = cmd_count[cic];
 800198c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001990:	693a      	ldr	r2, [r7, #16]
 8001992:	441a      	add	r2, r3
 8001994:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001998:	f44f 714a 	mov.w	r1, #808	; 0x328
 800199c:	fb01 f303 	mul.w	r3, r1, r3
 80019a0:	68b9      	ldr	r1, [r7, #8]
 80019a2:	440b      	add	r3, r1
 80019a4:	7812      	ldrb	r2, [r2, #0]
 80019a6:	f883 218f 	strb.w	r2, [r3, #399]	; 0x18f
			for (uint8_t cic = 0; cic < tIC; cic++) {
 80019aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80019ae:	3301      	adds	r3, #1
 80019b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80019b4:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80019b8:	7bfb      	ldrb	r3, [r7, #15]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d3d7      	bcc.n	800196e <adBmsReadData+0x532>
			}
			break;
 80019be:	e267      	b.n	8001e90 <adBmsReadData+0xa54>

		case Sid:
			adBms6830ParseSID(tIC, ic, &read_buffer[0]);
 80019c0:	7bfb      	ldrb	r3, [r7, #15]
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	68b9      	ldr	r1, [r7, #8]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f004 fcd9 	bl	800637e <adBms6830ParseSID>
			for (uint8_t cic = 0; cic < tIC; cic++) {
 80019cc:	2300      	movs	r3, #0
 80019ce:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80019d2:	e022      	b.n	8001a1a <adBmsReadData+0x5de>
				ic[cic].cccrc.sid_pec = pec_error[cic];
 80019d4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80019d8:	697a      	ldr	r2, [r7, #20]
 80019da:	441a      	add	r2, r3
 80019dc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80019e0:	f44f 714a 	mov.w	r1, #808	; 0x328
 80019e4:	fb01 f303 	mul.w	r3, r1, r3
 80019e8:	68b9      	ldr	r1, [r7, #8]
 80019ea:	440b      	add	r3, r1
 80019ec:	7812      	ldrb	r2, [r2, #0]
 80019ee:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
				ic[cic].cccrc.cmd_cntr = cmd_count[cic];
 80019f2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	441a      	add	r2, r3
 80019fa:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80019fe:	f44f 714a 	mov.w	r1, #808	; 0x328
 8001a02:	fb01 f303 	mul.w	r3, r1, r3
 8001a06:	68b9      	ldr	r1, [r7, #8]
 8001a08:	440b      	add	r3, r1
 8001a0a:	7812      	ldrb	r2, [r2, #0]
 8001a0c:	f883 218f 	strb.w	r2, [r3, #399]	; 0x18f
			for (uint8_t cic = 0; cic < tIC; cic++) {
 8001a10:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001a14:	3301      	adds	r3, #1
 8001a16:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8001a1a:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8001a1e:	7bfb      	ldrb	r3, [r7, #15]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d3d7      	bcc.n	80019d4 <adBmsReadData+0x598>
			}
			break;
 8001a24:	e234      	b.n	8001e90 <adBmsReadData+0xa54>

		case Rdcvall:
			/* 32 byte cell data + 2 byte pec */
			adBms6830ParseCell(tIC, ic, group, &read_buffer[0]);
 8001a26:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8001a2a:	7bf8      	ldrb	r0, [r7, #15]
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	68b9      	ldr	r1, [r7, #8]
 8001a30:	f001 fbae 	bl	8003190 <adBms6830ParseCell>
			for (uint8_t cic = 0; cic < tIC; cic++) {
 8001a34:	2300      	movs	r3, #0
 8001a36:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8001a3a:	e022      	b.n	8001a82 <adBmsReadData+0x646>
				ic[cic].cccrc.cell_pec = pec_error[cic];
 8001a3c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001a40:	697a      	ldr	r2, [r7, #20]
 8001a42:	441a      	add	r2, r3
 8001a44:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001a48:	f44f 714a 	mov.w	r1, #808	; 0x328
 8001a4c:	fb01 f303 	mul.w	r3, r1, r3
 8001a50:	68b9      	ldr	r1, [r7, #8]
 8001a52:	440b      	add	r3, r1
 8001a54:	7812      	ldrb	r2, [r2, #0]
 8001a56:	f883 2191 	strb.w	r2, [r3, #401]	; 0x191
				ic[cic].cccrc.cmd_cntr = cmd_count[cic];
 8001a5a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	441a      	add	r2, r3
 8001a62:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001a66:	f44f 714a 	mov.w	r1, #808	; 0x328
 8001a6a:	fb01 f303 	mul.w	r3, r1, r3
 8001a6e:	68b9      	ldr	r1, [r7, #8]
 8001a70:	440b      	add	r3, r1
 8001a72:	7812      	ldrb	r2, [r2, #0]
 8001a74:	f883 218f 	strb.w	r2, [r3, #399]	; 0x18f
			for (uint8_t cic = 0; cic < tIC; cic++) {
 8001a78:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8001a82:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8001a86:	7bfb      	ldrb	r3, [r7, #15]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d3d7      	bcc.n	8001a3c <adBmsReadData+0x600>
			}
			break;
 8001a8c:	e200      	b.n	8001e90 <adBmsReadData+0xa54>

		case Rdacall:
			/* 32 byte avg cell data + 2 byte pec */
			adBms6830ParseAverageCell(tIC, ic, group, &read_buffer[0]);
 8001a8e:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8001a92:	7bf8      	ldrb	r0, [r7, #15]
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	68b9      	ldr	r1, [r7, #8]
 8001a98:	f001 fe76 	bl	8003788 <adBms6830ParseAverageCell>
			for (uint8_t cic = 0; cic < tIC; cic++) {
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8001aa2:	e022      	b.n	8001aea <adBmsReadData+0x6ae>
				ic[cic].cccrc.acell_pec = pec_error[cic];
 8001aa4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001aa8:	697a      	ldr	r2, [r7, #20]
 8001aaa:	441a      	add	r2, r3
 8001aac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001ab0:	f44f 714a 	mov.w	r1, #808	; 0x328
 8001ab4:	fb01 f303 	mul.w	r3, r1, r3
 8001ab8:	68b9      	ldr	r1, [r7, #8]
 8001aba:	440b      	add	r3, r1
 8001abc:	7812      	ldrb	r2, [r2, #0]
 8001abe:	f883 2192 	strb.w	r2, [r3, #402]	; 0x192
				ic[cic].cccrc.cmd_cntr = cmd_count[cic];
 8001ac2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	441a      	add	r2, r3
 8001aca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001ace:	f44f 714a 	mov.w	r1, #808	; 0x328
 8001ad2:	fb01 f303 	mul.w	r3, r1, r3
 8001ad6:	68b9      	ldr	r1, [r7, #8]
 8001ad8:	440b      	add	r3, r1
 8001ada:	7812      	ldrb	r2, [r2, #0]
 8001adc:	f883 218f 	strb.w	r2, [r3, #399]	; 0x18f
			for (uint8_t cic = 0; cic < tIC; cic++) {
 8001ae0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8001aea:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001aee:	7bfb      	ldrb	r3, [r7, #15]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d3d7      	bcc.n	8001aa4 <adBmsReadData+0x668>
			}
			break;
 8001af4:	e1cc      	b.n	8001e90 <adBmsReadData+0xa54>

		case Rdsall:
			/* 32 byte scell volt data + 2 byte pec */
			adBms6830ParseSCell(tIC, ic, group, &read_buffer[0]);
 8001af6:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8001afa:	7bf8      	ldrb	r0, [r7, #15]
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	68b9      	ldr	r1, [r7, #8]
 8001b00:	f002 f95e 	bl	8003dc0 <adBms6830ParseSCell>
			for (uint8_t cic = 0; cic < tIC; cic++) {
 8001b04:	2300      	movs	r3, #0
 8001b06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001b0a:	e022      	b.n	8001b52 <adBmsReadData+0x716>
				ic[cic].cccrc.scell_pec = pec_error[cic];
 8001b0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b10:	697a      	ldr	r2, [r7, #20]
 8001b12:	441a      	add	r2, r3
 8001b14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b18:	f44f 714a 	mov.w	r1, #808	; 0x328
 8001b1c:	fb01 f303 	mul.w	r3, r1, r3
 8001b20:	68b9      	ldr	r1, [r7, #8]
 8001b22:	440b      	add	r3, r1
 8001b24:	7812      	ldrb	r2, [r2, #0]
 8001b26:	f883 2193 	strb.w	r2, [r3, #403]	; 0x193
				ic[cic].cccrc.cmd_cntr = cmd_count[cic];
 8001b2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	441a      	add	r2, r3
 8001b32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b36:	f44f 714a 	mov.w	r1, #808	; 0x328
 8001b3a:	fb01 f303 	mul.w	r3, r1, r3
 8001b3e:	68b9      	ldr	r1, [r7, #8]
 8001b40:	440b      	add	r3, r1
 8001b42:	7812      	ldrb	r2, [r2, #0]
 8001b44:	f883 218f 	strb.w	r2, [r3, #399]	; 0x18f
			for (uint8_t cic = 0; cic < tIC; cic++) {
 8001b48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001b52:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001b56:	7bfb      	ldrb	r3, [r7, #15]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d3d7      	bcc.n	8001b0c <adBmsReadData+0x6d0>
			}
			break;
 8001b5c:	e198      	b.n	8001e90 <adBmsReadData+0xa54>

		case Rdfcall:
			/* 32 byte fcell data + 2 byte pec */
			adBms6830ParseFCell(tIC, ic, group, &read_buffer[0]);
 8001b5e:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8001b62:	7bf8      	ldrb	r0, [r7, #15]
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	68b9      	ldr	r1, [r7, #8]
 8001b68:	f002 fc46 	bl	80043f8 <adBms6830ParseFCell>
			for (uint8_t cic = 0; cic < tIC; cic++) {
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001b72:	e022      	b.n	8001bba <adBmsReadData+0x77e>
				ic[cic].cccrc.fcell_pec = pec_error[cic];
 8001b74:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001b78:	697a      	ldr	r2, [r7, #20]
 8001b7a:	441a      	add	r2, r3
 8001b7c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001b80:	f44f 714a 	mov.w	r1, #808	; 0x328
 8001b84:	fb01 f303 	mul.w	r3, r1, r3
 8001b88:	68b9      	ldr	r1, [r7, #8]
 8001b8a:	440b      	add	r3, r1
 8001b8c:	7812      	ldrb	r2, [r2, #0]
 8001b8e:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
				ic[cic].cccrc.cmd_cntr = cmd_count[cic];
 8001b92:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	441a      	add	r2, r3
 8001b9a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001b9e:	f44f 714a 	mov.w	r1, #808	; 0x328
 8001ba2:	fb01 f303 	mul.w	r3, r1, r3
 8001ba6:	68b9      	ldr	r1, [r7, #8]
 8001ba8:	440b      	add	r3, r1
 8001baa:	7812      	ldrb	r2, [r2, #0]
 8001bac:	f883 218f 	strb.w	r2, [r3, #399]	; 0x18f
			for (uint8_t cic = 0; cic < tIC; cic++) {
 8001bb0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001bba:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001bbe:	7bfb      	ldrb	r3, [r7, #15]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d3d7      	bcc.n	8001b74 <adBmsReadData+0x738>
			}
			break;
 8001bc4:	e164      	b.n	8001e90 <adBmsReadData+0xa54>

		case Rdcsall:
			/* 64 byte + 2 byte pec = 32 byte cell data + 32 byte scell volt data */
			adBms6830ParseCell(tIC, ic, group, &read_buffer[0]);
 8001bc6:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8001bca:	7bf8      	ldrb	r0, [r7, #15]
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	68b9      	ldr	r1, [r7, #8]
 8001bd0:	f001 fade 	bl	8003190 <adBms6830ParseCell>
			for (uint8_t cic = 0; cic < tIC; cic++) {
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001bda:	e022      	b.n	8001c22 <adBmsReadData+0x7e6>
				ic[cic].cccrc.cell_pec = pec_error[cic];
 8001bdc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001be0:	697a      	ldr	r2, [r7, #20]
 8001be2:	441a      	add	r2, r3
 8001be4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001be8:	f44f 714a 	mov.w	r1, #808	; 0x328
 8001bec:	fb01 f303 	mul.w	r3, r1, r3
 8001bf0:	68b9      	ldr	r1, [r7, #8]
 8001bf2:	440b      	add	r3, r1
 8001bf4:	7812      	ldrb	r2, [r2, #0]
 8001bf6:	f883 2191 	strb.w	r2, [r3, #401]	; 0x191
				ic[cic].cccrc.cmd_cntr = cmd_count[cic];
 8001bfa:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	441a      	add	r2, r3
 8001c02:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001c06:	f44f 714a 	mov.w	r1, #808	; 0x328
 8001c0a:	fb01 f303 	mul.w	r3, r1, r3
 8001c0e:	68b9      	ldr	r1, [r7, #8]
 8001c10:	440b      	add	r3, r1
 8001c12:	7812      	ldrb	r2, [r2, #0]
 8001c14:	f883 218f 	strb.w	r2, [r3, #399]	; 0x18f
			for (uint8_t cic = 0; cic < tIC; cic++) {
 8001c18:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001c22:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8001c26:	7bfb      	ldrb	r3, [r7, #15]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d3d7      	bcc.n	8001bdc <adBmsReadData+0x7a0>
			}
			adBms6830ParseSCell(tIC, ic, group, &read_buffer[32]);
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	3320      	adds	r3, #32
 8001c30:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8001c34:	7bf8      	ldrb	r0, [r7, #15]
 8001c36:	68b9      	ldr	r1, [r7, #8]
 8001c38:	f002 f8c2 	bl	8003dc0 <adBms6830ParseSCell>
			for (uint8_t cic = 0; cic < tIC; cic++) {
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001c42:	e022      	b.n	8001c8a <adBmsReadData+0x84e>
				ic[cic].cccrc.scell_pec = pec_error[cic];
 8001c44:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001c48:	697a      	ldr	r2, [r7, #20]
 8001c4a:	441a      	add	r2, r3
 8001c4c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001c50:	f44f 714a 	mov.w	r1, #808	; 0x328
 8001c54:	fb01 f303 	mul.w	r3, r1, r3
 8001c58:	68b9      	ldr	r1, [r7, #8]
 8001c5a:	440b      	add	r3, r1
 8001c5c:	7812      	ldrb	r2, [r2, #0]
 8001c5e:	f883 2193 	strb.w	r2, [r3, #403]	; 0x193
				ic[cic].cccrc.cmd_cntr = cmd_count[cic];
 8001c62:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	441a      	add	r2, r3
 8001c6a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001c6e:	f44f 714a 	mov.w	r1, #808	; 0x328
 8001c72:	fb01 f303 	mul.w	r3, r1, r3
 8001c76:	68b9      	ldr	r1, [r7, #8]
 8001c78:	440b      	add	r3, r1
 8001c7a:	7812      	ldrb	r2, [r2, #0]
 8001c7c:	f883 218f 	strb.w	r2, [r3, #399]	; 0x18f
			for (uint8_t cic = 0; cic < tIC; cic++) {
 8001c80:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001c84:	3301      	adds	r3, #1
 8001c86:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001c8a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001c8e:	7bfb      	ldrb	r3, [r7, #15]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d3d7      	bcc.n	8001c44 <adBmsReadData+0x808>
			}
			break;
 8001c94:	e0fc      	b.n	8001e90 <adBmsReadData+0xa54>

		case Rdacsall:
			/* 64 byte + 2 byte pec = 32 byte avg cell data + 32 byte scell volt data */
			adBms6830ParseAverageCell(tIC, ic, group, &read_buffer[0]);
 8001c96:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8001c9a:	7bf8      	ldrb	r0, [r7, #15]
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	68b9      	ldr	r1, [r7, #8]
 8001ca0:	f001 fd72 	bl	8003788 <adBms6830ParseAverageCell>
			for (uint8_t cic = 0; cic < tIC; cic++) {
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001caa:	e022      	b.n	8001cf2 <adBmsReadData+0x8b6>
				ic[cic].cccrc.acell_pec = pec_error[cic];
 8001cac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001cb0:	697a      	ldr	r2, [r7, #20]
 8001cb2:	441a      	add	r2, r3
 8001cb4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001cb8:	f44f 714a 	mov.w	r1, #808	; 0x328
 8001cbc:	fb01 f303 	mul.w	r3, r1, r3
 8001cc0:	68b9      	ldr	r1, [r7, #8]
 8001cc2:	440b      	add	r3, r1
 8001cc4:	7812      	ldrb	r2, [r2, #0]
 8001cc6:	f883 2192 	strb.w	r2, [r3, #402]	; 0x192
				ic[cic].cccrc.cmd_cntr = cmd_count[cic];
 8001cca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	441a      	add	r2, r3
 8001cd2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001cd6:	f44f 714a 	mov.w	r1, #808	; 0x328
 8001cda:	fb01 f303 	mul.w	r3, r1, r3
 8001cde:	68b9      	ldr	r1, [r7, #8]
 8001ce0:	440b      	add	r3, r1
 8001ce2:	7812      	ldrb	r2, [r2, #0]
 8001ce4:	f883 218f 	strb.w	r2, [r3, #399]	; 0x18f
			for (uint8_t cic = 0; cic < tIC; cic++) {
 8001ce8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001cec:	3301      	adds	r3, #1
 8001cee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001cf2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001cf6:	7bfb      	ldrb	r3, [r7, #15]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d3d7      	bcc.n	8001cac <adBmsReadData+0x870>
			}
			adBms6830ParseSCell(tIC, ic, group, &read_buffer[32]);
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	3320      	adds	r3, #32
 8001d00:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8001d04:	7bf8      	ldrb	r0, [r7, #15]
 8001d06:	68b9      	ldr	r1, [r7, #8]
 8001d08:	f002 f85a 	bl	8003dc0 <adBms6830ParseSCell>
			for (uint8_t cic = 0; cic < tIC; cic++) {
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001d12:	e022      	b.n	8001d5a <adBmsReadData+0x91e>
				ic[cic].cccrc.scell_pec = pec_error[cic];
 8001d14:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001d18:	697a      	ldr	r2, [r7, #20]
 8001d1a:	441a      	add	r2, r3
 8001d1c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001d20:	f44f 714a 	mov.w	r1, #808	; 0x328
 8001d24:	fb01 f303 	mul.w	r3, r1, r3
 8001d28:	68b9      	ldr	r1, [r7, #8]
 8001d2a:	440b      	add	r3, r1
 8001d2c:	7812      	ldrb	r2, [r2, #0]
 8001d2e:	f883 2193 	strb.w	r2, [r3, #403]	; 0x193
				ic[cic].cccrc.cmd_cntr = cmd_count[cic];
 8001d32:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	441a      	add	r2, r3
 8001d3a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001d3e:	f44f 714a 	mov.w	r1, #808	; 0x328
 8001d42:	fb01 f303 	mul.w	r3, r1, r3
 8001d46:	68b9      	ldr	r1, [r7, #8]
 8001d48:	440b      	add	r3, r1
 8001d4a:	7812      	ldrb	r2, [r2, #0]
 8001d4c:	f883 218f 	strb.w	r2, [r3, #399]	; 0x18f
			for (uint8_t cic = 0; cic < tIC; cic++) {
 8001d50:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001d54:	3301      	adds	r3, #1
 8001d56:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001d5a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8001d5e:	7bfb      	ldrb	r3, [r7, #15]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d3d7      	bcc.n	8001d14 <adBmsReadData+0x8d8>
			}
			break;
 8001d64:	e094      	b.n	8001e90 <adBmsReadData+0xa54>
		case Rdasall:
			/* 68 byte + 2 byte pec:
			 24 byte gpio data + 20 byte Redundant gpio data +
			 24 byte status A(6 byte), B(6 byte), C(4 byte), D(6 byte) & E(2 byte)
			 */
			adBms6830ParseAux(tIC, ic, group, &read_buffer[0]);
 8001d66:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8001d6a:	7bf8      	ldrb	r0, [r7, #15]
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	68b9      	ldr	r1, [r7, #8]
 8001d70:	f002 fe5e 	bl	8004a30 <adBms6830ParseAux>
			for (uint8_t cic = 0; cic < tIC; cic++) {
 8001d74:	2300      	movs	r3, #0
 8001d76:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8001d7a:	e022      	b.n	8001dc2 <adBmsReadData+0x986>
				ic[cic].cccrc.aux_pec = pec_error[cic];
 8001d7c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001d80:	697a      	ldr	r2, [r7, #20]
 8001d82:	441a      	add	r2, r3
 8001d84:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001d88:	f44f 714a 	mov.w	r1, #808	; 0x328
 8001d8c:	fb01 f303 	mul.w	r3, r1, r3
 8001d90:	68b9      	ldr	r1, [r7, #8]
 8001d92:	440b      	add	r3, r1
 8001d94:	7812      	ldrb	r2, [r2, #0]
 8001d96:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
				ic[cic].cccrc.cmd_cntr = cmd_count[cic];
 8001d9a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	441a      	add	r2, r3
 8001da2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001da6:	f44f 714a 	mov.w	r1, #808	; 0x328
 8001daa:	fb01 f303 	mul.w	r3, r1, r3
 8001dae:	68b9      	ldr	r1, [r7, #8]
 8001db0:	440b      	add	r3, r1
 8001db2:	7812      	ldrb	r2, [r2, #0]
 8001db4:	f883 218f 	strb.w	r2, [r3, #399]	; 0x18f
			for (uint8_t cic = 0; cic < tIC; cic++) {
 8001db8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8001dc2:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8001dc6:	7bfb      	ldrb	r3, [r7, #15]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d3d7      	bcc.n	8001d7c <adBmsReadData+0x940>
			}
			adBms6830ParseRAux(tIC, ic, group, &read_buffer[24]);
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	3318      	adds	r3, #24
 8001dd0:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8001dd4:	7bf8      	ldrb	r0, [r7, #15]
 8001dd6:	68b9      	ldr	r1, [r7, #8]
 8001dd8:	f003 f892 	bl	8004f00 <adBms6830ParseRAux>
			for (uint8_t cic = 0; cic < tIC; cic++) {
 8001ddc:	2300      	movs	r3, #0
 8001dde:	f887 3020 	strb.w	r3, [r7, #32]
 8001de2:	e022      	b.n	8001e2a <adBmsReadData+0x9ee>
				ic[cic].cccrc.raux_pec = pec_error[cic];
 8001de4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001de8:	697a      	ldr	r2, [r7, #20]
 8001dea:	441a      	add	r2, r3
 8001dec:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001df0:	f44f 714a 	mov.w	r1, #808	; 0x328
 8001df4:	fb01 f303 	mul.w	r3, r1, r3
 8001df8:	68b9      	ldr	r1, [r7, #8]
 8001dfa:	440b      	add	r3, r1
 8001dfc:	7812      	ldrb	r2, [r2, #0]
 8001dfe:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
				ic[cic].cccrc.cmd_cntr = cmd_count[cic];
 8001e02:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	441a      	add	r2, r3
 8001e0a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e0e:	f44f 714a 	mov.w	r1, #808	; 0x328
 8001e12:	fb01 f303 	mul.w	r3, r1, r3
 8001e16:	68b9      	ldr	r1, [r7, #8]
 8001e18:	440b      	add	r3, r1
 8001e1a:	7812      	ldrb	r2, [r2, #0]
 8001e1c:	f883 218f 	strb.w	r2, [r3, #399]	; 0x18f
			for (uint8_t cic = 0; cic < tIC; cic++) {
 8001e20:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e24:	3301      	adds	r3, #1
 8001e26:	f887 3020 	strb.w	r3, [r7, #32]
 8001e2a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001e2e:	7bfb      	ldrb	r3, [r7, #15]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d3d7      	bcc.n	8001de4 <adBmsReadData+0x9a8>
			}
			adBms6830ParseStatus(tIC, ic, group, &read_buffer[44]);
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	332c      	adds	r3, #44	; 0x2c
 8001e38:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8001e3c:	7bf8      	ldrb	r0, [r7, #15]
 8001e3e:	68b9      	ldr	r1, [r7, #8]
 8001e40:	f004 f944 	bl	80060cc <adBms6830ParseStatus>
			for (uint8_t cic = 0; cic < tIC; cic++) {
 8001e44:	2300      	movs	r3, #0
 8001e46:	77fb      	strb	r3, [r7, #31]
 8001e48:	e01c      	b.n	8001e84 <adBmsReadData+0xa48>
				ic[cic].cccrc.stat_pec = pec_error[cic];
 8001e4a:	7ffb      	ldrb	r3, [r7, #31]
 8001e4c:	697a      	ldr	r2, [r7, #20]
 8001e4e:	441a      	add	r2, r3
 8001e50:	7ffb      	ldrb	r3, [r7, #31]
 8001e52:	f44f 714a 	mov.w	r1, #808	; 0x328
 8001e56:	fb01 f303 	mul.w	r3, r1, r3
 8001e5a:	68b9      	ldr	r1, [r7, #8]
 8001e5c:	440b      	add	r3, r1
 8001e5e:	7812      	ldrb	r2, [r2, #0]
 8001e60:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
				ic[cic].cccrc.cmd_cntr = cmd_count[cic];
 8001e64:	7ffb      	ldrb	r3, [r7, #31]
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	441a      	add	r2, r3
 8001e6a:	7ffb      	ldrb	r3, [r7, #31]
 8001e6c:	f44f 714a 	mov.w	r1, #808	; 0x328
 8001e70:	fb01 f303 	mul.w	r3, r1, r3
 8001e74:	68b9      	ldr	r1, [r7, #8]
 8001e76:	440b      	add	r3, r1
 8001e78:	7812      	ldrb	r2, [r2, #0]
 8001e7a:	f883 218f 	strb.w	r2, [r3, #399]	; 0x18f
			for (uint8_t cic = 0; cic < tIC; cic++) {
 8001e7e:	7ffb      	ldrb	r3, [r7, #31]
 8001e80:	3301      	adds	r3, #1
 8001e82:	77fb      	strb	r3, [r7, #31]
 8001e84:	7ffa      	ldrb	r2, [r7, #31]
 8001e86:	7bfb      	ldrb	r3, [r7, #15]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d3de      	bcc.n	8001e4a <adBmsReadData+0xa0e>
			}
			break;
 8001e8c:	e000      	b.n	8001e90 <adBmsReadData+0xa54>

		default:
			break;
 8001e8e:	bf00      	nop
		}
	}
	free(read_buffer);
 8001e90:	69b8      	ldr	r0, [r7, #24]
 8001e92:	f018 fb77 	bl	801a584 <free>
	free(pec_error);
 8001e96:	6978      	ldr	r0, [r7, #20]
 8001e98:	f018 fb74 	bl	801a584 <free>
	free(cmd_count);
 8001e9c:	6938      	ldr	r0, [r7, #16]
 8001e9e:	f018 fb71 	bl	801a584 <free>
}
 8001ea2:	bf00      	nop
 8001ea4:	3738      	adds	r7, #56	; 0x38
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop

08001eac <adBmsWriteData>:
 * @return None
 *
 *******************************************************************************
 */
void adBmsWriteData(uint8_t tIC, cell_asic *ic, uint8_t cmd_arg[2], TYPE type,
		GRP group) {
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b08a      	sub	sp, #40	; 0x28
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60b9      	str	r1, [r7, #8]
 8001eb4:	607a      	str	r2, [r7, #4]
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	4603      	mov	r3, r0
 8001eba:	73fb      	strb	r3, [r7, #15]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	73bb      	strb	r3, [r7, #14]
	uint8_t data_len = TX_DATA, write_size = (TX_DATA * tIC);
 8001ec0:	2306      	movs	r3, #6
 8001ec2:	76fb      	strb	r3, [r7, #27]
 8001ec4:	7bfb      	ldrb	r3, [r7, #15]
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	0052      	lsls	r2, r2, #1
 8001eca:	4413      	add	r3, r2
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	76bb      	strb	r3, [r7, #26]
	uint8_t *write_buffer = (uint8_t*) calloc(write_size, sizeof(uint8_t));
 8001ed0:	7ebb      	ldrb	r3, [r7, #26]
 8001ed2:	2101      	movs	r1, #1
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f018 fb1d 	bl	801a514 <calloc>
 8001eda:	4603      	mov	r3, r0
 8001edc:	617b      	str	r3, [r7, #20]
	if (write_buffer == NULL) {
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d105      	bne.n	8001ef0 <adBmsWriteData+0x44>
		printf(" Failed to allocate write_buffer array memory \n");
 8001ee4:	48bb      	ldr	r0, [pc, #748]	; (80021d4 <adBmsWriteData+0x328>)
 8001ee6:	f019 fb8d 	bl	801b604 <puts>
		exit(0);
 8001eea:	2000      	movs	r0, #0
 8001eec:	f018 fb30 	bl	801a550 <exit>
	} else {
		switch (type) {
 8001ef0:	7bbb      	ldrb	r3, [r7, #14]
 8001ef2:	3b04      	subs	r3, #4
 8001ef4:	2b07      	cmp	r3, #7
 8001ef6:	f200 816f 	bhi.w	80021d8 <adBmsWriteData+0x32c>
 8001efa:	a201      	add	r2, pc, #4	; (adr r2, 8001f00 <adBmsWriteData+0x54>)
 8001efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f00:	08002093 	.word	0x08002093
 8001f04:	080021d9 	.word	0x080021d9
 8001f08:	080021d9 	.word	0x080021d9
 8001f0c:	080021d9 	.word	0x080021d9
 8001f10:	08001f21 	.word	0x08001f21
 8001f14:	0800201d 	.word	0x0800201d
 8001f18:	080021d9 	.word	0x080021d9
 8001f1c:	08002177 	.word	0x08002177
		case Config:
			switch (group) {
 8001f20:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d002      	beq.n	8001f2e <adBmsWriteData+0x82>
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d03b      	beq.n	8001fa4 <adBmsWriteData+0xf8>
								ic[cic].configb.tx_data[data];
					}
				}
				break;
			}
			break;
 8001f2c:	e155      	b.n	80021da <adBmsWriteData+0x32e>
				adBms6830CreateConfiga(tIC, &ic[0]);
 8001f2e:	7bfb      	ldrb	r3, [r7, #15]
 8001f30:	68b9      	ldr	r1, [r7, #8]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f004 fc81 	bl	800683a <adBms6830CreateConfiga>
				for (uint8_t cic = 0; cic < tIC; cic++) {
 8001f38:	2300      	movs	r3, #0
 8001f3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001f3e:	e02b      	b.n	8001f98 <adBmsWriteData+0xec>
					for (uint8_t data = 0; data < data_len; data++) {
 8001f40:	2300      	movs	r3, #0
 8001f42:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001f46:	e01d      	b.n	8001f84 <adBmsWriteData+0xd8>
								ic[cic].configa.tx_data[data];
 8001f48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f4c:	f44f 724a 	mov.w	r2, #808	; 0x328
 8001f50:	fb02 f303 	mul.w	r3, r2, r3
 8001f54:	68ba      	ldr	r2, [r7, #8]
 8001f56:	18d1      	adds	r1, r2, r3
 8001f58:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
						write_buffer[(cic * data_len) + data] =
 8001f5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f60:	7ef8      	ldrb	r0, [r7, #27]
 8001f62:	fb03 f000 	mul.w	r0, r3, r0
 8001f66:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001f6a:	4403      	add	r3, r0
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	4403      	add	r3, r0
								ic[cic].configa.tx_data[data];
 8001f72:	440a      	add	r2, r1
 8001f74:	f892 211f 	ldrb.w	r2, [r2, #287]	; 0x11f
						write_buffer[(cic * data_len) + data] =
 8001f78:	701a      	strb	r2, [r3, #0]
					for (uint8_t data = 0; data < data_len; data++) {
 8001f7a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001f7e:	3301      	adds	r3, #1
 8001f80:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001f84:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001f88:	7efb      	ldrb	r3, [r7, #27]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d3dc      	bcc.n	8001f48 <adBmsWriteData+0x9c>
				for (uint8_t cic = 0; cic < tIC; cic++) {
 8001f8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f92:	3301      	adds	r3, #1
 8001f94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001f98:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001f9c:	7bfb      	ldrb	r3, [r7, #15]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d3ce      	bcc.n	8001f40 <adBmsWriteData+0x94>
				break;
 8001fa2:	e03a      	b.n	800201a <adBmsWriteData+0x16e>
				adBms6830CreateConfigb(tIC, &ic[0]);
 8001fa4:	7bfb      	ldrb	r3, [r7, #15]
 8001fa6:	68b9      	ldr	r1, [r7, #8]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f004 fd4f 	bl	8006a4c <adBms6830CreateConfigb>
				for (uint8_t cic = 0; cic < tIC; cic++) {
 8001fae:	2300      	movs	r3, #0
 8001fb0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001fb4:	e02b      	b.n	800200e <adBmsWriteData+0x162>
					for (uint8_t data = 0; data < data_len; data++) {
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001fbc:	e01d      	b.n	8001ffa <adBmsWriteData+0x14e>
								ic[cic].configb.tx_data[data];
 8001fbe:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001fc2:	f44f 724a 	mov.w	r2, #808	; 0x328
 8001fc6:	fb02 f303 	mul.w	r3, r2, r3
 8001fca:	68ba      	ldr	r2, [r7, #8]
 8001fcc:	18d1      	adds	r1, r2, r3
 8001fce:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
						write_buffer[(cic * data_len) + data] =
 8001fd2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001fd6:	7ef8      	ldrb	r0, [r7, #27]
 8001fd8:	fb03 f000 	mul.w	r0, r3, r0
 8001fdc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001fe0:	4403      	add	r3, r0
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	4403      	add	r3, r0
								ic[cic].configb.tx_data[data];
 8001fe8:	440a      	add	r2, r1
 8001fea:	f892 212d 	ldrb.w	r2, [r2, #301]	; 0x12d
						write_buffer[(cic * data_len) + data] =
 8001fee:	701a      	strb	r2, [r3, #0]
					for (uint8_t data = 0; data < data_len; data++) {
 8001ff0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001ffa:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001ffe:	7efb      	ldrb	r3, [r7, #27]
 8002000:	429a      	cmp	r2, r3
 8002002:	d3dc      	bcc.n	8001fbe <adBmsWriteData+0x112>
				for (uint8_t cic = 0; cic < tIC; cic++) {
 8002004:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002008:	3301      	adds	r3, #1
 800200a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800200e:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8002012:	7bfb      	ldrb	r3, [r7, #15]
 8002014:	429a      	cmp	r2, r3
 8002016:	d3ce      	bcc.n	8001fb6 <adBmsWriteData+0x10a>
				break;
 8002018:	bf00      	nop
			break;
 800201a:	e0de      	b.n	80021da <adBmsWriteData+0x32e>

		case Comm:
			adBms6830CreateComm(tIC, &ic[0]);
 800201c:	7bfb      	ldrb	r3, [r7, #15]
 800201e:	68b9      	ldr	r1, [r7, #8]
 8002020:	4618      	mov	r0, r3
 8002022:	f004 ff13 	bl	8006e4c <adBms6830CreateComm>
			for (uint8_t cic = 0; cic < tIC; cic++) {
 8002026:	2300      	movs	r3, #0
 8002028:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800202c:	e02b      	b.n	8002086 <adBmsWriteData+0x1da>
				for (uint8_t data = 0; data < data_len; data++) {
 800202e:	2300      	movs	r3, #0
 8002030:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002034:	e01d      	b.n	8002072 <adBmsWriteData+0x1c6>
					write_buffer[(cic * data_len) + data] =
							ic[cic].com.tx_data[data];
 8002036:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800203a:	f44f 724a 	mov.w	r2, #808	; 0x328
 800203e:	fb02 f303 	mul.w	r3, r2, r3
 8002042:	68ba      	ldr	r2, [r7, #8]
 8002044:	18d1      	adds	r1, r2, r3
 8002046:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
					write_buffer[(cic * data_len) + data] =
 800204a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800204e:	7ef8      	ldrb	r0, [r7, #27]
 8002050:	fb03 f000 	mul.w	r0, r3, r0
 8002054:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002058:	4403      	add	r3, r0
 800205a:	4618      	mov	r0, r3
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	4403      	add	r3, r0
							ic[cic].com.tx_data[data];
 8002060:	440a      	add	r2, r1
 8002062:	f892 2157 	ldrb.w	r2, [r2, #343]	; 0x157
					write_buffer[(cic * data_len) + data] =
 8002066:	701a      	strb	r2, [r3, #0]
				for (uint8_t data = 0; data < data_len; data++) {
 8002068:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800206c:	3301      	adds	r3, #1
 800206e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002072:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8002076:	7efb      	ldrb	r3, [r7, #27]
 8002078:	429a      	cmp	r2, r3
 800207a:	d3dc      	bcc.n	8002036 <adBmsWriteData+0x18a>
			for (uint8_t cic = 0; cic < tIC; cic++) {
 800207c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002080:	3301      	adds	r3, #1
 8002082:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002086:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800208a:	7bfb      	ldrb	r3, [r7, #15]
 800208c:	429a      	cmp	r2, r3
 800208e:	d3ce      	bcc.n	800202e <adBmsWriteData+0x182>
				}
			}
			break;
 8002090:	e0a3      	b.n	80021da <adBmsWriteData+0x32e>

		case Pwm:
			switch (group) {
 8002092:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002096:	2b01      	cmp	r3, #1
 8002098:	d002      	beq.n	80020a0 <adBmsWriteData+0x1f4>
 800209a:	2b02      	cmp	r3, #2
 800209c:	d03b      	beq.n	8002116 <adBmsWriteData+0x26a>
								ic[cic].pwmb.tx_data[data];
					}
				}
				break;
			}
			break;
 800209e:	e09c      	b.n	80021da <adBmsWriteData+0x32e>
				adBms6830CreatePwma(tIC, &ic[0]);
 80020a0:	7bfb      	ldrb	r3, [r7, #15]
 80020a2:	68b9      	ldr	r1, [r7, #8]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f004 ff8b 	bl	8006fc0 <adBms6830CreatePwma>
				for (uint8_t cic = 0; cic < tIC; cic++) {
 80020aa:	2300      	movs	r3, #0
 80020ac:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80020b0:	e02b      	b.n	800210a <adBmsWriteData+0x25e>
					for (uint8_t data = 0; data < data_len; data++) {
 80020b2:	2300      	movs	r3, #0
 80020b4:	f887 3020 	strb.w	r3, [r7, #32]
 80020b8:	e01d      	b.n	80020f6 <adBmsWriteData+0x24a>
								ic[cic].pwma.tx_data[data];
 80020ba:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80020be:	f44f 724a 	mov.w	r2, #808	; 0x328
 80020c2:	fb02 f303 	mul.w	r3, r2, r3
 80020c6:	68ba      	ldr	r2, [r7, #8]
 80020c8:	18d1      	adds	r1, r2, r3
 80020ca:	f897 2020 	ldrb.w	r2, [r7, #32]
						write_buffer[(cic * data_len) + data] =
 80020ce:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80020d2:	7ef8      	ldrb	r0, [r7, #27]
 80020d4:	fb03 f000 	mul.w	r0, r3, r0
 80020d8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80020dc:	4403      	add	r3, r0
 80020de:	4618      	mov	r0, r3
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	4403      	add	r3, r0
								ic[cic].pwma.tx_data[data];
 80020e4:	440a      	add	r2, r1
 80020e6:	f892 2165 	ldrb.w	r2, [r2, #357]	; 0x165
						write_buffer[(cic * data_len) + data] =
 80020ea:	701a      	strb	r2, [r3, #0]
					for (uint8_t data = 0; data < data_len; data++) {
 80020ec:	f897 3020 	ldrb.w	r3, [r7, #32]
 80020f0:	3301      	adds	r3, #1
 80020f2:	f887 3020 	strb.w	r3, [r7, #32]
 80020f6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80020fa:	7efb      	ldrb	r3, [r7, #27]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d3dc      	bcc.n	80020ba <adBmsWriteData+0x20e>
				for (uint8_t cic = 0; cic < tIC; cic++) {
 8002100:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002104:	3301      	adds	r3, #1
 8002106:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800210a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800210e:	7bfb      	ldrb	r3, [r7, #15]
 8002110:	429a      	cmp	r2, r3
 8002112:	d3ce      	bcc.n	80020b2 <adBmsWriteData+0x206>
				break;
 8002114:	e02e      	b.n	8002174 <adBmsWriteData+0x2c8>
				adBms6830CreatePwmb(tIC, &ic[0]);
 8002116:	7bfb      	ldrb	r3, [r7, #15]
 8002118:	68b9      	ldr	r1, [r7, #8]
 800211a:	4618      	mov	r0, r3
 800211c:	f005 f840 	bl	80071a0 <adBms6830CreatePwmb>
				for (uint8_t cic = 0; cic < tIC; cic++) {
 8002120:	2300      	movs	r3, #0
 8002122:	77fb      	strb	r3, [r7, #31]
 8002124:	e021      	b.n	800216a <adBmsWriteData+0x2be>
					for (uint8_t data = 0; data < data_len; data++) {
 8002126:	2300      	movs	r3, #0
 8002128:	77bb      	strb	r3, [r7, #30]
 800212a:	e017      	b.n	800215c <adBmsWriteData+0x2b0>
								ic[cic].pwmb.tx_data[data];
 800212c:	7ffb      	ldrb	r3, [r7, #31]
 800212e:	f44f 724a 	mov.w	r2, #808	; 0x328
 8002132:	fb02 f303 	mul.w	r3, r2, r3
 8002136:	68ba      	ldr	r2, [r7, #8]
 8002138:	18d1      	adds	r1, r2, r3
 800213a:	7fba      	ldrb	r2, [r7, #30]
						write_buffer[(cic * data_len) + data] =
 800213c:	7ffb      	ldrb	r3, [r7, #31]
 800213e:	7ef8      	ldrb	r0, [r7, #27]
 8002140:	fb03 f000 	mul.w	r0, r3, r0
 8002144:	7fbb      	ldrb	r3, [r7, #30]
 8002146:	4403      	add	r3, r0
 8002148:	4618      	mov	r0, r3
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	4403      	add	r3, r0
								ic[cic].pwmb.tx_data[data];
 800214e:	440a      	add	r2, r1
 8002150:	f892 2173 	ldrb.w	r2, [r2, #371]	; 0x173
						write_buffer[(cic * data_len) + data] =
 8002154:	701a      	strb	r2, [r3, #0]
					for (uint8_t data = 0; data < data_len; data++) {
 8002156:	7fbb      	ldrb	r3, [r7, #30]
 8002158:	3301      	adds	r3, #1
 800215a:	77bb      	strb	r3, [r7, #30]
 800215c:	7fba      	ldrb	r2, [r7, #30]
 800215e:	7efb      	ldrb	r3, [r7, #27]
 8002160:	429a      	cmp	r2, r3
 8002162:	d3e3      	bcc.n	800212c <adBmsWriteData+0x280>
				for (uint8_t cic = 0; cic < tIC; cic++) {
 8002164:	7ffb      	ldrb	r3, [r7, #31]
 8002166:	3301      	adds	r3, #1
 8002168:	77fb      	strb	r3, [r7, #31]
 800216a:	7ffa      	ldrb	r2, [r7, #31]
 800216c:	7bfb      	ldrb	r3, [r7, #15]
 800216e:	429a      	cmp	r2, r3
 8002170:	d3d9      	bcc.n	8002126 <adBmsWriteData+0x27a>
				break;
 8002172:	bf00      	nop
			break;
 8002174:	e031      	b.n	80021da <adBmsWriteData+0x32e>

		case Clrflag:
			adBms6830CreateClrflagData(tIC, &ic[0]);
 8002176:	7bfb      	ldrb	r3, [r7, #15]
 8002178:	68b9      	ldr	r1, [r7, #8]
 800217a:	4618      	mov	r0, r3
 800217c:	f004 fd25 	bl	8006bca <adBms6830CreateClrflagData>
			for (uint8_t cic = 0; cic < tIC; cic++) {
 8002180:	2300      	movs	r3, #0
 8002182:	777b      	strb	r3, [r7, #29]
 8002184:	e021      	b.n	80021ca <adBmsWriteData+0x31e>
				for (uint8_t data = 0; data < data_len; data++) {
 8002186:	2300      	movs	r3, #0
 8002188:	773b      	strb	r3, [r7, #28]
 800218a:	e017      	b.n	80021bc <adBmsWriteData+0x310>
					write_buffer[(cic * data_len) + data] =
							ic[cic].clrflag.tx_data[data];
 800218c:	7f7b      	ldrb	r3, [r7, #29]
 800218e:	f44f 724a 	mov.w	r2, #808	; 0x328
 8002192:	fb02 f303 	mul.w	r3, r2, r3
 8002196:	68ba      	ldr	r2, [r7, #8]
 8002198:	18d1      	adds	r1, r2, r3
 800219a:	7f3a      	ldrb	r2, [r7, #28]
					write_buffer[(cic * data_len) + data] =
 800219c:	7f7b      	ldrb	r3, [r7, #29]
 800219e:	7ef8      	ldrb	r0, [r7, #27]
 80021a0:	fb03 f000 	mul.w	r0, r3, r0
 80021a4:	7f3b      	ldrb	r3, [r7, #28]
 80021a6:	4403      	add	r3, r0
 80021a8:	4618      	mov	r0, r3
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	4403      	add	r3, r0
							ic[cic].clrflag.tx_data[data];
 80021ae:	440a      	add	r2, r1
 80021b0:	f892 213b 	ldrb.w	r2, [r2, #315]	; 0x13b
					write_buffer[(cic * data_len) + data] =
 80021b4:	701a      	strb	r2, [r3, #0]
				for (uint8_t data = 0; data < data_len; data++) {
 80021b6:	7f3b      	ldrb	r3, [r7, #28]
 80021b8:	3301      	adds	r3, #1
 80021ba:	773b      	strb	r3, [r7, #28]
 80021bc:	7f3a      	ldrb	r2, [r7, #28]
 80021be:	7efb      	ldrb	r3, [r7, #27]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d3e3      	bcc.n	800218c <adBmsWriteData+0x2e0>
			for (uint8_t cic = 0; cic < tIC; cic++) {
 80021c4:	7f7b      	ldrb	r3, [r7, #29]
 80021c6:	3301      	adds	r3, #1
 80021c8:	777b      	strb	r3, [r7, #29]
 80021ca:	7f7a      	ldrb	r2, [r7, #29]
 80021cc:	7bfb      	ldrb	r3, [r7, #15]
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d3d9      	bcc.n	8002186 <adBmsWriteData+0x2da>
				}
			}
			break;
 80021d2:	e002      	b.n	80021da <adBmsWriteData+0x32e>
 80021d4:	0801ee94 	.word	0x0801ee94

		default:
			break;
 80021d8:	bf00      	nop
		}
	}
	spiWriteData(tIC, cmd_arg, &write_buffer[0]);
 80021da:	7bfb      	ldrb	r3, [r7, #15]
 80021dc:	697a      	ldr	r2, [r7, #20]
 80021de:	6879      	ldr	r1, [r7, #4]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f000 f917 	bl	8002414 <spiWriteData>

	free(write_buffer);
 80021e6:	6978      	ldr	r0, [r7, #20]
 80021e8:	f018 f9cc 	bl	801a584 <free>
}
 80021ec:	bf00      	nop
 80021ee:	3728      	adds	r7, #40	; 0x28
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <spiReadData>:
 * @return None
 *
 *******************************************************************************
 */
void spiReadData(uint8_t tIC, uint8_t tx_cmd[2], uint8_t *rx_data,
		uint8_t *pec_error, uint8_t *cmd_cntr, uint8_t regData_size) {
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b08c      	sub	sp, #48	; 0x30
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60b9      	str	r1, [r7, #8]
 80021fc:	607a      	str	r2, [r7, #4]
 80021fe:	603b      	str	r3, [r7, #0]
 8002200:	4603      	mov	r3, r0
 8002202:	73fb      	strb	r3, [r7, #15]
	uint8_t *data, *copyArray, src_address = 0;
 8002204:	2300      	movs	r3, #0
 8002206:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint16_t cmd_pec, received_pec, calculated_pec;
	uint8_t BYTES_IN_REG = regData_size;
 800220a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800220e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	uint8_t RX_BUFFER = (regData_size * tIC);
 8002212:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8002216:	7bfb      	ldrb	r3, [r7, #15]
 8002218:	fb12 f303 	smulbb	r3, r2, r3
 800221c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	data = (uint8_t*) calloc(RX_BUFFER, sizeof(uint8_t));
 8002220:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002224:	2101      	movs	r1, #1
 8002226:	4618      	mov	r0, r3
 8002228:	f018 f974 	bl	801a514 <calloc>
 800222c:	4603      	mov	r3, r0
 800222e:	627b      	str	r3, [r7, #36]	; 0x24
	copyArray = (uint8_t*) calloc(BYTES_IN_REG, sizeof(uint8_t));
 8002230:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002234:	2101      	movs	r1, #1
 8002236:	4618      	mov	r0, r3
 8002238:	f018 f96c 	bl	801a514 <calloc>
 800223c:	4603      	mov	r3, r0
 800223e:	623b      	str	r3, [r7, #32]
	if ((data == NULL) || (copyArray == NULL)) {
 8002240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002242:	2b00      	cmp	r3, #0
 8002244:	d002      	beq.n	800224c <spiReadData+0x58>
 8002246:	6a3b      	ldr	r3, [r7, #32]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d105      	bne.n	8002258 <spiReadData+0x64>
		printf(" Failed to allocate spi read data memory \n");
 800224c:	486f      	ldr	r0, [pc, #444]	; (800240c <spiReadData+0x218>)
 800224e:	f019 f9d9 	bl	801b604 <puts>

		exit(0);
 8002252:	2000      	movs	r0, #0
 8002254:	f018 f97c 	bl	801a550 <exit>
	} else {
		uint8_t cmd[4];
		cmd[0] = tx_cmd[0];
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	753b      	strb	r3, [r7, #20]
		cmd[1] = tx_cmd[1];
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	785b      	ldrb	r3, [r3, #1]
 8002262:	757b      	strb	r3, [r7, #21]
		cmd_pec = Pec15_Calc(2, cmd);
 8002264:	f107 0314 	add.w	r3, r7, #20
 8002268:	4619      	mov	r1, r3
 800226a:	2002      	movs	r0, #2
 800226c:	f000 f99a 	bl	80025a4 <Pec15_Calc>
 8002270:	4603      	mov	r3, r0
 8002272:	83fb      	strh	r3, [r7, #30]
		cmd[2] = (uint8_t) (cmd_pec >> 8);
 8002274:	8bfb      	ldrh	r3, [r7, #30]
 8002276:	0a1b      	lsrs	r3, r3, #8
 8002278:	b29b      	uxth	r3, r3
 800227a:	b2db      	uxtb	r3, r3
 800227c:	75bb      	strb	r3, [r7, #22]
		cmd[3] = (uint8_t) (cmd_pec);
 800227e:	8bfb      	ldrh	r3, [r7, #30]
 8002280:	b2db      	uxtb	r3, r3
 8002282:	75fb      	strb	r3, [r7, #23]
		adBmsCsLow();
 8002284:	f7ff f8a4 	bl	80013d0 <adBmsCsLow>
		HAL_SPI_Transmit(hspi, &cmd[0], 4, SPI_TIME_OUT);
 8002288:	4b61      	ldr	r3, [pc, #388]	; (8002410 <spiReadData+0x21c>)
 800228a:	6818      	ldr	r0, [r3, #0]
 800228c:	f107 0114 	add.w	r1, r7, #20
 8002290:	f04f 33ff 	mov.w	r3, #4294967295
 8002294:	2204      	movs	r2, #4
 8002296:	f00e f978 	bl	801058a <HAL_SPI_Transmit>
		HAL_SPI_Receive(hspi, &data[0], RX_BUFFER, SPI_TIME_OUT);
 800229a:	4b5d      	ldr	r3, [pc, #372]	; (8002410 <spiReadData+0x21c>)
 800229c:	6818      	ldr	r0, [r3, #0]
 800229e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80022a2:	b29a      	uxth	r2, r3
 80022a4:	f04f 33ff 	mov.w	r3, #4294967295
 80022a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022aa:	f00e faaa 	bl	8010802 <HAL_SPI_Receive>
		adBmsCsHigh();
 80022ae:	f7ff f89b 	bl	80013e8 <adBmsCsHigh>
		for (uint8_t current_ic = 0; current_ic < tIC; current_ic++) /* executes for each ic in the daisy chain and packs the data */
 80022b2:	2300      	movs	r3, #0
 80022b4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80022b8:	e097      	b.n	80023ea <spiReadData+0x1f6>
		{ /* Into the r_comm array as well as check the received data for any bit errors */
			for (uint8_t current_byte = 0; current_byte < (BYTES_IN_REG - 2);
 80022ba:	2300      	movs	r3, #0
 80022bc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80022c0:	e01e      	b.n	8002300 <spiReadData+0x10c>
					current_byte++) {
				rx_data[(current_ic * BYTES_IN_REG) + current_byte] =
						data[current_byte + (current_ic * BYTES_IN_REG)];
 80022c2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80022c6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80022ca:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 80022ce:	fb01 f303 	mul.w	r3, r1, r3
 80022d2:	4413      	add	r3, r2
 80022d4:	461a      	mov	r2, r3
 80022d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d8:	441a      	add	r2, r3
				rx_data[(current_ic * BYTES_IN_REG) + current_byte] =
 80022da:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80022de:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 80022e2:	fb03 f101 	mul.w	r1, r3, r1
 80022e6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80022ea:	440b      	add	r3, r1
 80022ec:	4619      	mov	r1, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	440b      	add	r3, r1
						data[current_byte + (current_ic * BYTES_IN_REG)];
 80022f2:	7812      	ldrb	r2, [r2, #0]
				rx_data[(current_ic * BYTES_IN_REG) + current_byte] =
 80022f4:	701a      	strb	r2, [r3, #0]
					current_byte++) {
 80022f6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80022fa:	3301      	adds	r3, #1
 80022fc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			for (uint8_t current_byte = 0; current_byte < (BYTES_IN_REG - 2);
 8002300:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002304:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002308:	3b02      	subs	r3, #2
 800230a:	429a      	cmp	r2, r3
 800230c:	dbd9      	blt.n	80022c2 <spiReadData+0xce>
			}
			/* Get command counter value */
			cmd_cntr[current_ic] = (data[(current_ic * BYTES_IN_REG)
 800230e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002312:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8002316:	fb03 f202 	mul.w	r2, r3, r2
					+ (BYTES_IN_REG - 2)] >> 2);
 800231a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800231e:	3b02      	subs	r3, #2
 8002320:	4413      	add	r3, r2
 8002322:	461a      	mov	r2, r3
			cmd_cntr[current_ic] = (data[(current_ic * BYTES_IN_REG)
 8002324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002326:	4413      	add	r3, r2
 8002328:	781a      	ldrb	r2, [r3, #0]
 800232a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800232e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002330:	440b      	add	r3, r1
 8002332:	0892      	lsrs	r2, r2, #2
 8002334:	b2d2      	uxtb	r2, r2
 8002336:	701a      	strb	r2, [r3, #0]
			/* Get received pec value from ic*/
			received_pec = (uint16_t) (((data[(current_ic * BYTES_IN_REG)
 8002338:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800233c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8002340:	fb03 f202 	mul.w	r2, r3, r2
					+ (BYTES_IN_REG - 2)] & 0x03) << 8)
 8002344:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002348:	3b02      	subs	r3, #2
 800234a:	4413      	add	r3, r2
 800234c:	461a      	mov	r2, r3
			received_pec = (uint16_t) (((data[(current_ic * BYTES_IN_REG)
 800234e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002350:	4413      	add	r3, r2
 8002352:	781b      	ldrb	r3, [r3, #0]
					+ (BYTES_IN_REG - 2)] & 0x03) << 8)
 8002354:	021b      	lsls	r3, r3, #8
					| data[(current_ic * BYTES_IN_REG) + (BYTES_IN_REG - 1)]);
 8002356:	b21b      	sxth	r3, r3
 8002358:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800235c:	b21a      	sxth	r2, r3
 800235e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002362:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8002366:	fb03 f101 	mul.w	r1, r3, r1
 800236a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800236e:	3b01      	subs	r3, #1
 8002370:	440b      	add	r3, r1
 8002372:	4619      	mov	r1, r3
 8002374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002376:	440b      	add	r3, r1
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	b21b      	sxth	r3, r3
 800237c:	4313      	orrs	r3, r2
 800237e:	b21b      	sxth	r3, r3
			received_pec = (uint16_t) (((data[(current_ic * BYTES_IN_REG)
 8002380:	83bb      	strh	r3, [r7, #28]
			/* Copy each ic correspond data + pec value for calculate data pec */
			memcpy(&copyArray[0], &data[src_address], BYTES_IN_REG);
 8002382:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002388:	4413      	add	r3, r2
 800238a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800238e:	4619      	mov	r1, r3
 8002390:	6a38      	ldr	r0, [r7, #32]
 8002392:	f019 fac6 	bl	801b922 <memcpy>
			src_address = ((current_ic + 1) * (regData_size));
 8002396:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800239a:	3301      	adds	r3, #1
 800239c:	b2db      	uxtb	r3, r3
 800239e:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80023a2:	fb12 f303 	smulbb	r3, r2, r3
 80023a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			/* Calculate data pec */
			calculated_pec = (uint16_t) pec10_calc(true, (BYTES_IN_REG - 2),
 80023aa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80023ae:	3b02      	subs	r3, #2
 80023b0:	6a3a      	ldr	r2, [r7, #32]
 80023b2:	4619      	mov	r1, r3
 80023b4:	2001      	movs	r0, #1
 80023b6:	f000 f929 	bl	800260c <pec10_calc>
 80023ba:	4603      	mov	r3, r0
 80023bc:	837b      	strh	r3, [r7, #26]
					&copyArray[0]);
			/* Match received pec with calculated pec */
			if (received_pec == calculated_pec) {
 80023be:	8bba      	ldrh	r2, [r7, #28]
 80023c0:	8b7b      	ldrh	r3, [r7, #26]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d106      	bne.n	80023d4 <spiReadData+0x1e0>
				pec_error[current_ic] = 0;
 80023c6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	4413      	add	r3, r2
 80023ce:	2200      	movs	r2, #0
 80023d0:	701a      	strb	r2, [r3, #0]
 80023d2:	e005      	b.n	80023e0 <spiReadData+0x1ec>
			}/* If no error is there value set to 0 */
			else {
				pec_error[current_ic] = 1;
 80023d4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	4413      	add	r3, r2
 80023dc:	2201      	movs	r2, #1
 80023de:	701a      	strb	r2, [r3, #0]
		for (uint8_t current_ic = 0; current_ic < tIC; current_ic++) /* executes for each ic in the daisy chain and packs the data */
 80023e0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80023e4:	3301      	adds	r3, #1
 80023e6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80023ea:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80023ee:	7bfb      	ldrb	r3, [r7, #15]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	f4ff af62 	bcc.w	80022ba <spiReadData+0xc6>
			} /* If error is there value set to 1 */
		}
	}
	free(data);
 80023f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80023f8:	f018 f8c4 	bl	801a584 <free>
	free(copyArray);
 80023fc:	6a38      	ldr	r0, [r7, #32]
 80023fe:	f018 f8c1 	bl	801a584 <free>
}
 8002402:	bf00      	nop
 8002404:	3730      	adds	r7, #48	; 0x30
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	0801eec4 	.word	0x0801eec4
 8002410:	20000000 	.word	0x20000000

08002414 <spiWriteData>:
 *
 * @return None
 *
 *******************************************************************************
 */
void spiWriteData(uint8_t tIC, uint8_t tx_cmd[2], uint8_t *data) {
 8002414:	b580      	push	{r7, lr}
 8002416:	b08a      	sub	sp, #40	; 0x28
 8002418:	af00      	add	r7, sp, #0
 800241a:	4603      	mov	r3, r0
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	607a      	str	r2, [r7, #4]
 8002420:	73fb      	strb	r3, [r7, #15]
	uint8_t BYTES_IN_REG = TX_DATA;
 8002422:	2306      	movs	r3, #6
 8002424:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t CMD_LEN = 4 + (RX_DATA * tIC);
 8002428:	7bfb      	ldrb	r3, [r7, #15]
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	b2db      	uxtb	r3, r3
 800242e:	3304      	adds	r3, #4
 8002430:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint16_t data_pec, cmd_pec;
	uint8_t *cmd, copyArray[TX_DATA], src_address = 0;
 8002434:	2300      	movs	r3, #0
 8002436:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	uint8_t cmd_index;
	cmd = (uint8_t*) calloc(CMD_LEN, sizeof(uint8_t));
 800243a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800243e:	2101      	movs	r1, #1
 8002440:	4618      	mov	r0, r3
 8002442:	f018 f867 	bl	801a514 <calloc>
 8002446:	4603      	mov	r3, r0
 8002448:	61fb      	str	r3, [r7, #28]
	if (cmd == NULL) {
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d105      	bne.n	800245c <spiWriteData+0x48>
		printf(" Failed to allocate cmd array memory \n");
 8002450:	4852      	ldr	r0, [pc, #328]	; (800259c <spiWriteData+0x188>)
 8002452:	f019 f8d7 	bl	801b604 <puts>
		exit(0);
 8002456:	2000      	movs	r0, #0
 8002458:	f018 f87a 	bl	801a550 <exit>
	} else {
		cmd[0] = tx_cmd[0];
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	781a      	ldrb	r2, [r3, #0]
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	701a      	strb	r2, [r3, #0]
		cmd[1] = tx_cmd[1];
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	3301      	adds	r3, #1
 8002468:	68ba      	ldr	r2, [r7, #8]
 800246a:	7852      	ldrb	r2, [r2, #1]
 800246c:	701a      	strb	r2, [r3, #0]
		cmd_pec = Pec15_Calc(2, cmd);
 800246e:	69f9      	ldr	r1, [r7, #28]
 8002470:	2002      	movs	r0, #2
 8002472:	f000 f897 	bl	80025a4 <Pec15_Calc>
 8002476:	4603      	mov	r3, r0
 8002478:	837b      	strh	r3, [r7, #26]
		cmd[2] = (uint8_t) (cmd_pec >> 8);
 800247a:	8b7b      	ldrh	r3, [r7, #26]
 800247c:	0a1b      	lsrs	r3, r3, #8
 800247e:	b29a      	uxth	r2, r3
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	3302      	adds	r3, #2
 8002484:	b2d2      	uxtb	r2, r2
 8002486:	701a      	strb	r2, [r3, #0]
		cmd[3] = (uint8_t) (cmd_pec);
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	3303      	adds	r3, #3
 800248c:	8b7a      	ldrh	r2, [r7, #26]
 800248e:	b2d2      	uxtb	r2, r2
 8002490:	701a      	strb	r2, [r3, #0]
		cmd_index = 4;
 8002492:	2304      	movs	r3, #4
 8002494:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		/* executes for each LTC68xx, this loops starts with the last IC on the stack */
		for (uint8_t current_ic = tIC; current_ic > 0; current_ic--) {
 8002498:	7bfb      	ldrb	r3, [r7, #15]
 800249a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800249e:	e064      	b.n	800256a <spiWriteData+0x156>
			src_address = ((current_ic - 1) * TX_DATA);
 80024a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80024a4:	461a      	mov	r2, r3
 80024a6:	0052      	lsls	r2, r2, #1
 80024a8:	4413      	add	r3, r2
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	3b06      	subs	r3, #6
 80024b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			/* The first configuration written is received by the last IC in the daisy chain */
			for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG;
 80024b4:	2300      	movs	r3, #0
 80024b6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80024ba:	e01d      	b.n	80024f8 <spiWriteData+0xe4>
					current_byte++) {
				cmd[cmd_index] = data[((current_ic - 1) * 6) + current_byte];
 80024bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80024c0:	1e5a      	subs	r2, r3, #1
 80024c2:	4613      	mov	r3, r2
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	4413      	add	r3, r2
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	461a      	mov	r2, r3
 80024cc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80024d0:	4413      	add	r3, r2
 80024d2:	461a      	mov	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	441a      	add	r2, r3
 80024d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024dc:	69f9      	ldr	r1, [r7, #28]
 80024de:	440b      	add	r3, r1
 80024e0:	7812      	ldrb	r2, [r2, #0]
 80024e2:	701a      	strb	r2, [r3, #0]
				cmd_index = cmd_index + 1;
 80024e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024e8:	3301      	adds	r3, #1
 80024ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					current_byte++) {
 80024ee:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80024f2:	3301      	adds	r3, #1
 80024f4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG;
 80024f8:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80024fc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002500:	429a      	cmp	r2, r3
 8002502:	d3db      	bcc.n	80024bc <spiWriteData+0xa8>
			}
			/* Copy each ic correspond data + pec value for calculate data pec */
			memcpy(&copyArray[0], &data[src_address], TX_DATA); /* dst, src, size */
 8002504:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	18d1      	adds	r1, r2, r3
 800250c:	f107 0310 	add.w	r3, r7, #16
 8002510:	2206      	movs	r2, #6
 8002512:	4618      	mov	r0, r3
 8002514:	f019 fa05 	bl	801b922 <memcpy>
			/* calculating the PEC for each Ics configuration register data */
			data_pec = (uint16_t) pec10_calc(true, BYTES_IN_REG, &copyArray[0]);
 8002518:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800251c:	f107 0210 	add.w	r2, r7, #16
 8002520:	4619      	mov	r1, r3
 8002522:	2001      	movs	r0, #1
 8002524:	f000 f872 	bl	800260c <pec10_calc>
 8002528:	4603      	mov	r3, r0
 800252a:	833b      	strh	r3, [r7, #24]
			cmd[cmd_index] = (uint8_t) (data_pec >> 8);
 800252c:	8b3b      	ldrh	r3, [r7, #24]
 800252e:	0a1b      	lsrs	r3, r3, #8
 8002530:	b299      	uxth	r1, r3
 8002532:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002536:	69fa      	ldr	r2, [r7, #28]
 8002538:	4413      	add	r3, r2
 800253a:	b2ca      	uxtb	r2, r1
 800253c:	701a      	strb	r2, [r3, #0]
			cmd_index = cmd_index + 1;
 800253e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002542:	3301      	adds	r3, #1
 8002544:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			cmd[cmd_index] = (uint8_t) data_pec;
 8002548:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800254c:	69fa      	ldr	r2, [r7, #28]
 800254e:	4413      	add	r3, r2
 8002550:	8b3a      	ldrh	r2, [r7, #24]
 8002552:	b2d2      	uxtb	r2, r2
 8002554:	701a      	strb	r2, [r3, #0]
			cmd_index = cmd_index + 1;
 8002556:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800255a:	3301      	adds	r3, #1
 800255c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		for (uint8_t current_ic = tIC; current_ic > 0; current_ic--) {
 8002560:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002564:	3b01      	subs	r3, #1
 8002566:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800256a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800256e:	2b00      	cmp	r3, #0
 8002570:	d196      	bne.n	80024a0 <spiWriteData+0x8c>
		}
		adBmsCsLow();
 8002572:	f7fe ff2d 	bl	80013d0 <adBmsCsLow>
		HAL_SPI_Transmit(hspi, &cmd[0], CMD_LEN, SPI_TIME_OUT); /* SPI1 , data, size, timeout */
 8002576:	4b0a      	ldr	r3, [pc, #40]	; (80025a0 <spiWriteData+0x18c>)
 8002578:	6818      	ldr	r0, [r3, #0]
 800257a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800257e:	b29a      	uxth	r2, r3
 8002580:	f04f 33ff 	mov.w	r3, #4294967295
 8002584:	69f9      	ldr	r1, [r7, #28]
 8002586:	f00e f800 	bl	801058a <HAL_SPI_Transmit>
		adBmsCsHigh();
 800258a:	f7fe ff2d 	bl	80013e8 <adBmsCsHigh>
	}
	free(cmd);
 800258e:	69f8      	ldr	r0, [r7, #28]
 8002590:	f017 fff8 	bl	801a584 <free>
}
 8002594:	bf00      	nop
 8002596:	3728      	adds	r7, #40	; 0x28
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	0801eef0 	.word	0x0801eef0
 80025a0:	20000000 	.word	0x20000000

080025a4 <Pec15_Calc>:
 *
 *******************************************************************************
 */
uint16_t Pec15_Calc(uint8_t len, /* Number of bytes that will be used to calculate a PEC */
uint8_t *data /* Array of data that will be used to calculate  a PEC */
) {
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	4603      	mov	r3, r0
 80025ac:	6039      	str	r1, [r7, #0]
 80025ae:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder, addr;
	remainder = 16; /* initialize the PEC */
 80025b0:	2310      	movs	r3, #16
 80025b2:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < len; i++) /* loops for each byte in data array */
 80025b4:	2300      	movs	r3, #0
 80025b6:	737b      	strb	r3, [r7, #13]
 80025b8:	e019      	b.n	80025ee <Pec15_Calc+0x4a>
	{
		addr = (((remainder >> 7) ^ data[i]) & 0xff);/* calculate PEC table address */
 80025ba:	89fb      	ldrh	r3, [r7, #14]
 80025bc:	09db      	lsrs	r3, r3, #7
 80025be:	b29a      	uxth	r2, r3
 80025c0:	7b7b      	ldrb	r3, [r7, #13]
 80025c2:	6839      	ldr	r1, [r7, #0]
 80025c4:	440b      	add	r3, r1
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	4053      	eors	r3, r2
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	817b      	strh	r3, [r7, #10]
		remainder = ((remainder << 8) ^ Crc15Table[addr]);
 80025d2:	89fb      	ldrh	r3, [r7, #14]
 80025d4:	021b      	lsls	r3, r3, #8
 80025d6:	b21a      	sxth	r2, r3
 80025d8:	897b      	ldrh	r3, [r7, #10]
 80025da:	490b      	ldr	r1, [pc, #44]	; (8002608 <Pec15_Calc+0x64>)
 80025dc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80025e0:	b21b      	sxth	r3, r3
 80025e2:	4053      	eors	r3, r2
 80025e4:	b21b      	sxth	r3, r3
 80025e6:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < len; i++) /* loops for each byte in data array */
 80025e8:	7b7b      	ldrb	r3, [r7, #13]
 80025ea:	3301      	adds	r3, #1
 80025ec:	737b      	strb	r3, [r7, #13]
 80025ee:	7b7a      	ldrb	r2, [r7, #13]
 80025f0:	79fb      	ldrb	r3, [r7, #7]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d3e1      	bcc.n	80025ba <Pec15_Calc+0x16>
	}
	return (remainder * 2);/* The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2 */
 80025f6:	89fb      	ldrh	r3, [r7, #14]
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	b29b      	uxth	r3, r3
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3714      	adds	r7, #20
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr
 8002608:	0801fea8 	.word	0x0801fea8

0800260c <pec10_calc>:

uint16_t pec10_calc(bool rx_cmd, int len, uint8_t *data) {
 800260c:	b480      	push	{r7}
 800260e:	b087      	sub	sp, #28
 8002610:	af00      	add	r7, sp, #0
 8002612:	4603      	mov	r3, r0
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]
 8002618:	73fb      	strb	r3, [r7, #15]
	uint16_t remainder = 16; /* PEC_SEED;   0000010000 */
 800261a:	2310      	movs	r3, #16
 800261c:	82fb      	strh	r3, [r7, #22]
	uint16_t polynom = 0x8F; /* x10 + x7 + x3 + x2 + x + 1 <- the CRC15 polynomial         100 1000 1111   48F */
 800261e:	238f      	movs	r3, #143	; 0x8f
 8002620:	823b      	strh	r3, [r7, #16]

	/* Perform modulo-2 division, a byte at a time. */
	for (uint8_t pbyte = 0; pbyte < len; ++pbyte) {
 8002622:	2300      	movs	r3, #0
 8002624:	757b      	strb	r3, [r7, #21]
 8002626:	e025      	b.n	8002674 <pec10_calc+0x68>
		/* Bring the next byte into the remainder. */
		remainder ^= (uint16_t) (data[pbyte] << 2);
 8002628:	7d7b      	ldrb	r3, [r7, #21]
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	4413      	add	r3, r2
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	b29b      	uxth	r3, r3
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	b29a      	uxth	r2, r3
 8002636:	8afb      	ldrh	r3, [r7, #22]
 8002638:	4053      	eors	r3, r2
 800263a:	82fb      	strh	r3, [r7, #22]
		/* Perform modulo-2 division, a bit at a time.*/
		for (uint8_t bit_ = 8; bit_ > 0; --bit_) {
 800263c:	2308      	movs	r3, #8
 800263e:	753b      	strb	r3, [r7, #20]
 8002640:	e012      	b.n	8002668 <pec10_calc+0x5c>
			/* Try to divide the current data bit. */
			if ((remainder & 0x200) > 0) //equivalent to remainder & 2^14 simply check for MSB
 8002642:	8afb      	ldrh	r3, [r7, #22]
 8002644:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002648:	2b00      	cmp	r3, #0
 800264a:	dd07      	ble.n	800265c <pec10_calc+0x50>
					{
				remainder = (uint16_t) ((remainder << 1));
 800264c:	8afb      	ldrh	r3, [r7, #22]
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	82fb      	strh	r3, [r7, #22]
				remainder = (uint16_t) (remainder ^ polynom);
 8002652:	8afa      	ldrh	r2, [r7, #22]
 8002654:	8a3b      	ldrh	r3, [r7, #16]
 8002656:	4053      	eors	r3, r2
 8002658:	82fb      	strh	r3, [r7, #22]
 800265a:	e002      	b.n	8002662 <pec10_calc+0x56>
			} else {
				remainder = (uint16_t) (remainder << 1);
 800265c:	8afb      	ldrh	r3, [r7, #22]
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	82fb      	strh	r3, [r7, #22]
		for (uint8_t bit_ = 8; bit_ > 0; --bit_) {
 8002662:	7d3b      	ldrb	r3, [r7, #20]
 8002664:	3b01      	subs	r3, #1
 8002666:	753b      	strb	r3, [r7, #20]
 8002668:	7d3b      	ldrb	r3, [r7, #20]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1e9      	bne.n	8002642 <pec10_calc+0x36>
	for (uint8_t pbyte = 0; pbyte < len; ++pbyte) {
 800266e:	7d7b      	ldrb	r3, [r7, #21]
 8002670:	3301      	adds	r3, #1
 8002672:	757b      	strb	r3, [r7, #21]
 8002674:	7d7b      	ldrb	r3, [r7, #21]
 8002676:	68ba      	ldr	r2, [r7, #8]
 8002678:	429a      	cmp	r2, r3
 800267a:	dcd5      	bgt.n	8002628 <pec10_calc+0x1c>
			}
		}
	}
	if (rx_cmd == true) {
 800267c:	7bfb      	ldrb	r3, [r7, #15]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d028      	beq.n	80026d4 <pec10_calc+0xc8>
		remainder ^= (uint16_t) ((data[len] & 0xFC) << 2);
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	4413      	add	r3, r2
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	b29b      	uxth	r3, r3
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	b29b      	uxth	r3, r3
 8002690:	b21b      	sxth	r3, r3
 8002692:	f403 737c 	and.w	r3, r3, #1008	; 0x3f0
 8002696:	b21a      	sxth	r2, r3
 8002698:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800269c:	4053      	eors	r3, r2
 800269e:	b21b      	sxth	r3, r3
 80026a0:	82fb      	strh	r3, [r7, #22]
		/* Perform modulo-2 division, a bit at a time */
		for (uint8_t bit_ = 6; bit_ > 0; --bit_) {
 80026a2:	2306      	movs	r3, #6
 80026a4:	74fb      	strb	r3, [r7, #19]
 80026a6:	e012      	b.n	80026ce <pec10_calc+0xc2>
			/* Try to divide the current data bit */
			if ((remainder & 0x200) > 0) //equivalent to remainder & 2^14 simply check for MSB
 80026a8:	8afb      	ldrh	r3, [r7, #22]
 80026aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	dd07      	ble.n	80026c2 <pec10_calc+0xb6>
					{
				remainder = (uint16_t) ((remainder << 1));
 80026b2:	8afb      	ldrh	r3, [r7, #22]
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	82fb      	strh	r3, [r7, #22]
				remainder = (uint16_t) (remainder ^ polynom);
 80026b8:	8afa      	ldrh	r2, [r7, #22]
 80026ba:	8a3b      	ldrh	r3, [r7, #16]
 80026bc:	4053      	eors	r3, r2
 80026be:	82fb      	strh	r3, [r7, #22]
 80026c0:	e002      	b.n	80026c8 <pec10_calc+0xbc>
			} else {
				remainder = (uint16_t) ((remainder << 1));
 80026c2:	8afb      	ldrh	r3, [r7, #22]
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	82fb      	strh	r3, [r7, #22]
		for (uint8_t bit_ = 6; bit_ > 0; --bit_) {
 80026c8:	7cfb      	ldrb	r3, [r7, #19]
 80026ca:	3b01      	subs	r3, #1
 80026cc:	74fb      	strb	r3, [r7, #19]
 80026ce:	7cfb      	ldrb	r3, [r7, #19]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d1e9      	bne.n	80026a8 <pec10_calc+0x9c>
			}
		}
	}
	return ((uint16_t) (remainder & 0x3FF));
 80026d4:	8afb      	ldrh	r3, [r7, #22]
 80026d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026da:	b29b      	uxth	r3, r3
}
 80026dc:	4618      	mov	r0, r3
 80026de:	371c      	adds	r7, #28
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <adBms6830_Adcv_ALL>:
	cmd[0] = 0x02 + rd;
	cmd[1] = (cont << 7) + (dcp << 4) + (rstf << 2) + (owcs & 0x03) + 0x60;
	spiSendCmd(cmd);
}

void adBms6830_Adcv_ALL(RD rd, CONT cont, DCP dcp, RSTF rstf, OW_C_S owcs, uint8_t total_ic) {
 80026e8:	b590      	push	{r4, r7, lr}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	4604      	mov	r4, r0
 80026f0:	4608      	mov	r0, r1
 80026f2:	4611      	mov	r1, r2
 80026f4:	461a      	mov	r2, r3
 80026f6:	4623      	mov	r3, r4
 80026f8:	71fb      	strb	r3, [r7, #7]
 80026fa:	4603      	mov	r3, r0
 80026fc:	71bb      	strb	r3, [r7, #6]
 80026fe:	460b      	mov	r3, r1
 8002700:	717b      	strb	r3, [r7, #5]
 8002702:	4613      	mov	r3, r2
 8002704:	713b      	strb	r3, [r7, #4]
	for(uint8_t icCounter = 0; icCounter < total_ic; icCounter++){
 8002706:	2300      	movs	r3, #0
 8002708:	73fb      	strb	r3, [r7, #15]
 800270a:	e022      	b.n	8002752 <adBms6830_Adcv_ALL+0x6a>
		uint8_t cmd[2];
		cmd[0] = 0x02 + rd;
 800270c:	79fb      	ldrb	r3, [r7, #7]
 800270e:	3302      	adds	r3, #2
 8002710:	b2db      	uxtb	r3, r3
 8002712:	733b      	strb	r3, [r7, #12]
		cmd[1] = (cont << 7) + (dcp << 4) + (rstf << 2) + (owcs & 0x03) + 0x60;
 8002714:	79bb      	ldrb	r3, [r7, #6]
 8002716:	01db      	lsls	r3, r3, #7
 8002718:	b2da      	uxtb	r2, r3
 800271a:	797b      	ldrb	r3, [r7, #5]
 800271c:	011b      	lsls	r3, r3, #4
 800271e:	b2db      	uxtb	r3, r3
 8002720:	4413      	add	r3, r2
 8002722:	b2da      	uxtb	r2, r3
 8002724:	793b      	ldrb	r3, [r7, #4]
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	b2db      	uxtb	r3, r3
 800272a:	4413      	add	r3, r2
 800272c:	b2da      	uxtb	r2, r3
 800272e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002732:	f003 0303 	and.w	r3, r3, #3
 8002736:	b2db      	uxtb	r3, r3
 8002738:	4413      	add	r3, r2
 800273a:	b2db      	uxtb	r3, r3
 800273c:	3360      	adds	r3, #96	; 0x60
 800273e:	b2db      	uxtb	r3, r3
 8002740:	737b      	strb	r3, [r7, #13]
		spiSendCmd(cmd);
 8002742:	f107 030c 	add.w	r3, r7, #12
 8002746:	4618      	mov	r0, r3
 8002748:	f000 f902 	bl	8002950 <spiSendCmd>
	for(uint8_t icCounter = 0; icCounter < total_ic; icCounter++){
 800274c:	7bfb      	ldrb	r3, [r7, #15]
 800274e:	3301      	adds	r3, #1
 8002750:	73fb      	strb	r3, [r7, #15]
 8002752:	7bfa      	ldrb	r2, [r7, #15]
 8002754:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002758:	429a      	cmp	r2, r3
 800275a:	d3d7      	bcc.n	800270c <adBms6830_Adcv_ALL+0x24>
	}

}
 800275c:	bf00      	nop
 800275e:	bf00      	nop
 8002760:	3714      	adds	r7, #20
 8002762:	46bd      	mov	sp, r7
 8002764:	bd90      	pop	{r4, r7, pc}

08002766 <adBms6830_Adsv_ALL>:
	cmd[0] = 0x01;
	cmd[1] = (cont << 7) + (dcp << 4) + (owcs & 0x03) + 0x68;
	spiSendCmd(cmd);
}

void adBms6830_Adsv_ALL(CONT cont, DCP dcp, OW_C_S owcs, uint8_t total_ic) {
 8002766:	b590      	push	{r4, r7, lr}
 8002768:	b085      	sub	sp, #20
 800276a:	af00      	add	r7, sp, #0
 800276c:	4604      	mov	r4, r0
 800276e:	4608      	mov	r0, r1
 8002770:	4611      	mov	r1, r2
 8002772:	461a      	mov	r2, r3
 8002774:	4623      	mov	r3, r4
 8002776:	71fb      	strb	r3, [r7, #7]
 8002778:	4603      	mov	r3, r0
 800277a:	71bb      	strb	r3, [r7, #6]
 800277c:	460b      	mov	r3, r1
 800277e:	717b      	strb	r3, [r7, #5]
 8002780:	4613      	mov	r3, r2
 8002782:	713b      	strb	r3, [r7, #4]
	for(uint8_t icCounter = 0; icCounter < total_ic; icCounter++){
 8002784:	2300      	movs	r3, #0
 8002786:	73fb      	strb	r3, [r7, #15]
 8002788:	e01a      	b.n	80027c0 <adBms6830_Adsv_ALL+0x5a>
	uint8_t cmd[2];
	cmd[0] = 0x01;
 800278a:	2301      	movs	r3, #1
 800278c:	733b      	strb	r3, [r7, #12]
	cmd[1] = (cont << 7) + (dcp << 4) + (owcs & 0x03) + 0x68;
 800278e:	79fb      	ldrb	r3, [r7, #7]
 8002790:	01db      	lsls	r3, r3, #7
 8002792:	b2da      	uxtb	r2, r3
 8002794:	79bb      	ldrb	r3, [r7, #6]
 8002796:	011b      	lsls	r3, r3, #4
 8002798:	b2db      	uxtb	r3, r3
 800279a:	4413      	add	r3, r2
 800279c:	b2da      	uxtb	r2, r3
 800279e:	797b      	ldrb	r3, [r7, #5]
 80027a0:	f003 0303 	and.w	r3, r3, #3
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	4413      	add	r3, r2
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	3368      	adds	r3, #104	; 0x68
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	737b      	strb	r3, [r7, #13]
	spiSendCmd(cmd);
 80027b0:	f107 030c 	add.w	r3, r7, #12
 80027b4:	4618      	mov	r0, r3
 80027b6:	f000 f8cb 	bl	8002950 <spiSendCmd>
	for(uint8_t icCounter = 0; icCounter < total_ic; icCounter++){
 80027ba:	7bfb      	ldrb	r3, [r7, #15]
 80027bc:	3301      	adds	r3, #1
 80027be:	73fb      	strb	r3, [r7, #15]
 80027c0:	7bfa      	ldrb	r2, [r7, #15]
 80027c2:	793b      	ldrb	r3, [r7, #4]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d3e0      	bcc.n	800278a <adBms6830_Adsv_ALL+0x24>
	}
}
 80027c8:	bf00      	nop
 80027ca:	bf00      	nop
 80027cc:	3714      	adds	r7, #20
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd90      	pop	{r4, r7, pc}

080027d2 <adBms6830_Adax_ALL>:
	cmd[0] = 0x04 + owaux;
	cmd[1] = (pup << 7) + (((ch >> 4) & 0x01) << 6) + (ch & 0x0F) + 0x10;
	spiSendCmd(cmd);
}

void adBms6830_Adax_ALL(OW_AUX owaux, PUP pup, CH ch, uint8_t total_ic) {
 80027d2:	b590      	push	{r4, r7, lr}
 80027d4:	b085      	sub	sp, #20
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	4604      	mov	r4, r0
 80027da:	4608      	mov	r0, r1
 80027dc:	4611      	mov	r1, r2
 80027de:	461a      	mov	r2, r3
 80027e0:	4623      	mov	r3, r4
 80027e2:	71fb      	strb	r3, [r7, #7]
 80027e4:	4603      	mov	r3, r0
 80027e6:	71bb      	strb	r3, [r7, #6]
 80027e8:	460b      	mov	r3, r1
 80027ea:	717b      	strb	r3, [r7, #5]
 80027ec:	4613      	mov	r3, r2
 80027ee:	713b      	strb	r3, [r7, #4]
	for(uint8_t icCounter = 0; icCounter < total_ic; icCounter++){
 80027f0:	2300      	movs	r3, #0
 80027f2:	73fb      	strb	r3, [r7, #15]
 80027f4:	e021      	b.n	800283a <adBms6830_Adax_ALL+0x68>
	uint8_t cmd[2];
	cmd[0] = 0x04 + owaux;
 80027f6:	79fb      	ldrb	r3, [r7, #7]
 80027f8:	3304      	adds	r3, #4
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	733b      	strb	r3, [r7, #12]
	cmd[1] = (pup << 7) + (((ch >> 4) & 0x01) << 6) + (ch & 0x0F) + 0x10;
 80027fe:	79bb      	ldrb	r3, [r7, #6]
 8002800:	01db      	lsls	r3, r3, #7
 8002802:	b2da      	uxtb	r2, r3
 8002804:	797b      	ldrb	r3, [r7, #5]
 8002806:	091b      	lsrs	r3, r3, #4
 8002808:	b2db      	uxtb	r3, r3
 800280a:	019b      	lsls	r3, r3, #6
 800280c:	b2db      	uxtb	r3, r3
 800280e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002812:	b2db      	uxtb	r3, r3
 8002814:	4413      	add	r3, r2
 8002816:	b2da      	uxtb	r2, r3
 8002818:	797b      	ldrb	r3, [r7, #5]
 800281a:	f003 030f 	and.w	r3, r3, #15
 800281e:	b2db      	uxtb	r3, r3
 8002820:	4413      	add	r3, r2
 8002822:	b2db      	uxtb	r3, r3
 8002824:	3310      	adds	r3, #16
 8002826:	b2db      	uxtb	r3, r3
 8002828:	737b      	strb	r3, [r7, #13]
	spiSendCmd(cmd);
 800282a:	f107 030c 	add.w	r3, r7, #12
 800282e:	4618      	mov	r0, r3
 8002830:	f000 f88e 	bl	8002950 <spiSendCmd>
	for(uint8_t icCounter = 0; icCounter < total_ic; icCounter++){
 8002834:	7bfb      	ldrb	r3, [r7, #15]
 8002836:	3301      	adds	r3, #1
 8002838:	73fb      	strb	r3, [r7, #15]
 800283a:	7bfa      	ldrb	r2, [r7, #15]
 800283c:	793b      	ldrb	r3, [r7, #4]
 800283e:	429a      	cmp	r2, r3
 8002840:	d3d9      	bcc.n	80027f6 <adBms6830_Adax_ALL+0x24>
	}
}
 8002842:	bf00      	nop
 8002844:	bf00      	nop
 8002846:	3714      	adds	r7, #20
 8002848:	46bd      	mov	sp, r7
 800284a:	bd90      	pop	{r4, r7, pc}
 800284c:	0000      	movs	r0, r0
	...

08002850 <Thermistor>:
	adBmsReadData(tIC, &ic[0], RDSVE, S_volt, E);
	adBmsReadData(tIC, &ic[0], RDSVF, S_volt, F);
	printVoltages(tIC, &ic[0], S_volt);
}

float Thermistor(float mesuredVoltage, float refVoltage) {
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	ed87 0a01 	vstr	s0, [r7, #4]
 800285a:	edc7 0a00 	vstr	s1, [r7]

	double temperature;
	temperature = log((mesuredVoltage * 10000) / (refVoltage - mesuredVoltage));
 800285e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002862:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8002948 <Thermistor+0xf8>
 8002866:	ee27 7a87 	vmul.f32	s14, s15, s14
 800286a:	edd7 6a00 	vldr	s13, [r7]
 800286e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002872:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002876:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800287a:	ee16 0a90 	vmov	r0, s13
 800287e:	f7fd fe83 	bl	8000588 <__aeabi_f2d>
 8002882:	4602      	mov	r2, r0
 8002884:	460b      	mov	r3, r1
 8002886:	ec43 2b10 	vmov	d0, r2, r3
 800288a:	f017 fa81 	bl	8019d90 <log>
 800288e:	ed87 0b02 	vstr	d0, [r7, #8]
	temperature = 1
			/ (0.001153145702
					+ (0.0002307020098
							+ (0.00000009730588083 * temperature * temperature))
 8002892:	a325      	add	r3, pc, #148	; (adr r3, 8002928 <Thermistor+0xd8>)
 8002894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002898:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800289c:	f7fd fecc 	bl	8000638 <__aeabi_dmul>
 80028a0:	4602      	mov	r2, r0
 80028a2:	460b      	mov	r3, r1
 80028a4:	4610      	mov	r0, r2
 80028a6:	4619      	mov	r1, r3
 80028a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80028ac:	f7fd fec4 	bl	8000638 <__aeabi_dmul>
 80028b0:	4602      	mov	r2, r0
 80028b2:	460b      	mov	r3, r1
 80028b4:	4610      	mov	r0, r2
 80028b6:	4619      	mov	r1, r3
 80028b8:	a31d      	add	r3, pc, #116	; (adr r3, 8002930 <Thermistor+0xe0>)
 80028ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028be:	f7fd fd05 	bl	80002cc <__adddf3>
 80028c2:	4602      	mov	r2, r0
 80028c4:	460b      	mov	r3, r1
 80028c6:	4610      	mov	r0, r2
 80028c8:	4619      	mov	r1, r3
							* temperature);
 80028ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80028ce:	f7fd feb3 	bl	8000638 <__aeabi_dmul>
 80028d2:	4602      	mov	r2, r0
 80028d4:	460b      	mov	r3, r1
 80028d6:	4610      	mov	r0, r2
 80028d8:	4619      	mov	r1, r3
					+ (0.0002307020098
 80028da:	a317      	add	r3, pc, #92	; (adr r3, 8002938 <Thermistor+0xe8>)
 80028dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e0:	f7fd fcf4 	bl	80002cc <__adddf3>
 80028e4:	4602      	mov	r2, r0
 80028e6:	460b      	mov	r3, r1
	temperature = 1
 80028e8:	f04f 0000 	mov.w	r0, #0
 80028ec:	4917      	ldr	r1, [pc, #92]	; (800294c <Thermistor+0xfc>)
 80028ee:	f7fd ffcd 	bl	800088c <__aeabi_ddiv>
 80028f2:	4602      	mov	r2, r0
 80028f4:	460b      	mov	r3, r1
 80028f6:	e9c7 2302 	strd	r2, r3, [r7, #8]
	temperature = temperature - 273.15;
 80028fa:	a311      	add	r3, pc, #68	; (adr r3, 8002940 <Thermistor+0xf0>)
 80028fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002900:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002904:	f7fd fce0 	bl	80002c8 <__aeabi_dsub>
 8002908:	4602      	mov	r2, r0
 800290a:	460b      	mov	r3, r1
 800290c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return temperature;
 8002910:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002914:	f7fe f988 	bl	8000c28 <__aeabi_d2f>
 8002918:	4603      	mov	r3, r0
 800291a:	ee07 3a90 	vmov	s15, r3
}
 800291e:	eeb0 0a67 	vmov.f32	s0, s15
 8002922:	3710      	adds	r7, #16
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	28a59e3f 	.word	0x28a59e3f
 800292c:	3e7a1ecf 	.word	0x3e7a1ecf
 8002930:	2ca71cf2 	.word	0x2ca71cf2
 8002934:	3f2e3d13 	.word	0x3f2e3d13
 8002938:	c4f79c5b 	.word	0xc4f79c5b
 800293c:	3f52e4a4 	.word	0x3f52e4a4
 8002940:	66666666 	.word	0x66666666
 8002944:	40711266 	.word	0x40711266
 8002948:	461c4000 	.word	0x461c4000
 800294c:	3ff00000 	.word	0x3ff00000

08002950 <spiSendCmd>:
 *
 * @return None
 *
 *******************************************************************************
 */
void spiSendCmd(uint8_t tx_cmd[2]) {
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
	uint8_t cmd[4];
	uint16_t cmd_pec;
	cmd[0] = tx_cmd[0];
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	723b      	strb	r3, [r7, #8]
	cmd[1] = tx_cmd[1];
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	785b      	ldrb	r3, [r3, #1]
 8002962:	727b      	strb	r3, [r7, #9]
	cmd_pec = Pec15_Calc(2, cmd);
 8002964:	f107 0308 	add.w	r3, r7, #8
 8002968:	4619      	mov	r1, r3
 800296a:	2002      	movs	r0, #2
 800296c:	f7ff fe1a 	bl	80025a4 <Pec15_Calc>
 8002970:	4603      	mov	r3, r0
 8002972:	81fb      	strh	r3, [r7, #14]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 8002974:	89fb      	ldrh	r3, [r7, #14]
 8002976:	0a1b      	lsrs	r3, r3, #8
 8002978:	b29b      	uxth	r3, r3
 800297a:	b2db      	uxtb	r3, r3
 800297c:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t) (cmd_pec);
 800297e:	89fb      	ldrh	r3, [r7, #14]
 8002980:	b2db      	uxtb	r3, r3
 8002982:	72fb      	strb	r3, [r7, #11]
	adBmsCsLow();
 8002984:	f7fe fd24 	bl	80013d0 <adBmsCsLow>
	HAL_SPI_Transmit(hspi, &cmd[0], 4, SPI_TIME_OUT);
 8002988:	4b07      	ldr	r3, [pc, #28]	; (80029a8 <spiSendCmd+0x58>)
 800298a:	6818      	ldr	r0, [r3, #0]
 800298c:	f107 0108 	add.w	r1, r7, #8
 8002990:	f04f 33ff 	mov.w	r3, #4294967295
 8002994:	2204      	movs	r2, #4
 8002996:	f00d fdf8 	bl	801058a <HAL_SPI_Transmit>
	adBmsCsHigh();
 800299a:	f7fe fd25 	bl	80013e8 <adBmsCsHigh>
}
 800299e:	bf00      	nop
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	20000000 	.word	0x20000000
 80029ac:	00000000 	.word	0x00000000

080029b0 <getVoltage>:
 *
 * @return voltage(float)
 *
 *******************************************************************************
 */
float getVoltage(int data) {
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
	float voltage_float; //voltage in Volts
	voltage_float = ((data + 10000) * 0.000150);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80029be:	3310      	adds	r3, #16
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7fd fdcf 	bl	8000564 <__aeabi_i2d>
 80029c6:	a30a      	add	r3, pc, #40	; (adr r3, 80029f0 <getVoltage+0x40>)
 80029c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029cc:	f7fd fe34 	bl	8000638 <__aeabi_dmul>
 80029d0:	4602      	mov	r2, r0
 80029d2:	460b      	mov	r3, r1
 80029d4:	4610      	mov	r0, r2
 80029d6:	4619      	mov	r1, r3
 80029d8:	f7fe f926 	bl	8000c28 <__aeabi_d2f>
 80029dc:	4603      	mov	r3, r0
 80029de:	60fb      	str	r3, [r7, #12]
	return voltage_float;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	ee07 3a90 	vmov	s15, r3
}
 80029e6:	eeb0 0a67 	vmov.f32	s0, s15
 80029ea:	3710      	adds	r7, #16
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	30553261 	.word	0x30553261
 80029f4:	3f23a92a 	.word	0x3f23a92a

080029f8 <bytestowrite>:
/*****************************************************************************************************************************************/
uint8_t bytes_temp[4];

// function to determine the remaining bytes
uint16_t bytestowrite (uint16_t size, uint16_t offset)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	4603      	mov	r3, r0
 8002a00:	460a      	mov	r2, r1
 8002a02:	80fb      	strh	r3, [r7, #6]
 8002a04:	4613      	mov	r3, r2
 8002a06:	80bb      	strh	r3, [r7, #4]
	if ((size+offset)<PAGE_SIZE) return size;
 8002a08:	88fa      	ldrh	r2, [r7, #6]
 8002a0a:	88bb      	ldrh	r3, [r7, #4]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	2b7f      	cmp	r3, #127	; 0x7f
 8002a10:	dc01      	bgt.n	8002a16 <bytestowrite+0x1e>
 8002a12:	88fb      	ldrh	r3, [r7, #6]
 8002a14:	e003      	b.n	8002a1e <bytestowrite+0x26>
	else return PAGE_SIZE-offset;
 8002a16:	88bb      	ldrh	r3, [r7, #4]
 8002a18:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002a1c:	b29b      	uxth	r3, r3
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	370c      	adds	r7, #12
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
	...

08002a2c <EEPROM_Write>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Write (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b08e      	sub	sp, #56	; 0x38
 8002a30:	af04      	add	r7, sp, #16
 8002a32:	60ba      	str	r2, [r7, #8]
 8002a34:	461a      	mov	r2, r3
 8002a36:	4603      	mov	r3, r0
 8002a38:	81fb      	strh	r3, [r7, #14]
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	81bb      	strh	r3, [r7, #12]
 8002a3e:	4613      	mov	r3, r2
 8002a40:	80fb      	strh	r3, [r7, #6]

	// Find out the number of bit, where the page addressing starts
	int paddrposition = log(PAGE_SIZE)/log(2);
 8002a42:	2307      	movs	r3, #7
 8002a44:	61fb      	str	r3, [r7, #28]

	// calculate the start page and the end page
	uint16_t startPage = page;
 8002a46:	89fb      	ldrh	r3, [r7, #14]
 8002a48:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 8002a4a:	88fa      	ldrh	r2, [r7, #6]
 8002a4c:	89bb      	ldrh	r3, [r7, #12]
 8002a4e:	4413      	add	r3, r2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	da00      	bge.n	8002a56 <EEPROM_Write+0x2a>
 8002a54:	337f      	adds	r3, #127	; 0x7f
 8002a56:	11db      	asrs	r3, r3, #7
 8002a58:	b29a      	uxth	r2, r3
 8002a5a:	89fb      	ldrh	r3, [r7, #14]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	837b      	strh	r3, [r7, #26]

	// number of pages to be written
	uint16_t numofpages = (endPage-startPage) + 1;
 8002a60:	8b7a      	ldrh	r2, [r7, #26]
 8002a62:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	3301      	adds	r3, #1
 8002a6a:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	84bb      	strh	r3, [r7, #36]	; 0x24

	// write the data
	for (int i=0; i<numofpages; i++)
 8002a70:	2300      	movs	r3, #0
 8002a72:	623b      	str	r3, [r7, #32]
 8002a74:	e034      	b.n	8002ae0 <EEPROM_Write+0xb4>
	{
		/* calculate the address of the memory location
		 * Here we add the page address with the byte address
		 */
		uint16_t MemAddress = startPage<<paddrposition | offset;
 8002a76:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7e:	b21a      	sxth	r2, r3
 8002a80:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	b21b      	sxth	r3, r3
 8002a88:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);  // calculate the remaining bytes to be written
 8002a8a:	89ba      	ldrh	r2, [r7, #12]
 8002a8c:	88fb      	ldrh	r3, [r7, #6]
 8002a8e:	4611      	mov	r1, r2
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7ff ffb1 	bl	80029f8 <bytestowrite>
 8002a96:	4603      	mov	r3, r0
 8002a98:	82bb      	strh	r3, [r7, #20]

		HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);  // write the data to the EEPROM
 8002a9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002a9c:	68ba      	ldr	r2, [r7, #8]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	8af9      	ldrh	r1, [r7, #22]
 8002aa2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002aa6:	9202      	str	r2, [sp, #8]
 8002aa8:	8aba      	ldrh	r2, [r7, #20]
 8002aaa:	9201      	str	r2, [sp, #4]
 8002aac:	9300      	str	r3, [sp, #0]
 8002aae:	2302      	movs	r3, #2
 8002ab0:	460a      	mov	r2, r1
 8002ab2:	21a0      	movs	r1, #160	; 0xa0
 8002ab4:	480f      	ldr	r0, [pc, #60]	; (8002af4 <EEPROM_Write+0xc8>)
 8002ab6:	f00a fad9 	bl	800d06c <HAL_I2C_Mem_Write>

		startPage += 1;  // increment the page, so that a new page address can be selected for further write
 8002aba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002abc:	3301      	adds	r3, #1
 8002abe:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset=0;   // since we will be writing to a new page, so offset will be 0
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;  // reduce the size of the bytes
 8002ac4:	88fa      	ldrh	r2, [r7, #6]
 8002ac6:	8abb      	ldrh	r3, [r7, #20]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;  // update the position for the data buffer
 8002acc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002ace:	8abb      	ldrh	r3, [r7, #20]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	84bb      	strh	r3, [r7, #36]	; 0x24

		HAL_Delay (5);  // Write cycle delay (5ms)
 8002ad4:	2005      	movs	r0, #5
 8002ad6:	f007 fe19 	bl	800a70c <HAL_Delay>
	for (int i=0; i<numofpages; i++)
 8002ada:	6a3b      	ldr	r3, [r7, #32]
 8002adc:	3301      	adds	r3, #1
 8002ade:	623b      	str	r3, [r7, #32]
 8002ae0:	8b3b      	ldrh	r3, [r7, #24]
 8002ae2:	6a3a      	ldr	r2, [r7, #32]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	dbc6      	blt.n	8002a76 <EEPROM_Write+0x4a>
	}
}
 8002ae8:	bf00      	nop
 8002aea:	bf00      	nop
 8002aec:	3728      	adds	r7, #40	; 0x28
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	20000420 	.word	0x20000420

08002af8 <EEPROM_Read>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Read (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b08e      	sub	sp, #56	; 0x38
 8002afc:	af04      	add	r7, sp, #16
 8002afe:	60ba      	str	r2, [r7, #8]
 8002b00:	461a      	mov	r2, r3
 8002b02:	4603      	mov	r3, r0
 8002b04:	81fb      	strh	r3, [r7, #14]
 8002b06:	460b      	mov	r3, r1
 8002b08:	81bb      	strh	r3, [r7, #12]
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	80fb      	strh	r3, [r7, #6]
	int paddrposition = log(PAGE_SIZE)/log(2);
 8002b0e:	2307      	movs	r3, #7
 8002b10:	61fb      	str	r3, [r7, #28]

	uint16_t startPage = page;
 8002b12:	89fb      	ldrh	r3, [r7, #14]
 8002b14:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 8002b16:	88fa      	ldrh	r2, [r7, #6]
 8002b18:	89bb      	ldrh	r3, [r7, #12]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	da00      	bge.n	8002b22 <EEPROM_Read+0x2a>
 8002b20:	337f      	adds	r3, #127	; 0x7f
 8002b22:	11db      	asrs	r3, r3, #7
 8002b24:	b29a      	uxth	r2, r3
 8002b26:	89fb      	ldrh	r3, [r7, #14]
 8002b28:	4413      	add	r3, r2
 8002b2a:	837b      	strh	r3, [r7, #26]

	uint16_t numofpages = (endPage-startPage) + 1;
 8002b2c:	8b7a      	ldrh	r2, [r7, #26]
 8002b2e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	3301      	adds	r3, #1
 8002b36:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	84bb      	strh	r3, [r7, #36]	; 0x24

	for (int i=0; i<numofpages; i++)
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	623b      	str	r3, [r7, #32]
 8002b40:	e031      	b.n	8002ba6 <EEPROM_Read+0xae>
	{
		uint16_t MemAddress = startPage<<paddrposition | offset;
 8002b42:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	b21a      	sxth	r2, r3
 8002b4c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	b21b      	sxth	r3, r3
 8002b54:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);
 8002b56:	89ba      	ldrh	r2, [r7, #12]
 8002b58:	88fb      	ldrh	r3, [r7, #6]
 8002b5a:	4611      	mov	r1, r2
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7ff ff4b 	bl	80029f8 <bytestowrite>
 8002b62:	4603      	mov	r3, r0
 8002b64:	82bb      	strh	r3, [r7, #20]
		HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);
 8002b66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002b68:	68ba      	ldr	r2, [r7, #8]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	8af9      	ldrh	r1, [r7, #22]
 8002b6e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b72:	9202      	str	r2, [sp, #8]
 8002b74:	8aba      	ldrh	r2, [r7, #20]
 8002b76:	9201      	str	r2, [sp, #4]
 8002b78:	9300      	str	r3, [sp, #0]
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	460a      	mov	r2, r1
 8002b7e:	21a0      	movs	r1, #160	; 0xa0
 8002b80:	480d      	ldr	r0, [pc, #52]	; (8002bb8 <EEPROM_Read+0xc0>)
 8002b82:	f00a fb6d 	bl	800d260 <HAL_I2C_Mem_Read>
		startPage += 1;
 8002b86:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002b88:	3301      	adds	r3, #1
 8002b8a:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset=0;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;
 8002b90:	88fa      	ldrh	r2, [r7, #6]
 8002b92:	8abb      	ldrh	r3, [r7, #20]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;
 8002b98:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002b9a:	8abb      	ldrh	r3, [r7, #20]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (int i=0; i<numofpages; i++)
 8002ba0:	6a3b      	ldr	r3, [r7, #32]
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	623b      	str	r3, [r7, #32]
 8002ba6:	8b3b      	ldrh	r3, [r7, #24]
 8002ba8:	6a3a      	ldr	r2, [r7, #32]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	dbc9      	blt.n	8002b42 <EEPROM_Read+0x4a>
	}
}
 8002bae:	bf00      	nop
 8002bb0:	bf00      	nop
 8002bb2:	3728      	adds	r7, #40	; 0x28
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	20000420 	.word	0x20000420

08002bbc <EEPROM_GetConfigs>:
	HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, data, PAGE_SIZE, 1000);

	HAL_Delay (5);  // write cycle delay 
}

void EEPROM_GetConfigs (uint8_t * buffer, uint16_t size){
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	807b      	strh	r3, [r7, #2]

	EEPROM_Read(10, 0, buffer, size);
 8002bc8:	887b      	ldrh	r3, [r7, #2]
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	2100      	movs	r1, #0
 8002bce:	200a      	movs	r0, #10
 8002bd0:	f7ff ff92 	bl	8002af8 <EEPROM_Read>

}
 8002bd4:	bf00      	nop
 8002bd6:	3708      	adds	r7, #8
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <EEPROM_SetConfigs>:

void EEPROM_SetConfigs (uint8_t * buffer, uint16_t size){
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	460b      	mov	r3, r1
 8002be6:	807b      	strh	r3, [r7, #2]

	EEPROM_Write(10, 0, buffer, size);
 8002be8:	887b      	ldrh	r3, [r7, #2]
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	2100      	movs	r1, #0
 8002bee:	200a      	movs	r0, #10
 8002bf0:	f7ff ff1c 	bl	8002a2c <EEPROM_Write>

}
 8002bf4:	bf00      	nop
 8002bf6:	3708      	adds	r7, #8
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	0000      	movs	r0, r0
	...

08002c00 <SetOverVoltageThreshold>:
 * @return OverVoltage_value
 *
 *******************************************************************************
*/
uint16_t SetOverVoltageThreshold(float voltage)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	ed87 0a01 	vstr	s0, [r7, #4]
  uint16_t vov_value;
  uint8_t rbits = 12;
 8002c0a:	230c      	movs	r3, #12
 8002c0c:	73fb      	strb	r3, [r7, #15]
  voltage = (voltage - 1.5);
 8002c0e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c12:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002c16:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002c1a:	edc7 7a01 	vstr	s15, [r7, #4]
  voltage = voltage / (16 * 0.000150);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f7fd fcb2 	bl	8000588 <__aeabi_f2d>
 8002c24:	a314      	add	r3, pc, #80	; (adr r3, 8002c78 <SetOverVoltageThreshold+0x78>)
 8002c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c2a:	f7fd fe2f 	bl	800088c <__aeabi_ddiv>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	460b      	mov	r3, r1
 8002c32:	4610      	mov	r0, r2
 8002c34:	4619      	mov	r1, r3
 8002c36:	f7fd fff7 	bl	8000c28 <__aeabi_d2f>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	607b      	str	r3, [r7, #4]
  vov_value = (uint16_t )(voltage + 2 * (1 << (rbits - 1)));
 8002c3e:	7bfb      	ldrb	r3, [r7, #15]
 8002c40:	3b01      	subs	r3, #1
 8002c42:	2202      	movs	r2, #2
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	ee07 3a90 	vmov	s15, r3
 8002c4c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c50:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c5c:	ee17 3a90 	vmov	r3, s15
 8002c60:	81bb      	strh	r3, [r7, #12]
  vov_value &= 0xFFF;
 8002c62:	89bb      	ldrh	r3, [r7, #12]
 8002c64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c68:	81bb      	strh	r3, [r7, #12]
  return vov_value;
 8002c6a:	89bb      	ldrh	r3, [r7, #12]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3710      	adds	r7, #16
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	f3af 8000 	nop.w
 8002c78:	30553261 	.word	0x30553261
 8002c7c:	3f63a92a 	.word	0x3f63a92a

08002c80 <SetUnderVoltageThreshold>:
 * @return UnderVoltage_value
 *
 *******************************************************************************
*/
uint16_t SetUnderVoltageThreshold(float voltage)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	ed87 0a01 	vstr	s0, [r7, #4]
  uint16_t vuv_value;
  uint8_t rbits = 12;
 8002c8a:	230c      	movs	r3, #12
 8002c8c:	73fb      	strb	r3, [r7, #15]
  voltage = (voltage - 1.5);
 8002c8e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c92:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002c96:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002c9a:	edc7 7a01 	vstr	s15, [r7, #4]
  voltage = voltage / (16 * 0.000150);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f7fd fc72 	bl	8000588 <__aeabi_f2d>
 8002ca4:	a314      	add	r3, pc, #80	; (adr r3, 8002cf8 <SetUnderVoltageThreshold+0x78>)
 8002ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002caa:	f7fd fdef 	bl	800088c <__aeabi_ddiv>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	4610      	mov	r0, r2
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	f7fd ffb7 	bl	8000c28 <__aeabi_d2f>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	607b      	str	r3, [r7, #4]
  vuv_value = (uint16_t )(voltage + 2 * (1 << (rbits - 1)));
 8002cbe:	7bfb      	ldrb	r3, [r7, #15]
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	2202      	movs	r2, #2
 8002cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc8:	ee07 3a90 	vmov	s15, r3
 8002ccc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cd0:	edd7 7a01 	vldr	s15, [r7, #4]
 8002cd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cdc:	ee17 3a90 	vmov	r3, s15
 8002ce0:	81bb      	strh	r3, [r7, #12]
  vuv_value &= 0xFFF;
 8002ce2:	89bb      	ldrh	r3, [r7, #12]
 8002ce4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ce8:	81bb      	strh	r3, [r7, #12]
  return vuv_value;
 8002cea:	89bb      	ldrh	r3, [r7, #12]
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3710      	adds	r7, #16
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	f3af 8000 	nop.w
 8002cf8:	30553261 	.word	0x30553261
 8002cfc:	3f63a92a 	.word	0x3f63a92a

08002d00 <adBms6830ParseConfiga>:
 * @return None
 *
 *******************************************************************************
*/
void adBms6830ParseConfiga(uint8_t tIC, cell_asic *ic, uint8_t *data)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b086      	sub	sp, #24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	4603      	mov	r3, r0
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
 8002d0c:	73fb      	strb	r3, [r7, #15]
  uint8_t address = 0;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	75fb      	strb	r3, [r7, #23]
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8002d12:	2300      	movs	r3, #0
 8002d14:	75bb      	strb	r3, [r7, #22]
 8002d16:	e132      	b.n	8002f7e <adBms6830ParseConfiga+0x27e>
  {
    memcpy(&ic[curr_ic].configa.rx_data[0], &data[address], RX_DATA); /* dst , src , size */
 8002d18:	7dbb      	ldrb	r3, [r7, #22]
 8002d1a:	f44f 724a 	mov.w	r2, #808	; 0x328
 8002d1e:	fb02 f303 	mul.w	r3, r2, r3
 8002d22:	68ba      	ldr	r2, [r7, #8]
 8002d24:	4413      	add	r3, r2
 8002d26:	f203 1025 	addw	r0, r3, #293	; 0x125
 8002d2a:	7dfb      	ldrb	r3, [r7, #23]
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	4413      	add	r3, r2
 8002d30:	2208      	movs	r2, #8
 8002d32:	4619      	mov	r1, r3
 8002d34:	f018 fdf5 	bl	801b922 <memcpy>
    address = ((curr_ic+1) * (RX_DATA));
 8002d38:	7dbb      	ldrb	r3, [r7, #22]
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	75fb      	strb	r3, [r7, #23]

    ic[curr_ic].rx_cfga.cth = (ic[curr_ic].configa.rx_data[0] & 0x07);
 8002d42:	7dbb      	ldrb	r3, [r7, #22]
 8002d44:	f44f 724a 	mov.w	r2, #808	; 0x328
 8002d48:	fb02 f303 	mul.w	r3, r2, r3
 8002d4c:	68ba      	ldr	r2, [r7, #8]
 8002d4e:	4413      	add	r3, r2
 8002d50:	f893 1125 	ldrb.w	r1, [r3, #293]	; 0x125
 8002d54:	7dbb      	ldrb	r3, [r7, #22]
 8002d56:	f44f 724a 	mov.w	r2, #808	; 0x328
 8002d5a:	fb02 f303 	mul.w	r3, r2, r3
 8002d5e:	68ba      	ldr	r2, [r7, #8]
 8002d60:	441a      	add	r2, r3
 8002d62:	460b      	mov	r3, r1
 8002d64:	f003 0307 	and.w	r3, r3, #7
 8002d68:	b2d9      	uxtb	r1, r3
 8002d6a:	7993      	ldrb	r3, [r2, #6]
 8002d6c:	f361 0343 	bfi	r3, r1, #1, #3
 8002d70:	7193      	strb	r3, [r2, #6]
    ic[curr_ic].rx_cfga.refon   = (ic[curr_ic].configa.rx_data[0] & 0x80) >> 7;
 8002d72:	7dbb      	ldrb	r3, [r7, #22]
 8002d74:	f44f 724a 	mov.w	r2, #808	; 0x328
 8002d78:	fb02 f303 	mul.w	r3, r2, r3
 8002d7c:	68ba      	ldr	r2, [r7, #8]
 8002d7e:	4413      	add	r3, r2
 8002d80:	f893 3125 	ldrb.w	r3, [r3, #293]	; 0x125
 8002d84:	09db      	lsrs	r3, r3, #7
 8002d86:	b2d9      	uxtb	r1, r3
 8002d88:	7dbb      	ldrb	r3, [r7, #22]
 8002d8a:	f44f 724a 	mov.w	r2, #808	; 0x328
 8002d8e:	fb02 f303 	mul.w	r3, r2, r3
 8002d92:	68ba      	ldr	r2, [r7, #8]
 8002d94:	441a      	add	r2, r3
 8002d96:	460b      	mov	r3, r1
 8002d98:	f003 0301 	and.w	r3, r3, #1
 8002d9c:	b2d9      	uxtb	r1, r3
 8002d9e:	7993      	ldrb	r3, [r2, #6]
 8002da0:	f361 0300 	bfi	r3, r1, #0, #1
 8002da4:	7193      	strb	r3, [r2, #6]

    ic[curr_ic].rx_cfga.flag_d  = (ic[curr_ic].configa.rx_data[1] & 0xFF);
 8002da6:	7dbb      	ldrb	r3, [r7, #22]
 8002da8:	f44f 724a 	mov.w	r2, #808	; 0x328
 8002dac:	fb02 f303 	mul.w	r3, r2, r3
 8002db0:	68ba      	ldr	r2, [r7, #8]
 8002db2:	441a      	add	r2, r3
 8002db4:	7dbb      	ldrb	r3, [r7, #22]
 8002db6:	f44f 714a 	mov.w	r1, #808	; 0x328
 8002dba:	fb01 f303 	mul.w	r3, r1, r3
 8002dbe:	68b9      	ldr	r1, [r7, #8]
 8002dc0:	440b      	add	r3, r1
 8002dc2:	f892 2126 	ldrb.w	r2, [r2, #294]	; 0x126
 8002dc6:	71da      	strb	r2, [r3, #7]

    ic[curr_ic].rx_cfga.soakon   = (ic[curr_ic].configa.rx_data[2] & 0x80) >> 7;
 8002dc8:	7dbb      	ldrb	r3, [r7, #22]
 8002dca:	f44f 724a 	mov.w	r2, #808	; 0x328
 8002dce:	fb02 f303 	mul.w	r3, r2, r3
 8002dd2:	68ba      	ldr	r2, [r7, #8]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	f893 3127 	ldrb.w	r3, [r3, #295]	; 0x127
 8002dda:	09db      	lsrs	r3, r3, #7
 8002ddc:	b2d9      	uxtb	r1, r3
 8002dde:	7dbb      	ldrb	r3, [r7, #22]
 8002de0:	f44f 724a 	mov.w	r2, #808	; 0x328
 8002de4:	fb02 f303 	mul.w	r3, r2, r3
 8002de8:	68ba      	ldr	r2, [r7, #8]
 8002dea:	441a      	add	r2, r3
 8002dec:	460b      	mov	r3, r1
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	b2d9      	uxtb	r1, r3
 8002df4:	7a13      	ldrb	r3, [r2, #8]
 8002df6:	f361 0300 	bfi	r3, r1, #0, #1
 8002dfa:	7213      	strb	r3, [r2, #8]
    ic[curr_ic].rx_cfga.owrng    = (((ic[curr_ic].configa.rx_data[2] & 0x40) >> 6));
 8002dfc:	7dbb      	ldrb	r3, [r7, #22]
 8002dfe:	f44f 724a 	mov.w	r2, #808	; 0x328
 8002e02:	fb02 f303 	mul.w	r3, r2, r3
 8002e06:	68ba      	ldr	r2, [r7, #8]
 8002e08:	4413      	add	r3, r2
 8002e0a:	f893 3127 	ldrb.w	r3, [r3, #295]	; 0x127
 8002e0e:	1199      	asrs	r1, r3, #6
 8002e10:	7dbb      	ldrb	r3, [r7, #22]
 8002e12:	f44f 724a 	mov.w	r2, #808	; 0x328
 8002e16:	fb02 f303 	mul.w	r3, r2, r3
 8002e1a:	68ba      	ldr	r2, [r7, #8]
 8002e1c:	441a      	add	r2, r3
 8002e1e:	460b      	mov	r3, r1
 8002e20:	f003 0301 	and.w	r3, r3, #1
 8002e24:	b2d9      	uxtb	r1, r3
 8002e26:	7a13      	ldrb	r3, [r2, #8]
 8002e28:	f361 0341 	bfi	r3, r1, #1, #1
 8002e2c:	7213      	strb	r3, [r2, #8]
    ic[curr_ic].rx_cfga.owa    = ( (ic[curr_ic].configa.rx_data[2] & 0x38) >> 3);
 8002e2e:	7dbb      	ldrb	r3, [r7, #22]
 8002e30:	f44f 724a 	mov.w	r2, #808	; 0x328
 8002e34:	fb02 f303 	mul.w	r3, r2, r3
 8002e38:	68ba      	ldr	r2, [r7, #8]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	f893 3127 	ldrb.w	r3, [r3, #295]	; 0x127
 8002e40:	10d9      	asrs	r1, r3, #3
 8002e42:	7dbb      	ldrb	r3, [r7, #22]
 8002e44:	f44f 724a 	mov.w	r2, #808	; 0x328
 8002e48:	fb02 f303 	mul.w	r3, r2, r3
 8002e4c:	68ba      	ldr	r2, [r7, #8]
 8002e4e:	441a      	add	r2, r3
 8002e50:	460b      	mov	r3, r1
 8002e52:	f003 0307 	and.w	r3, r3, #7
 8002e56:	b2d9      	uxtb	r1, r3
 8002e58:	7a13      	ldrb	r3, [r2, #8]
 8002e5a:	f361 0384 	bfi	r3, r1, #2, #3
 8002e5e:	7213      	strb	r3, [r2, #8]

    ic[curr_ic].rx_cfga.gpo        = ( (ic[curr_ic].configa.rx_data[3] & 0xFF)| ((ic[curr_ic].configa.rx_data[4] & 0x03) << 8) );
 8002e60:	7dbb      	ldrb	r3, [r7, #22]
 8002e62:	f44f 724a 	mov.w	r2, #808	; 0x328
 8002e66:	fb02 f303 	mul.w	r3, r2, r3
 8002e6a:	68ba      	ldr	r2, [r7, #8]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 8002e72:	b21a      	sxth	r2, r3
 8002e74:	7dbb      	ldrb	r3, [r7, #22]
 8002e76:	f44f 714a 	mov.w	r1, #808	; 0x328
 8002e7a:	fb01 f303 	mul.w	r3, r1, r3
 8002e7e:	68b9      	ldr	r1, [r7, #8]
 8002e80:	440b      	add	r3, r1
 8002e82:	f893 3129 	ldrb.w	r3, [r3, #297]	; 0x129
 8002e86:	021b      	lsls	r3, r3, #8
 8002e88:	b21b      	sxth	r3, r3
 8002e8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e8e:	b21b      	sxth	r3, r3
 8002e90:	4313      	orrs	r3, r2
 8002e92:	b219      	sxth	r1, r3
 8002e94:	7dbb      	ldrb	r3, [r7, #22]
 8002e96:	f44f 724a 	mov.w	r2, #808	; 0x328
 8002e9a:	fb02 f303 	mul.w	r3, r2, r3
 8002e9e:	68ba      	ldr	r2, [r7, #8]
 8002ea0:	441a      	add	r2, r3
 8002ea2:	460b      	mov	r3, r1
 8002ea4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ea8:	b299      	uxth	r1, r3
 8002eaa:	8913      	ldrh	r3, [r2, #8]
 8002eac:	f361 134e 	bfi	r3, r1, #5, #10
 8002eb0:	8113      	strh	r3, [r2, #8]

    ic[curr_ic].rx_cfga.snap   = ((ic[curr_ic].configa.rx_data[5] & 0x20) >> 5);
 8002eb2:	7dbb      	ldrb	r3, [r7, #22]
 8002eb4:	f44f 724a 	mov.w	r2, #808	; 0x328
 8002eb8:	fb02 f303 	mul.w	r3, r2, r3
 8002ebc:	68ba      	ldr	r2, [r7, #8]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 8002ec4:	1159      	asrs	r1, r3, #5
 8002ec6:	7dbb      	ldrb	r3, [r7, #22]
 8002ec8:	f44f 724a 	mov.w	r2, #808	; 0x328
 8002ecc:	fb02 f303 	mul.w	r3, r2, r3
 8002ed0:	68ba      	ldr	r2, [r7, #8]
 8002ed2:	441a      	add	r2, r3
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	b2d9      	uxtb	r1, r3
 8002edc:	7a53      	ldrb	r3, [r2, #9]
 8002ede:	f361 13c7 	bfi	r3, r1, #7, #1
 8002ee2:	7253      	strb	r3, [r2, #9]
    ic[curr_ic].rx_cfga.mute_st   = ((ic[curr_ic].configa.rx_data[5] & 0x10) >> 4);
 8002ee4:	7dbb      	ldrb	r3, [r7, #22]
 8002ee6:	f44f 724a 	mov.w	r2, #808	; 0x328
 8002eea:	fb02 f303 	mul.w	r3, r2, r3
 8002eee:	68ba      	ldr	r2, [r7, #8]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 8002ef6:	1119      	asrs	r1, r3, #4
 8002ef8:	7dbb      	ldrb	r3, [r7, #22]
 8002efa:	f44f 724a 	mov.w	r2, #808	; 0x328
 8002efe:	fb02 f303 	mul.w	r3, r2, r3
 8002f02:	68ba      	ldr	r2, [r7, #8]
 8002f04:	441a      	add	r2, r3
 8002f06:	460b      	mov	r3, r1
 8002f08:	f003 0301 	and.w	r3, r3, #1
 8002f0c:	b2d9      	uxtb	r1, r3
 8002f0e:	7a93      	ldrb	r3, [r2, #10]
 8002f10:	f361 0300 	bfi	r3, r1, #0, #1
 8002f14:	7293      	strb	r3, [r2, #10]
    ic[curr_ic].rx_cfga.comm_bk   = ((ic[curr_ic].configa.rx_data[5] & 0x08) >> 3);
 8002f16:	7dbb      	ldrb	r3, [r7, #22]
 8002f18:	f44f 724a 	mov.w	r2, #808	; 0x328
 8002f1c:	fb02 f303 	mul.w	r3, r2, r3
 8002f20:	68ba      	ldr	r2, [r7, #8]
 8002f22:	4413      	add	r3, r2
 8002f24:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 8002f28:	10d9      	asrs	r1, r3, #3
 8002f2a:	7dbb      	ldrb	r3, [r7, #22]
 8002f2c:	f44f 724a 	mov.w	r2, #808	; 0x328
 8002f30:	fb02 f303 	mul.w	r3, r2, r3
 8002f34:	68ba      	ldr	r2, [r7, #8]
 8002f36:	441a      	add	r2, r3
 8002f38:	460b      	mov	r3, r1
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	b2d9      	uxtb	r1, r3
 8002f40:	7a93      	ldrb	r3, [r2, #10]
 8002f42:	f361 0341 	bfi	r3, r1, #1, #1
 8002f46:	7293      	strb	r3, [r2, #10]
    ic[curr_ic].rx_cfga.fc   = ((ic[curr_ic].configa.rx_data[5] & 0x07) >> 0);
 8002f48:	7dbb      	ldrb	r3, [r7, #22]
 8002f4a:	f44f 724a 	mov.w	r2, #808	; 0x328
 8002f4e:	fb02 f303 	mul.w	r3, r2, r3
 8002f52:	68ba      	ldr	r2, [r7, #8]
 8002f54:	4413      	add	r3, r2
 8002f56:	f893 112a 	ldrb.w	r1, [r3, #298]	; 0x12a
 8002f5a:	7dbb      	ldrb	r3, [r7, #22]
 8002f5c:	f44f 724a 	mov.w	r2, #808	; 0x328
 8002f60:	fb02 f303 	mul.w	r3, r2, r3
 8002f64:	68ba      	ldr	r2, [r7, #8]
 8002f66:	441a      	add	r2, r3
 8002f68:	460b      	mov	r3, r1
 8002f6a:	f003 0307 	and.w	r3, r3, #7
 8002f6e:	b2d9      	uxtb	r1, r3
 8002f70:	7a93      	ldrb	r3, [r2, #10]
 8002f72:	f361 0384 	bfi	r3, r1, #2, #3
 8002f76:	7293      	strb	r3, [r2, #10]
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8002f78:	7dbb      	ldrb	r3, [r7, #22]
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	75bb      	strb	r3, [r7, #22]
 8002f7e:	7dba      	ldrb	r2, [r7, #22]
 8002f80:	7bfb      	ldrb	r3, [r7, #15]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	f4ff aec8 	bcc.w	8002d18 <adBms6830ParseConfiga+0x18>
  }
}
 8002f88:	bf00      	nop
 8002f8a:	bf00      	nop
 8002f8c:	3718      	adds	r7, #24
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <adBms6830ParseConfigb>:
 * @return None
 *
 *******************************************************************************
*/
void adBms6830ParseConfigb(uint8_t tIC, cell_asic *ic, uint8_t *data)
{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b086      	sub	sp, #24
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	4603      	mov	r3, r0
 8002f9a:	60b9      	str	r1, [r7, #8]
 8002f9c:	607a      	str	r2, [r7, #4]
 8002f9e:	73fb      	strb	r3, [r7, #15]
  uint8_t address = 0;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	75fb      	strb	r3, [r7, #23]
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	75bb      	strb	r3, [r7, #22]
 8002fa8:	e0c7      	b.n	800313a <adBms6830ParseConfigb+0x1a8>
  {
    memcpy(&ic[curr_ic].configb.rx_data[0], &data[address], RX_DATA); /* dst , src , size */
 8002faa:	7dbb      	ldrb	r3, [r7, #22]
 8002fac:	f44f 724a 	mov.w	r2, #808	; 0x328
 8002fb0:	fb02 f303 	mul.w	r3, r2, r3
 8002fb4:	68ba      	ldr	r2, [r7, #8]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	f203 1033 	addw	r0, r3, #307	; 0x133
 8002fbc:	7dfb      	ldrb	r3, [r7, #23]
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	2208      	movs	r2, #8
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	f018 fcac 	bl	801b922 <memcpy>
    address = ((curr_ic+1) * (RX_DATA));
 8002fca:	7dbb      	ldrb	r3, [r7, #22]
 8002fcc:	3301      	adds	r3, #1
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	00db      	lsls	r3, r3, #3
 8002fd2:	75fb      	strb	r3, [r7, #23]

    ic[curr_ic].rx_cfgb.vuv = ((ic[curr_ic].configb.rx_data[0])  | ((ic[curr_ic].configb.rx_data[1] & 0x0F) << 8));
 8002fd4:	7dbb      	ldrb	r3, [r7, #22]
 8002fd6:	f44f 724a 	mov.w	r2, #808	; 0x328
 8002fda:	fb02 f303 	mul.w	r3, r2, r3
 8002fde:	68ba      	ldr	r2, [r7, #8]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	f893 3133 	ldrb.w	r3, [r3, #307]	; 0x133
 8002fe6:	b21a      	sxth	r2, r3
 8002fe8:	7dbb      	ldrb	r3, [r7, #22]
 8002fea:	f44f 714a 	mov.w	r1, #808	; 0x328
 8002fee:	fb01 f303 	mul.w	r3, r1, r3
 8002ff2:	68b9      	ldr	r1, [r7, #8]
 8002ff4:	440b      	add	r3, r1
 8002ff6:	f893 3134 	ldrb.w	r3, [r3, #308]	; 0x134
 8002ffa:	021b      	lsls	r3, r3, #8
 8002ffc:	b21b      	sxth	r3, r3
 8002ffe:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003002:	b21b      	sxth	r3, r3
 8003004:	4313      	orrs	r3, r2
 8003006:	b219      	sxth	r1, r3
 8003008:	7dbb      	ldrb	r3, [r7, #22]
 800300a:	f44f 724a 	mov.w	r2, #808	; 0x328
 800300e:	fb02 f303 	mul.w	r3, r2, r3
 8003012:	68ba      	ldr	r2, [r7, #8]
 8003014:	4413      	add	r3, r2
 8003016:	b28a      	uxth	r2, r1
 8003018:	829a      	strh	r2, [r3, #20]
    ic[curr_ic].rx_cfgb.vov  = (ic[curr_ic].configb.rx_data[2]<<4)+((ic[curr_ic].configb.rx_data[1] &0xF0)>>4)  ;
 800301a:	7dbb      	ldrb	r3, [r7, #22]
 800301c:	f44f 724a 	mov.w	r2, #808	; 0x328
 8003020:	fb02 f303 	mul.w	r3, r2, r3
 8003024:	68ba      	ldr	r2, [r7, #8]
 8003026:	4413      	add	r3, r2
 8003028:	f893 3135 	ldrb.w	r3, [r3, #309]	; 0x135
 800302c:	b29b      	uxth	r3, r3
 800302e:	011b      	lsls	r3, r3, #4
 8003030:	b299      	uxth	r1, r3
 8003032:	7dbb      	ldrb	r3, [r7, #22]
 8003034:	f44f 724a 	mov.w	r2, #808	; 0x328
 8003038:	fb02 f303 	mul.w	r3, r2, r3
 800303c:	68ba      	ldr	r2, [r7, #8]
 800303e:	4413      	add	r3, r2
 8003040:	f893 3134 	ldrb.w	r3, [r3, #308]	; 0x134
 8003044:	091b      	lsrs	r3, r3, #4
 8003046:	b2db      	uxtb	r3, r3
 8003048:	b29a      	uxth	r2, r3
 800304a:	7dbb      	ldrb	r3, [r7, #22]
 800304c:	f44f 704a 	mov.w	r0, #808	; 0x328
 8003050:	fb00 f303 	mul.w	r3, r0, r3
 8003054:	68b8      	ldr	r0, [r7, #8]
 8003056:	4403      	add	r3, r0
 8003058:	440a      	add	r2, r1
 800305a:	b292      	uxth	r2, r2
 800305c:	82da      	strh	r2, [r3, #22]
    ic[curr_ic].rx_cfgb.dtmen = (((ic[curr_ic].configb.rx_data[3] & 0x80) >> 7));
 800305e:	7dbb      	ldrb	r3, [r7, #22]
 8003060:	f44f 724a 	mov.w	r2, #808	; 0x328
 8003064:	fb02 f303 	mul.w	r3, r2, r3
 8003068:	68ba      	ldr	r2, [r7, #8]
 800306a:	4413      	add	r3, r2
 800306c:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
 8003070:	09db      	lsrs	r3, r3, #7
 8003072:	b2d9      	uxtb	r1, r3
 8003074:	7dbb      	ldrb	r3, [r7, #22]
 8003076:	f44f 724a 	mov.w	r2, #808	; 0x328
 800307a:	fb02 f303 	mul.w	r3, r2, r3
 800307e:	68ba      	ldr	r2, [r7, #8]
 8003080:	441a      	add	r2, r3
 8003082:	460b      	mov	r3, r1
 8003084:	f003 0301 	and.w	r3, r3, #1
 8003088:	b2d9      	uxtb	r1, r3
 800308a:	7e13      	ldrb	r3, [r2, #24]
 800308c:	f361 0300 	bfi	r3, r1, #0, #1
 8003090:	7613      	strb	r3, [r2, #24]
    ic[curr_ic].rx_cfgb.dtrng= ((ic[curr_ic].configb.rx_data[3] & 0x40) >> 6);
 8003092:	7dbb      	ldrb	r3, [r7, #22]
 8003094:	f44f 724a 	mov.w	r2, #808	; 0x328
 8003098:	fb02 f303 	mul.w	r3, r2, r3
 800309c:	68ba      	ldr	r2, [r7, #8]
 800309e:	4413      	add	r3, r2
 80030a0:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
 80030a4:	1199      	asrs	r1, r3, #6
 80030a6:	7dbb      	ldrb	r3, [r7, #22]
 80030a8:	f44f 724a 	mov.w	r2, #808	; 0x328
 80030ac:	fb02 f303 	mul.w	r3, r2, r3
 80030b0:	68ba      	ldr	r2, [r7, #8]
 80030b2:	441a      	add	r2, r3
 80030b4:	460b      	mov	r3, r1
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	b2d9      	uxtb	r1, r3
 80030bc:	7e13      	ldrb	r3, [r2, #24]
 80030be:	f361 0341 	bfi	r3, r1, #1, #1
 80030c2:	7613      	strb	r3, [r2, #24]
    ic[curr_ic].rx_cfgb.dcto   = ((ic[curr_ic].configb.rx_data[3] & 0x3F));
 80030c4:	7dbb      	ldrb	r3, [r7, #22]
 80030c6:	f44f 724a 	mov.w	r2, #808	; 0x328
 80030ca:	fb02 f303 	mul.w	r3, r2, r3
 80030ce:	68ba      	ldr	r2, [r7, #8]
 80030d0:	4413      	add	r3, r2
 80030d2:	f893 1136 	ldrb.w	r1, [r3, #310]	; 0x136
 80030d6:	7dbb      	ldrb	r3, [r7, #22]
 80030d8:	f44f 724a 	mov.w	r2, #808	; 0x328
 80030dc:	fb02 f303 	mul.w	r3, r2, r3
 80030e0:	68ba      	ldr	r2, [r7, #8]
 80030e2:	441a      	add	r2, r3
 80030e4:	460b      	mov	r3, r1
 80030e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030ea:	b2d9      	uxtb	r1, r3
 80030ec:	7e13      	ldrb	r3, [r2, #24]
 80030ee:	f361 0387 	bfi	r3, r1, #2, #6
 80030f2:	7613      	strb	r3, [r2, #24]
    ic[curr_ic].rx_cfgb.dcc = ((ic[curr_ic].configb.rx_data[4]) | ((ic[curr_ic].configb.rx_data[5] & 0xFF) << 8));
 80030f4:	7dbb      	ldrb	r3, [r7, #22]
 80030f6:	f44f 724a 	mov.w	r2, #808	; 0x328
 80030fa:	fb02 f303 	mul.w	r3, r2, r3
 80030fe:	68ba      	ldr	r2, [r7, #8]
 8003100:	4413      	add	r3, r2
 8003102:	f893 3137 	ldrb.w	r3, [r3, #311]	; 0x137
 8003106:	b21a      	sxth	r2, r3
 8003108:	7dbb      	ldrb	r3, [r7, #22]
 800310a:	f44f 714a 	mov.w	r1, #808	; 0x328
 800310e:	fb01 f303 	mul.w	r3, r1, r3
 8003112:	68b9      	ldr	r1, [r7, #8]
 8003114:	440b      	add	r3, r1
 8003116:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 800311a:	021b      	lsls	r3, r3, #8
 800311c:	b21b      	sxth	r3, r3
 800311e:	4313      	orrs	r3, r2
 8003120:	b219      	sxth	r1, r3
 8003122:	7dbb      	ldrb	r3, [r7, #22]
 8003124:	f44f 724a 	mov.w	r2, #808	; 0x328
 8003128:	fb02 f303 	mul.w	r3, r2, r3
 800312c:	68ba      	ldr	r2, [r7, #8]
 800312e:	4413      	add	r3, r2
 8003130:	b28a      	uxth	r2, r1
 8003132:	835a      	strh	r2, [r3, #26]
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8003134:	7dbb      	ldrb	r3, [r7, #22]
 8003136:	3301      	adds	r3, #1
 8003138:	75bb      	strb	r3, [r7, #22]
 800313a:	7dba      	ldrb	r2, [r7, #22]
 800313c:	7bfb      	ldrb	r3, [r7, #15]
 800313e:	429a      	cmp	r2, r3
 8003140:	f4ff af33 	bcc.w	8002faa <adBms6830ParseConfigb+0x18>
  }
}
 8003144:	bf00      	nop
 8003146:	bf00      	nop
 8003148:	3718      	adds	r7, #24
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <adBms6830ParseConfig>:
 * @return None
 *
 *******************************************************************************
*/
void adBms6830ParseConfig(uint8_t tIC, cell_asic *ic, GRP grp, uint8_t *data)
{
 800314e:	b580      	push	{r7, lr}
 8003150:	b084      	sub	sp, #16
 8003152:	af00      	add	r7, sp, #0
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	607b      	str	r3, [r7, #4]
 8003158:	4603      	mov	r3, r0
 800315a:	73fb      	strb	r3, [r7, #15]
 800315c:	4613      	mov	r3, r2
 800315e:	73bb      	strb	r3, [r7, #14]
  switch (grp)
 8003160:	7bbb      	ldrb	r3, [r7, #14]
 8003162:	2b01      	cmp	r3, #1
 8003164:	d002      	beq.n	800316c <adBms6830ParseConfig+0x1e>
 8003166:	2b02      	cmp	r3, #2
 8003168:	d007      	beq.n	800317a <adBms6830ParseConfig+0x2c>
  case B:
    adBms6830ParseConfigb(tIC, &ic[0], &data[0]);
    break;

  default:
    break;
 800316a:	e00d      	b.n	8003188 <adBms6830ParseConfig+0x3a>
    adBms6830ParseConfiga(tIC, &ic[0], &data[0]);
 800316c:	7bfb      	ldrb	r3, [r7, #15]
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	68b9      	ldr	r1, [r7, #8]
 8003172:	4618      	mov	r0, r3
 8003174:	f7ff fdc4 	bl	8002d00 <adBms6830ParseConfiga>
    break;
 8003178:	e006      	b.n	8003188 <adBms6830ParseConfig+0x3a>
    adBms6830ParseConfigb(tIC, &ic[0], &data[0]);
 800317a:	7bfb      	ldrb	r3, [r7, #15]
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	68b9      	ldr	r1, [r7, #8]
 8003180:	4618      	mov	r0, r3
 8003182:	f7ff ff06 	bl	8002f92 <adBms6830ParseConfigb>
    break;
 8003186:	bf00      	nop
  }
}
 8003188:	bf00      	nop
 800318a:	3710      	adds	r7, #16
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <adBms6830ParseCell>:
 *
 *******************************************************************************
*/
/* Parse cell voltages */
void adBms6830ParseCell(uint8_t tIC, cell_asic *ic, GRP grp, uint8_t *cv_data)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0
 8003196:	60b9      	str	r1, [r7, #8]
 8003198:	607b      	str	r3, [r7, #4]
 800319a:	4603      	mov	r3, r0
 800319c:	73fb      	strb	r3, [r7, #15]
 800319e:	4613      	mov	r3, r2
 80031a0:	73bb      	strb	r3, [r7, #14]
  uint8_t *data, data_size, address = 0;
 80031a2:	2300      	movs	r3, #0
 80031a4:	75bb      	strb	r3, [r7, #22]
  if(grp == ALL_GRP){data_size = RDCVALL_SIZE;}
 80031a6:	7bbb      	ldrb	r3, [r7, #14]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d102      	bne.n	80031b2 <adBms6830ParseCell+0x22>
 80031ac:	2322      	movs	r3, #34	; 0x22
 80031ae:	75fb      	strb	r3, [r7, #23]
 80031b0:	e001      	b.n	80031b6 <adBms6830ParseCell+0x26>
  else {data_size = RX_DATA;}
 80031b2:	2308      	movs	r3, #8
 80031b4:	75fb      	strb	r3, [r7, #23]
  data = (uint8_t *)calloc(data_size, sizeof(uint8_t));
 80031b6:	7dfb      	ldrb	r3, [r7, #23]
 80031b8:	2101      	movs	r1, #1
 80031ba:	4618      	mov	r0, r3
 80031bc:	f017 f9aa 	bl	801a514 <calloc>
 80031c0:	4603      	mov	r3, r0
 80031c2:	613b      	str	r3, [r7, #16]
  if(data == NULL)
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d105      	bne.n	80031d6 <adBms6830ParseCell+0x46>
  {
    #ifdef MBED
    pc.printf(" Failed to allocate parse cell memory \n");
    #else
    printf(" Failed to allocate parse cell memory \n");
 80031ca:	4894      	ldr	r0, [pc, #592]	; (800341c <adBms6830ParseCell+0x28c>)
 80031cc:	f018 fa1a 	bl	801b604 <puts>
    #endif
    exit(0);
 80031d0:	2000      	movs	r0, #0
 80031d2:	f017 f9bd 	bl	801a550 <exit>
  }
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 80031d6:	2300      	movs	r3, #0
 80031d8:	757b      	strb	r3, [r7, #21]
 80031da:	e2c9      	b.n	8003770 <adBms6830ParseCell+0x5e0>
  {
    memcpy(&data[0], &cv_data[address], data_size); /* dst , src , size */
 80031dc:	7dbb      	ldrb	r3, [r7, #22]
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	4413      	add	r3, r2
 80031e2:	7dfa      	ldrb	r2, [r7, #23]
 80031e4:	4619      	mov	r1, r3
 80031e6:	6938      	ldr	r0, [r7, #16]
 80031e8:	f018 fb9b 	bl	801b922 <memcpy>
    address = ((curr_ic+1) * (data_size));
 80031ec:	7d7b      	ldrb	r3, [r7, #21]
 80031ee:	3301      	adds	r3, #1
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	7dfa      	ldrb	r2, [r7, #23]
 80031f4:	fb12 f303 	smulbb	r3, r2, r3
 80031f8:	75bb      	strb	r3, [r7, #22]
    switch (grp)
 80031fa:	7bbb      	ldrb	r3, [r7, #14]
 80031fc:	2b06      	cmp	r3, #6
 80031fe:	f200 82b3 	bhi.w	8003768 <adBms6830ParseCell+0x5d8>
 8003202:	a201      	add	r2, pc, #4	; (adr r2, 8003208 <adBms6830ParseCell+0x78>)
 8003204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003208:	080034c9 	.word	0x080034c9
 800320c:	08003225 	.word	0x08003225
 8003210:	080032a3 	.word	0x080032a3
 8003214:	08003321 	.word	0x08003321
 8003218:	0800339f 	.word	0x0800339f
 800321c:	08003421 	.word	0x08003421
 8003220:	0800349f 	.word	0x0800349f
    {
    case A: /* Cell Register group A */
      ic[curr_ic].cell.c_codes[0] = (data[0] + (data[1] << 8));
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	b29a      	uxth	r2, r3
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	3301      	adds	r3, #1
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	b29b      	uxth	r3, r3
 8003232:	021b      	lsls	r3, r3, #8
 8003234:	b29b      	uxth	r3, r3
 8003236:	4413      	add	r3, r2
 8003238:	b299      	uxth	r1, r3
 800323a:	7d7b      	ldrb	r3, [r7, #21]
 800323c:	f44f 724a 	mov.w	r2, #808	; 0x328
 8003240:	fb02 f303 	mul.w	r3, r2, r3
 8003244:	68ba      	ldr	r2, [r7, #8]
 8003246:	4413      	add	r3, r2
 8003248:	b20a      	sxth	r2, r1
 800324a:	841a      	strh	r2, [r3, #32]
      ic[curr_ic].cell.c_codes[1] = (data[2] + (data[3] << 8));
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	3302      	adds	r3, #2
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	b29a      	uxth	r2, r3
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	3303      	adds	r3, #3
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	b29b      	uxth	r3, r3
 800325c:	021b      	lsls	r3, r3, #8
 800325e:	b29b      	uxth	r3, r3
 8003260:	4413      	add	r3, r2
 8003262:	b299      	uxth	r1, r3
 8003264:	7d7b      	ldrb	r3, [r7, #21]
 8003266:	f44f 724a 	mov.w	r2, #808	; 0x328
 800326a:	fb02 f303 	mul.w	r3, r2, r3
 800326e:	68ba      	ldr	r2, [r7, #8]
 8003270:	4413      	add	r3, r2
 8003272:	b20a      	sxth	r2, r1
 8003274:	845a      	strh	r2, [r3, #34]	; 0x22
      ic[curr_ic].cell.c_codes[2] = (data[4] + (data[5] << 8));
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	3304      	adds	r3, #4
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	b29a      	uxth	r2, r3
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	3305      	adds	r3, #5
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	b29b      	uxth	r3, r3
 8003286:	021b      	lsls	r3, r3, #8
 8003288:	b29b      	uxth	r3, r3
 800328a:	4413      	add	r3, r2
 800328c:	b299      	uxth	r1, r3
 800328e:	7d7b      	ldrb	r3, [r7, #21]
 8003290:	f44f 724a 	mov.w	r2, #808	; 0x328
 8003294:	fb02 f303 	mul.w	r3, r2, r3
 8003298:	68ba      	ldr	r2, [r7, #8]
 800329a:	4413      	add	r3, r2
 800329c:	b20a      	sxth	r2, r1
 800329e:	849a      	strh	r2, [r3, #36]	; 0x24
      break;
 80032a0:	e263      	b.n	800376a <adBms6830ParseCell+0x5da>

    case B: /* Cell Register group B */
      ic[curr_ic].cell.c_codes[3] = (data[0] + (data[1] << 8));
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	b29a      	uxth	r2, r3
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	3301      	adds	r3, #1
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	021b      	lsls	r3, r3, #8
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	4413      	add	r3, r2
 80032b6:	b299      	uxth	r1, r3
 80032b8:	7d7b      	ldrb	r3, [r7, #21]
 80032ba:	f44f 724a 	mov.w	r2, #808	; 0x328
 80032be:	fb02 f303 	mul.w	r3, r2, r3
 80032c2:	68ba      	ldr	r2, [r7, #8]
 80032c4:	4413      	add	r3, r2
 80032c6:	b20a      	sxth	r2, r1
 80032c8:	84da      	strh	r2, [r3, #38]	; 0x26
      ic[curr_ic].cell.c_codes[4] = (data[2] + (data[3] << 8));
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	3302      	adds	r3, #2
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	b29a      	uxth	r2, r3
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	3303      	adds	r3, #3
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	b29b      	uxth	r3, r3
 80032da:	021b      	lsls	r3, r3, #8
 80032dc:	b29b      	uxth	r3, r3
 80032de:	4413      	add	r3, r2
 80032e0:	b299      	uxth	r1, r3
 80032e2:	7d7b      	ldrb	r3, [r7, #21]
 80032e4:	f44f 724a 	mov.w	r2, #808	; 0x328
 80032e8:	fb02 f303 	mul.w	r3, r2, r3
 80032ec:	68ba      	ldr	r2, [r7, #8]
 80032ee:	4413      	add	r3, r2
 80032f0:	b20a      	sxth	r2, r1
 80032f2:	851a      	strh	r2, [r3, #40]	; 0x28
      ic[curr_ic].cell.c_codes[5] = (data[4] + (data[5] << 8));
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	3304      	adds	r3, #4
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	b29a      	uxth	r2, r3
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	3305      	adds	r3, #5
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	b29b      	uxth	r3, r3
 8003304:	021b      	lsls	r3, r3, #8
 8003306:	b29b      	uxth	r3, r3
 8003308:	4413      	add	r3, r2
 800330a:	b299      	uxth	r1, r3
 800330c:	7d7b      	ldrb	r3, [r7, #21]
 800330e:	f44f 724a 	mov.w	r2, #808	; 0x328
 8003312:	fb02 f303 	mul.w	r3, r2, r3
 8003316:	68ba      	ldr	r2, [r7, #8]
 8003318:	4413      	add	r3, r2
 800331a:	b20a      	sxth	r2, r1
 800331c:	855a      	strh	r2, [r3, #42]	; 0x2a
      break;
 800331e:	e224      	b.n	800376a <adBms6830ParseCell+0x5da>

    case C: /* Cell Register group C */
      ic[curr_ic].cell.c_codes[6] = (data[0] + (data[1] << 8));
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	b29a      	uxth	r2, r3
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	3301      	adds	r3, #1
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	b29b      	uxth	r3, r3
 800332e:	021b      	lsls	r3, r3, #8
 8003330:	b29b      	uxth	r3, r3
 8003332:	4413      	add	r3, r2
 8003334:	b299      	uxth	r1, r3
 8003336:	7d7b      	ldrb	r3, [r7, #21]
 8003338:	f44f 724a 	mov.w	r2, #808	; 0x328
 800333c:	fb02 f303 	mul.w	r3, r2, r3
 8003340:	68ba      	ldr	r2, [r7, #8]
 8003342:	4413      	add	r3, r2
 8003344:	b20a      	sxth	r2, r1
 8003346:	859a      	strh	r2, [r3, #44]	; 0x2c
      ic[curr_ic].cell.c_codes[7] = (data[2] + (data[3] << 8));
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	3302      	adds	r3, #2
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	b29a      	uxth	r2, r3
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	3303      	adds	r3, #3
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	b29b      	uxth	r3, r3
 8003358:	021b      	lsls	r3, r3, #8
 800335a:	b29b      	uxth	r3, r3
 800335c:	4413      	add	r3, r2
 800335e:	b299      	uxth	r1, r3
 8003360:	7d7b      	ldrb	r3, [r7, #21]
 8003362:	f44f 724a 	mov.w	r2, #808	; 0x328
 8003366:	fb02 f303 	mul.w	r3, r2, r3
 800336a:	68ba      	ldr	r2, [r7, #8]
 800336c:	4413      	add	r3, r2
 800336e:	b20a      	sxth	r2, r1
 8003370:	85da      	strh	r2, [r3, #46]	; 0x2e
      ic[curr_ic].cell.c_codes[8] = (data[4] + (data[5] << 8));
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	3304      	adds	r3, #4
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	b29a      	uxth	r2, r3
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	3305      	adds	r3, #5
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	b29b      	uxth	r3, r3
 8003382:	021b      	lsls	r3, r3, #8
 8003384:	b29b      	uxth	r3, r3
 8003386:	4413      	add	r3, r2
 8003388:	b299      	uxth	r1, r3
 800338a:	7d7b      	ldrb	r3, [r7, #21]
 800338c:	f44f 724a 	mov.w	r2, #808	; 0x328
 8003390:	fb02 f303 	mul.w	r3, r2, r3
 8003394:	68ba      	ldr	r2, [r7, #8]
 8003396:	4413      	add	r3, r2
 8003398:	b20a      	sxth	r2, r1
 800339a:	861a      	strh	r2, [r3, #48]	; 0x30
      break;
 800339c:	e1e5      	b.n	800376a <adBms6830ParseCell+0x5da>

    case D: /* Cell Register group D */
      ic[curr_ic].cell.c_codes[9] =  (data[0] + (data[1] << 8));
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	b29a      	uxth	r2, r3
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	3301      	adds	r3, #1
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	021b      	lsls	r3, r3, #8
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	4413      	add	r3, r2
 80033b2:	b299      	uxth	r1, r3
 80033b4:	7d7b      	ldrb	r3, [r7, #21]
 80033b6:	f44f 724a 	mov.w	r2, #808	; 0x328
 80033ba:	fb02 f303 	mul.w	r3, r2, r3
 80033be:	68ba      	ldr	r2, [r7, #8]
 80033c0:	4413      	add	r3, r2
 80033c2:	b20a      	sxth	r2, r1
 80033c4:	865a      	strh	r2, [r3, #50]	; 0x32
      ic[curr_ic].cell.c_codes[10] = (data[2] + (data[3] << 8));
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	3302      	adds	r3, #2
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	b29a      	uxth	r2, r3
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	3303      	adds	r3, #3
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	021b      	lsls	r3, r3, #8
 80033d8:	b29b      	uxth	r3, r3
 80033da:	4413      	add	r3, r2
 80033dc:	b299      	uxth	r1, r3
 80033de:	7d7b      	ldrb	r3, [r7, #21]
 80033e0:	f44f 724a 	mov.w	r2, #808	; 0x328
 80033e4:	fb02 f303 	mul.w	r3, r2, r3
 80033e8:	68ba      	ldr	r2, [r7, #8]
 80033ea:	4413      	add	r3, r2
 80033ec:	b20a      	sxth	r2, r1
 80033ee:	869a      	strh	r2, [r3, #52]	; 0x34
      ic[curr_ic].cell.c_codes[11] = (data[4] + (data[5] << 8));
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	3304      	adds	r3, #4
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	b29a      	uxth	r2, r3
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	3305      	adds	r3, #5
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	b29b      	uxth	r3, r3
 8003400:	021b      	lsls	r3, r3, #8
 8003402:	b29b      	uxth	r3, r3
 8003404:	4413      	add	r3, r2
 8003406:	b299      	uxth	r1, r3
 8003408:	7d7b      	ldrb	r3, [r7, #21]
 800340a:	f44f 724a 	mov.w	r2, #808	; 0x328
 800340e:	fb02 f303 	mul.w	r3, r2, r3
 8003412:	68ba      	ldr	r2, [r7, #8]
 8003414:	4413      	add	r3, r2
 8003416:	b20a      	sxth	r2, r1
 8003418:	86da      	strh	r2, [r3, #54]	; 0x36
      break;
 800341a:	e1a6      	b.n	800376a <adBms6830ParseCell+0x5da>
 800341c:	0801fcf8 	.word	0x0801fcf8

    case E: /* Cell Register group E */
      ic[curr_ic].cell.c_codes[12] = (data[0] + (data[1] << 8));
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	b29a      	uxth	r2, r3
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	3301      	adds	r3, #1
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	b29b      	uxth	r3, r3
 800342e:	021b      	lsls	r3, r3, #8
 8003430:	b29b      	uxth	r3, r3
 8003432:	4413      	add	r3, r2
 8003434:	b299      	uxth	r1, r3
 8003436:	7d7b      	ldrb	r3, [r7, #21]
 8003438:	f44f 724a 	mov.w	r2, #808	; 0x328
 800343c:	fb02 f303 	mul.w	r3, r2, r3
 8003440:	68ba      	ldr	r2, [r7, #8]
 8003442:	4413      	add	r3, r2
 8003444:	b20a      	sxth	r2, r1
 8003446:	871a      	strh	r2, [r3, #56]	; 0x38
      ic[curr_ic].cell.c_codes[13] = (data[2] + (data[3] << 8));
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	3302      	adds	r3, #2
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	b29a      	uxth	r2, r3
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	3303      	adds	r3, #3
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	b29b      	uxth	r3, r3
 8003458:	021b      	lsls	r3, r3, #8
 800345a:	b29b      	uxth	r3, r3
 800345c:	4413      	add	r3, r2
 800345e:	b299      	uxth	r1, r3
 8003460:	7d7b      	ldrb	r3, [r7, #21]
 8003462:	f44f 724a 	mov.w	r2, #808	; 0x328
 8003466:	fb02 f303 	mul.w	r3, r2, r3
 800346a:	68ba      	ldr	r2, [r7, #8]
 800346c:	4413      	add	r3, r2
 800346e:	b20a      	sxth	r2, r1
 8003470:	875a      	strh	r2, [r3, #58]	; 0x3a
      ic[curr_ic].cell.c_codes[14] = (data[4] + (data[5] << 8));
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	3304      	adds	r3, #4
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	b29a      	uxth	r2, r3
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	3305      	adds	r3, #5
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	b29b      	uxth	r3, r3
 8003482:	021b      	lsls	r3, r3, #8
 8003484:	b29b      	uxth	r3, r3
 8003486:	4413      	add	r3, r2
 8003488:	b299      	uxth	r1, r3
 800348a:	7d7b      	ldrb	r3, [r7, #21]
 800348c:	f44f 724a 	mov.w	r2, #808	; 0x328
 8003490:	fb02 f303 	mul.w	r3, r2, r3
 8003494:	68ba      	ldr	r2, [r7, #8]
 8003496:	4413      	add	r3, r2
 8003498:	b20a      	sxth	r2, r1
 800349a:	879a      	strh	r2, [r3, #60]	; 0x3c
      break;
 800349c:	e165      	b.n	800376a <adBms6830ParseCell+0x5da>

    case F: /* Cell Register group F */
      ic[curr_ic].cell.c_codes[15] = (data[0] + (data[1] << 8));
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	b29a      	uxth	r2, r3
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	3301      	adds	r3, #1
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	021b      	lsls	r3, r3, #8
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	4413      	add	r3, r2
 80034b2:	b299      	uxth	r1, r3
 80034b4:	7d7b      	ldrb	r3, [r7, #21]
 80034b6:	f44f 724a 	mov.w	r2, #808	; 0x328
 80034ba:	fb02 f303 	mul.w	r3, r2, r3
 80034be:	68ba      	ldr	r2, [r7, #8]
 80034c0:	4413      	add	r3, r2
 80034c2:	b20a      	sxth	r2, r1
 80034c4:	87da      	strh	r2, [r3, #62]	; 0x3e
      break;
 80034c6:	e150      	b.n	800376a <adBms6830ParseCell+0x5da>

    case ALL_GRP: /* Cell Register group ALL */
      ic[curr_ic].cell.c_codes[0] = (data[0] + (data[1] << 8));
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	b29a      	uxth	r2, r3
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	3301      	adds	r3, #1
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	021b      	lsls	r3, r3, #8
 80034d8:	b29b      	uxth	r3, r3
 80034da:	4413      	add	r3, r2
 80034dc:	b299      	uxth	r1, r3
 80034de:	7d7b      	ldrb	r3, [r7, #21]
 80034e0:	f44f 724a 	mov.w	r2, #808	; 0x328
 80034e4:	fb02 f303 	mul.w	r3, r2, r3
 80034e8:	68ba      	ldr	r2, [r7, #8]
 80034ea:	4413      	add	r3, r2
 80034ec:	b20a      	sxth	r2, r1
 80034ee:	841a      	strh	r2, [r3, #32]
      ic[curr_ic].cell.c_codes[1] = (data[2] + (data[3] << 8));
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	3302      	adds	r3, #2
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	b29a      	uxth	r2, r3
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	3303      	adds	r3, #3
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	b29b      	uxth	r3, r3
 8003500:	021b      	lsls	r3, r3, #8
 8003502:	b29b      	uxth	r3, r3
 8003504:	4413      	add	r3, r2
 8003506:	b299      	uxth	r1, r3
 8003508:	7d7b      	ldrb	r3, [r7, #21]
 800350a:	f44f 724a 	mov.w	r2, #808	; 0x328
 800350e:	fb02 f303 	mul.w	r3, r2, r3
 8003512:	68ba      	ldr	r2, [r7, #8]
 8003514:	4413      	add	r3, r2
 8003516:	b20a      	sxth	r2, r1
 8003518:	845a      	strh	r2, [r3, #34]	; 0x22
      ic[curr_ic].cell.c_codes[2] = (data[4] + (data[5] << 8));
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	3304      	adds	r3, #4
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	b29a      	uxth	r2, r3
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	3305      	adds	r3, #5
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	b29b      	uxth	r3, r3
 800352a:	021b      	lsls	r3, r3, #8
 800352c:	b29b      	uxth	r3, r3
 800352e:	4413      	add	r3, r2
 8003530:	b299      	uxth	r1, r3
 8003532:	7d7b      	ldrb	r3, [r7, #21]
 8003534:	f44f 724a 	mov.w	r2, #808	; 0x328
 8003538:	fb02 f303 	mul.w	r3, r2, r3
 800353c:	68ba      	ldr	r2, [r7, #8]
 800353e:	4413      	add	r3, r2
 8003540:	b20a      	sxth	r2, r1
 8003542:	849a      	strh	r2, [r3, #36]	; 0x24
      ic[curr_ic].cell.c_codes[3] = (data[6] + (data[7] << 8));
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	3306      	adds	r3, #6
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	b29a      	uxth	r2, r3
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	3307      	adds	r3, #7
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	b29b      	uxth	r3, r3
 8003554:	021b      	lsls	r3, r3, #8
 8003556:	b29b      	uxth	r3, r3
 8003558:	4413      	add	r3, r2
 800355a:	b299      	uxth	r1, r3
 800355c:	7d7b      	ldrb	r3, [r7, #21]
 800355e:	f44f 724a 	mov.w	r2, #808	; 0x328
 8003562:	fb02 f303 	mul.w	r3, r2, r3
 8003566:	68ba      	ldr	r2, [r7, #8]
 8003568:	4413      	add	r3, r2
 800356a:	b20a      	sxth	r2, r1
 800356c:	84da      	strh	r2, [r3, #38]	; 0x26
      ic[curr_ic].cell.c_codes[4] = (data[8] + (data[9] << 8));
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	3308      	adds	r3, #8
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	b29a      	uxth	r2, r3
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	3309      	adds	r3, #9
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	b29b      	uxth	r3, r3
 800357e:	021b      	lsls	r3, r3, #8
 8003580:	b29b      	uxth	r3, r3
 8003582:	4413      	add	r3, r2
 8003584:	b299      	uxth	r1, r3
 8003586:	7d7b      	ldrb	r3, [r7, #21]
 8003588:	f44f 724a 	mov.w	r2, #808	; 0x328
 800358c:	fb02 f303 	mul.w	r3, r2, r3
 8003590:	68ba      	ldr	r2, [r7, #8]
 8003592:	4413      	add	r3, r2
 8003594:	b20a      	sxth	r2, r1
 8003596:	851a      	strh	r2, [r3, #40]	; 0x28
      ic[curr_ic].cell.c_codes[5] = (data[10] + (data[11] << 8));
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	330a      	adds	r3, #10
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	b29a      	uxth	r2, r3
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	330b      	adds	r3, #11
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	021b      	lsls	r3, r3, #8
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	4413      	add	r3, r2
 80035ae:	b299      	uxth	r1, r3
 80035b0:	7d7b      	ldrb	r3, [r7, #21]
 80035b2:	f44f 724a 	mov.w	r2, #808	; 0x328
 80035b6:	fb02 f303 	mul.w	r3, r2, r3
 80035ba:	68ba      	ldr	r2, [r7, #8]
 80035bc:	4413      	add	r3, r2
 80035be:	b20a      	sxth	r2, r1
 80035c0:	855a      	strh	r2, [r3, #42]	; 0x2a
      ic[curr_ic].cell.c_codes[6] = (data[12] + (data[13] << 8));
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	330c      	adds	r3, #12
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	b29a      	uxth	r2, r3
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	330d      	adds	r3, #13
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	021b      	lsls	r3, r3, #8
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	4413      	add	r3, r2
 80035d8:	b299      	uxth	r1, r3
 80035da:	7d7b      	ldrb	r3, [r7, #21]
 80035dc:	f44f 724a 	mov.w	r2, #808	; 0x328
 80035e0:	fb02 f303 	mul.w	r3, r2, r3
 80035e4:	68ba      	ldr	r2, [r7, #8]
 80035e6:	4413      	add	r3, r2
 80035e8:	b20a      	sxth	r2, r1
 80035ea:	859a      	strh	r2, [r3, #44]	; 0x2c
      ic[curr_ic].cell.c_codes[7] = (data[14] + (data[15] << 8));
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	330e      	adds	r3, #14
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	330f      	adds	r3, #15
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	021b      	lsls	r3, r3, #8
 80035fe:	b29b      	uxth	r3, r3
 8003600:	4413      	add	r3, r2
 8003602:	b299      	uxth	r1, r3
 8003604:	7d7b      	ldrb	r3, [r7, #21]
 8003606:	f44f 724a 	mov.w	r2, #808	; 0x328
 800360a:	fb02 f303 	mul.w	r3, r2, r3
 800360e:	68ba      	ldr	r2, [r7, #8]
 8003610:	4413      	add	r3, r2
 8003612:	b20a      	sxth	r2, r1
 8003614:	85da      	strh	r2, [r3, #46]	; 0x2e
      ic[curr_ic].cell.c_codes[8] = (data[16] + (data[17] << 8));
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	3310      	adds	r3, #16
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	b29a      	uxth	r2, r3
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	3311      	adds	r3, #17
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	b29b      	uxth	r3, r3
 8003626:	021b      	lsls	r3, r3, #8
 8003628:	b29b      	uxth	r3, r3
 800362a:	4413      	add	r3, r2
 800362c:	b299      	uxth	r1, r3
 800362e:	7d7b      	ldrb	r3, [r7, #21]
 8003630:	f44f 724a 	mov.w	r2, #808	; 0x328
 8003634:	fb02 f303 	mul.w	r3, r2, r3
 8003638:	68ba      	ldr	r2, [r7, #8]
 800363a:	4413      	add	r3, r2
 800363c:	b20a      	sxth	r2, r1
 800363e:	861a      	strh	r2, [r3, #48]	; 0x30
      ic[curr_ic].cell.c_codes[9] =  (data[18] + (data[19] << 8));
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	3312      	adds	r3, #18
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	b29a      	uxth	r2, r3
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	3313      	adds	r3, #19
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	b29b      	uxth	r3, r3
 8003650:	021b      	lsls	r3, r3, #8
 8003652:	b29b      	uxth	r3, r3
 8003654:	4413      	add	r3, r2
 8003656:	b299      	uxth	r1, r3
 8003658:	7d7b      	ldrb	r3, [r7, #21]
 800365a:	f44f 724a 	mov.w	r2, #808	; 0x328
 800365e:	fb02 f303 	mul.w	r3, r2, r3
 8003662:	68ba      	ldr	r2, [r7, #8]
 8003664:	4413      	add	r3, r2
 8003666:	b20a      	sxth	r2, r1
 8003668:	865a      	strh	r2, [r3, #50]	; 0x32
      ic[curr_ic].cell.c_codes[10] = (data[20] + (data[21] << 8));
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	3314      	adds	r3, #20
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	b29a      	uxth	r2, r3
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	3315      	adds	r3, #21
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	b29b      	uxth	r3, r3
 800367a:	021b      	lsls	r3, r3, #8
 800367c:	b29b      	uxth	r3, r3
 800367e:	4413      	add	r3, r2
 8003680:	b299      	uxth	r1, r3
 8003682:	7d7b      	ldrb	r3, [r7, #21]
 8003684:	f44f 724a 	mov.w	r2, #808	; 0x328
 8003688:	fb02 f303 	mul.w	r3, r2, r3
 800368c:	68ba      	ldr	r2, [r7, #8]
 800368e:	4413      	add	r3, r2
 8003690:	b20a      	sxth	r2, r1
 8003692:	869a      	strh	r2, [r3, #52]	; 0x34
      ic[curr_ic].cell.c_codes[11] = (data[22] + (data[23] << 8));
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	3316      	adds	r3, #22
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	b29a      	uxth	r2, r3
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	3317      	adds	r3, #23
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	021b      	lsls	r3, r3, #8
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	4413      	add	r3, r2
 80036aa:	b299      	uxth	r1, r3
 80036ac:	7d7b      	ldrb	r3, [r7, #21]
 80036ae:	f44f 724a 	mov.w	r2, #808	; 0x328
 80036b2:	fb02 f303 	mul.w	r3, r2, r3
 80036b6:	68ba      	ldr	r2, [r7, #8]
 80036b8:	4413      	add	r3, r2
 80036ba:	b20a      	sxth	r2, r1
 80036bc:	86da      	strh	r2, [r3, #54]	; 0x36
      ic[curr_ic].cell.c_codes[12] = (data[24] + (data[25] << 8));
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	3318      	adds	r3, #24
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	b29a      	uxth	r2, r3
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	3319      	adds	r3, #25
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	021b      	lsls	r3, r3, #8
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	4413      	add	r3, r2
 80036d4:	b299      	uxth	r1, r3
 80036d6:	7d7b      	ldrb	r3, [r7, #21]
 80036d8:	f44f 724a 	mov.w	r2, #808	; 0x328
 80036dc:	fb02 f303 	mul.w	r3, r2, r3
 80036e0:	68ba      	ldr	r2, [r7, #8]
 80036e2:	4413      	add	r3, r2
 80036e4:	b20a      	sxth	r2, r1
 80036e6:	871a      	strh	r2, [r3, #56]	; 0x38
      ic[curr_ic].cell.c_codes[13] = (data[26] + (data[27] << 8));
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	331a      	adds	r3, #26
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	b29a      	uxth	r2, r3
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	331b      	adds	r3, #27
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	021b      	lsls	r3, r3, #8
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	4413      	add	r3, r2
 80036fe:	b299      	uxth	r1, r3
 8003700:	7d7b      	ldrb	r3, [r7, #21]
 8003702:	f44f 724a 	mov.w	r2, #808	; 0x328
 8003706:	fb02 f303 	mul.w	r3, r2, r3
 800370a:	68ba      	ldr	r2, [r7, #8]
 800370c:	4413      	add	r3, r2
 800370e:	b20a      	sxth	r2, r1
 8003710:	875a      	strh	r2, [r3, #58]	; 0x3a
      ic[curr_ic].cell.c_codes[14] = (data[28] + (data[29] << 8));
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	331c      	adds	r3, #28
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	b29a      	uxth	r2, r3
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	331d      	adds	r3, #29
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	b29b      	uxth	r3, r3
 8003722:	021b      	lsls	r3, r3, #8
 8003724:	b29b      	uxth	r3, r3
 8003726:	4413      	add	r3, r2
 8003728:	b299      	uxth	r1, r3
 800372a:	7d7b      	ldrb	r3, [r7, #21]
 800372c:	f44f 724a 	mov.w	r2, #808	; 0x328
 8003730:	fb02 f303 	mul.w	r3, r2, r3
 8003734:	68ba      	ldr	r2, [r7, #8]
 8003736:	4413      	add	r3, r2
 8003738:	b20a      	sxth	r2, r1
 800373a:	879a      	strh	r2, [r3, #60]	; 0x3c
      ic[curr_ic].cell.c_codes[15] = (data[30] + (data[31] << 8));
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	331e      	adds	r3, #30
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	b29a      	uxth	r2, r3
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	331f      	adds	r3, #31
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	b29b      	uxth	r3, r3
 800374c:	021b      	lsls	r3, r3, #8
 800374e:	b29b      	uxth	r3, r3
 8003750:	4413      	add	r3, r2
 8003752:	b299      	uxth	r1, r3
 8003754:	7d7b      	ldrb	r3, [r7, #21]
 8003756:	f44f 724a 	mov.w	r2, #808	; 0x328
 800375a:	fb02 f303 	mul.w	r3, r2, r3
 800375e:	68ba      	ldr	r2, [r7, #8]
 8003760:	4413      	add	r3, r2
 8003762:	b20a      	sxth	r2, r1
 8003764:	87da      	strh	r2, [r3, #62]	; 0x3e
      break;
 8003766:	e000      	b.n	800376a <adBms6830ParseCell+0x5da>

    default:
      break;
 8003768:	bf00      	nop
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 800376a:	7d7b      	ldrb	r3, [r7, #21]
 800376c:	3301      	adds	r3, #1
 800376e:	757b      	strb	r3, [r7, #21]
 8003770:	7d7a      	ldrb	r2, [r7, #21]
 8003772:	7bfb      	ldrb	r3, [r7, #15]
 8003774:	429a      	cmp	r2, r3
 8003776:	f4ff ad31 	bcc.w	80031dc <adBms6830ParseCell+0x4c>
    }
  }
  free(data);
 800377a:	6938      	ldr	r0, [r7, #16]
 800377c:	f016 ff02 	bl	801a584 <free>
}
 8003780:	bf00      	nop
 8003782:	3718      	adds	r7, #24
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <adBms6830ParseAverageCell>:
 * @return None
 *
 *******************************************************************************
*/
void adBms6830ParseAverageCell(uint8_t tIC, cell_asic *ic, GRP grp, uint8_t *acv_data)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b086      	sub	sp, #24
 800378c:	af00      	add	r7, sp, #0
 800378e:	60b9      	str	r1, [r7, #8]
 8003790:	607b      	str	r3, [r7, #4]
 8003792:	4603      	mov	r3, r0
 8003794:	73fb      	strb	r3, [r7, #15]
 8003796:	4613      	mov	r3, r2
 8003798:	73bb      	strb	r3, [r7, #14]
  uint8_t *data, data_size, address = 0;
 800379a:	2300      	movs	r3, #0
 800379c:	75bb      	strb	r3, [r7, #22]
  if(grp == ALL_GRP){data_size = RDACALL_SIZE;}
 800379e:	7bbb      	ldrb	r3, [r7, #14]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d102      	bne.n	80037aa <adBms6830ParseAverageCell+0x22>
 80037a4:	2322      	movs	r3, #34	; 0x22
 80037a6:	75fb      	strb	r3, [r7, #23]
 80037a8:	e001      	b.n	80037ae <adBms6830ParseAverageCell+0x26>
  else {data_size = RX_DATA;}
 80037aa:	2308      	movs	r3, #8
 80037ac:	75fb      	strb	r3, [r7, #23]
  data = (uint8_t *)calloc(data_size, sizeof(uint8_t));
 80037ae:	7dfb      	ldrb	r3, [r7, #23]
 80037b0:	2101      	movs	r1, #1
 80037b2:	4618      	mov	r0, r3
 80037b4:	f016 feae 	bl	801a514 <calloc>
 80037b8:	4603      	mov	r3, r0
 80037ba:	613b      	str	r3, [r7, #16]
  if(data == NULL)
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d105      	bne.n	80037ce <adBms6830ParseAverageCell+0x46>
  {
    #ifdef MBED
    pc.printf(" Failed to allocate parse avg cell memory \n");
    #else
    printf(" Failed to allocate parse avg cell memory \n");
 80037c2:	489a      	ldr	r0, [pc, #616]	; (8003a2c <adBms6830ParseAverageCell+0x2a4>)
 80037c4:	f017 ff1e 	bl	801b604 <puts>
    #endif
    exit(0);
 80037c8:	2000      	movs	r0, #0
 80037ca:	f016 fec1 	bl	801a550 <exit>
  }
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 80037ce:	2300      	movs	r3, #0
 80037d0:	757b      	strb	r3, [r7, #21]
 80037d2:	e2e9      	b.n	8003da8 <adBms6830ParseAverageCell+0x620>
  {
    memcpy(&data[0], &acv_data[address], data_size); /* dst , src , size */
 80037d4:	7dbb      	ldrb	r3, [r7, #22]
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	4413      	add	r3, r2
 80037da:	7dfa      	ldrb	r2, [r7, #23]
 80037dc:	4619      	mov	r1, r3
 80037de:	6938      	ldr	r0, [r7, #16]
 80037e0:	f018 f89f 	bl	801b922 <memcpy>
    address = ((curr_ic+1) * (data_size));
 80037e4:	7d7b      	ldrb	r3, [r7, #21]
 80037e6:	3301      	adds	r3, #1
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	7dfa      	ldrb	r2, [r7, #23]
 80037ec:	fb12 f303 	smulbb	r3, r2, r3
 80037f0:	75bb      	strb	r3, [r7, #22]
    switch (grp)
 80037f2:	7bbb      	ldrb	r3, [r7, #14]
 80037f4:	2b06      	cmp	r3, #6
 80037f6:	f200 82d3 	bhi.w	8003da0 <adBms6830ParseAverageCell+0x618>
 80037fa:	a201      	add	r2, pc, #4	; (adr r2, 8003800 <adBms6830ParseAverageCell+0x78>)
 80037fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003800:	08003ae1 	.word	0x08003ae1
 8003804:	0800381d 	.word	0x0800381d
 8003808:	080038a1 	.word	0x080038a1
 800380c:	08003925 	.word	0x08003925
 8003810:	080039a9 	.word	0x080039a9
 8003814:	08003a31 	.word	0x08003a31
 8003818:	08003ab5 	.word	0x08003ab5
    {
    case A: /* Cell Register group A */
      ic[curr_ic].acell.ac_codes[0] = (data[0] + (data[1] << 8));
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	b29a      	uxth	r2, r3
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	3301      	adds	r3, #1
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	b29b      	uxth	r3, r3
 800382a:	021b      	lsls	r3, r3, #8
 800382c:	b29b      	uxth	r3, r3
 800382e:	4413      	add	r3, r2
 8003830:	b299      	uxth	r1, r3
 8003832:	7d7b      	ldrb	r3, [r7, #21]
 8003834:	f44f 724a 	mov.w	r2, #808	; 0x328
 8003838:	fb02 f303 	mul.w	r3, r2, r3
 800383c:	68ba      	ldr	r2, [r7, #8]
 800383e:	4413      	add	r3, r2
 8003840:	b20a      	sxth	r2, r1
 8003842:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      ic[curr_ic].acell.ac_codes[1] = (data[2] + (data[3] << 8));
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	3302      	adds	r3, #2
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	b29a      	uxth	r2, r3
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	3303      	adds	r3, #3
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	b29b      	uxth	r3, r3
 8003856:	021b      	lsls	r3, r3, #8
 8003858:	b29b      	uxth	r3, r3
 800385a:	4413      	add	r3, r2
 800385c:	b299      	uxth	r1, r3
 800385e:	7d7b      	ldrb	r3, [r7, #21]
 8003860:	f44f 724a 	mov.w	r2, #808	; 0x328
 8003864:	fb02 f303 	mul.w	r3, r2, r3
 8003868:	68ba      	ldr	r2, [r7, #8]
 800386a:	4413      	add	r3, r2
 800386c:	b20a      	sxth	r2, r1
 800386e:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
      ic[curr_ic].acell.ac_codes[2] = (data[4] + (data[5] << 8));
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	3304      	adds	r3, #4
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	b29a      	uxth	r2, r3
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	3305      	adds	r3, #5
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	b29b      	uxth	r3, r3
 8003882:	021b      	lsls	r3, r3, #8
 8003884:	b29b      	uxth	r3, r3
 8003886:	4413      	add	r3, r2
 8003888:	b299      	uxth	r1, r3
 800388a:	7d7b      	ldrb	r3, [r7, #21]
 800388c:	f44f 724a 	mov.w	r2, #808	; 0x328
 8003890:	fb02 f303 	mul.w	r3, r2, r3
 8003894:	68ba      	ldr	r2, [r7, #8]
 8003896:	4413      	add	r3, r2
 8003898:	b20a      	sxth	r2, r1
 800389a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
      break;
 800389e:	e280      	b.n	8003da2 <adBms6830ParseAverageCell+0x61a>

    case B: /* Cell Register group B */
      ic[curr_ic].acell.ac_codes[3] = (data[0] + (data[1] << 8));
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	b29a      	uxth	r2, r3
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	3301      	adds	r3, #1
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	021b      	lsls	r3, r3, #8
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	4413      	add	r3, r2
 80038b4:	b299      	uxth	r1, r3
 80038b6:	7d7b      	ldrb	r3, [r7, #21]
 80038b8:	f44f 724a 	mov.w	r2, #808	; 0x328
 80038bc:	fb02 f303 	mul.w	r3, r2, r3
 80038c0:	68ba      	ldr	r2, [r7, #8]
 80038c2:	4413      	add	r3, r2
 80038c4:	b20a      	sxth	r2, r1
 80038c6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      ic[curr_ic].acell.ac_codes[4] = (data[2] + (data[3] << 8));
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	3302      	adds	r3, #2
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	b29a      	uxth	r2, r3
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	3303      	adds	r3, #3
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	b29b      	uxth	r3, r3
 80038da:	021b      	lsls	r3, r3, #8
 80038dc:	b29b      	uxth	r3, r3
 80038de:	4413      	add	r3, r2
 80038e0:	b299      	uxth	r1, r3
 80038e2:	7d7b      	ldrb	r3, [r7, #21]
 80038e4:	f44f 724a 	mov.w	r2, #808	; 0x328
 80038e8:	fb02 f303 	mul.w	r3, r2, r3
 80038ec:	68ba      	ldr	r2, [r7, #8]
 80038ee:	4413      	add	r3, r2
 80038f0:	b20a      	sxth	r2, r1
 80038f2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      ic[curr_ic].acell.ac_codes[5] = (data[4] + (data[5] << 8));
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	3304      	adds	r3, #4
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	3305      	adds	r3, #5
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	b29b      	uxth	r3, r3
 8003906:	021b      	lsls	r3, r3, #8
 8003908:	b29b      	uxth	r3, r3
 800390a:	4413      	add	r3, r2
 800390c:	b299      	uxth	r1, r3
 800390e:	7d7b      	ldrb	r3, [r7, #21]
 8003910:	f44f 724a 	mov.w	r2, #808	; 0x328
 8003914:	fb02 f303 	mul.w	r3, r2, r3
 8003918:	68ba      	ldr	r2, [r7, #8]
 800391a:	4413      	add	r3, r2
 800391c:	b20a      	sxth	r2, r1
 800391e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      break;
 8003922:	e23e      	b.n	8003da2 <adBms6830ParseAverageCell+0x61a>

    case C: /* Cell Register group C */
      ic[curr_ic].acell.ac_codes[6] = (data[0] + (data[1] << 8));
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	b29a      	uxth	r2, r3
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	3301      	adds	r3, #1
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	b29b      	uxth	r3, r3
 8003932:	021b      	lsls	r3, r3, #8
 8003934:	b29b      	uxth	r3, r3
 8003936:	4413      	add	r3, r2
 8003938:	b299      	uxth	r1, r3
 800393a:	7d7b      	ldrb	r3, [r7, #21]
 800393c:	f44f 724a 	mov.w	r2, #808	; 0x328
 8003940:	fb02 f303 	mul.w	r3, r2, r3
 8003944:	68ba      	ldr	r2, [r7, #8]
 8003946:	4413      	add	r3, r2
 8003948:	b20a      	sxth	r2, r1
 800394a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
      ic[curr_ic].acell.ac_codes[7] = (data[2] + (data[3] << 8));
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	3302      	adds	r3, #2
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	b29a      	uxth	r2, r3
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	3303      	adds	r3, #3
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	b29b      	uxth	r3, r3
 800395e:	021b      	lsls	r3, r3, #8
 8003960:	b29b      	uxth	r3, r3
 8003962:	4413      	add	r3, r2
 8003964:	b299      	uxth	r1, r3
 8003966:	7d7b      	ldrb	r3, [r7, #21]
 8003968:	f44f 724a 	mov.w	r2, #808	; 0x328
 800396c:	fb02 f303 	mul.w	r3, r2, r3
 8003970:	68ba      	ldr	r2, [r7, #8]
 8003972:	4413      	add	r3, r2
 8003974:	b20a      	sxth	r2, r1
 8003976:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
      ic[curr_ic].acell.ac_codes[8] = (data[4] + (data[5] << 8));
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	3304      	adds	r3, #4
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	b29a      	uxth	r2, r3
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	3305      	adds	r3, #5
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	b29b      	uxth	r3, r3
 800398a:	021b      	lsls	r3, r3, #8
 800398c:	b29b      	uxth	r3, r3
 800398e:	4413      	add	r3, r2
 8003990:	b299      	uxth	r1, r3
 8003992:	7d7b      	ldrb	r3, [r7, #21]
 8003994:	f44f 724a 	mov.w	r2, #808	; 0x328
 8003998:	fb02 f303 	mul.w	r3, r2, r3
 800399c:	68ba      	ldr	r2, [r7, #8]
 800399e:	4413      	add	r3, r2
 80039a0:	b20a      	sxth	r2, r1
 80039a2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
      break;
 80039a6:	e1fc      	b.n	8003da2 <adBms6830ParseAverageCell+0x61a>

    case D: /* Cell Register group D */
      ic[curr_ic].acell.ac_codes[9] =  (data[0] + (data[1] << 8));
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	b29a      	uxth	r2, r3
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	3301      	adds	r3, #1
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	021b      	lsls	r3, r3, #8
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	4413      	add	r3, r2
 80039bc:	b299      	uxth	r1, r3
 80039be:	7d7b      	ldrb	r3, [r7, #21]
 80039c0:	f44f 724a 	mov.w	r2, #808	; 0x328
 80039c4:	fb02 f303 	mul.w	r3, r2, r3
 80039c8:	68ba      	ldr	r2, [r7, #8]
 80039ca:	4413      	add	r3, r2
 80039cc:	b20a      	sxth	r2, r1
 80039ce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
      ic[curr_ic].acell.ac_codes[10] = (data[2] + (data[3] << 8));
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	3302      	adds	r3, #2
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	b29a      	uxth	r2, r3
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	3303      	adds	r3, #3
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	021b      	lsls	r3, r3, #8
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	4413      	add	r3, r2
 80039e8:	b299      	uxth	r1, r3
 80039ea:	7d7b      	ldrb	r3, [r7, #21]
 80039ec:	f44f 724a 	mov.w	r2, #808	; 0x328
 80039f0:	fb02 f303 	mul.w	r3, r2, r3
 80039f4:	68ba      	ldr	r2, [r7, #8]
 80039f6:	4413      	add	r3, r2
 80039f8:	b20a      	sxth	r2, r1
 80039fa:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
      ic[curr_ic].acell.ac_codes[11] = (data[4] + (data[5] << 8));
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	3304      	adds	r3, #4
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	b29a      	uxth	r2, r3
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	3305      	adds	r3, #5
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	021b      	lsls	r3, r3, #8
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	4413      	add	r3, r2
 8003a14:	b299      	uxth	r1, r3
 8003a16:	7d7b      	ldrb	r3, [r7, #21]
 8003a18:	f44f 724a 	mov.w	r2, #808	; 0x328
 8003a1c:	fb02 f303 	mul.w	r3, r2, r3
 8003a20:	68ba      	ldr	r2, [r7, #8]
 8003a22:	4413      	add	r3, r2
 8003a24:	b20a      	sxth	r2, r1
 8003a26:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
      break;
 8003a2a:	e1ba      	b.n	8003da2 <adBms6830ParseAverageCell+0x61a>
 8003a2c:	0801fd20 	.word	0x0801fd20

    case E: /* Cell Register group E */
      ic[curr_ic].acell.ac_codes[12] = (data[0] + (data[1] << 8));
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	b29a      	uxth	r2, r3
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	3301      	adds	r3, #1
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	021b      	lsls	r3, r3, #8
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	4413      	add	r3, r2
 8003a44:	b299      	uxth	r1, r3
 8003a46:	7d7b      	ldrb	r3, [r7, #21]
 8003a48:	f44f 724a 	mov.w	r2, #808	; 0x328
 8003a4c:	fb02 f303 	mul.w	r3, r2, r3
 8003a50:	68ba      	ldr	r2, [r7, #8]
 8003a52:	4413      	add	r3, r2
 8003a54:	b20a      	sxth	r2, r1
 8003a56:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
      ic[curr_ic].acell.ac_codes[13] = (data[2] + (data[3] << 8));
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	3302      	adds	r3, #2
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	b29a      	uxth	r2, r3
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	3303      	adds	r3, #3
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	021b      	lsls	r3, r3, #8
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	4413      	add	r3, r2
 8003a70:	b299      	uxth	r1, r3
 8003a72:	7d7b      	ldrb	r3, [r7, #21]
 8003a74:	f44f 724a 	mov.w	r2, #808	; 0x328
 8003a78:	fb02 f303 	mul.w	r3, r2, r3
 8003a7c:	68ba      	ldr	r2, [r7, #8]
 8003a7e:	4413      	add	r3, r2
 8003a80:	b20a      	sxth	r2, r1
 8003a82:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
      ic[curr_ic].acell.ac_codes[14] = (data[4] + (data[5] << 8));
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	3304      	adds	r3, #4
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	3305      	adds	r3, #5
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	021b      	lsls	r3, r3, #8
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	4413      	add	r3, r2
 8003a9c:	b299      	uxth	r1, r3
 8003a9e:	7d7b      	ldrb	r3, [r7, #21]
 8003aa0:	f44f 724a 	mov.w	r2, #808	; 0x328
 8003aa4:	fb02 f303 	mul.w	r3, r2, r3
 8003aa8:	68ba      	ldr	r2, [r7, #8]
 8003aaa:	4413      	add	r3, r2
 8003aac:	b20a      	sxth	r2, r1
 8003aae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      break;
 8003ab2:	e176      	b.n	8003da2 <adBms6830ParseAverageCell+0x61a>

    case F: /* Cell Register group F */
      ic[curr_ic].acell.ac_codes[15] = (data[0] + (data[1] << 8));
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	b29a      	uxth	r2, r3
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	3301      	adds	r3, #1
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	021b      	lsls	r3, r3, #8
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	4413      	add	r3, r2
 8003ac8:	b299      	uxth	r1, r3
 8003aca:	7d7b      	ldrb	r3, [r7, #21]
 8003acc:	f44f 724a 	mov.w	r2, #808	; 0x328
 8003ad0:	fb02 f303 	mul.w	r3, r2, r3
 8003ad4:	68ba      	ldr	r2, [r7, #8]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	b20a      	sxth	r2, r1
 8003ada:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      break;
 8003ade:	e160      	b.n	8003da2 <adBms6830ParseAverageCell+0x61a>

    case ALL_GRP: /* Cell Register group ALL */
      ic[curr_ic].acell.ac_codes[0] = (data[0] + (data[1] << 8));
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	b29a      	uxth	r2, r3
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	3301      	adds	r3, #1
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	021b      	lsls	r3, r3, #8
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	4413      	add	r3, r2
 8003af4:	b299      	uxth	r1, r3
 8003af6:	7d7b      	ldrb	r3, [r7, #21]
 8003af8:	f44f 724a 	mov.w	r2, #808	; 0x328
 8003afc:	fb02 f303 	mul.w	r3, r2, r3
 8003b00:	68ba      	ldr	r2, [r7, #8]
 8003b02:	4413      	add	r3, r2
 8003b04:	b20a      	sxth	r2, r1
 8003b06:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      ic[curr_ic].acell.ac_codes[1] = (data[2] + (data[3] << 8));
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	3302      	adds	r3, #2
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	b29a      	uxth	r2, r3
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	3303      	adds	r3, #3
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	021b      	lsls	r3, r3, #8
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	4413      	add	r3, r2
 8003b20:	b299      	uxth	r1, r3
 8003b22:	7d7b      	ldrb	r3, [r7, #21]
 8003b24:	f44f 724a 	mov.w	r2, #808	; 0x328
 8003b28:	fb02 f303 	mul.w	r3, r2, r3
 8003b2c:	68ba      	ldr	r2, [r7, #8]
 8003b2e:	4413      	add	r3, r2
 8003b30:	b20a      	sxth	r2, r1
 8003b32:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
      ic[curr_ic].acell.ac_codes[2] = (data[4] + (data[5] << 8));
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	3304      	adds	r3, #4
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	b29a      	uxth	r2, r3
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	3305      	adds	r3, #5
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	021b      	lsls	r3, r3, #8
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	4413      	add	r3, r2
 8003b4c:	b299      	uxth	r1, r3
 8003b4e:	7d7b      	ldrb	r3, [r7, #21]
 8003b50:	f44f 724a 	mov.w	r2, #808	; 0x328
 8003b54:	fb02 f303 	mul.w	r3, r2, r3
 8003b58:	68ba      	ldr	r2, [r7, #8]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	b20a      	sxth	r2, r1
 8003b5e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
      ic[curr_ic].acell.ac_codes[3] = (data[6] + (data[7] << 8));
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	3306      	adds	r3, #6
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	3307      	adds	r3, #7
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	021b      	lsls	r3, r3, #8
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	4413      	add	r3, r2
 8003b78:	b299      	uxth	r1, r3
 8003b7a:	7d7b      	ldrb	r3, [r7, #21]
 8003b7c:	f44f 724a 	mov.w	r2, #808	; 0x328
 8003b80:	fb02 f303 	mul.w	r3, r2, r3
 8003b84:	68ba      	ldr	r2, [r7, #8]
 8003b86:	4413      	add	r3, r2
 8003b88:	b20a      	sxth	r2, r1
 8003b8a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      ic[curr_ic].acell.ac_codes[4] = (data[8] + (data[9] << 8));
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	3308      	adds	r3, #8
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	b29a      	uxth	r2, r3
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	3309      	adds	r3, #9
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	021b      	lsls	r3, r3, #8
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	4413      	add	r3, r2
 8003ba4:	b299      	uxth	r1, r3
 8003ba6:	7d7b      	ldrb	r3, [r7, #21]
 8003ba8:	f44f 724a 	mov.w	r2, #808	; 0x328
 8003bac:	fb02 f303 	mul.w	r3, r2, r3
 8003bb0:	68ba      	ldr	r2, [r7, #8]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	b20a      	sxth	r2, r1
 8003bb6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      ic[curr_ic].acell.ac_codes[5] = (data[10] + (data[11] << 8));
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	330a      	adds	r3, #10
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	b29a      	uxth	r2, r3
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	330b      	adds	r3, #11
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	021b      	lsls	r3, r3, #8
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	4413      	add	r3, r2
 8003bd0:	b299      	uxth	r1, r3
 8003bd2:	7d7b      	ldrb	r3, [r7, #21]
 8003bd4:	f44f 724a 	mov.w	r2, #808	; 0x328
 8003bd8:	fb02 f303 	mul.w	r3, r2, r3
 8003bdc:	68ba      	ldr	r2, [r7, #8]
 8003bde:	4413      	add	r3, r2
 8003be0:	b20a      	sxth	r2, r1
 8003be2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      ic[curr_ic].acell.ac_codes[6] = (data[12] + (data[13] << 8));
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	330c      	adds	r3, #12
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	b29a      	uxth	r2, r3
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	330d      	adds	r3, #13
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	021b      	lsls	r3, r3, #8
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	4413      	add	r3, r2
 8003bfc:	b299      	uxth	r1, r3
 8003bfe:	7d7b      	ldrb	r3, [r7, #21]
 8003c00:	f44f 724a 	mov.w	r2, #808	; 0x328
 8003c04:	fb02 f303 	mul.w	r3, r2, r3
 8003c08:	68ba      	ldr	r2, [r7, #8]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	b20a      	sxth	r2, r1
 8003c0e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
      ic[curr_ic].acell.ac_codes[7] = (data[14] + (data[15] << 8));
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	330e      	adds	r3, #14
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	b29a      	uxth	r2, r3
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	330f      	adds	r3, #15
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	021b      	lsls	r3, r3, #8
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	4413      	add	r3, r2
 8003c28:	b299      	uxth	r1, r3
 8003c2a:	7d7b      	ldrb	r3, [r7, #21]
 8003c2c:	f44f 724a 	mov.w	r2, #808	; 0x328
 8003c30:	fb02 f303 	mul.w	r3, r2, r3
 8003c34:	68ba      	ldr	r2, [r7, #8]
 8003c36:	4413      	add	r3, r2
 8003c38:	b20a      	sxth	r2, r1
 8003c3a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
      ic[curr_ic].acell.ac_codes[8] = (data[16] + (data[17] << 8));
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	3310      	adds	r3, #16
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	b29a      	uxth	r2, r3
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	3311      	adds	r3, #17
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	021b      	lsls	r3, r3, #8
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	4413      	add	r3, r2
 8003c54:	b299      	uxth	r1, r3
 8003c56:	7d7b      	ldrb	r3, [r7, #21]
 8003c58:	f44f 724a 	mov.w	r2, #808	; 0x328
 8003c5c:	fb02 f303 	mul.w	r3, r2, r3
 8003c60:	68ba      	ldr	r2, [r7, #8]
 8003c62:	4413      	add	r3, r2
 8003c64:	b20a      	sxth	r2, r1
 8003c66:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
      ic[curr_ic].acell.ac_codes[9] =  (data[18] + (data[19] << 8));
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	3312      	adds	r3, #18
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	b29a      	uxth	r2, r3
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	3313      	adds	r3, #19
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	021b      	lsls	r3, r3, #8
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	4413      	add	r3, r2
 8003c80:	b299      	uxth	r1, r3
 8003c82:	7d7b      	ldrb	r3, [r7, #21]
 8003c84:	f44f 724a 	mov.w	r2, #808	; 0x328
 8003c88:	fb02 f303 	mul.w	r3, r2, r3
 8003c8c:	68ba      	ldr	r2, [r7, #8]
 8003c8e:	4413      	add	r3, r2
 8003c90:	b20a      	sxth	r2, r1
 8003c92:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
      ic[curr_ic].acell.ac_codes[10] = (data[20] + (data[21] << 8));
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	3314      	adds	r3, #20
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	3315      	adds	r3, #21
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	021b      	lsls	r3, r3, #8
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	4413      	add	r3, r2
 8003cac:	b299      	uxth	r1, r3
 8003cae:	7d7b      	ldrb	r3, [r7, #21]
 8003cb0:	f44f 724a 	mov.w	r2, #808	; 0x328
 8003cb4:	fb02 f303 	mul.w	r3, r2, r3
 8003cb8:	68ba      	ldr	r2, [r7, #8]
 8003cba:	4413      	add	r3, r2
 8003cbc:	b20a      	sxth	r2, r1
 8003cbe:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
      ic[curr_ic].acell.ac_codes[11] = (data[22] + (data[23] << 8));
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	3316      	adds	r3, #22
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	3317      	adds	r3, #23
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	021b      	lsls	r3, r3, #8
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	4413      	add	r3, r2
 8003cd8:	b299      	uxth	r1, r3
 8003cda:	7d7b      	ldrb	r3, [r7, #21]
 8003cdc:	f44f 724a 	mov.w	r2, #808	; 0x328
 8003ce0:	fb02 f303 	mul.w	r3, r2, r3
 8003ce4:	68ba      	ldr	r2, [r7, #8]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	b20a      	sxth	r2, r1
 8003cea:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
      ic[curr_ic].acell.ac_codes[12] = (data[24] + (data[25] << 8));
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	3318      	adds	r3, #24
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	b29a      	uxth	r2, r3
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	3319      	adds	r3, #25
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	021b      	lsls	r3, r3, #8
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	4413      	add	r3, r2
 8003d04:	b299      	uxth	r1, r3
 8003d06:	7d7b      	ldrb	r3, [r7, #21]
 8003d08:	f44f 724a 	mov.w	r2, #808	; 0x328
 8003d0c:	fb02 f303 	mul.w	r3, r2, r3
 8003d10:	68ba      	ldr	r2, [r7, #8]
 8003d12:	4413      	add	r3, r2
 8003d14:	b20a      	sxth	r2, r1
 8003d16:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
      ic[curr_ic].acell.ac_codes[13] = (data[26] + (data[27] << 8));
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	331a      	adds	r3, #26
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	b29a      	uxth	r2, r3
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	331b      	adds	r3, #27
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	021b      	lsls	r3, r3, #8
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	4413      	add	r3, r2
 8003d30:	b299      	uxth	r1, r3
 8003d32:	7d7b      	ldrb	r3, [r7, #21]
 8003d34:	f44f 724a 	mov.w	r2, #808	; 0x328
 8003d38:	fb02 f303 	mul.w	r3, r2, r3
 8003d3c:	68ba      	ldr	r2, [r7, #8]
 8003d3e:	4413      	add	r3, r2
 8003d40:	b20a      	sxth	r2, r1
 8003d42:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
      ic[curr_ic].acell.ac_codes[14] = (data[28] + (data[29] << 8));
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	331c      	adds	r3, #28
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	b29a      	uxth	r2, r3
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	331d      	adds	r3, #29
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	021b      	lsls	r3, r3, #8
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	4413      	add	r3, r2
 8003d5c:	b299      	uxth	r1, r3
 8003d5e:	7d7b      	ldrb	r3, [r7, #21]
 8003d60:	f44f 724a 	mov.w	r2, #808	; 0x328
 8003d64:	fb02 f303 	mul.w	r3, r2, r3
 8003d68:	68ba      	ldr	r2, [r7, #8]
 8003d6a:	4413      	add	r3, r2
 8003d6c:	b20a      	sxth	r2, r1
 8003d6e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      ic[curr_ic].acell.ac_codes[15] = (data[30] + (data[31] << 8));
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	331e      	adds	r3, #30
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	b29a      	uxth	r2, r3
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	331f      	adds	r3, #31
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	021b      	lsls	r3, r3, #8
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	4413      	add	r3, r2
 8003d88:	b299      	uxth	r1, r3
 8003d8a:	7d7b      	ldrb	r3, [r7, #21]
 8003d8c:	f44f 724a 	mov.w	r2, #808	; 0x328
 8003d90:	fb02 f303 	mul.w	r3, r2, r3
 8003d94:	68ba      	ldr	r2, [r7, #8]
 8003d96:	4413      	add	r3, r2
 8003d98:	b20a      	sxth	r2, r1
 8003d9a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      break;
 8003d9e:	e000      	b.n	8003da2 <adBms6830ParseAverageCell+0x61a>

    default:
      break;
 8003da0:	bf00      	nop
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8003da2:	7d7b      	ldrb	r3, [r7, #21]
 8003da4:	3301      	adds	r3, #1
 8003da6:	757b      	strb	r3, [r7, #21]
 8003da8:	7d7a      	ldrb	r2, [r7, #21]
 8003daa:	7bfb      	ldrb	r3, [r7, #15]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	f4ff ad11 	bcc.w	80037d4 <adBms6830ParseAverageCell+0x4c>
    }
  }
  free(data);
 8003db2:	6938      	ldr	r0, [r7, #16]
 8003db4:	f016 fbe6 	bl	801a584 <free>
}
 8003db8:	bf00      	nop
 8003dba:	3718      	adds	r7, #24
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <adBms6830ParseSCell>:
 *
 *******************************************************************************
*/
/* Parse S cell voltages */
void adBms6830ParseSCell(uint8_t tIC, cell_asic *ic, GRP grp, uint8_t *scv_data)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b086      	sub	sp, #24
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60b9      	str	r1, [r7, #8]
 8003dc8:	607b      	str	r3, [r7, #4]
 8003dca:	4603      	mov	r3, r0
 8003dcc:	73fb      	strb	r3, [r7, #15]
 8003dce:	4613      	mov	r3, r2
 8003dd0:	73bb      	strb	r3, [r7, #14]
  uint8_t *data, data_size, address = 0;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	75bb      	strb	r3, [r7, #22]
  if(grp == ALL_GRP){data_size = RDSALL_SIZE;}
 8003dd6:	7bbb      	ldrb	r3, [r7, #14]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d102      	bne.n	8003de2 <adBms6830ParseSCell+0x22>
 8003ddc:	2322      	movs	r3, #34	; 0x22
 8003dde:	75fb      	strb	r3, [r7, #23]
 8003de0:	e001      	b.n	8003de6 <adBms6830ParseSCell+0x26>
  else {data_size = RX_DATA;}
 8003de2:	2308      	movs	r3, #8
 8003de4:	75fb      	strb	r3, [r7, #23]
  data = (uint8_t *)calloc(data_size, sizeof(uint8_t));
 8003de6:	7dfb      	ldrb	r3, [r7, #23]
 8003de8:	2101      	movs	r1, #1
 8003dea:	4618      	mov	r0, r3
 8003dec:	f016 fb92 	bl	801a514 <calloc>
 8003df0:	4603      	mov	r3, r0
 8003df2:	613b      	str	r3, [r7, #16]
  if(data == NULL)
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d105      	bne.n	8003e06 <adBms6830ParseSCell+0x46>
  {
    #ifdef MBED
    pc.printf(" Failed to allocate parse scv memory \n");
    #else
    printf(" Failed to allocate parse scv memory \n");
 8003dfa:	489a      	ldr	r0, [pc, #616]	; (8004064 <adBms6830ParseSCell+0x2a4>)
 8003dfc:	f017 fc02 	bl	801b604 <puts>
    #endif
    exit(0);
 8003e00:	2000      	movs	r0, #0
 8003e02:	f016 fba5 	bl	801a550 <exit>
  }
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8003e06:	2300      	movs	r3, #0
 8003e08:	757b      	strb	r3, [r7, #21]
 8003e0a:	e2e9      	b.n	80043e0 <adBms6830ParseSCell+0x620>
  {
    memcpy(&data[0], &scv_data[address], data_size); /* dst , src , size */
 8003e0c:	7dbb      	ldrb	r3, [r7, #22]
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	4413      	add	r3, r2
 8003e12:	7dfa      	ldrb	r2, [r7, #23]
 8003e14:	4619      	mov	r1, r3
 8003e16:	6938      	ldr	r0, [r7, #16]
 8003e18:	f017 fd83 	bl	801b922 <memcpy>
    address = ((curr_ic+1) * (data_size));
 8003e1c:	7d7b      	ldrb	r3, [r7, #21]
 8003e1e:	3301      	adds	r3, #1
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	7dfa      	ldrb	r2, [r7, #23]
 8003e24:	fb12 f303 	smulbb	r3, r2, r3
 8003e28:	75bb      	strb	r3, [r7, #22]
    switch (grp)
 8003e2a:	7bbb      	ldrb	r3, [r7, #14]
 8003e2c:	2b06      	cmp	r3, #6
 8003e2e:	f200 82d3 	bhi.w	80043d8 <adBms6830ParseSCell+0x618>
 8003e32:	a201      	add	r2, pc, #4	; (adr r2, 8003e38 <adBms6830ParseSCell+0x78>)
 8003e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e38:	08004119 	.word	0x08004119
 8003e3c:	08003e55 	.word	0x08003e55
 8003e40:	08003ed9 	.word	0x08003ed9
 8003e44:	08003f5d 	.word	0x08003f5d
 8003e48:	08003fe1 	.word	0x08003fe1
 8003e4c:	08004069 	.word	0x08004069
 8003e50:	080040ed 	.word	0x080040ed
    {
    case A: /* Cell Register group A */
      ic[curr_ic].scell.sc_codes[0] = (data[0] + (data[1] << 8));
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	021b      	lsls	r3, r3, #8
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	4413      	add	r3, r2
 8003e68:	b299      	uxth	r1, r3
 8003e6a:	7d7b      	ldrb	r3, [r7, #21]
 8003e6c:	f44f 724a 	mov.w	r2, #808	; 0x328
 8003e70:	fb02 f303 	mul.w	r3, r2, r3
 8003e74:	68ba      	ldr	r2, [r7, #8]
 8003e76:	4413      	add	r3, r2
 8003e78:	b20a      	sxth	r2, r1
 8003e7a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      ic[curr_ic].scell.sc_codes[1] = (data[2] + (data[3] << 8));
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	3302      	adds	r3, #2
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	b29a      	uxth	r2, r3
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	3303      	adds	r3, #3
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	021b      	lsls	r3, r3, #8
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	4413      	add	r3, r2
 8003e94:	b299      	uxth	r1, r3
 8003e96:	7d7b      	ldrb	r3, [r7, #21]
 8003e98:	f44f 724a 	mov.w	r2, #808	; 0x328
 8003e9c:	fb02 f303 	mul.w	r3, r2, r3
 8003ea0:	68ba      	ldr	r2, [r7, #8]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	b20a      	sxth	r2, r1
 8003ea6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      ic[curr_ic].scell.sc_codes[2] = (data[4] + (data[5] << 8));
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	3304      	adds	r3, #4
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	b29a      	uxth	r2, r3
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	3305      	adds	r3, #5
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	021b      	lsls	r3, r3, #8
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	4413      	add	r3, r2
 8003ec0:	b299      	uxth	r1, r3
 8003ec2:	7d7b      	ldrb	r3, [r7, #21]
 8003ec4:	f44f 724a 	mov.w	r2, #808	; 0x328
 8003ec8:	fb02 f303 	mul.w	r3, r2, r3
 8003ecc:	68ba      	ldr	r2, [r7, #8]
 8003ece:	4413      	add	r3, r2
 8003ed0:	b20a      	sxth	r2, r1
 8003ed2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      break;
 8003ed6:	e280      	b.n	80043da <adBms6830ParseSCell+0x61a>

    case B: /* Cell Register group B */
      ic[curr_ic].scell.sc_codes[3] = (data[0] + (data[1] << 8));
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	b29a      	uxth	r2, r3
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	021b      	lsls	r3, r3, #8
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	4413      	add	r3, r2
 8003eec:	b299      	uxth	r1, r3
 8003eee:	7d7b      	ldrb	r3, [r7, #21]
 8003ef0:	f44f 724a 	mov.w	r2, #808	; 0x328
 8003ef4:	fb02 f303 	mul.w	r3, r2, r3
 8003ef8:	68ba      	ldr	r2, [r7, #8]
 8003efa:	4413      	add	r3, r2
 8003efc:	b20a      	sxth	r2, r1
 8003efe:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
      ic[curr_ic].scell.sc_codes[4] = (data[2] + (data[3] << 8));
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	3302      	adds	r3, #2
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	b29a      	uxth	r2, r3
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	3303      	adds	r3, #3
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	021b      	lsls	r3, r3, #8
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	4413      	add	r3, r2
 8003f18:	b299      	uxth	r1, r3
 8003f1a:	7d7b      	ldrb	r3, [r7, #21]
 8003f1c:	f44f 724a 	mov.w	r2, #808	; 0x328
 8003f20:	fb02 f303 	mul.w	r3, r2, r3
 8003f24:	68ba      	ldr	r2, [r7, #8]
 8003f26:	4413      	add	r3, r2
 8003f28:	b20a      	sxth	r2, r1
 8003f2a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
      ic[curr_ic].scell.sc_codes[5] = (data[4] + (data[5] << 8));
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	3304      	adds	r3, #4
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	b29a      	uxth	r2, r3
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	3305      	adds	r3, #5
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	021b      	lsls	r3, r3, #8
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	4413      	add	r3, r2
 8003f44:	b299      	uxth	r1, r3
 8003f46:	7d7b      	ldrb	r3, [r7, #21]
 8003f48:	f44f 724a 	mov.w	r2, #808	; 0x328
 8003f4c:	fb02 f303 	mul.w	r3, r2, r3
 8003f50:	68ba      	ldr	r2, [r7, #8]
 8003f52:	4413      	add	r3, r2
 8003f54:	b20a      	sxth	r2, r1
 8003f56:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      break;
 8003f5a:	e23e      	b.n	80043da <adBms6830ParseSCell+0x61a>

    case C: /* Cell Register group C */
      ic[curr_ic].scell.sc_codes[6] = (data[0] + (data[1] << 8));
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	3301      	adds	r3, #1
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	021b      	lsls	r3, r3, #8
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	4413      	add	r3, r2
 8003f70:	b299      	uxth	r1, r3
 8003f72:	7d7b      	ldrb	r3, [r7, #21]
 8003f74:	f44f 724a 	mov.w	r2, #808	; 0x328
 8003f78:	fb02 f303 	mul.w	r3, r2, r3
 8003f7c:	68ba      	ldr	r2, [r7, #8]
 8003f7e:	4413      	add	r3, r2
 8003f80:	b20a      	sxth	r2, r1
 8003f82:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
      ic[curr_ic].scell.sc_codes[7] = (data[2] + (data[3] << 8));
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	3302      	adds	r3, #2
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	b29a      	uxth	r2, r3
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	3303      	adds	r3, #3
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	021b      	lsls	r3, r3, #8
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	4413      	add	r3, r2
 8003f9c:	b299      	uxth	r1, r3
 8003f9e:	7d7b      	ldrb	r3, [r7, #21]
 8003fa0:	f44f 724a 	mov.w	r2, #808	; 0x328
 8003fa4:	fb02 f303 	mul.w	r3, r2, r3
 8003fa8:	68ba      	ldr	r2, [r7, #8]
 8003faa:	4413      	add	r3, r2
 8003fac:	b20a      	sxth	r2, r1
 8003fae:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
      ic[curr_ic].scell.sc_codes[8] = (data[4] + (data[5] << 8));
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	3304      	adds	r3, #4
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	b29a      	uxth	r2, r3
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	3305      	adds	r3, #5
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	021b      	lsls	r3, r3, #8
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	4413      	add	r3, r2
 8003fc8:	b299      	uxth	r1, r3
 8003fca:	7d7b      	ldrb	r3, [r7, #21]
 8003fcc:	f44f 724a 	mov.w	r2, #808	; 0x328
 8003fd0:	fb02 f303 	mul.w	r3, r2, r3
 8003fd4:	68ba      	ldr	r2, [r7, #8]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	b20a      	sxth	r2, r1
 8003fda:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
      break;
 8003fde:	e1fc      	b.n	80043da <adBms6830ParseSCell+0x61a>

    case D: /* Cell Register group D */
      ic[curr_ic].scell.sc_codes[9] =  (data[0] + (data[1] << 8));
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	b29a      	uxth	r2, r3
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	3301      	adds	r3, #1
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	021b      	lsls	r3, r3, #8
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	4413      	add	r3, r2
 8003ff4:	b299      	uxth	r1, r3
 8003ff6:	7d7b      	ldrb	r3, [r7, #21]
 8003ff8:	f44f 724a 	mov.w	r2, #808	; 0x328
 8003ffc:	fb02 f303 	mul.w	r3, r2, r3
 8004000:	68ba      	ldr	r2, [r7, #8]
 8004002:	4413      	add	r3, r2
 8004004:	b20a      	sxth	r2, r1
 8004006:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
      ic[curr_ic].scell.sc_codes[10] = (data[2] + (data[3] << 8));
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	3302      	adds	r3, #2
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	b29a      	uxth	r2, r3
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	3303      	adds	r3, #3
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	b29b      	uxth	r3, r3
 800401a:	021b      	lsls	r3, r3, #8
 800401c:	b29b      	uxth	r3, r3
 800401e:	4413      	add	r3, r2
 8004020:	b299      	uxth	r1, r3
 8004022:	7d7b      	ldrb	r3, [r7, #21]
 8004024:	f44f 724a 	mov.w	r2, #808	; 0x328
 8004028:	fb02 f303 	mul.w	r3, r2, r3
 800402c:	68ba      	ldr	r2, [r7, #8]
 800402e:	4413      	add	r3, r2
 8004030:	b20a      	sxth	r2, r1
 8004032:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
      ic[curr_ic].scell.sc_codes[11] = (data[4] + (data[5] << 8));
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	3304      	adds	r3, #4
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	b29a      	uxth	r2, r3
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	3305      	adds	r3, #5
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	b29b      	uxth	r3, r3
 8004046:	021b      	lsls	r3, r3, #8
 8004048:	b29b      	uxth	r3, r3
 800404a:	4413      	add	r3, r2
 800404c:	b299      	uxth	r1, r3
 800404e:	7d7b      	ldrb	r3, [r7, #21]
 8004050:	f44f 724a 	mov.w	r2, #808	; 0x328
 8004054:	fb02 f303 	mul.w	r3, r2, r3
 8004058:	68ba      	ldr	r2, [r7, #8]
 800405a:	4413      	add	r3, r2
 800405c:	b20a      	sxth	r2, r1
 800405e:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
      break;
 8004062:	e1ba      	b.n	80043da <adBms6830ParseSCell+0x61a>
 8004064:	0801fd4c 	.word	0x0801fd4c

    case E: /* Cell Register group E */
      ic[curr_ic].scell.sc_codes[12] = (data[0] + (data[1] << 8));
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	b29a      	uxth	r2, r3
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	3301      	adds	r3, #1
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	b29b      	uxth	r3, r3
 8004076:	021b      	lsls	r3, r3, #8
 8004078:	b29b      	uxth	r3, r3
 800407a:	4413      	add	r3, r2
 800407c:	b299      	uxth	r1, r3
 800407e:	7d7b      	ldrb	r3, [r7, #21]
 8004080:	f44f 724a 	mov.w	r2, #808	; 0x328
 8004084:	fb02 f303 	mul.w	r3, r2, r3
 8004088:	68ba      	ldr	r2, [r7, #8]
 800408a:	4413      	add	r3, r2
 800408c:	b20a      	sxth	r2, r1
 800408e:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
      ic[curr_ic].scell.sc_codes[13] = (data[2] + (data[3] << 8));
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	3302      	adds	r3, #2
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	b29a      	uxth	r2, r3
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	3303      	adds	r3, #3
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	021b      	lsls	r3, r3, #8
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	4413      	add	r3, r2
 80040a8:	b299      	uxth	r1, r3
 80040aa:	7d7b      	ldrb	r3, [r7, #21]
 80040ac:	f44f 724a 	mov.w	r2, #808	; 0x328
 80040b0:	fb02 f303 	mul.w	r3, r2, r3
 80040b4:	68ba      	ldr	r2, [r7, #8]
 80040b6:	4413      	add	r3, r2
 80040b8:	b20a      	sxth	r2, r1
 80040ba:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
      ic[curr_ic].scell.sc_codes[14] = (data[4] + (data[5] << 8));
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	3304      	adds	r3, #4
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	b29a      	uxth	r2, r3
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	3305      	adds	r3, #5
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	021b      	lsls	r3, r3, #8
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	4413      	add	r3, r2
 80040d4:	b299      	uxth	r1, r3
 80040d6:	7d7b      	ldrb	r3, [r7, #21]
 80040d8:	f44f 724a 	mov.w	r2, #808	; 0x328
 80040dc:	fb02 f303 	mul.w	r3, r2, r3
 80040e0:	68ba      	ldr	r2, [r7, #8]
 80040e2:	4413      	add	r3, r2
 80040e4:	b20a      	sxth	r2, r1
 80040e6:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
      break;
 80040ea:	e176      	b.n	80043da <adBms6830ParseSCell+0x61a>

    case F: /* Cell Register group F */
      ic[curr_ic].scell.sc_codes[15] = (data[0] + (data[1] << 8));
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	b29a      	uxth	r2, r3
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	3301      	adds	r3, #1
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	021b      	lsls	r3, r3, #8
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	4413      	add	r3, r2
 8004100:	b299      	uxth	r1, r3
 8004102:	7d7b      	ldrb	r3, [r7, #21]
 8004104:	f44f 724a 	mov.w	r2, #808	; 0x328
 8004108:	fb02 f303 	mul.w	r3, r2, r3
 800410c:	68ba      	ldr	r2, [r7, #8]
 800410e:	4413      	add	r3, r2
 8004110:	b20a      	sxth	r2, r1
 8004112:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
      break;
 8004116:	e160      	b.n	80043da <adBms6830ParseSCell+0x61a>

    case ALL_GRP: /* Cell Register group ALL */
      ic[curr_ic].scell.sc_codes[0] = (data[0] + (data[1] << 8));
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	b29a      	uxth	r2, r3
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	3301      	adds	r3, #1
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	b29b      	uxth	r3, r3
 8004126:	021b      	lsls	r3, r3, #8
 8004128:	b29b      	uxth	r3, r3
 800412a:	4413      	add	r3, r2
 800412c:	b299      	uxth	r1, r3
 800412e:	7d7b      	ldrb	r3, [r7, #21]
 8004130:	f44f 724a 	mov.w	r2, #808	; 0x328
 8004134:	fb02 f303 	mul.w	r3, r2, r3
 8004138:	68ba      	ldr	r2, [r7, #8]
 800413a:	4413      	add	r3, r2
 800413c:	b20a      	sxth	r2, r1
 800413e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      ic[curr_ic].scell.sc_codes[1] = (data[2] + (data[3] << 8));
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	3302      	adds	r3, #2
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	b29a      	uxth	r2, r3
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	3303      	adds	r3, #3
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	b29b      	uxth	r3, r3
 8004152:	021b      	lsls	r3, r3, #8
 8004154:	b29b      	uxth	r3, r3
 8004156:	4413      	add	r3, r2
 8004158:	b299      	uxth	r1, r3
 800415a:	7d7b      	ldrb	r3, [r7, #21]
 800415c:	f44f 724a 	mov.w	r2, #808	; 0x328
 8004160:	fb02 f303 	mul.w	r3, r2, r3
 8004164:	68ba      	ldr	r2, [r7, #8]
 8004166:	4413      	add	r3, r2
 8004168:	b20a      	sxth	r2, r1
 800416a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      ic[curr_ic].scell.sc_codes[2] = (data[4] + (data[5] << 8));
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	3304      	adds	r3, #4
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	b29a      	uxth	r2, r3
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	3305      	adds	r3, #5
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	b29b      	uxth	r3, r3
 800417e:	021b      	lsls	r3, r3, #8
 8004180:	b29b      	uxth	r3, r3
 8004182:	4413      	add	r3, r2
 8004184:	b299      	uxth	r1, r3
 8004186:	7d7b      	ldrb	r3, [r7, #21]
 8004188:	f44f 724a 	mov.w	r2, #808	; 0x328
 800418c:	fb02 f303 	mul.w	r3, r2, r3
 8004190:	68ba      	ldr	r2, [r7, #8]
 8004192:	4413      	add	r3, r2
 8004194:	b20a      	sxth	r2, r1
 8004196:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      ic[curr_ic].scell.sc_codes[3] = (data[6] + (data[7] << 8));
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	3306      	adds	r3, #6
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	b29a      	uxth	r2, r3
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	3307      	adds	r3, #7
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	021b      	lsls	r3, r3, #8
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	4413      	add	r3, r2
 80041b0:	b299      	uxth	r1, r3
 80041b2:	7d7b      	ldrb	r3, [r7, #21]
 80041b4:	f44f 724a 	mov.w	r2, #808	; 0x328
 80041b8:	fb02 f303 	mul.w	r3, r2, r3
 80041bc:	68ba      	ldr	r2, [r7, #8]
 80041be:	4413      	add	r3, r2
 80041c0:	b20a      	sxth	r2, r1
 80041c2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
      ic[curr_ic].scell.sc_codes[4] = (data[8] + (data[9] << 8));
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	3308      	adds	r3, #8
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	b29a      	uxth	r2, r3
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	3309      	adds	r3, #9
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	021b      	lsls	r3, r3, #8
 80041d8:	b29b      	uxth	r3, r3
 80041da:	4413      	add	r3, r2
 80041dc:	b299      	uxth	r1, r3
 80041de:	7d7b      	ldrb	r3, [r7, #21]
 80041e0:	f44f 724a 	mov.w	r2, #808	; 0x328
 80041e4:	fb02 f303 	mul.w	r3, r2, r3
 80041e8:	68ba      	ldr	r2, [r7, #8]
 80041ea:	4413      	add	r3, r2
 80041ec:	b20a      	sxth	r2, r1
 80041ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
      ic[curr_ic].scell.sc_codes[5] = (data[10] + (data[11] << 8));
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	330a      	adds	r3, #10
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	b29a      	uxth	r2, r3
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	330b      	adds	r3, #11
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	b29b      	uxth	r3, r3
 8004202:	021b      	lsls	r3, r3, #8
 8004204:	b29b      	uxth	r3, r3
 8004206:	4413      	add	r3, r2
 8004208:	b299      	uxth	r1, r3
 800420a:	7d7b      	ldrb	r3, [r7, #21]
 800420c:	f44f 724a 	mov.w	r2, #808	; 0x328
 8004210:	fb02 f303 	mul.w	r3, r2, r3
 8004214:	68ba      	ldr	r2, [r7, #8]
 8004216:	4413      	add	r3, r2
 8004218:	b20a      	sxth	r2, r1
 800421a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      ic[curr_ic].scell.sc_codes[6] = (data[12] + (data[13] << 8));
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	330c      	adds	r3, #12
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	b29a      	uxth	r2, r3
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	330d      	adds	r3, #13
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	b29b      	uxth	r3, r3
 800422e:	021b      	lsls	r3, r3, #8
 8004230:	b29b      	uxth	r3, r3
 8004232:	4413      	add	r3, r2
 8004234:	b299      	uxth	r1, r3
 8004236:	7d7b      	ldrb	r3, [r7, #21]
 8004238:	f44f 724a 	mov.w	r2, #808	; 0x328
 800423c:	fb02 f303 	mul.w	r3, r2, r3
 8004240:	68ba      	ldr	r2, [r7, #8]
 8004242:	4413      	add	r3, r2
 8004244:	b20a      	sxth	r2, r1
 8004246:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
      ic[curr_ic].scell.sc_codes[7] = (data[14] + (data[15] << 8));
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	330e      	adds	r3, #14
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	b29a      	uxth	r2, r3
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	330f      	adds	r3, #15
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	b29b      	uxth	r3, r3
 800425a:	021b      	lsls	r3, r3, #8
 800425c:	b29b      	uxth	r3, r3
 800425e:	4413      	add	r3, r2
 8004260:	b299      	uxth	r1, r3
 8004262:	7d7b      	ldrb	r3, [r7, #21]
 8004264:	f44f 724a 	mov.w	r2, #808	; 0x328
 8004268:	fb02 f303 	mul.w	r3, r2, r3
 800426c:	68ba      	ldr	r2, [r7, #8]
 800426e:	4413      	add	r3, r2
 8004270:	b20a      	sxth	r2, r1
 8004272:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
      ic[curr_ic].scell.sc_codes[8] = (data[16] + (data[17] << 8));
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	3310      	adds	r3, #16
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	b29a      	uxth	r2, r3
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	3311      	adds	r3, #17
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	b29b      	uxth	r3, r3
 8004286:	021b      	lsls	r3, r3, #8
 8004288:	b29b      	uxth	r3, r3
 800428a:	4413      	add	r3, r2
 800428c:	b299      	uxth	r1, r3
 800428e:	7d7b      	ldrb	r3, [r7, #21]
 8004290:	f44f 724a 	mov.w	r2, #808	; 0x328
 8004294:	fb02 f303 	mul.w	r3, r2, r3
 8004298:	68ba      	ldr	r2, [r7, #8]
 800429a:	4413      	add	r3, r2
 800429c:	b20a      	sxth	r2, r1
 800429e:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
      ic[curr_ic].scell.sc_codes[9] = (data[18] + (data[19] << 8));
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	3312      	adds	r3, #18
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	b29a      	uxth	r2, r3
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	3313      	adds	r3, #19
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	021b      	lsls	r3, r3, #8
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	4413      	add	r3, r2
 80042b8:	b299      	uxth	r1, r3
 80042ba:	7d7b      	ldrb	r3, [r7, #21]
 80042bc:	f44f 724a 	mov.w	r2, #808	; 0x328
 80042c0:	fb02 f303 	mul.w	r3, r2, r3
 80042c4:	68ba      	ldr	r2, [r7, #8]
 80042c6:	4413      	add	r3, r2
 80042c8:	b20a      	sxth	r2, r1
 80042ca:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
      ic[curr_ic].scell.sc_codes[10] = (data[20] + (data[21] << 8));
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	3314      	adds	r3, #20
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	b29a      	uxth	r2, r3
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	3315      	adds	r3, #21
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	b29b      	uxth	r3, r3
 80042de:	021b      	lsls	r3, r3, #8
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	4413      	add	r3, r2
 80042e4:	b299      	uxth	r1, r3
 80042e6:	7d7b      	ldrb	r3, [r7, #21]
 80042e8:	f44f 724a 	mov.w	r2, #808	; 0x328
 80042ec:	fb02 f303 	mul.w	r3, r2, r3
 80042f0:	68ba      	ldr	r2, [r7, #8]
 80042f2:	4413      	add	r3, r2
 80042f4:	b20a      	sxth	r2, r1
 80042f6:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
      ic[curr_ic].scell.sc_codes[11] = (data[22] + (data[23] << 8));
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	3316      	adds	r3, #22
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	b29a      	uxth	r2, r3
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	3317      	adds	r3, #23
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	b29b      	uxth	r3, r3
 800430a:	021b      	lsls	r3, r3, #8
 800430c:	b29b      	uxth	r3, r3
 800430e:	4413      	add	r3, r2
 8004310:	b299      	uxth	r1, r3
 8004312:	7d7b      	ldrb	r3, [r7, #21]
 8004314:	f44f 724a 	mov.w	r2, #808	; 0x328
 8004318:	fb02 f303 	mul.w	r3, r2, r3
 800431c:	68ba      	ldr	r2, [r7, #8]
 800431e:	4413      	add	r3, r2
 8004320:	b20a      	sxth	r2, r1
 8004322:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
      ic[curr_ic].scell.sc_codes[12] = (data[24] + (data[25] << 8));
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	3318      	adds	r3, #24
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	b29a      	uxth	r2, r3
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	3319      	adds	r3, #25
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	b29b      	uxth	r3, r3
 8004336:	021b      	lsls	r3, r3, #8
 8004338:	b29b      	uxth	r3, r3
 800433a:	4413      	add	r3, r2
 800433c:	b299      	uxth	r1, r3
 800433e:	7d7b      	ldrb	r3, [r7, #21]
 8004340:	f44f 724a 	mov.w	r2, #808	; 0x328
 8004344:	fb02 f303 	mul.w	r3, r2, r3
 8004348:	68ba      	ldr	r2, [r7, #8]
 800434a:	4413      	add	r3, r2
 800434c:	b20a      	sxth	r2, r1
 800434e:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
      ic[curr_ic].scell.sc_codes[13] = (data[26] + (data[27] << 8));
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	331a      	adds	r3, #26
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	b29a      	uxth	r2, r3
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	331b      	adds	r3, #27
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	b29b      	uxth	r3, r3
 8004362:	021b      	lsls	r3, r3, #8
 8004364:	b29b      	uxth	r3, r3
 8004366:	4413      	add	r3, r2
 8004368:	b299      	uxth	r1, r3
 800436a:	7d7b      	ldrb	r3, [r7, #21]
 800436c:	f44f 724a 	mov.w	r2, #808	; 0x328
 8004370:	fb02 f303 	mul.w	r3, r2, r3
 8004374:	68ba      	ldr	r2, [r7, #8]
 8004376:	4413      	add	r3, r2
 8004378:	b20a      	sxth	r2, r1
 800437a:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
      ic[curr_ic].scell.sc_codes[14] = (data[28] + (data[29] << 8));
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	331c      	adds	r3, #28
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	b29a      	uxth	r2, r3
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	331d      	adds	r3, #29
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	b29b      	uxth	r3, r3
 800438e:	021b      	lsls	r3, r3, #8
 8004390:	b29b      	uxth	r3, r3
 8004392:	4413      	add	r3, r2
 8004394:	b299      	uxth	r1, r3
 8004396:	7d7b      	ldrb	r3, [r7, #21]
 8004398:	f44f 724a 	mov.w	r2, #808	; 0x328
 800439c:	fb02 f303 	mul.w	r3, r2, r3
 80043a0:	68ba      	ldr	r2, [r7, #8]
 80043a2:	4413      	add	r3, r2
 80043a4:	b20a      	sxth	r2, r1
 80043a6:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
      ic[curr_ic].scell.sc_codes[15] = (data[30] + (data[31] << 8));
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	331e      	adds	r3, #30
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	b29a      	uxth	r2, r3
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	331f      	adds	r3, #31
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	021b      	lsls	r3, r3, #8
 80043bc:	b29b      	uxth	r3, r3
 80043be:	4413      	add	r3, r2
 80043c0:	b299      	uxth	r1, r3
 80043c2:	7d7b      	ldrb	r3, [r7, #21]
 80043c4:	f44f 724a 	mov.w	r2, #808	; 0x328
 80043c8:	fb02 f303 	mul.w	r3, r2, r3
 80043cc:	68ba      	ldr	r2, [r7, #8]
 80043ce:	4413      	add	r3, r2
 80043d0:	b20a      	sxth	r2, r1
 80043d2:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
      break;
 80043d6:	e000      	b.n	80043da <adBms6830ParseSCell+0x61a>

    default:
      break;
 80043d8:	bf00      	nop
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 80043da:	7d7b      	ldrb	r3, [r7, #21]
 80043dc:	3301      	adds	r3, #1
 80043de:	757b      	strb	r3, [r7, #21]
 80043e0:	7d7a      	ldrb	r2, [r7, #21]
 80043e2:	7bfb      	ldrb	r3, [r7, #15]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	f4ff ad11 	bcc.w	8003e0c <adBms6830ParseSCell+0x4c>
    }
  }
  free(data);
 80043ea:	6938      	ldr	r0, [r7, #16]
 80043ec:	f016 f8ca 	bl	801a584 <free>
}
 80043f0:	bf00      	nop
 80043f2:	3718      	adds	r7, #24
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <adBms6830ParseFCell>:
 * @return None
 *
 *******************************************************************************
*/
void adBms6830ParseFCell(uint8_t tIC, cell_asic *ic, GRP grp, uint8_t *fcv_data)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b086      	sub	sp, #24
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	60b9      	str	r1, [r7, #8]
 8004400:	607b      	str	r3, [r7, #4]
 8004402:	4603      	mov	r3, r0
 8004404:	73fb      	strb	r3, [r7, #15]
 8004406:	4613      	mov	r3, r2
 8004408:	73bb      	strb	r3, [r7, #14]
  uint8_t *data, data_size, address = 0;
 800440a:	2300      	movs	r3, #0
 800440c:	75bb      	strb	r3, [r7, #22]
  if(grp == ALL_GRP){data_size = RDFCALL_SIZE;}
 800440e:	7bbb      	ldrb	r3, [r7, #14]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d102      	bne.n	800441a <adBms6830ParseFCell+0x22>
 8004414:	2322      	movs	r3, #34	; 0x22
 8004416:	75fb      	strb	r3, [r7, #23]
 8004418:	e001      	b.n	800441e <adBms6830ParseFCell+0x26>
  else {data_size = RX_DATA;}
 800441a:	2308      	movs	r3, #8
 800441c:	75fb      	strb	r3, [r7, #23]
  data = (uint8_t *)calloc(data_size, sizeof(uint8_t));
 800441e:	7dfb      	ldrb	r3, [r7, #23]
 8004420:	2101      	movs	r1, #1
 8004422:	4618      	mov	r0, r3
 8004424:	f016 f876 	bl	801a514 <calloc>
 8004428:	4603      	mov	r3, r0
 800442a:	613b      	str	r3, [r7, #16]
  if(data == NULL)
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d105      	bne.n	800443e <adBms6830ParseFCell+0x46>
  {
    #ifdef MBED
    pc.printf(" Failed to allocate parse fcell memory \n");
    #else
    printf(" Failed to allocate parse fcell memory \n");
 8004432:	489a      	ldr	r0, [pc, #616]	; (800469c <adBms6830ParseFCell+0x2a4>)
 8004434:	f017 f8e6 	bl	801b604 <puts>
    #endif
    exit(0);
 8004438:	2000      	movs	r0, #0
 800443a:	f016 f889 	bl	801a550 <exit>
  }
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 800443e:	2300      	movs	r3, #0
 8004440:	757b      	strb	r3, [r7, #21]
 8004442:	e2e9      	b.n	8004a18 <adBms6830ParseFCell+0x620>
  {
    memcpy(&data[0], &fcv_data[address], data_size); /* dst , src , size */
 8004444:	7dbb      	ldrb	r3, [r7, #22]
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	4413      	add	r3, r2
 800444a:	7dfa      	ldrb	r2, [r7, #23]
 800444c:	4619      	mov	r1, r3
 800444e:	6938      	ldr	r0, [r7, #16]
 8004450:	f017 fa67 	bl	801b922 <memcpy>
    address = ((curr_ic+1) * (data_size));
 8004454:	7d7b      	ldrb	r3, [r7, #21]
 8004456:	3301      	adds	r3, #1
 8004458:	b2db      	uxtb	r3, r3
 800445a:	7dfa      	ldrb	r2, [r7, #23]
 800445c:	fb12 f303 	smulbb	r3, r2, r3
 8004460:	75bb      	strb	r3, [r7, #22]
    switch (grp)
 8004462:	7bbb      	ldrb	r3, [r7, #14]
 8004464:	2b06      	cmp	r3, #6
 8004466:	f200 82d3 	bhi.w	8004a10 <adBms6830ParseFCell+0x618>
 800446a:	a201      	add	r2, pc, #4	; (adr r2, 8004470 <adBms6830ParseFCell+0x78>)
 800446c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004470:	08004751 	.word	0x08004751
 8004474:	0800448d 	.word	0x0800448d
 8004478:	08004511 	.word	0x08004511
 800447c:	08004595 	.word	0x08004595
 8004480:	08004619 	.word	0x08004619
 8004484:	080046a1 	.word	0x080046a1
 8004488:	08004725 	.word	0x08004725
    {
    case A: /* Cell Register group A */
      ic[curr_ic].fcell.fc_codes[0] = (data[0] + (data[1] << 8));
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	b29a      	uxth	r2, r3
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	3301      	adds	r3, #1
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	b29b      	uxth	r3, r3
 800449a:	021b      	lsls	r3, r3, #8
 800449c:	b29b      	uxth	r3, r3
 800449e:	4413      	add	r3, r2
 80044a0:	b299      	uxth	r1, r3
 80044a2:	7d7b      	ldrb	r3, [r7, #21]
 80044a4:	f44f 724a 	mov.w	r2, #808	; 0x328
 80044a8:	fb02 f303 	mul.w	r3, r2, r3
 80044ac:	68ba      	ldr	r2, [r7, #8]
 80044ae:	4413      	add	r3, r2
 80044b0:	b20a      	sxth	r2, r1
 80044b2:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
      ic[curr_ic].fcell.fc_codes[1] = (data[2] + (data[3] << 8));
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	3302      	adds	r3, #2
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	b29a      	uxth	r2, r3
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	3303      	adds	r3, #3
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	021b      	lsls	r3, r3, #8
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	4413      	add	r3, r2
 80044cc:	b299      	uxth	r1, r3
 80044ce:	7d7b      	ldrb	r3, [r7, #21]
 80044d0:	f44f 724a 	mov.w	r2, #808	; 0x328
 80044d4:	fb02 f303 	mul.w	r3, r2, r3
 80044d8:	68ba      	ldr	r2, [r7, #8]
 80044da:	4413      	add	r3, r2
 80044dc:	b20a      	sxth	r2, r1
 80044de:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
      ic[curr_ic].fcell.fc_codes[2] = (data[4] + (data[5] << 8));
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	3304      	adds	r3, #4
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	b29a      	uxth	r2, r3
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	3305      	adds	r3, #5
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	021b      	lsls	r3, r3, #8
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	4413      	add	r3, r2
 80044f8:	b299      	uxth	r1, r3
 80044fa:	7d7b      	ldrb	r3, [r7, #21]
 80044fc:	f44f 724a 	mov.w	r2, #808	; 0x328
 8004500:	fb02 f303 	mul.w	r3, r2, r3
 8004504:	68ba      	ldr	r2, [r7, #8]
 8004506:	4413      	add	r3, r2
 8004508:	b20a      	sxth	r2, r1
 800450a:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
      break;
 800450e:	e280      	b.n	8004a12 <adBms6830ParseFCell+0x61a>

    case B: /* Cell Register group B */
      ic[curr_ic].fcell.fc_codes[3] = (data[0] + (data[1] << 8));
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	b29a      	uxth	r2, r3
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	3301      	adds	r3, #1
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	b29b      	uxth	r3, r3
 800451e:	021b      	lsls	r3, r3, #8
 8004520:	b29b      	uxth	r3, r3
 8004522:	4413      	add	r3, r2
 8004524:	b299      	uxth	r1, r3
 8004526:	7d7b      	ldrb	r3, [r7, #21]
 8004528:	f44f 724a 	mov.w	r2, #808	; 0x328
 800452c:	fb02 f303 	mul.w	r3, r2, r3
 8004530:	68ba      	ldr	r2, [r7, #8]
 8004532:	4413      	add	r3, r2
 8004534:	b20a      	sxth	r2, r1
 8004536:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
      ic[curr_ic].fcell.fc_codes[4] = (data[2] + (data[3] << 8));
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	3302      	adds	r3, #2
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	b29a      	uxth	r2, r3
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	3303      	adds	r3, #3
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	b29b      	uxth	r3, r3
 800454a:	021b      	lsls	r3, r3, #8
 800454c:	b29b      	uxth	r3, r3
 800454e:	4413      	add	r3, r2
 8004550:	b299      	uxth	r1, r3
 8004552:	7d7b      	ldrb	r3, [r7, #21]
 8004554:	f44f 724a 	mov.w	r2, #808	; 0x328
 8004558:	fb02 f303 	mul.w	r3, r2, r3
 800455c:	68ba      	ldr	r2, [r7, #8]
 800455e:	4413      	add	r3, r2
 8004560:	b20a      	sxth	r2, r1
 8004562:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
      ic[curr_ic].fcell.fc_codes[5] = (data[4] + (data[5] << 8));
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	3304      	adds	r3, #4
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	b29a      	uxth	r2, r3
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	3305      	adds	r3, #5
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	b29b      	uxth	r3, r3
 8004576:	021b      	lsls	r3, r3, #8
 8004578:	b29b      	uxth	r3, r3
 800457a:	4413      	add	r3, r2
 800457c:	b299      	uxth	r1, r3
 800457e:	7d7b      	ldrb	r3, [r7, #21]
 8004580:	f44f 724a 	mov.w	r2, #808	; 0x328
 8004584:	fb02 f303 	mul.w	r3, r2, r3
 8004588:	68ba      	ldr	r2, [r7, #8]
 800458a:	4413      	add	r3, r2
 800458c:	b20a      	sxth	r2, r1
 800458e:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
      break;
 8004592:	e23e      	b.n	8004a12 <adBms6830ParseFCell+0x61a>

    case C: /* Cell Register group C */
      ic[curr_ic].fcell.fc_codes[6] = (data[0] + (data[1] << 8));
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	b29a      	uxth	r2, r3
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	3301      	adds	r3, #1
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	021b      	lsls	r3, r3, #8
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	4413      	add	r3, r2
 80045a8:	b299      	uxth	r1, r3
 80045aa:	7d7b      	ldrb	r3, [r7, #21]
 80045ac:	f44f 724a 	mov.w	r2, #808	; 0x328
 80045b0:	fb02 f303 	mul.w	r3, r2, r3
 80045b4:	68ba      	ldr	r2, [r7, #8]
 80045b6:	4413      	add	r3, r2
 80045b8:	b20a      	sxth	r2, r1
 80045ba:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
      ic[curr_ic].fcell.fc_codes[7] = (data[2] + (data[3] << 8));
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	3302      	adds	r3, #2
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	b29a      	uxth	r2, r3
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	3303      	adds	r3, #3
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	021b      	lsls	r3, r3, #8
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	4413      	add	r3, r2
 80045d4:	b299      	uxth	r1, r3
 80045d6:	7d7b      	ldrb	r3, [r7, #21]
 80045d8:	f44f 724a 	mov.w	r2, #808	; 0x328
 80045dc:	fb02 f303 	mul.w	r3, r2, r3
 80045e0:	68ba      	ldr	r2, [r7, #8]
 80045e2:	4413      	add	r3, r2
 80045e4:	b20a      	sxth	r2, r1
 80045e6:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
      ic[curr_ic].fcell.fc_codes[8] = (data[4] + (data[5] << 8));
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	3304      	adds	r3, #4
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	b29a      	uxth	r2, r3
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	3305      	adds	r3, #5
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	021b      	lsls	r3, r3, #8
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	4413      	add	r3, r2
 8004600:	b299      	uxth	r1, r3
 8004602:	7d7b      	ldrb	r3, [r7, #21]
 8004604:	f44f 724a 	mov.w	r2, #808	; 0x328
 8004608:	fb02 f303 	mul.w	r3, r2, r3
 800460c:	68ba      	ldr	r2, [r7, #8]
 800460e:	4413      	add	r3, r2
 8004610:	b20a      	sxth	r2, r1
 8004612:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
      break;
 8004616:	e1fc      	b.n	8004a12 <adBms6830ParseFCell+0x61a>

    case D: /* Cell Register group D */
      ic[curr_ic].fcell.fc_codes[9] =  (data[0] + (data[1] << 8));
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	b29a      	uxth	r2, r3
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	3301      	adds	r3, #1
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	b29b      	uxth	r3, r3
 8004626:	021b      	lsls	r3, r3, #8
 8004628:	b29b      	uxth	r3, r3
 800462a:	4413      	add	r3, r2
 800462c:	b299      	uxth	r1, r3
 800462e:	7d7b      	ldrb	r3, [r7, #21]
 8004630:	f44f 724a 	mov.w	r2, #808	; 0x328
 8004634:	fb02 f303 	mul.w	r3, r2, r3
 8004638:	68ba      	ldr	r2, [r7, #8]
 800463a:	4413      	add	r3, r2
 800463c:	b20a      	sxth	r2, r1
 800463e:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
      ic[curr_ic].fcell.fc_codes[10] = (data[2] + (data[3] << 8));
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	3302      	adds	r3, #2
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	b29a      	uxth	r2, r3
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	3303      	adds	r3, #3
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	b29b      	uxth	r3, r3
 8004652:	021b      	lsls	r3, r3, #8
 8004654:	b29b      	uxth	r3, r3
 8004656:	4413      	add	r3, r2
 8004658:	b299      	uxth	r1, r3
 800465a:	7d7b      	ldrb	r3, [r7, #21]
 800465c:	f44f 724a 	mov.w	r2, #808	; 0x328
 8004660:	fb02 f303 	mul.w	r3, r2, r3
 8004664:	68ba      	ldr	r2, [r7, #8]
 8004666:	4413      	add	r3, r2
 8004668:	b20a      	sxth	r2, r1
 800466a:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
      ic[curr_ic].fcell.fc_codes[11] = (data[4] + (data[5] << 8));
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	3304      	adds	r3, #4
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	b29a      	uxth	r2, r3
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	3305      	adds	r3, #5
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	b29b      	uxth	r3, r3
 800467e:	021b      	lsls	r3, r3, #8
 8004680:	b29b      	uxth	r3, r3
 8004682:	4413      	add	r3, r2
 8004684:	b299      	uxth	r1, r3
 8004686:	7d7b      	ldrb	r3, [r7, #21]
 8004688:	f44f 724a 	mov.w	r2, #808	; 0x328
 800468c:	fb02 f303 	mul.w	r3, r2, r3
 8004690:	68ba      	ldr	r2, [r7, #8]
 8004692:	4413      	add	r3, r2
 8004694:	b20a      	sxth	r2, r1
 8004696:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
      break;
 800469a:	e1ba      	b.n	8004a12 <adBms6830ParseFCell+0x61a>
 800469c:	0801fd74 	.word	0x0801fd74

    case E: /* Cell Register group E */
      ic[curr_ic].fcell.fc_codes[12] = (data[0] + (data[1] << 8));
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	b29a      	uxth	r2, r3
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	3301      	adds	r3, #1
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	021b      	lsls	r3, r3, #8
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	4413      	add	r3, r2
 80046b4:	b299      	uxth	r1, r3
 80046b6:	7d7b      	ldrb	r3, [r7, #21]
 80046b8:	f44f 724a 	mov.w	r2, #808	; 0x328
 80046bc:	fb02 f303 	mul.w	r3, r2, r3
 80046c0:	68ba      	ldr	r2, [r7, #8]
 80046c2:	4413      	add	r3, r2
 80046c4:	b20a      	sxth	r2, r1
 80046c6:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
      ic[curr_ic].fcell.fc_codes[13] = (data[2] + (data[3] << 8));
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	3302      	adds	r3, #2
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	b29a      	uxth	r2, r3
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	3303      	adds	r3, #3
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	b29b      	uxth	r3, r3
 80046da:	021b      	lsls	r3, r3, #8
 80046dc:	b29b      	uxth	r3, r3
 80046de:	4413      	add	r3, r2
 80046e0:	b299      	uxth	r1, r3
 80046e2:	7d7b      	ldrb	r3, [r7, #21]
 80046e4:	f44f 724a 	mov.w	r2, #808	; 0x328
 80046e8:	fb02 f303 	mul.w	r3, r2, r3
 80046ec:	68ba      	ldr	r2, [r7, #8]
 80046ee:	4413      	add	r3, r2
 80046f0:	b20a      	sxth	r2, r1
 80046f2:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
      ic[curr_ic].fcell.fc_codes[14] = (data[4] + (data[5] << 8));
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	3304      	adds	r3, #4
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	b29a      	uxth	r2, r3
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	3305      	adds	r3, #5
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	b29b      	uxth	r3, r3
 8004706:	021b      	lsls	r3, r3, #8
 8004708:	b29b      	uxth	r3, r3
 800470a:	4413      	add	r3, r2
 800470c:	b299      	uxth	r1, r3
 800470e:	7d7b      	ldrb	r3, [r7, #21]
 8004710:	f44f 724a 	mov.w	r2, #808	; 0x328
 8004714:	fb02 f303 	mul.w	r3, r2, r3
 8004718:	68ba      	ldr	r2, [r7, #8]
 800471a:	4413      	add	r3, r2
 800471c:	b20a      	sxth	r2, r1
 800471e:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
      break;
 8004722:	e176      	b.n	8004a12 <adBms6830ParseFCell+0x61a>

    case F: /* Cell Register group F */
      ic[curr_ic].fcell.fc_codes[15] = (data[0] + (data[1] << 8));
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	b29a      	uxth	r2, r3
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	3301      	adds	r3, #1
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	b29b      	uxth	r3, r3
 8004732:	021b      	lsls	r3, r3, #8
 8004734:	b29b      	uxth	r3, r3
 8004736:	4413      	add	r3, r2
 8004738:	b299      	uxth	r1, r3
 800473a:	7d7b      	ldrb	r3, [r7, #21]
 800473c:	f44f 724a 	mov.w	r2, #808	; 0x328
 8004740:	fb02 f303 	mul.w	r3, r2, r3
 8004744:	68ba      	ldr	r2, [r7, #8]
 8004746:	4413      	add	r3, r2
 8004748:	b20a      	sxth	r2, r1
 800474a:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
      break;
 800474e:	e160      	b.n	8004a12 <adBms6830ParseFCell+0x61a>

    case ALL_GRP: /* Cell Register group ALL */
      ic[curr_ic].fcell.fc_codes[0] = (data[0] + (data[1] << 8));
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	b29a      	uxth	r2, r3
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	3301      	adds	r3, #1
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	b29b      	uxth	r3, r3
 800475e:	021b      	lsls	r3, r3, #8
 8004760:	b29b      	uxth	r3, r3
 8004762:	4413      	add	r3, r2
 8004764:	b299      	uxth	r1, r3
 8004766:	7d7b      	ldrb	r3, [r7, #21]
 8004768:	f44f 724a 	mov.w	r2, #808	; 0x328
 800476c:	fb02 f303 	mul.w	r3, r2, r3
 8004770:	68ba      	ldr	r2, [r7, #8]
 8004772:	4413      	add	r3, r2
 8004774:	b20a      	sxth	r2, r1
 8004776:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
      ic[curr_ic].fcell.fc_codes[1] = (data[2] + (data[3] << 8));
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	3302      	adds	r3, #2
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	b29a      	uxth	r2, r3
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	3303      	adds	r3, #3
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	b29b      	uxth	r3, r3
 800478a:	021b      	lsls	r3, r3, #8
 800478c:	b29b      	uxth	r3, r3
 800478e:	4413      	add	r3, r2
 8004790:	b299      	uxth	r1, r3
 8004792:	7d7b      	ldrb	r3, [r7, #21]
 8004794:	f44f 724a 	mov.w	r2, #808	; 0x328
 8004798:	fb02 f303 	mul.w	r3, r2, r3
 800479c:	68ba      	ldr	r2, [r7, #8]
 800479e:	4413      	add	r3, r2
 80047a0:	b20a      	sxth	r2, r1
 80047a2:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
      ic[curr_ic].fcell.fc_codes[2] = (data[4] + (data[5] << 8));
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	3304      	adds	r3, #4
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	b29a      	uxth	r2, r3
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	3305      	adds	r3, #5
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	021b      	lsls	r3, r3, #8
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	4413      	add	r3, r2
 80047bc:	b299      	uxth	r1, r3
 80047be:	7d7b      	ldrb	r3, [r7, #21]
 80047c0:	f44f 724a 	mov.w	r2, #808	; 0x328
 80047c4:	fb02 f303 	mul.w	r3, r2, r3
 80047c8:	68ba      	ldr	r2, [r7, #8]
 80047ca:	4413      	add	r3, r2
 80047cc:	b20a      	sxth	r2, r1
 80047ce:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
      ic[curr_ic].fcell.fc_codes[3] = (data[6] + (data[7] << 8));
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	3306      	adds	r3, #6
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	b29a      	uxth	r2, r3
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	3307      	adds	r3, #7
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	021b      	lsls	r3, r3, #8
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	4413      	add	r3, r2
 80047e8:	b299      	uxth	r1, r3
 80047ea:	7d7b      	ldrb	r3, [r7, #21]
 80047ec:	f44f 724a 	mov.w	r2, #808	; 0x328
 80047f0:	fb02 f303 	mul.w	r3, r2, r3
 80047f4:	68ba      	ldr	r2, [r7, #8]
 80047f6:	4413      	add	r3, r2
 80047f8:	b20a      	sxth	r2, r1
 80047fa:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
      ic[curr_ic].fcell.fc_codes[4] = (data[8] + (data[9] << 8));
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	3308      	adds	r3, #8
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	b29a      	uxth	r2, r3
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	3309      	adds	r3, #9
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	b29b      	uxth	r3, r3
 800480e:	021b      	lsls	r3, r3, #8
 8004810:	b29b      	uxth	r3, r3
 8004812:	4413      	add	r3, r2
 8004814:	b299      	uxth	r1, r3
 8004816:	7d7b      	ldrb	r3, [r7, #21]
 8004818:	f44f 724a 	mov.w	r2, #808	; 0x328
 800481c:	fb02 f303 	mul.w	r3, r2, r3
 8004820:	68ba      	ldr	r2, [r7, #8]
 8004822:	4413      	add	r3, r2
 8004824:	b20a      	sxth	r2, r1
 8004826:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
      ic[curr_ic].fcell.fc_codes[5] = (data[10] + (data[11] << 8));
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	330a      	adds	r3, #10
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	b29a      	uxth	r2, r3
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	330b      	adds	r3, #11
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	b29b      	uxth	r3, r3
 800483a:	021b      	lsls	r3, r3, #8
 800483c:	b29b      	uxth	r3, r3
 800483e:	4413      	add	r3, r2
 8004840:	b299      	uxth	r1, r3
 8004842:	7d7b      	ldrb	r3, [r7, #21]
 8004844:	f44f 724a 	mov.w	r2, #808	; 0x328
 8004848:	fb02 f303 	mul.w	r3, r2, r3
 800484c:	68ba      	ldr	r2, [r7, #8]
 800484e:	4413      	add	r3, r2
 8004850:	b20a      	sxth	r2, r1
 8004852:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
      ic[curr_ic].fcell.fc_codes[6] = (data[12] + (data[13] << 8));
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	330c      	adds	r3, #12
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	b29a      	uxth	r2, r3
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	330d      	adds	r3, #13
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	b29b      	uxth	r3, r3
 8004866:	021b      	lsls	r3, r3, #8
 8004868:	b29b      	uxth	r3, r3
 800486a:	4413      	add	r3, r2
 800486c:	b299      	uxth	r1, r3
 800486e:	7d7b      	ldrb	r3, [r7, #21]
 8004870:	f44f 724a 	mov.w	r2, #808	; 0x328
 8004874:	fb02 f303 	mul.w	r3, r2, r3
 8004878:	68ba      	ldr	r2, [r7, #8]
 800487a:	4413      	add	r3, r2
 800487c:	b20a      	sxth	r2, r1
 800487e:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
      ic[curr_ic].fcell.fc_codes[7] = (data[14] + (data[15] << 8));
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	330e      	adds	r3, #14
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	b29a      	uxth	r2, r3
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	330f      	adds	r3, #15
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	b29b      	uxth	r3, r3
 8004892:	021b      	lsls	r3, r3, #8
 8004894:	b29b      	uxth	r3, r3
 8004896:	4413      	add	r3, r2
 8004898:	b299      	uxth	r1, r3
 800489a:	7d7b      	ldrb	r3, [r7, #21]
 800489c:	f44f 724a 	mov.w	r2, #808	; 0x328
 80048a0:	fb02 f303 	mul.w	r3, r2, r3
 80048a4:	68ba      	ldr	r2, [r7, #8]
 80048a6:	4413      	add	r3, r2
 80048a8:	b20a      	sxth	r2, r1
 80048aa:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
      ic[curr_ic].fcell.fc_codes[8] = (data[16] + (data[17] << 8));
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	3310      	adds	r3, #16
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	b29a      	uxth	r2, r3
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	3311      	adds	r3, #17
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	b29b      	uxth	r3, r3
 80048be:	021b      	lsls	r3, r3, #8
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	4413      	add	r3, r2
 80048c4:	b299      	uxth	r1, r3
 80048c6:	7d7b      	ldrb	r3, [r7, #21]
 80048c8:	f44f 724a 	mov.w	r2, #808	; 0x328
 80048cc:	fb02 f303 	mul.w	r3, r2, r3
 80048d0:	68ba      	ldr	r2, [r7, #8]
 80048d2:	4413      	add	r3, r2
 80048d4:	b20a      	sxth	r2, r1
 80048d6:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
      ic[curr_ic].fcell.fc_codes[9] =  (data[18] + (data[19] << 8));
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	3312      	adds	r3, #18
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	b29a      	uxth	r2, r3
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	3313      	adds	r3, #19
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	021b      	lsls	r3, r3, #8
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	4413      	add	r3, r2
 80048f0:	b299      	uxth	r1, r3
 80048f2:	7d7b      	ldrb	r3, [r7, #21]
 80048f4:	f44f 724a 	mov.w	r2, #808	; 0x328
 80048f8:	fb02 f303 	mul.w	r3, r2, r3
 80048fc:	68ba      	ldr	r2, [r7, #8]
 80048fe:	4413      	add	r3, r2
 8004900:	b20a      	sxth	r2, r1
 8004902:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
      ic[curr_ic].fcell.fc_codes[10] = (data[20] + (data[21] << 8));
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	3314      	adds	r3, #20
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	b29a      	uxth	r2, r3
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	3315      	adds	r3, #21
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	b29b      	uxth	r3, r3
 8004916:	021b      	lsls	r3, r3, #8
 8004918:	b29b      	uxth	r3, r3
 800491a:	4413      	add	r3, r2
 800491c:	b299      	uxth	r1, r3
 800491e:	7d7b      	ldrb	r3, [r7, #21]
 8004920:	f44f 724a 	mov.w	r2, #808	; 0x328
 8004924:	fb02 f303 	mul.w	r3, r2, r3
 8004928:	68ba      	ldr	r2, [r7, #8]
 800492a:	4413      	add	r3, r2
 800492c:	b20a      	sxth	r2, r1
 800492e:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
      ic[curr_ic].fcell.fc_codes[11] = (data[22] + (data[23] << 8));
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	3316      	adds	r3, #22
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	b29a      	uxth	r2, r3
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	3317      	adds	r3, #23
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	b29b      	uxth	r3, r3
 8004942:	021b      	lsls	r3, r3, #8
 8004944:	b29b      	uxth	r3, r3
 8004946:	4413      	add	r3, r2
 8004948:	b299      	uxth	r1, r3
 800494a:	7d7b      	ldrb	r3, [r7, #21]
 800494c:	f44f 724a 	mov.w	r2, #808	; 0x328
 8004950:	fb02 f303 	mul.w	r3, r2, r3
 8004954:	68ba      	ldr	r2, [r7, #8]
 8004956:	4413      	add	r3, r2
 8004958:	b20a      	sxth	r2, r1
 800495a:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
      ic[curr_ic].fcell.fc_codes[12] = (data[24] + (data[25] << 8));
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	3318      	adds	r3, #24
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	b29a      	uxth	r2, r3
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	3319      	adds	r3, #25
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	b29b      	uxth	r3, r3
 800496e:	021b      	lsls	r3, r3, #8
 8004970:	b29b      	uxth	r3, r3
 8004972:	4413      	add	r3, r2
 8004974:	b299      	uxth	r1, r3
 8004976:	7d7b      	ldrb	r3, [r7, #21]
 8004978:	f44f 724a 	mov.w	r2, #808	; 0x328
 800497c:	fb02 f303 	mul.w	r3, r2, r3
 8004980:	68ba      	ldr	r2, [r7, #8]
 8004982:	4413      	add	r3, r2
 8004984:	b20a      	sxth	r2, r1
 8004986:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
      ic[curr_ic].fcell.fc_codes[13] = (data[26] + (data[27] << 8));
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	331a      	adds	r3, #26
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	b29a      	uxth	r2, r3
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	331b      	adds	r3, #27
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	b29b      	uxth	r3, r3
 800499a:	021b      	lsls	r3, r3, #8
 800499c:	b29b      	uxth	r3, r3
 800499e:	4413      	add	r3, r2
 80049a0:	b299      	uxth	r1, r3
 80049a2:	7d7b      	ldrb	r3, [r7, #21]
 80049a4:	f44f 724a 	mov.w	r2, #808	; 0x328
 80049a8:	fb02 f303 	mul.w	r3, r2, r3
 80049ac:	68ba      	ldr	r2, [r7, #8]
 80049ae:	4413      	add	r3, r2
 80049b0:	b20a      	sxth	r2, r1
 80049b2:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
      ic[curr_ic].fcell.fc_codes[14] = (data[28] + (data[29] << 8));
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	331c      	adds	r3, #28
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	b29a      	uxth	r2, r3
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	331d      	adds	r3, #29
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	021b      	lsls	r3, r3, #8
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	4413      	add	r3, r2
 80049cc:	b299      	uxth	r1, r3
 80049ce:	7d7b      	ldrb	r3, [r7, #21]
 80049d0:	f44f 724a 	mov.w	r2, #808	; 0x328
 80049d4:	fb02 f303 	mul.w	r3, r2, r3
 80049d8:	68ba      	ldr	r2, [r7, #8]
 80049da:	4413      	add	r3, r2
 80049dc:	b20a      	sxth	r2, r1
 80049de:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
      ic[curr_ic].fcell.fc_codes[15] = (data[30] + (data[31] << 8));
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	331e      	adds	r3, #30
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	b29a      	uxth	r2, r3
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	331f      	adds	r3, #31
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	021b      	lsls	r3, r3, #8
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	4413      	add	r3, r2
 80049f8:	b299      	uxth	r1, r3
 80049fa:	7d7b      	ldrb	r3, [r7, #21]
 80049fc:	f44f 724a 	mov.w	r2, #808	; 0x328
 8004a00:	fb02 f303 	mul.w	r3, r2, r3
 8004a04:	68ba      	ldr	r2, [r7, #8]
 8004a06:	4413      	add	r3, r2
 8004a08:	b20a      	sxth	r2, r1
 8004a0a:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
      break;
 8004a0e:	e000      	b.n	8004a12 <adBms6830ParseFCell+0x61a>

    default:
      break;
 8004a10:	bf00      	nop
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8004a12:	7d7b      	ldrb	r3, [r7, #21]
 8004a14:	3301      	adds	r3, #1
 8004a16:	757b      	strb	r3, [r7, #21]
 8004a18:	7d7a      	ldrb	r2, [r7, #21]
 8004a1a:	7bfb      	ldrb	r3, [r7, #15]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	f4ff ad11 	bcc.w	8004444 <adBms6830ParseFCell+0x4c>
    }
  }
  free(data);
 8004a22:	6938      	ldr	r0, [r7, #16]
 8004a24:	f015 fdae 	bl	801a584 <free>
}
 8004a28:	bf00      	nop
 8004a2a:	3718      	adds	r7, #24
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <adBms6830ParseAux>:
 * @return None
 *
 *******************************************************************************
*/
void adBms6830ParseAux(uint8_t tIC, cell_asic *ic, GRP grp, uint8_t *aux_data)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b086      	sub	sp, #24
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60b9      	str	r1, [r7, #8]
 8004a38:	607b      	str	r3, [r7, #4]
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	73fb      	strb	r3, [r7, #15]
 8004a3e:	4613      	mov	r3, r2
 8004a40:	73bb      	strb	r3, [r7, #14]
  uint8_t *data, data_size, address = 0;
 8004a42:	2300      	movs	r3, #0
 8004a44:	75bb      	strb	r3, [r7, #22]
  if(grp == ALL_GRP){data_size = (RDASALL_SIZE-44);}  /* RDASALL_SIZE 68 byte - (RAUX 20 byte + STATUS 24 byte) */
 8004a46:	7bbb      	ldrb	r3, [r7, #14]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d102      	bne.n	8004a52 <adBms6830ParseAux+0x22>
 8004a4c:	231a      	movs	r3, #26
 8004a4e:	75fb      	strb	r3, [r7, #23]
 8004a50:	e001      	b.n	8004a56 <adBms6830ParseAux+0x26>
  else {data_size = RX_DATA;}
 8004a52:	2308      	movs	r3, #8
 8004a54:	75fb      	strb	r3, [r7, #23]
  data = (uint8_t *)calloc(data_size, sizeof(uint8_t));
 8004a56:	7dfb      	ldrb	r3, [r7, #23]
 8004a58:	2101      	movs	r1, #1
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f015 fd5a 	bl	801a514 <calloc>
 8004a60:	4603      	mov	r3, r0
 8004a62:	613b      	str	r3, [r7, #16]
  if(data == NULL)
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d105      	bne.n	8004a76 <adBms6830ParseAux+0x46>
  {
    #ifdef MBED
    pc.printf(" Failed to allocate parse aux memory \n");
    #else
    printf(" Failed to allocate parse aux memory \n");
 8004a6a:	4898      	ldr	r0, [pc, #608]	; (8004ccc <adBms6830ParseAux+0x29c>)
 8004a6c:	f016 fdca 	bl	801b604 <puts>
    #endif
    exit(0);
 8004a70:	2000      	movs	r0, #0
 8004a72:	f015 fd6d 	bl	801a550 <exit>
  }
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8004a76:	2300      	movs	r3, #0
 8004a78:	757b      	strb	r3, [r7, #21]
 8004a7a:	e235      	b.n	8004ee8 <adBms6830ParseAux+0x4b8>
  {
    memcpy(&data[0], &aux_data[address], data_size); /* dst , src , size */
 8004a7c:	7dbb      	ldrb	r3, [r7, #22]
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	4413      	add	r3, r2
 8004a82:	7dfa      	ldrb	r2, [r7, #23]
 8004a84:	4619      	mov	r1, r3
 8004a86:	6938      	ldr	r0, [r7, #16]
 8004a88:	f016 ff4b 	bl	801b922 <memcpy>
    address = ((curr_ic+1) * (data_size));
 8004a8c:	7d7b      	ldrb	r3, [r7, #21]
 8004a8e:	3301      	adds	r3, #1
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	7dfa      	ldrb	r2, [r7, #23]
 8004a94:	fb12 f303 	smulbb	r3, r2, r3
 8004a98:	75bb      	strb	r3, [r7, #22]
    switch (grp)
 8004a9a:	7bbb      	ldrb	r3, [r7, #14]
 8004a9c:	2b04      	cmp	r3, #4
 8004a9e:	f200 821f 	bhi.w	8004ee0 <adBms6830ParseAux+0x4b0>
 8004aa2:	a201      	add	r2, pc, #4	; (adr r2, 8004aa8 <adBms6830ParseAux+0x78>)
 8004aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa8:	08004cd1 	.word	0x08004cd1
 8004aac:	08004abd 	.word	0x08004abd
 8004ab0:	08004b41 	.word	0x08004b41
 8004ab4:	08004bc5 	.word	0x08004bc5
 8004ab8:	08004c49 	.word	0x08004c49
    {
    case A: /* Aux Register group A */
      ic[curr_ic].aux.a_codes[0] = (data[0] + (data[1] << 8));
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	b29a      	uxth	r2, r3
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	021b      	lsls	r3, r3, #8
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	4413      	add	r3, r2
 8004ad0:	b299      	uxth	r1, r3
 8004ad2:	7d7b      	ldrb	r3, [r7, #21]
 8004ad4:	f44f 724a 	mov.w	r2, #808	; 0x328
 8004ad8:	fb02 f303 	mul.w	r3, r2, r3
 8004adc:	68ba      	ldr	r2, [r7, #8]
 8004ade:	4413      	add	r3, r2
 8004ae0:	b20a      	sxth	r2, r1
 8004ae2:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
      ic[curr_ic].aux.a_codes[1] = (data[2] + (data[3] << 8));
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	3302      	adds	r3, #2
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	b29a      	uxth	r2, r3
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	3303      	adds	r3, #3
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	021b      	lsls	r3, r3, #8
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	4413      	add	r3, r2
 8004afc:	b299      	uxth	r1, r3
 8004afe:	7d7b      	ldrb	r3, [r7, #21]
 8004b00:	f44f 724a 	mov.w	r2, #808	; 0x328
 8004b04:	fb02 f303 	mul.w	r3, r2, r3
 8004b08:	68ba      	ldr	r2, [r7, #8]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	b20a      	sxth	r2, r1
 8004b0e:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
      ic[curr_ic].aux.a_codes[2] = (data[4] + (data[5] << 8));
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	3304      	adds	r3, #4
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	b29a      	uxth	r2, r3
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	3305      	adds	r3, #5
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	021b      	lsls	r3, r3, #8
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	4413      	add	r3, r2
 8004b28:	b299      	uxth	r1, r3
 8004b2a:	7d7b      	ldrb	r3, [r7, #21]
 8004b2c:	f44f 724a 	mov.w	r2, #808	; 0x328
 8004b30:	fb02 f303 	mul.w	r3, r2, r3
 8004b34:	68ba      	ldr	r2, [r7, #8]
 8004b36:	4413      	add	r3, r2
 8004b38:	b20a      	sxth	r2, r1
 8004b3a:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
      break;
 8004b3e:	e1d0      	b.n	8004ee2 <adBms6830ParseAux+0x4b2>

    case B: /* Aux Register group B */
      ic[curr_ic].aux.a_codes[3] = (data[0] + (data[1] << 8));
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	b29a      	uxth	r2, r3
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	3301      	adds	r3, #1
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	021b      	lsls	r3, r3, #8
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	4413      	add	r3, r2
 8004b54:	b299      	uxth	r1, r3
 8004b56:	7d7b      	ldrb	r3, [r7, #21]
 8004b58:	f44f 724a 	mov.w	r2, #808	; 0x328
 8004b5c:	fb02 f303 	mul.w	r3, r2, r3
 8004b60:	68ba      	ldr	r2, [r7, #8]
 8004b62:	4413      	add	r3, r2
 8004b64:	b20a      	sxth	r2, r1
 8004b66:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
      ic[curr_ic].aux.a_codes[4] = (data[2] + (data[3] << 8));
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	3302      	adds	r3, #2
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	b29a      	uxth	r2, r3
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	3303      	adds	r3, #3
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	021b      	lsls	r3, r3, #8
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	4413      	add	r3, r2
 8004b80:	b299      	uxth	r1, r3
 8004b82:	7d7b      	ldrb	r3, [r7, #21]
 8004b84:	f44f 724a 	mov.w	r2, #808	; 0x328
 8004b88:	fb02 f303 	mul.w	r3, r2, r3
 8004b8c:	68ba      	ldr	r2, [r7, #8]
 8004b8e:	4413      	add	r3, r2
 8004b90:	b20a      	sxth	r2, r1
 8004b92:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
      ic[curr_ic].aux.a_codes[5] = (data[4] + (data[5] << 8));
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	3304      	adds	r3, #4
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	b29a      	uxth	r2, r3
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	3305      	adds	r3, #5
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	021b      	lsls	r3, r3, #8
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	4413      	add	r3, r2
 8004bac:	b299      	uxth	r1, r3
 8004bae:	7d7b      	ldrb	r3, [r7, #21]
 8004bb0:	f44f 724a 	mov.w	r2, #808	; 0x328
 8004bb4:	fb02 f303 	mul.w	r3, r2, r3
 8004bb8:	68ba      	ldr	r2, [r7, #8]
 8004bba:	4413      	add	r3, r2
 8004bbc:	b20a      	sxth	r2, r1
 8004bbe:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
      break;
 8004bc2:	e18e      	b.n	8004ee2 <adBms6830ParseAux+0x4b2>

    case C: /* Aux Register group C */
      ic[curr_ic].aux.a_codes[6] = (data[0] + (data[1] << 8));
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	b29a      	uxth	r2, r3
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	3301      	adds	r3, #1
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	021b      	lsls	r3, r3, #8
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	4413      	add	r3, r2
 8004bd8:	b299      	uxth	r1, r3
 8004bda:	7d7b      	ldrb	r3, [r7, #21]
 8004bdc:	f44f 724a 	mov.w	r2, #808	; 0x328
 8004be0:	fb02 f303 	mul.w	r3, r2, r3
 8004be4:	68ba      	ldr	r2, [r7, #8]
 8004be6:	4413      	add	r3, r2
 8004be8:	b20a      	sxth	r2, r1
 8004bea:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
      ic[curr_ic].aux.a_codes[7] = (data[2] + (data[3] << 8));
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	3302      	adds	r3, #2
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	b29a      	uxth	r2, r3
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	3303      	adds	r3, #3
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	021b      	lsls	r3, r3, #8
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	4413      	add	r3, r2
 8004c04:	b299      	uxth	r1, r3
 8004c06:	7d7b      	ldrb	r3, [r7, #21]
 8004c08:	f44f 724a 	mov.w	r2, #808	; 0x328
 8004c0c:	fb02 f303 	mul.w	r3, r2, r3
 8004c10:	68ba      	ldr	r2, [r7, #8]
 8004c12:	4413      	add	r3, r2
 8004c14:	b20a      	sxth	r2, r1
 8004c16:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
      ic[curr_ic].aux.a_codes[8] = (data[4] + (data[5] << 8));
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	3304      	adds	r3, #4
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	b29a      	uxth	r2, r3
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	3305      	adds	r3, #5
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	021b      	lsls	r3, r3, #8
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	4413      	add	r3, r2
 8004c30:	b299      	uxth	r1, r3
 8004c32:	7d7b      	ldrb	r3, [r7, #21]
 8004c34:	f44f 724a 	mov.w	r2, #808	; 0x328
 8004c38:	fb02 f303 	mul.w	r3, r2, r3
 8004c3c:	68ba      	ldr	r2, [r7, #8]
 8004c3e:	4413      	add	r3, r2
 8004c40:	b20a      	sxth	r2, r1
 8004c42:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
      break;
 8004c46:	e14c      	b.n	8004ee2 <adBms6830ParseAux+0x4b2>

    case D: /* Aux Register group D */
      ic[curr_ic].aux.a_codes[9] =  (data[0] + (data[1] << 8));
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	b29a      	uxth	r2, r3
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	3301      	adds	r3, #1
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	021b      	lsls	r3, r3, #8
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	4413      	add	r3, r2
 8004c5c:	b299      	uxth	r1, r3
 8004c5e:	7d7b      	ldrb	r3, [r7, #21]
 8004c60:	f44f 724a 	mov.w	r2, #808	; 0x328
 8004c64:	fb02 f303 	mul.w	r3, r2, r3
 8004c68:	68ba      	ldr	r2, [r7, #8]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	b20a      	sxth	r2, r1
 8004c6e:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
      ic[curr_ic].aux.a_codes[10] =  (data[2] + (data[3] << 8));
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	3302      	adds	r3, #2
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	b29a      	uxth	r2, r3
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	3303      	adds	r3, #3
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	021b      	lsls	r3, r3, #8
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	4413      	add	r3, r2
 8004c88:	b299      	uxth	r1, r3
 8004c8a:	7d7b      	ldrb	r3, [r7, #21]
 8004c8c:	f44f 724a 	mov.w	r2, #808	; 0x328
 8004c90:	fb02 f303 	mul.w	r3, r2, r3
 8004c94:	68ba      	ldr	r2, [r7, #8]
 8004c96:	4413      	add	r3, r2
 8004c98:	b20a      	sxth	r2, r1
 8004c9a:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
      ic[curr_ic].aux.a_codes[11] =  (data[4] + (data[5] << 8));
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	3304      	adds	r3, #4
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	b29a      	uxth	r2, r3
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	3305      	adds	r3, #5
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	021b      	lsls	r3, r3, #8
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	4413      	add	r3, r2
 8004cb4:	b299      	uxth	r1, r3
 8004cb6:	7d7b      	ldrb	r3, [r7, #21]
 8004cb8:	f44f 724a 	mov.w	r2, #808	; 0x328
 8004cbc:	fb02 f303 	mul.w	r3, r2, r3
 8004cc0:	68ba      	ldr	r2, [r7, #8]
 8004cc2:	4413      	add	r3, r2
 8004cc4:	b20a      	sxth	r2, r1
 8004cc6:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
      break;
 8004cca:	e10a      	b.n	8004ee2 <adBms6830ParseAux+0x4b2>
 8004ccc:	0801fd9c 	.word	0x0801fd9c

   case ALL_GRP: /* Aux Register group ALL */
      ic[curr_ic].aux.a_codes[0]  = (data[0] + (data[1] << 8));
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	b29a      	uxth	r2, r3
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	3301      	adds	r3, #1
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	021b      	lsls	r3, r3, #8
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	4413      	add	r3, r2
 8004ce4:	b299      	uxth	r1, r3
 8004ce6:	7d7b      	ldrb	r3, [r7, #21]
 8004ce8:	f44f 724a 	mov.w	r2, #808	; 0x328
 8004cec:	fb02 f303 	mul.w	r3, r2, r3
 8004cf0:	68ba      	ldr	r2, [r7, #8]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	b20a      	sxth	r2, r1
 8004cf6:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
      ic[curr_ic].aux.a_codes[1]  = (data[2] + (data[3] << 8));
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	3302      	adds	r3, #2
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	3303      	adds	r3, #3
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	021b      	lsls	r3, r3, #8
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	4413      	add	r3, r2
 8004d10:	b299      	uxth	r1, r3
 8004d12:	7d7b      	ldrb	r3, [r7, #21]
 8004d14:	f44f 724a 	mov.w	r2, #808	; 0x328
 8004d18:	fb02 f303 	mul.w	r3, r2, r3
 8004d1c:	68ba      	ldr	r2, [r7, #8]
 8004d1e:	4413      	add	r3, r2
 8004d20:	b20a      	sxth	r2, r1
 8004d22:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
      ic[curr_ic].aux.a_codes[2]  = (data[4] + (data[5] << 8));
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	3304      	adds	r3, #4
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	b29a      	uxth	r2, r3
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	3305      	adds	r3, #5
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	021b      	lsls	r3, r3, #8
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	4413      	add	r3, r2
 8004d3c:	b299      	uxth	r1, r3
 8004d3e:	7d7b      	ldrb	r3, [r7, #21]
 8004d40:	f44f 724a 	mov.w	r2, #808	; 0x328
 8004d44:	fb02 f303 	mul.w	r3, r2, r3
 8004d48:	68ba      	ldr	r2, [r7, #8]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	b20a      	sxth	r2, r1
 8004d4e:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
      ic[curr_ic].aux.a_codes[3]  = (data[6] + (data[7] << 8));
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	3306      	adds	r3, #6
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	b29a      	uxth	r2, r3
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	3307      	adds	r3, #7
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	021b      	lsls	r3, r3, #8
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	4413      	add	r3, r2
 8004d68:	b299      	uxth	r1, r3
 8004d6a:	7d7b      	ldrb	r3, [r7, #21]
 8004d6c:	f44f 724a 	mov.w	r2, #808	; 0x328
 8004d70:	fb02 f303 	mul.w	r3, r2, r3
 8004d74:	68ba      	ldr	r2, [r7, #8]
 8004d76:	4413      	add	r3, r2
 8004d78:	b20a      	sxth	r2, r1
 8004d7a:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
      ic[curr_ic].aux.a_codes[4]  = (data[8] + (data[9] << 8));
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	3308      	adds	r3, #8
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	b29a      	uxth	r2, r3
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	3309      	adds	r3, #9
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	021b      	lsls	r3, r3, #8
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	4413      	add	r3, r2
 8004d94:	b299      	uxth	r1, r3
 8004d96:	7d7b      	ldrb	r3, [r7, #21]
 8004d98:	f44f 724a 	mov.w	r2, #808	; 0x328
 8004d9c:	fb02 f303 	mul.w	r3, r2, r3
 8004da0:	68ba      	ldr	r2, [r7, #8]
 8004da2:	4413      	add	r3, r2
 8004da4:	b20a      	sxth	r2, r1
 8004da6:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
      ic[curr_ic].aux.a_codes[5]  = (data[10] + (data[11] << 8));
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	330a      	adds	r3, #10
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	b29a      	uxth	r2, r3
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	330b      	adds	r3, #11
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	021b      	lsls	r3, r3, #8
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	4413      	add	r3, r2
 8004dc0:	b299      	uxth	r1, r3
 8004dc2:	7d7b      	ldrb	r3, [r7, #21]
 8004dc4:	f44f 724a 	mov.w	r2, #808	; 0x328
 8004dc8:	fb02 f303 	mul.w	r3, r2, r3
 8004dcc:	68ba      	ldr	r2, [r7, #8]
 8004dce:	4413      	add	r3, r2
 8004dd0:	b20a      	sxth	r2, r1
 8004dd2:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
      ic[curr_ic].aux.a_codes[6]  = (data[12] + (data[13] << 8));
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	330c      	adds	r3, #12
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	b29a      	uxth	r2, r3
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	330d      	adds	r3, #13
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	021b      	lsls	r3, r3, #8
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	4413      	add	r3, r2
 8004dec:	b299      	uxth	r1, r3
 8004dee:	7d7b      	ldrb	r3, [r7, #21]
 8004df0:	f44f 724a 	mov.w	r2, #808	; 0x328
 8004df4:	fb02 f303 	mul.w	r3, r2, r3
 8004df8:	68ba      	ldr	r2, [r7, #8]
 8004dfa:	4413      	add	r3, r2
 8004dfc:	b20a      	sxth	r2, r1
 8004dfe:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
      ic[curr_ic].aux.a_codes[7]  = (data[14] + (data[15] << 8));
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	330e      	adds	r3, #14
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	330f      	adds	r3, #15
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	021b      	lsls	r3, r3, #8
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	4413      	add	r3, r2
 8004e18:	b299      	uxth	r1, r3
 8004e1a:	7d7b      	ldrb	r3, [r7, #21]
 8004e1c:	f44f 724a 	mov.w	r2, #808	; 0x328
 8004e20:	fb02 f303 	mul.w	r3, r2, r3
 8004e24:	68ba      	ldr	r2, [r7, #8]
 8004e26:	4413      	add	r3, r2
 8004e28:	b20a      	sxth	r2, r1
 8004e2a:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
      ic[curr_ic].aux.a_codes[8]  = (data[16] + (data[17] << 8));
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	3310      	adds	r3, #16
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	b29a      	uxth	r2, r3
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	3311      	adds	r3, #17
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	021b      	lsls	r3, r3, #8
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	4413      	add	r3, r2
 8004e44:	b299      	uxth	r1, r3
 8004e46:	7d7b      	ldrb	r3, [r7, #21]
 8004e48:	f44f 724a 	mov.w	r2, #808	; 0x328
 8004e4c:	fb02 f303 	mul.w	r3, r2, r3
 8004e50:	68ba      	ldr	r2, [r7, #8]
 8004e52:	4413      	add	r3, r2
 8004e54:	b20a      	sxth	r2, r1
 8004e56:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
      ic[curr_ic].aux.a_codes[9]  = (data[18] + (data[19] << 8));
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	3312      	adds	r3, #18
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	b29a      	uxth	r2, r3
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	3313      	adds	r3, #19
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	021b      	lsls	r3, r3, #8
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	4413      	add	r3, r2
 8004e70:	b299      	uxth	r1, r3
 8004e72:	7d7b      	ldrb	r3, [r7, #21]
 8004e74:	f44f 724a 	mov.w	r2, #808	; 0x328
 8004e78:	fb02 f303 	mul.w	r3, r2, r3
 8004e7c:	68ba      	ldr	r2, [r7, #8]
 8004e7e:	4413      	add	r3, r2
 8004e80:	b20a      	sxth	r2, r1
 8004e82:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
      ic[curr_ic].aux.a_codes[10] = (data[20] + (data[21] << 8));
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	3314      	adds	r3, #20
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	b29a      	uxth	r2, r3
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	3315      	adds	r3, #21
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	021b      	lsls	r3, r3, #8
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	4413      	add	r3, r2
 8004e9c:	b299      	uxth	r1, r3
 8004e9e:	7d7b      	ldrb	r3, [r7, #21]
 8004ea0:	f44f 724a 	mov.w	r2, #808	; 0x328
 8004ea4:	fb02 f303 	mul.w	r3, r2, r3
 8004ea8:	68ba      	ldr	r2, [r7, #8]
 8004eaa:	4413      	add	r3, r2
 8004eac:	b20a      	sxth	r2, r1
 8004eae:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
      ic[curr_ic].aux.a_codes[11] = (data[22] + (data[23] << 8));
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	3316      	adds	r3, #22
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	b29a      	uxth	r2, r3
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	3317      	adds	r3, #23
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	021b      	lsls	r3, r3, #8
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	4413      	add	r3, r2
 8004ec8:	b299      	uxth	r1, r3
 8004eca:	7d7b      	ldrb	r3, [r7, #21]
 8004ecc:	f44f 724a 	mov.w	r2, #808	; 0x328
 8004ed0:	fb02 f303 	mul.w	r3, r2, r3
 8004ed4:	68ba      	ldr	r2, [r7, #8]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	b20a      	sxth	r2, r1
 8004eda:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
     break;
 8004ede:	e000      	b.n	8004ee2 <adBms6830ParseAux+0x4b2>

    default:
      break;
 8004ee0:	bf00      	nop
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8004ee2:	7d7b      	ldrb	r3, [r7, #21]
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	757b      	strb	r3, [r7, #21]
 8004ee8:	7d7a      	ldrb	r2, [r7, #21]
 8004eea:	7bfb      	ldrb	r3, [r7, #15]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	f4ff adc5 	bcc.w	8004a7c <adBms6830ParseAux+0x4c>
    }
  }
  free(data);
 8004ef2:	6938      	ldr	r0, [r7, #16]
 8004ef4:	f015 fb46 	bl	801a584 <free>
}
 8004ef8:	bf00      	nop
 8004efa:	3718      	adds	r7, #24
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <adBms6830ParseRAux>:
 * @return None
 *
 *******************************************************************************
*/
void adBms6830ParseRAux(uint8_t tIC, cell_asic *ic, GRP grp, uint8_t *raux_data)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b086      	sub	sp, #24
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60b9      	str	r1, [r7, #8]
 8004f08:	607b      	str	r3, [r7, #4]
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	73fb      	strb	r3, [r7, #15]
 8004f0e:	4613      	mov	r3, r2
 8004f10:	73bb      	strb	r3, [r7, #14]
  uint8_t *data, data_size, address = 0;
 8004f12:	2300      	movs	r3, #0
 8004f14:	75bb      	strb	r3, [r7, #22]
  if(grp == ALL_GRP){data_size = (RDASALL_SIZE-48);}  /* RDASALL_SIZE 68 byte - (AUX 24 byte + STATUS 24 byte) */
 8004f16:	7bbb      	ldrb	r3, [r7, #14]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d102      	bne.n	8004f22 <adBms6830ParseRAux+0x22>
 8004f1c:	2316      	movs	r3, #22
 8004f1e:	75fb      	strb	r3, [r7, #23]
 8004f20:	e001      	b.n	8004f26 <adBms6830ParseRAux+0x26>
  else {data_size = RX_DATA;}
 8004f22:	2308      	movs	r3, #8
 8004f24:	75fb      	strb	r3, [r7, #23]
  data = (uint8_t *)calloc(data_size, sizeof(uint8_t));
 8004f26:	7dfb      	ldrb	r3, [r7, #23]
 8004f28:	2101      	movs	r1, #1
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f015 faf2 	bl	801a514 <calloc>
 8004f30:	4603      	mov	r3, r0
 8004f32:	613b      	str	r3, [r7, #16]
  if(data == NULL)
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d105      	bne.n	8004f46 <adBms6830ParseRAux+0x46>
  {
    #ifdef MBED
    pc.printf(" Failed to allocate parse raux memory \n");
    #else
    printf(" Failed to allocate parse raux memory \n");
 8004f3a:	4882      	ldr	r0, [pc, #520]	; (8005144 <adBms6830ParseRAux+0x244>)
 8004f3c:	f016 fb62 	bl	801b604 <puts>
    #endif
    exit(0);
 8004f40:	2000      	movs	r0, #0
 8004f42:	f015 fb05 	bl	801a550 <exit>
  }
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8004f46:	2300      	movs	r3, #0
 8004f48:	757b      	strb	r3, [r7, #21]
 8004f4a:	e1dd      	b.n	8005308 <adBms6830ParseRAux+0x408>
  {
    memcpy(&data[0], &raux_data[address], data_size); /* dst , src , size */
 8004f4c:	7dbb      	ldrb	r3, [r7, #22]
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	4413      	add	r3, r2
 8004f52:	7dfa      	ldrb	r2, [r7, #23]
 8004f54:	4619      	mov	r1, r3
 8004f56:	6938      	ldr	r0, [r7, #16]
 8004f58:	f016 fce3 	bl	801b922 <memcpy>
    address = ((curr_ic+1) * (data_size));
 8004f5c:	7d7b      	ldrb	r3, [r7, #21]
 8004f5e:	3301      	adds	r3, #1
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	7dfa      	ldrb	r2, [r7, #23]
 8004f64:	fb12 f303 	smulbb	r3, r2, r3
 8004f68:	75bb      	strb	r3, [r7, #22]
    switch (grp)
 8004f6a:	7bbb      	ldrb	r3, [r7, #14]
 8004f6c:	2b04      	cmp	r3, #4
 8004f6e:	f200 81c7 	bhi.w	8005300 <adBms6830ParseRAux+0x400>
 8004f72:	a201      	add	r2, pc, #4	; (adr r2, 8004f78 <adBms6830ParseRAux+0x78>)
 8004f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f78:	08005149 	.word	0x08005149
 8004f7c:	08004f8d 	.word	0x08004f8d
 8004f80:	08005011 	.word	0x08005011
 8004f84:	08005095 	.word	0x08005095
 8004f88:	08005119 	.word	0x08005119
    {
    case A: /* RAux Register group A */
      ic[curr_ic].raux.ra_codes[0] = (data[0] + (data[1] << 8));
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	b29a      	uxth	r2, r3
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	3301      	adds	r3, #1
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	021b      	lsls	r3, r3, #8
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	4413      	add	r3, r2
 8004fa0:	b299      	uxth	r1, r3
 8004fa2:	7d7b      	ldrb	r3, [r7, #21]
 8004fa4:	f44f 724a 	mov.w	r2, #808	; 0x328
 8004fa8:	fb02 f303 	mul.w	r3, r2, r3
 8004fac:	68ba      	ldr	r2, [r7, #8]
 8004fae:	4413      	add	r3, r2
 8004fb0:	b20a      	sxth	r2, r1
 8004fb2:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
      ic[curr_ic].raux.ra_codes[1] = (data[2] + (data[3] << 8));
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	3302      	adds	r3, #2
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	b29a      	uxth	r2, r3
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	3303      	adds	r3, #3
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	021b      	lsls	r3, r3, #8
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	4413      	add	r3, r2
 8004fcc:	b299      	uxth	r1, r3
 8004fce:	7d7b      	ldrb	r3, [r7, #21]
 8004fd0:	f44f 724a 	mov.w	r2, #808	; 0x328
 8004fd4:	fb02 f303 	mul.w	r3, r2, r3
 8004fd8:	68ba      	ldr	r2, [r7, #8]
 8004fda:	4413      	add	r3, r2
 8004fdc:	b20a      	sxth	r2, r1
 8004fde:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
      ic[curr_ic].raux.ra_codes[2] = (data[4] + (data[5] << 8));
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	3304      	adds	r3, #4
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	b29a      	uxth	r2, r3
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	3305      	adds	r3, #5
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	021b      	lsls	r3, r3, #8
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	4413      	add	r3, r2
 8004ff8:	b299      	uxth	r1, r3
 8004ffa:	7d7b      	ldrb	r3, [r7, #21]
 8004ffc:	f44f 724a 	mov.w	r2, #808	; 0x328
 8005000:	fb02 f303 	mul.w	r3, r2, r3
 8005004:	68ba      	ldr	r2, [r7, #8]
 8005006:	4413      	add	r3, r2
 8005008:	b20a      	sxth	r2, r1
 800500a:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
      break;
 800500e:	e178      	b.n	8005302 <adBms6830ParseRAux+0x402>

    case B: /* RAux Register group B */
      ic[curr_ic].raux.ra_codes[3] = (data[0] + (data[1] << 8));
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	b29a      	uxth	r2, r3
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	3301      	adds	r3, #1
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	b29b      	uxth	r3, r3
 800501e:	021b      	lsls	r3, r3, #8
 8005020:	b29b      	uxth	r3, r3
 8005022:	4413      	add	r3, r2
 8005024:	b299      	uxth	r1, r3
 8005026:	7d7b      	ldrb	r3, [r7, #21]
 8005028:	f44f 724a 	mov.w	r2, #808	; 0x328
 800502c:	fb02 f303 	mul.w	r3, r2, r3
 8005030:	68ba      	ldr	r2, [r7, #8]
 8005032:	4413      	add	r3, r2
 8005034:	b20a      	sxth	r2, r1
 8005036:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
      ic[curr_ic].raux.ra_codes[4] = (data[2] + (data[3] << 8));
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	3302      	adds	r3, #2
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	b29a      	uxth	r2, r3
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	3303      	adds	r3, #3
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	b29b      	uxth	r3, r3
 800504a:	021b      	lsls	r3, r3, #8
 800504c:	b29b      	uxth	r3, r3
 800504e:	4413      	add	r3, r2
 8005050:	b299      	uxth	r1, r3
 8005052:	7d7b      	ldrb	r3, [r7, #21]
 8005054:	f44f 724a 	mov.w	r2, #808	; 0x328
 8005058:	fb02 f303 	mul.w	r3, r2, r3
 800505c:	68ba      	ldr	r2, [r7, #8]
 800505e:	4413      	add	r3, r2
 8005060:	b20a      	sxth	r2, r1
 8005062:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
      ic[curr_ic].raux.ra_codes[5] = (data[4] + (data[5] << 8));
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	3304      	adds	r3, #4
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	b29a      	uxth	r2, r3
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	3305      	adds	r3, #5
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	b29b      	uxth	r3, r3
 8005076:	021b      	lsls	r3, r3, #8
 8005078:	b29b      	uxth	r3, r3
 800507a:	4413      	add	r3, r2
 800507c:	b299      	uxth	r1, r3
 800507e:	7d7b      	ldrb	r3, [r7, #21]
 8005080:	f44f 724a 	mov.w	r2, #808	; 0x328
 8005084:	fb02 f303 	mul.w	r3, r2, r3
 8005088:	68ba      	ldr	r2, [r7, #8]
 800508a:	4413      	add	r3, r2
 800508c:	b20a      	sxth	r2, r1
 800508e:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
      break;
 8005092:	e136      	b.n	8005302 <adBms6830ParseRAux+0x402>

    case C: /* RAux Register group C */
      ic[curr_ic].raux.ra_codes[6] = (data[0] + (data[1] << 8));
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	b29a      	uxth	r2, r3
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	3301      	adds	r3, #1
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	021b      	lsls	r3, r3, #8
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	4413      	add	r3, r2
 80050a8:	b299      	uxth	r1, r3
 80050aa:	7d7b      	ldrb	r3, [r7, #21]
 80050ac:	f44f 724a 	mov.w	r2, #808	; 0x328
 80050b0:	fb02 f303 	mul.w	r3, r2, r3
 80050b4:	68ba      	ldr	r2, [r7, #8]
 80050b6:	4413      	add	r3, r2
 80050b8:	b20a      	sxth	r2, r1
 80050ba:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
      ic[curr_ic].raux.ra_codes[7] = (data[2] + (data[3] << 8));
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	3302      	adds	r3, #2
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	b29a      	uxth	r2, r3
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	3303      	adds	r3, #3
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	021b      	lsls	r3, r3, #8
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	4413      	add	r3, r2
 80050d4:	b299      	uxth	r1, r3
 80050d6:	7d7b      	ldrb	r3, [r7, #21]
 80050d8:	f44f 724a 	mov.w	r2, #808	; 0x328
 80050dc:	fb02 f303 	mul.w	r3, r2, r3
 80050e0:	68ba      	ldr	r2, [r7, #8]
 80050e2:	4413      	add	r3, r2
 80050e4:	b20a      	sxth	r2, r1
 80050e6:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
      ic[curr_ic].raux.ra_codes[8] = (data[4] + (data[5] << 8));
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	3304      	adds	r3, #4
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	b29a      	uxth	r2, r3
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	3305      	adds	r3, #5
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	021b      	lsls	r3, r3, #8
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	4413      	add	r3, r2
 8005100:	b299      	uxth	r1, r3
 8005102:	7d7b      	ldrb	r3, [r7, #21]
 8005104:	f44f 724a 	mov.w	r2, #808	; 0x328
 8005108:	fb02 f303 	mul.w	r3, r2, r3
 800510c:	68ba      	ldr	r2, [r7, #8]
 800510e:	4413      	add	r3, r2
 8005110:	b20a      	sxth	r2, r1
 8005112:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
      break;
 8005116:	e0f4      	b.n	8005302 <adBms6830ParseRAux+0x402>

    case D: /* RAux Register group D */
      ic[curr_ic].raux.ra_codes[9] =  (data[0] + (data[1] << 8));
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	b29a      	uxth	r2, r3
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	3301      	adds	r3, #1
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	b29b      	uxth	r3, r3
 8005126:	021b      	lsls	r3, r3, #8
 8005128:	b29b      	uxth	r3, r3
 800512a:	4413      	add	r3, r2
 800512c:	b299      	uxth	r1, r3
 800512e:	7d7b      	ldrb	r3, [r7, #21]
 8005130:	f44f 724a 	mov.w	r2, #808	; 0x328
 8005134:	fb02 f303 	mul.w	r3, r2, r3
 8005138:	68ba      	ldr	r2, [r7, #8]
 800513a:	4413      	add	r3, r2
 800513c:	b20a      	sxth	r2, r1
 800513e:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
      break;
 8005142:	e0de      	b.n	8005302 <adBms6830ParseRAux+0x402>
 8005144:	0801fdc4 	.word	0x0801fdc4

    case ALL_GRP: /* RAux Register group ALL */
      ic[curr_ic].raux.ra_codes[0]  = (data[0] + (data[1] << 8));
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	b29a      	uxth	r2, r3
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	3301      	adds	r3, #1
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	b29b      	uxth	r3, r3
 8005156:	021b      	lsls	r3, r3, #8
 8005158:	b29b      	uxth	r3, r3
 800515a:	4413      	add	r3, r2
 800515c:	b299      	uxth	r1, r3
 800515e:	7d7b      	ldrb	r3, [r7, #21]
 8005160:	f44f 724a 	mov.w	r2, #808	; 0x328
 8005164:	fb02 f303 	mul.w	r3, r2, r3
 8005168:	68ba      	ldr	r2, [r7, #8]
 800516a:	4413      	add	r3, r2
 800516c:	b20a      	sxth	r2, r1
 800516e:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
      ic[curr_ic].raux.ra_codes[1]  = (data[2] + (data[3] << 8));
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	3302      	adds	r3, #2
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	b29a      	uxth	r2, r3
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	3303      	adds	r3, #3
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	b29b      	uxth	r3, r3
 8005182:	021b      	lsls	r3, r3, #8
 8005184:	b29b      	uxth	r3, r3
 8005186:	4413      	add	r3, r2
 8005188:	b299      	uxth	r1, r3
 800518a:	7d7b      	ldrb	r3, [r7, #21]
 800518c:	f44f 724a 	mov.w	r2, #808	; 0x328
 8005190:	fb02 f303 	mul.w	r3, r2, r3
 8005194:	68ba      	ldr	r2, [r7, #8]
 8005196:	4413      	add	r3, r2
 8005198:	b20a      	sxth	r2, r1
 800519a:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
      ic[curr_ic].raux.ra_codes[2]  = (data[4] + (data[5] << 8));
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	3304      	adds	r3, #4
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	b29a      	uxth	r2, r3
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	3305      	adds	r3, #5
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	021b      	lsls	r3, r3, #8
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	4413      	add	r3, r2
 80051b4:	b299      	uxth	r1, r3
 80051b6:	7d7b      	ldrb	r3, [r7, #21]
 80051b8:	f44f 724a 	mov.w	r2, #808	; 0x328
 80051bc:	fb02 f303 	mul.w	r3, r2, r3
 80051c0:	68ba      	ldr	r2, [r7, #8]
 80051c2:	4413      	add	r3, r2
 80051c4:	b20a      	sxth	r2, r1
 80051c6:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
      ic[curr_ic].raux.ra_codes[3]  = (data[6] + (data[7] << 8));
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	3306      	adds	r3, #6
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	b29a      	uxth	r2, r3
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	3307      	adds	r3, #7
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	b29b      	uxth	r3, r3
 80051da:	021b      	lsls	r3, r3, #8
 80051dc:	b29b      	uxth	r3, r3
 80051de:	4413      	add	r3, r2
 80051e0:	b299      	uxth	r1, r3
 80051e2:	7d7b      	ldrb	r3, [r7, #21]
 80051e4:	f44f 724a 	mov.w	r2, #808	; 0x328
 80051e8:	fb02 f303 	mul.w	r3, r2, r3
 80051ec:	68ba      	ldr	r2, [r7, #8]
 80051ee:	4413      	add	r3, r2
 80051f0:	b20a      	sxth	r2, r1
 80051f2:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
      ic[curr_ic].raux.ra_codes[4]  = (data[8] + (data[9] << 8));
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	3308      	adds	r3, #8
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	b29a      	uxth	r2, r3
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	3309      	adds	r3, #9
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	b29b      	uxth	r3, r3
 8005206:	021b      	lsls	r3, r3, #8
 8005208:	b29b      	uxth	r3, r3
 800520a:	4413      	add	r3, r2
 800520c:	b299      	uxth	r1, r3
 800520e:	7d7b      	ldrb	r3, [r7, #21]
 8005210:	f44f 724a 	mov.w	r2, #808	; 0x328
 8005214:	fb02 f303 	mul.w	r3, r2, r3
 8005218:	68ba      	ldr	r2, [r7, #8]
 800521a:	4413      	add	r3, r2
 800521c:	b20a      	sxth	r2, r1
 800521e:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
      ic[curr_ic].raux.ra_codes[5]  = (data[10] + (data[11] << 8));
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	330a      	adds	r3, #10
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	b29a      	uxth	r2, r3
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	330b      	adds	r3, #11
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	b29b      	uxth	r3, r3
 8005232:	021b      	lsls	r3, r3, #8
 8005234:	b29b      	uxth	r3, r3
 8005236:	4413      	add	r3, r2
 8005238:	b299      	uxth	r1, r3
 800523a:	7d7b      	ldrb	r3, [r7, #21]
 800523c:	f44f 724a 	mov.w	r2, #808	; 0x328
 8005240:	fb02 f303 	mul.w	r3, r2, r3
 8005244:	68ba      	ldr	r2, [r7, #8]
 8005246:	4413      	add	r3, r2
 8005248:	b20a      	sxth	r2, r1
 800524a:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
      ic[curr_ic].raux.ra_codes[6]  = (data[12] + (data[13] << 8));
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	330c      	adds	r3, #12
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	b29a      	uxth	r2, r3
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	330d      	adds	r3, #13
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	b29b      	uxth	r3, r3
 800525e:	021b      	lsls	r3, r3, #8
 8005260:	b29b      	uxth	r3, r3
 8005262:	4413      	add	r3, r2
 8005264:	b299      	uxth	r1, r3
 8005266:	7d7b      	ldrb	r3, [r7, #21]
 8005268:	f44f 724a 	mov.w	r2, #808	; 0x328
 800526c:	fb02 f303 	mul.w	r3, r2, r3
 8005270:	68ba      	ldr	r2, [r7, #8]
 8005272:	4413      	add	r3, r2
 8005274:	b20a      	sxth	r2, r1
 8005276:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
      ic[curr_ic].raux.ra_codes[7]  = (data[14] + (data[15] << 8));
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	330e      	adds	r3, #14
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	b29a      	uxth	r2, r3
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	330f      	adds	r3, #15
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	b29b      	uxth	r3, r3
 800528a:	021b      	lsls	r3, r3, #8
 800528c:	b29b      	uxth	r3, r3
 800528e:	4413      	add	r3, r2
 8005290:	b299      	uxth	r1, r3
 8005292:	7d7b      	ldrb	r3, [r7, #21]
 8005294:	f44f 724a 	mov.w	r2, #808	; 0x328
 8005298:	fb02 f303 	mul.w	r3, r2, r3
 800529c:	68ba      	ldr	r2, [r7, #8]
 800529e:	4413      	add	r3, r2
 80052a0:	b20a      	sxth	r2, r1
 80052a2:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
      ic[curr_ic].raux.ra_codes[8]  = (data[16] + (data[17] << 8));
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	3310      	adds	r3, #16
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	b29a      	uxth	r2, r3
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	3311      	adds	r3, #17
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	021b      	lsls	r3, r3, #8
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	4413      	add	r3, r2
 80052bc:	b299      	uxth	r1, r3
 80052be:	7d7b      	ldrb	r3, [r7, #21]
 80052c0:	f44f 724a 	mov.w	r2, #808	; 0x328
 80052c4:	fb02 f303 	mul.w	r3, r2, r3
 80052c8:	68ba      	ldr	r2, [r7, #8]
 80052ca:	4413      	add	r3, r2
 80052cc:	b20a      	sxth	r2, r1
 80052ce:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
      ic[curr_ic].raux.ra_codes[9]  = (data[18] + (data[19] << 8));
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	3312      	adds	r3, #18
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	b29a      	uxth	r2, r3
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	3313      	adds	r3, #19
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	021b      	lsls	r3, r3, #8
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	4413      	add	r3, r2
 80052e8:	b299      	uxth	r1, r3
 80052ea:	7d7b      	ldrb	r3, [r7, #21]
 80052ec:	f44f 724a 	mov.w	r2, #808	; 0x328
 80052f0:	fb02 f303 	mul.w	r3, r2, r3
 80052f4:	68ba      	ldr	r2, [r7, #8]
 80052f6:	4413      	add	r3, r2
 80052f8:	b20a      	sxth	r2, r1
 80052fa:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
     break;
 80052fe:	e000      	b.n	8005302 <adBms6830ParseRAux+0x402>

    default:
      break;
 8005300:	bf00      	nop
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8005302:	7d7b      	ldrb	r3, [r7, #21]
 8005304:	3301      	adds	r3, #1
 8005306:	757b      	strb	r3, [r7, #21]
 8005308:	7d7a      	ldrb	r2, [r7, #21]
 800530a:	7bfb      	ldrb	r3, [r7, #15]
 800530c:	429a      	cmp	r2, r3
 800530e:	f4ff ae1d 	bcc.w	8004f4c <adBms6830ParseRAux+0x4c>
    }
  }
  free(data);
 8005312:	6938      	ldr	r0, [r7, #16]
 8005314:	f015 f936 	bl	801a584 <free>
}
 8005318:	bf00      	nop
 800531a:	3718      	adds	r7, #24
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <adBms6830ParseStatusA>:
 * @return None
 *
 *******************************************************************************
*/
void adBms6830ParseStatusA(uint8_t tIC, cell_asic *ic, uint8_t *data)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b086      	sub	sp, #24
 8005324:	af00      	add	r7, sp, #0
 8005326:	4603      	mov	r3, r0
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]
 800532c:	73fb      	strb	r3, [r7, #15]
  uint8_t address = 0;
 800532e:	2300      	movs	r3, #0
 8005330:	75fb      	strb	r3, [r7, #23]
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8005332:	2300      	movs	r3, #0
 8005334:	75bb      	strb	r3, [r7, #22]
 8005336:	e07a      	b.n	800542e <adBms6830ParseStatusA+0x10e>
  {
    memcpy(&ic[curr_ic].stat.rx_data[0], &data[address], RX_DATA); /* dst , src , size */
 8005338:	7dbb      	ldrb	r3, [r7, #22]
 800533a:	f44f 724a 	mov.w	r2, #808	; 0x328
 800533e:	fb02 f303 	mul.w	r3, r2, r3
 8005342:	68ba      	ldr	r2, [r7, #8]
 8005344:	4413      	add	r3, r2
 8005346:	f203 104f 	addw	r0, r3, #335	; 0x14f
 800534a:	7dfb      	ldrb	r3, [r7, #23]
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	4413      	add	r3, r2
 8005350:	2208      	movs	r2, #8
 8005352:	4619      	mov	r1, r3
 8005354:	f016 fae5 	bl	801b922 <memcpy>
    address = ((curr_ic+1) * (RX_DATA));
 8005358:	7dbb      	ldrb	r3, [r7, #22]
 800535a:	3301      	adds	r3, #1
 800535c:	b2db      	uxtb	r3, r3
 800535e:	00db      	lsls	r3, r3, #3
 8005360:	75fb      	strb	r3, [r7, #23]
    ic[curr_ic].stata.vref2   = (ic[curr_ic].stat.rx_data[0] | (ic[curr_ic].stat.rx_data[1] << 8));
 8005362:	7dbb      	ldrb	r3, [r7, #22]
 8005364:	f44f 724a 	mov.w	r2, #808	; 0x328
 8005368:	fb02 f303 	mul.w	r3, r2, r3
 800536c:	68ba      	ldr	r2, [r7, #8]
 800536e:	4413      	add	r3, r2
 8005370:	f893 314f 	ldrb.w	r3, [r3, #335]	; 0x14f
 8005374:	b21a      	sxth	r2, r3
 8005376:	7dbb      	ldrb	r3, [r7, #22]
 8005378:	f44f 714a 	mov.w	r1, #808	; 0x328
 800537c:	fb01 f303 	mul.w	r3, r1, r3
 8005380:	68b9      	ldr	r1, [r7, #8]
 8005382:	440b      	add	r3, r1
 8005384:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8005388:	021b      	lsls	r3, r3, #8
 800538a:	b21b      	sxth	r3, r3
 800538c:	4313      	orrs	r3, r2
 800538e:	b219      	sxth	r1, r3
 8005390:	7dbb      	ldrb	r3, [r7, #22]
 8005392:	f44f 724a 	mov.w	r2, #808	; 0x328
 8005396:	fb02 f303 	mul.w	r3, r2, r3
 800539a:	68ba      	ldr	r2, [r7, #8]
 800539c:	4413      	add	r3, r2
 800539e:	b28a      	uxth	r2, r1
 80053a0:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
    ic[curr_ic].stata.itmp = (ic[curr_ic].stat.rx_data[2] | (ic[curr_ic].stat.rx_data[3] << 8));
 80053a4:	7dbb      	ldrb	r3, [r7, #22]
 80053a6:	f44f 724a 	mov.w	r2, #808	; 0x328
 80053aa:	fb02 f303 	mul.w	r3, r2, r3
 80053ae:	68ba      	ldr	r2, [r7, #8]
 80053b0:	4413      	add	r3, r2
 80053b2:	f893 3151 	ldrb.w	r3, [r3, #337]	; 0x151
 80053b6:	b21a      	sxth	r2, r3
 80053b8:	7dbb      	ldrb	r3, [r7, #22]
 80053ba:	f44f 714a 	mov.w	r1, #808	; 0x328
 80053be:	fb01 f303 	mul.w	r3, r1, r3
 80053c2:	68b9      	ldr	r1, [r7, #8]
 80053c4:	440b      	add	r3, r1
 80053c6:	f893 3152 	ldrb.w	r3, [r3, #338]	; 0x152
 80053ca:	021b      	lsls	r3, r3, #8
 80053cc:	b21b      	sxth	r3, r3
 80053ce:	4313      	orrs	r3, r2
 80053d0:	b219      	sxth	r1, r3
 80053d2:	7dbb      	ldrb	r3, [r7, #22]
 80053d4:	f44f 724a 	mov.w	r2, #808	; 0x328
 80053d8:	fb02 f303 	mul.w	r3, r2, r3
 80053dc:	68ba      	ldr	r2, [r7, #8]
 80053de:	4413      	add	r3, r2
 80053e0:	b28a      	uxth	r2, r1
 80053e2:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
    ic[curr_ic].stata.vref3   = (ic[curr_ic].stat.rx_data[4] | (ic[curr_ic].stat.rx_data[5] << 8));
 80053e6:	7dbb      	ldrb	r3, [r7, #22]
 80053e8:	f44f 724a 	mov.w	r2, #808	; 0x328
 80053ec:	fb02 f303 	mul.w	r3, r2, r3
 80053f0:	68ba      	ldr	r2, [r7, #8]
 80053f2:	4413      	add	r3, r2
 80053f4:	f893 3153 	ldrb.w	r3, [r3, #339]	; 0x153
 80053f8:	b21a      	sxth	r2, r3
 80053fa:	7dbb      	ldrb	r3, [r7, #22]
 80053fc:	f44f 714a 	mov.w	r1, #808	; 0x328
 8005400:	fb01 f303 	mul.w	r3, r1, r3
 8005404:	68b9      	ldr	r1, [r7, #8]
 8005406:	440b      	add	r3, r1
 8005408:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800540c:	021b      	lsls	r3, r3, #8
 800540e:	b21b      	sxth	r3, r3
 8005410:	4313      	orrs	r3, r2
 8005412:	b219      	sxth	r1, r3
 8005414:	7dbb      	ldrb	r3, [r7, #22]
 8005416:	f44f 724a 	mov.w	r2, #808	; 0x328
 800541a:	fb02 f303 	mul.w	r3, r2, r3
 800541e:	68ba      	ldr	r2, [r7, #8]
 8005420:	4413      	add	r3, r2
 8005422:	b28a      	uxth	r2, r1
 8005424:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8005428:	7dbb      	ldrb	r3, [r7, #22]
 800542a:	3301      	adds	r3, #1
 800542c:	75bb      	strb	r3, [r7, #22]
 800542e:	7dba      	ldrb	r2, [r7, #22]
 8005430:	7bfb      	ldrb	r3, [r7, #15]
 8005432:	429a      	cmp	r2, r3
 8005434:	d380      	bcc.n	8005338 <adBms6830ParseStatusA+0x18>
  }
}
 8005436:	bf00      	nop
 8005438:	bf00      	nop
 800543a:	3718      	adds	r7, #24
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <adBms6830ParseStatusB>:
 * @return None
 *
 *******************************************************************************
*/
void adBms6830ParseStatusB(uint8_t tIC, cell_asic *ic, uint8_t *data)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b086      	sub	sp, #24
 8005444:	af00      	add	r7, sp, #0
 8005446:	4603      	mov	r3, r0
 8005448:	60b9      	str	r1, [r7, #8]
 800544a:	607a      	str	r2, [r7, #4]
 800544c:	73fb      	strb	r3, [r7, #15]
  uint8_t address = 0;
 800544e:	2300      	movs	r3, #0
 8005450:	75fb      	strb	r3, [r7, #23]
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8005452:	2300      	movs	r3, #0
 8005454:	75bb      	strb	r3, [r7, #22]
 8005456:	e07a      	b.n	800554e <adBms6830ParseStatusB+0x10e>
  {
    memcpy(&ic[curr_ic].stat.rx_data[0], &data[address], RX_DATA); /* dst , src , size */
 8005458:	7dbb      	ldrb	r3, [r7, #22]
 800545a:	f44f 724a 	mov.w	r2, #808	; 0x328
 800545e:	fb02 f303 	mul.w	r3, r2, r3
 8005462:	68ba      	ldr	r2, [r7, #8]
 8005464:	4413      	add	r3, r2
 8005466:	f203 104f 	addw	r0, r3, #335	; 0x14f
 800546a:	7dfb      	ldrb	r3, [r7, #23]
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	4413      	add	r3, r2
 8005470:	2208      	movs	r2, #8
 8005472:	4619      	mov	r1, r3
 8005474:	f016 fa55 	bl	801b922 <memcpy>
    address = ((curr_ic+1) * (RX_DATA));
 8005478:	7dbb      	ldrb	r3, [r7, #22]
 800547a:	3301      	adds	r3, #1
 800547c:	b2db      	uxtb	r3, r3
 800547e:	00db      	lsls	r3, r3, #3
 8005480:	75fb      	strb	r3, [r7, #23]
    ic[curr_ic].statb.vd   = (ic[curr_ic].stat.rx_data[0] + (ic[curr_ic].stat.rx_data[1] << 8));
 8005482:	7dbb      	ldrb	r3, [r7, #22]
 8005484:	f44f 724a 	mov.w	r2, #808	; 0x328
 8005488:	fb02 f303 	mul.w	r3, r2, r3
 800548c:	68ba      	ldr	r2, [r7, #8]
 800548e:	4413      	add	r3, r2
 8005490:	f893 314f 	ldrb.w	r3, [r3, #335]	; 0x14f
 8005494:	b299      	uxth	r1, r3
 8005496:	7dbb      	ldrb	r3, [r7, #22]
 8005498:	f44f 724a 	mov.w	r2, #808	; 0x328
 800549c:	fb02 f303 	mul.w	r3, r2, r3
 80054a0:	68ba      	ldr	r2, [r7, #8]
 80054a2:	4413      	add	r3, r2
 80054a4:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	021b      	lsls	r3, r3, #8
 80054ac:	b29a      	uxth	r2, r3
 80054ae:	7dbb      	ldrb	r3, [r7, #22]
 80054b0:	f44f 704a 	mov.w	r0, #808	; 0x328
 80054b4:	fb00 f303 	mul.w	r3, r0, r3
 80054b8:	68b8      	ldr	r0, [r7, #8]
 80054ba:	4403      	add	r3, r0
 80054bc:	440a      	add	r2, r1
 80054be:	b292      	uxth	r2, r2
 80054c0:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
    ic[curr_ic].statb.va = (ic[curr_ic].stat.rx_data[2] + (ic[curr_ic].stat.rx_data[3] << 8));
 80054c4:	7dbb      	ldrb	r3, [r7, #22]
 80054c6:	f44f 724a 	mov.w	r2, #808	; 0x328
 80054ca:	fb02 f303 	mul.w	r3, r2, r3
 80054ce:	68ba      	ldr	r2, [r7, #8]
 80054d0:	4413      	add	r3, r2
 80054d2:	f893 3151 	ldrb.w	r3, [r3, #337]	; 0x151
 80054d6:	b299      	uxth	r1, r3
 80054d8:	7dbb      	ldrb	r3, [r7, #22]
 80054da:	f44f 724a 	mov.w	r2, #808	; 0x328
 80054de:	fb02 f303 	mul.w	r3, r2, r3
 80054e2:	68ba      	ldr	r2, [r7, #8]
 80054e4:	4413      	add	r3, r2
 80054e6:	f893 3152 	ldrb.w	r3, [r3, #338]	; 0x152
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	021b      	lsls	r3, r3, #8
 80054ee:	b29a      	uxth	r2, r3
 80054f0:	7dbb      	ldrb	r3, [r7, #22]
 80054f2:	f44f 704a 	mov.w	r0, #808	; 0x328
 80054f6:	fb00 f303 	mul.w	r3, r0, r3
 80054fa:	68b8      	ldr	r0, [r7, #8]
 80054fc:	4403      	add	r3, r0
 80054fe:	440a      	add	r2, r1
 8005500:	b292      	uxth	r2, r2
 8005502:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
    ic[curr_ic].statb.vr4k   = (ic[curr_ic].stat.rx_data[4] + (ic[curr_ic].stat.rx_data[5] << 8));
 8005506:	7dbb      	ldrb	r3, [r7, #22]
 8005508:	f44f 724a 	mov.w	r2, #808	; 0x328
 800550c:	fb02 f303 	mul.w	r3, r2, r3
 8005510:	68ba      	ldr	r2, [r7, #8]
 8005512:	4413      	add	r3, r2
 8005514:	f893 3153 	ldrb.w	r3, [r3, #339]	; 0x153
 8005518:	b299      	uxth	r1, r3
 800551a:	7dbb      	ldrb	r3, [r7, #22]
 800551c:	f44f 724a 	mov.w	r2, #808	; 0x328
 8005520:	fb02 f303 	mul.w	r3, r2, r3
 8005524:	68ba      	ldr	r2, [r7, #8]
 8005526:	4413      	add	r3, r2
 8005528:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800552c:	b29b      	uxth	r3, r3
 800552e:	021b      	lsls	r3, r3, #8
 8005530:	b29a      	uxth	r2, r3
 8005532:	7dbb      	ldrb	r3, [r7, #22]
 8005534:	f44f 704a 	mov.w	r0, #808	; 0x328
 8005538:	fb00 f303 	mul.w	r3, r0, r3
 800553c:	68b8      	ldr	r0, [r7, #8]
 800553e:	4403      	add	r3, r0
 8005540:	440a      	add	r2, r1
 8005542:	b292      	uxth	r2, r2
 8005544:	f8a3 20d6 	strh.w	r2, [r3, #214]	; 0xd6
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8005548:	7dbb      	ldrb	r3, [r7, #22]
 800554a:	3301      	adds	r3, #1
 800554c:	75bb      	strb	r3, [r7, #22]
 800554e:	7dba      	ldrb	r2, [r7, #22]
 8005550:	7bfb      	ldrb	r3, [r7, #15]
 8005552:	429a      	cmp	r2, r3
 8005554:	d380      	bcc.n	8005458 <adBms6830ParseStatusB+0x18>
  }
}
 8005556:	bf00      	nop
 8005558:	bf00      	nop
 800555a:	3718      	adds	r7, #24
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <adBms6830ParseStatusC>:
 * @return None
 *
 *******************************************************************************
*/
void adBms6830ParseStatusC(uint8_t tIC, cell_asic *ic, uint8_t *data)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b086      	sub	sp, #24
 8005564:	af00      	add	r7, sp, #0
 8005566:	4603      	mov	r3, r0
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	607a      	str	r2, [r7, #4]
 800556c:	73fb      	strb	r3, [r7, #15]
  uint8_t address = 0;
 800556e:	2300      	movs	r3, #0
 8005570:	75fb      	strb	r3, [r7, #23]
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8005572:	2300      	movs	r3, #0
 8005574:	75bb      	strb	r3, [r7, #22]
 8005576:	e1e8      	b.n	800594a <adBms6830ParseStatusC+0x3ea>
  {
    memcpy(&ic[curr_ic].stat.rx_data[0], &data[address], RX_DATA); /* dst , src , size */
 8005578:	7dbb      	ldrb	r3, [r7, #22]
 800557a:	f44f 724a 	mov.w	r2, #808	; 0x328
 800557e:	fb02 f303 	mul.w	r3, r2, r3
 8005582:	68ba      	ldr	r2, [r7, #8]
 8005584:	4413      	add	r3, r2
 8005586:	f203 104f 	addw	r0, r3, #335	; 0x14f
 800558a:	7dfb      	ldrb	r3, [r7, #23]
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	4413      	add	r3, r2
 8005590:	2208      	movs	r2, #8
 8005592:	4619      	mov	r1, r3
 8005594:	f016 f9c5 	bl	801b922 <memcpy>
    address = ((curr_ic+1) * (RX_DATA));
 8005598:	7dbb      	ldrb	r3, [r7, #22]
 800559a:	3301      	adds	r3, #1
 800559c:	b2db      	uxtb	r3, r3
 800559e:	00db      	lsls	r3, r3, #3
 80055a0:	75fb      	strb	r3, [r7, #23]
    ic[curr_ic].statc.cs_flt   = (ic[curr_ic].stat.rx_data[0] + (ic[curr_ic].stat.rx_data[1] << 8));
 80055a2:	7dbb      	ldrb	r3, [r7, #22]
 80055a4:	f44f 724a 	mov.w	r2, #808	; 0x328
 80055a8:	fb02 f303 	mul.w	r3, r2, r3
 80055ac:	68ba      	ldr	r2, [r7, #8]
 80055ae:	4413      	add	r3, r2
 80055b0:	f893 314f 	ldrb.w	r3, [r3, #335]	; 0x14f
 80055b4:	b299      	uxth	r1, r3
 80055b6:	7dbb      	ldrb	r3, [r7, #22]
 80055b8:	f44f 724a 	mov.w	r2, #808	; 0x328
 80055bc:	fb02 f303 	mul.w	r3, r2, r3
 80055c0:	68ba      	ldr	r2, [r7, #8]
 80055c2:	4413      	add	r3, r2
 80055c4:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	021b      	lsls	r3, r3, #8
 80055cc:	b29a      	uxth	r2, r3
 80055ce:	7dbb      	ldrb	r3, [r7, #22]
 80055d0:	f44f 704a 	mov.w	r0, #808	; 0x328
 80055d4:	fb00 f303 	mul.w	r3, r0, r3
 80055d8:	68b8      	ldr	r0, [r7, #8]
 80055da:	4403      	add	r3, r0
 80055dc:	440a      	add	r2, r1
 80055de:	b292      	uxth	r2, r2
 80055e0:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
    ic[curr_ic].statc.otp2_med = (ic[curr_ic].stat.rx_data[4] & 0x01);
 80055e4:	7dbb      	ldrb	r3, [r7, #22]
 80055e6:	f44f 724a 	mov.w	r2, #808	; 0x328
 80055ea:	fb02 f303 	mul.w	r3, r2, r3
 80055ee:	68ba      	ldr	r2, [r7, #8]
 80055f0:	4413      	add	r3, r2
 80055f2:	f893 1153 	ldrb.w	r1, [r3, #339]	; 0x153
 80055f6:	7dbb      	ldrb	r3, [r7, #22]
 80055f8:	f44f 724a 	mov.w	r2, #808	; 0x328
 80055fc:	fb02 f303 	mul.w	r3, r2, r3
 8005600:	68ba      	ldr	r2, [r7, #8]
 8005602:	441a      	add	r2, r3
 8005604:	460b      	mov	r3, r1
 8005606:	f003 0301 	and.w	r3, r3, #1
 800560a:	b2d9      	uxtb	r1, r3
 800560c:	f892 30da 	ldrb.w	r3, [r2, #218]	; 0xda
 8005610:	f361 13c7 	bfi	r3, r1, #7, #1
 8005614:	f882 30da 	strb.w	r3, [r2, #218]	; 0xda
    ic[curr_ic].statc.otp2_ed = ((ic[curr_ic].stat.rx_data[4] & 0x02) >> 1);
 8005618:	7dbb      	ldrb	r3, [r7, #22]
 800561a:	f44f 724a 	mov.w	r2, #808	; 0x328
 800561e:	fb02 f303 	mul.w	r3, r2, r3
 8005622:	68ba      	ldr	r2, [r7, #8]
 8005624:	4413      	add	r3, r2
 8005626:	f893 3153 	ldrb.w	r3, [r3, #339]	; 0x153
 800562a:	1059      	asrs	r1, r3, #1
 800562c:	7dbb      	ldrb	r3, [r7, #22]
 800562e:	f44f 724a 	mov.w	r2, #808	; 0x328
 8005632:	fb02 f303 	mul.w	r3, r2, r3
 8005636:	68ba      	ldr	r2, [r7, #8]
 8005638:	441a      	add	r2, r3
 800563a:	460b      	mov	r3, r1
 800563c:	f003 0301 	and.w	r3, r3, #1
 8005640:	b2d9      	uxtb	r1, r3
 8005642:	f892 30da 	ldrb.w	r3, [r2, #218]	; 0xda
 8005646:	f361 1386 	bfi	r3, r1, #6, #1
 800564a:	f882 30da 	strb.w	r3, [r2, #218]	; 0xda
    ic[curr_ic].statc.otp1_med = ((ic[curr_ic].stat.rx_data[4] & 0x04) >> 2);
 800564e:	7dbb      	ldrb	r3, [r7, #22]
 8005650:	f44f 724a 	mov.w	r2, #808	; 0x328
 8005654:	fb02 f303 	mul.w	r3, r2, r3
 8005658:	68ba      	ldr	r2, [r7, #8]
 800565a:	4413      	add	r3, r2
 800565c:	f893 3153 	ldrb.w	r3, [r3, #339]	; 0x153
 8005660:	1099      	asrs	r1, r3, #2
 8005662:	7dbb      	ldrb	r3, [r7, #22]
 8005664:	f44f 724a 	mov.w	r2, #808	; 0x328
 8005668:	fb02 f303 	mul.w	r3, r2, r3
 800566c:	68ba      	ldr	r2, [r7, #8]
 800566e:	441a      	add	r2, r3
 8005670:	460b      	mov	r3, r1
 8005672:	f003 0301 	and.w	r3, r3, #1
 8005676:	b2d9      	uxtb	r1, r3
 8005678:	f892 30da 	ldrb.w	r3, [r2, #218]	; 0xda
 800567c:	f361 1345 	bfi	r3, r1, #5, #1
 8005680:	f882 30da 	strb.w	r3, [r2, #218]	; 0xda
    ic[curr_ic].statc.otp1_ed = ((ic[curr_ic].stat.rx_data[4] & 0x08) >> 3);
 8005684:	7dbb      	ldrb	r3, [r7, #22]
 8005686:	f44f 724a 	mov.w	r2, #808	; 0x328
 800568a:	fb02 f303 	mul.w	r3, r2, r3
 800568e:	68ba      	ldr	r2, [r7, #8]
 8005690:	4413      	add	r3, r2
 8005692:	f893 3153 	ldrb.w	r3, [r3, #339]	; 0x153
 8005696:	10d9      	asrs	r1, r3, #3
 8005698:	7dbb      	ldrb	r3, [r7, #22]
 800569a:	f44f 724a 	mov.w	r2, #808	; 0x328
 800569e:	fb02 f303 	mul.w	r3, r2, r3
 80056a2:	68ba      	ldr	r2, [r7, #8]
 80056a4:	441a      	add	r2, r3
 80056a6:	460b      	mov	r3, r1
 80056a8:	f003 0301 	and.w	r3, r3, #1
 80056ac:	b2d9      	uxtb	r1, r3
 80056ae:	f892 30da 	ldrb.w	r3, [r2, #218]	; 0xda
 80056b2:	f361 1304 	bfi	r3, r1, #4, #1
 80056b6:	f882 30da 	strb.w	r3, [r2, #218]	; 0xda
    ic[curr_ic].statc.vd_uv  = ((ic[curr_ic].stat.rx_data[4] & 0x10) >> 4);
 80056ba:	7dbb      	ldrb	r3, [r7, #22]
 80056bc:	f44f 724a 	mov.w	r2, #808	; 0x328
 80056c0:	fb02 f303 	mul.w	r3, r2, r3
 80056c4:	68ba      	ldr	r2, [r7, #8]
 80056c6:	4413      	add	r3, r2
 80056c8:	f893 3153 	ldrb.w	r3, [r3, #339]	; 0x153
 80056cc:	1119      	asrs	r1, r3, #4
 80056ce:	7dbb      	ldrb	r3, [r7, #22]
 80056d0:	f44f 724a 	mov.w	r2, #808	; 0x328
 80056d4:	fb02 f303 	mul.w	r3, r2, r3
 80056d8:	68ba      	ldr	r2, [r7, #8]
 80056da:	441a      	add	r2, r3
 80056dc:	460b      	mov	r3, r1
 80056de:	f003 0301 	and.w	r3, r3, #1
 80056e2:	b2d9      	uxtb	r1, r3
 80056e4:	f892 30da 	ldrb.w	r3, [r2, #218]	; 0xda
 80056e8:	f361 03c3 	bfi	r3, r1, #3, #1
 80056ec:	f882 30da 	strb.w	r3, [r2, #218]	; 0xda
    ic[curr_ic].statc.vd_ov = ((ic[curr_ic].stat.rx_data[4] & 0x20) >> 5);
 80056f0:	7dbb      	ldrb	r3, [r7, #22]
 80056f2:	f44f 724a 	mov.w	r2, #808	; 0x328
 80056f6:	fb02 f303 	mul.w	r3, r2, r3
 80056fa:	68ba      	ldr	r2, [r7, #8]
 80056fc:	4413      	add	r3, r2
 80056fe:	f893 3153 	ldrb.w	r3, [r3, #339]	; 0x153
 8005702:	1159      	asrs	r1, r3, #5
 8005704:	7dbb      	ldrb	r3, [r7, #22]
 8005706:	f44f 724a 	mov.w	r2, #808	; 0x328
 800570a:	fb02 f303 	mul.w	r3, r2, r3
 800570e:	68ba      	ldr	r2, [r7, #8]
 8005710:	441a      	add	r2, r3
 8005712:	460b      	mov	r3, r1
 8005714:	f003 0301 	and.w	r3, r3, #1
 8005718:	b2d9      	uxtb	r1, r3
 800571a:	f892 30da 	ldrb.w	r3, [r2, #218]	; 0xda
 800571e:	f361 0382 	bfi	r3, r1, #2, #1
 8005722:	f882 30da 	strb.w	r3, [r2, #218]	; 0xda
    ic[curr_ic].statc.va_uv = ((ic[curr_ic].stat.rx_data[4] & 0x40) >> 6);
 8005726:	7dbb      	ldrb	r3, [r7, #22]
 8005728:	f44f 724a 	mov.w	r2, #808	; 0x328
 800572c:	fb02 f303 	mul.w	r3, r2, r3
 8005730:	68ba      	ldr	r2, [r7, #8]
 8005732:	4413      	add	r3, r2
 8005734:	f893 3153 	ldrb.w	r3, [r3, #339]	; 0x153
 8005738:	1199      	asrs	r1, r3, #6
 800573a:	7dbb      	ldrb	r3, [r7, #22]
 800573c:	f44f 724a 	mov.w	r2, #808	; 0x328
 8005740:	fb02 f303 	mul.w	r3, r2, r3
 8005744:	68ba      	ldr	r2, [r7, #8]
 8005746:	441a      	add	r2, r3
 8005748:	460b      	mov	r3, r1
 800574a:	f003 0301 	and.w	r3, r3, #1
 800574e:	b2d9      	uxtb	r1, r3
 8005750:	f892 30da 	ldrb.w	r3, [r2, #218]	; 0xda
 8005754:	f361 0341 	bfi	r3, r1, #1, #1
 8005758:	f882 30da 	strb.w	r3, [r2, #218]	; 0xda
    ic[curr_ic].statc.va_ov = ((ic[curr_ic].stat.rx_data[4] & 0x80) >> 7);
 800575c:	7dbb      	ldrb	r3, [r7, #22]
 800575e:	f44f 724a 	mov.w	r2, #808	; 0x328
 8005762:	fb02 f303 	mul.w	r3, r2, r3
 8005766:	68ba      	ldr	r2, [r7, #8]
 8005768:	4413      	add	r3, r2
 800576a:	f893 3153 	ldrb.w	r3, [r3, #339]	; 0x153
 800576e:	09db      	lsrs	r3, r3, #7
 8005770:	b2d9      	uxtb	r1, r3
 8005772:	7dbb      	ldrb	r3, [r7, #22]
 8005774:	f44f 724a 	mov.w	r2, #808	; 0x328
 8005778:	fb02 f303 	mul.w	r3, r2, r3
 800577c:	68ba      	ldr	r2, [r7, #8]
 800577e:	441a      	add	r2, r3
 8005780:	460b      	mov	r3, r1
 8005782:	f003 0301 	and.w	r3, r3, #1
 8005786:	b2d9      	uxtb	r1, r3
 8005788:	f892 30da 	ldrb.w	r3, [r2, #218]	; 0xda
 800578c:	f361 0300 	bfi	r3, r1, #0, #1
 8005790:	f882 30da 	strb.w	r3, [r2, #218]	; 0xda
    ic[curr_ic].statc.oscchk = (ic[curr_ic].stat.rx_data[5] & 0x01);
 8005794:	7dbb      	ldrb	r3, [r7, #22]
 8005796:	f44f 724a 	mov.w	r2, #808	; 0x328
 800579a:	fb02 f303 	mul.w	r3, r2, r3
 800579e:	68ba      	ldr	r2, [r7, #8]
 80057a0:	4413      	add	r3, r2
 80057a2:	f893 1154 	ldrb.w	r1, [r3, #340]	; 0x154
 80057a6:	7dbb      	ldrb	r3, [r7, #22]
 80057a8:	f44f 724a 	mov.w	r2, #808	; 0x328
 80057ac:	fb02 f303 	mul.w	r3, r2, r3
 80057b0:	68ba      	ldr	r2, [r7, #8]
 80057b2:	441a      	add	r2, r3
 80057b4:	460b      	mov	r3, r1
 80057b6:	f003 0301 	and.w	r3, r3, #1
 80057ba:	b2d9      	uxtb	r1, r3
 80057bc:	f892 30db 	ldrb.w	r3, [r2, #219]	; 0xdb
 80057c0:	f361 13c7 	bfi	r3, r1, #7, #1
 80057c4:	f882 30db 	strb.w	r3, [r2, #219]	; 0xdb
    ic[curr_ic].statc.tmodchk = ((ic[curr_ic].stat.rx_data[5] & 0x02) >> 1);
 80057c8:	7dbb      	ldrb	r3, [r7, #22]
 80057ca:	f44f 724a 	mov.w	r2, #808	; 0x328
 80057ce:	fb02 f303 	mul.w	r3, r2, r3
 80057d2:	68ba      	ldr	r2, [r7, #8]
 80057d4:	4413      	add	r3, r2
 80057d6:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 80057da:	1059      	asrs	r1, r3, #1
 80057dc:	7dbb      	ldrb	r3, [r7, #22]
 80057de:	f44f 724a 	mov.w	r2, #808	; 0x328
 80057e2:	fb02 f303 	mul.w	r3, r2, r3
 80057e6:	68ba      	ldr	r2, [r7, #8]
 80057e8:	441a      	add	r2, r3
 80057ea:	460b      	mov	r3, r1
 80057ec:	f003 0301 	and.w	r3, r3, #1
 80057f0:	b2d9      	uxtb	r1, r3
 80057f2:	f892 30db 	ldrb.w	r3, [r2, #219]	; 0xdb
 80057f6:	f361 1386 	bfi	r3, r1, #6, #1
 80057fa:	f882 30db 	strb.w	r3, [r2, #219]	; 0xdb
    ic[curr_ic].statc.thsd = ((ic[curr_ic].stat.rx_data[5] & 0x04) >> 2);
 80057fe:	7dbb      	ldrb	r3, [r7, #22]
 8005800:	f44f 724a 	mov.w	r2, #808	; 0x328
 8005804:	fb02 f303 	mul.w	r3, r2, r3
 8005808:	68ba      	ldr	r2, [r7, #8]
 800580a:	4413      	add	r3, r2
 800580c:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 8005810:	1099      	asrs	r1, r3, #2
 8005812:	7dbb      	ldrb	r3, [r7, #22]
 8005814:	f44f 724a 	mov.w	r2, #808	; 0x328
 8005818:	fb02 f303 	mul.w	r3, r2, r3
 800581c:	68ba      	ldr	r2, [r7, #8]
 800581e:	441a      	add	r2, r3
 8005820:	460b      	mov	r3, r1
 8005822:	f003 0301 	and.w	r3, r3, #1
 8005826:	b2d9      	uxtb	r1, r3
 8005828:	f892 30db 	ldrb.w	r3, [r2, #219]	; 0xdb
 800582c:	f361 1345 	bfi	r3, r1, #5, #1
 8005830:	f882 30db 	strb.w	r3, [r2, #219]	; 0xdb
    ic[curr_ic].statc.sleep = ((ic[curr_ic].stat.rx_data[5] & 0x08) >> 3);
 8005834:	7dbb      	ldrb	r3, [r7, #22]
 8005836:	f44f 724a 	mov.w	r2, #808	; 0x328
 800583a:	fb02 f303 	mul.w	r3, r2, r3
 800583e:	68ba      	ldr	r2, [r7, #8]
 8005840:	4413      	add	r3, r2
 8005842:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 8005846:	10d9      	asrs	r1, r3, #3
 8005848:	7dbb      	ldrb	r3, [r7, #22]
 800584a:	f44f 724a 	mov.w	r2, #808	; 0x328
 800584e:	fb02 f303 	mul.w	r3, r2, r3
 8005852:	68ba      	ldr	r2, [r7, #8]
 8005854:	441a      	add	r2, r3
 8005856:	460b      	mov	r3, r1
 8005858:	f003 0301 	and.w	r3, r3, #1
 800585c:	b2d9      	uxtb	r1, r3
 800585e:	f892 30db 	ldrb.w	r3, [r2, #219]	; 0xdb
 8005862:	f361 1304 	bfi	r3, r1, #4, #1
 8005866:	f882 30db 	strb.w	r3, [r2, #219]	; 0xdb
    ic[curr_ic].statc.spiflt  = ((ic[curr_ic].stat.rx_data[5] & 0x10) >> 4);
 800586a:	7dbb      	ldrb	r3, [r7, #22]
 800586c:	f44f 724a 	mov.w	r2, #808	; 0x328
 8005870:	fb02 f303 	mul.w	r3, r2, r3
 8005874:	68ba      	ldr	r2, [r7, #8]
 8005876:	4413      	add	r3, r2
 8005878:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800587c:	1119      	asrs	r1, r3, #4
 800587e:	7dbb      	ldrb	r3, [r7, #22]
 8005880:	f44f 724a 	mov.w	r2, #808	; 0x328
 8005884:	fb02 f303 	mul.w	r3, r2, r3
 8005888:	68ba      	ldr	r2, [r7, #8]
 800588a:	441a      	add	r2, r3
 800588c:	460b      	mov	r3, r1
 800588e:	f003 0301 	and.w	r3, r3, #1
 8005892:	b2d9      	uxtb	r1, r3
 8005894:	f892 30db 	ldrb.w	r3, [r2, #219]	; 0xdb
 8005898:	f361 03c3 	bfi	r3, r1, #3, #1
 800589c:	f882 30db 	strb.w	r3, [r2, #219]	; 0xdb
    ic[curr_ic].statc.comp = ((ic[curr_ic].stat.rx_data[5] & 0x20) >> 5);
 80058a0:	7dbb      	ldrb	r3, [r7, #22]
 80058a2:	f44f 724a 	mov.w	r2, #808	; 0x328
 80058a6:	fb02 f303 	mul.w	r3, r2, r3
 80058aa:	68ba      	ldr	r2, [r7, #8]
 80058ac:	4413      	add	r3, r2
 80058ae:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 80058b2:	1159      	asrs	r1, r3, #5
 80058b4:	7dbb      	ldrb	r3, [r7, #22]
 80058b6:	f44f 724a 	mov.w	r2, #808	; 0x328
 80058ba:	fb02 f303 	mul.w	r3, r2, r3
 80058be:	68ba      	ldr	r2, [r7, #8]
 80058c0:	441a      	add	r2, r3
 80058c2:	460b      	mov	r3, r1
 80058c4:	f003 0301 	and.w	r3, r3, #1
 80058c8:	b2d9      	uxtb	r1, r3
 80058ca:	f892 30db 	ldrb.w	r3, [r2, #219]	; 0xdb
 80058ce:	f361 0382 	bfi	r3, r1, #2, #1
 80058d2:	f882 30db 	strb.w	r3, [r2, #219]	; 0xdb
    ic[curr_ic].statc.vdel = ((ic[curr_ic].stat.rx_data[5] & 0x40) >> 6);
 80058d6:	7dbb      	ldrb	r3, [r7, #22]
 80058d8:	f44f 724a 	mov.w	r2, #808	; 0x328
 80058dc:	fb02 f303 	mul.w	r3, r2, r3
 80058e0:	68ba      	ldr	r2, [r7, #8]
 80058e2:	4413      	add	r3, r2
 80058e4:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 80058e8:	1199      	asrs	r1, r3, #6
 80058ea:	7dbb      	ldrb	r3, [r7, #22]
 80058ec:	f44f 724a 	mov.w	r2, #808	; 0x328
 80058f0:	fb02 f303 	mul.w	r3, r2, r3
 80058f4:	68ba      	ldr	r2, [r7, #8]
 80058f6:	441a      	add	r2, r3
 80058f8:	460b      	mov	r3, r1
 80058fa:	f003 0301 	and.w	r3, r3, #1
 80058fe:	b2d9      	uxtb	r1, r3
 8005900:	f892 30db 	ldrb.w	r3, [r2, #219]	; 0xdb
 8005904:	f361 0341 	bfi	r3, r1, #1, #1
 8005908:	f882 30db 	strb.w	r3, [r2, #219]	; 0xdb
    ic[curr_ic].statc.vde = ((ic[curr_ic].stat.rx_data[5] & 0x80) >> 7);
 800590c:	7dbb      	ldrb	r3, [r7, #22]
 800590e:	f44f 724a 	mov.w	r2, #808	; 0x328
 8005912:	fb02 f303 	mul.w	r3, r2, r3
 8005916:	68ba      	ldr	r2, [r7, #8]
 8005918:	4413      	add	r3, r2
 800591a:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800591e:	09db      	lsrs	r3, r3, #7
 8005920:	b2d9      	uxtb	r1, r3
 8005922:	7dbb      	ldrb	r3, [r7, #22]
 8005924:	f44f 724a 	mov.w	r2, #808	; 0x328
 8005928:	fb02 f303 	mul.w	r3, r2, r3
 800592c:	68ba      	ldr	r2, [r7, #8]
 800592e:	441a      	add	r2, r3
 8005930:	460b      	mov	r3, r1
 8005932:	f003 0301 	and.w	r3, r3, #1
 8005936:	b2d9      	uxtb	r1, r3
 8005938:	f892 30db 	ldrb.w	r3, [r2, #219]	; 0xdb
 800593c:	f361 0300 	bfi	r3, r1, #0, #1
 8005940:	f882 30db 	strb.w	r3, [r2, #219]	; 0xdb
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8005944:	7dbb      	ldrb	r3, [r7, #22]
 8005946:	3301      	adds	r3, #1
 8005948:	75bb      	strb	r3, [r7, #22]
 800594a:	7dba      	ldrb	r2, [r7, #22]
 800594c:	7bfb      	ldrb	r3, [r7, #15]
 800594e:	429a      	cmp	r2, r3
 8005950:	f4ff ae12 	bcc.w	8005578 <adBms6830ParseStatusC+0x18>
  }
}
 8005954:	bf00      	nop
 8005956:	bf00      	nop
 8005958:	3718      	adds	r7, #24
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}

0800595e <adBms6830ParseStatusD>:
 * @return None
 *
 *******************************************************************************
*/
void adBms6830ParseStatusD(uint8_t tIC, cell_asic *ic, uint8_t *data)
{
 800595e:	b580      	push	{r7, lr}
 8005960:	b086      	sub	sp, #24
 8005962:	af00      	add	r7, sp, #0
 8005964:	4603      	mov	r3, r0
 8005966:	60b9      	str	r1, [r7, #8]
 8005968:	607a      	str	r2, [r7, #4]
 800596a:	73fb      	strb	r3, [r7, #15]
  uint8_t address = 0;
 800596c:	2300      	movs	r3, #0
 800596e:	75fb      	strb	r3, [r7, #23]
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8005970:	2300      	movs	r3, #0
 8005972:	75bb      	strb	r3, [r7, #22]
 8005974:	e32b      	b.n	8005fce <adBms6830ParseStatusD+0x670>
  {
    memcpy(&ic[curr_ic].stat.rx_data[0], &data[address], RX_DATA); /* dst , src , size */
 8005976:	7dbb      	ldrb	r3, [r7, #22]
 8005978:	f44f 724a 	mov.w	r2, #808	; 0x328
 800597c:	fb02 f303 	mul.w	r3, r2, r3
 8005980:	68ba      	ldr	r2, [r7, #8]
 8005982:	4413      	add	r3, r2
 8005984:	f203 104f 	addw	r0, r3, #335	; 0x14f
 8005988:	7dfb      	ldrb	r3, [r7, #23]
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	4413      	add	r3, r2
 800598e:	2208      	movs	r2, #8
 8005990:	4619      	mov	r1, r3
 8005992:	f015 ffc6 	bl	801b922 <memcpy>
    address = ((curr_ic+1) * (RX_DATA));
 8005996:	7dbb      	ldrb	r3, [r7, #22]
 8005998:	3301      	adds	r3, #1
 800599a:	b2db      	uxtb	r3, r3
 800599c:	00db      	lsls	r3, r3, #3
 800599e:	75fb      	strb	r3, [r7, #23]
    /* uv, ov bits 1 to 4 status bits */
    ic[curr_ic].statd.c_uv[0] = (ic[curr_ic].stat.rx_data[0] & 0x01);
 80059a0:	7dbb      	ldrb	r3, [r7, #22]
 80059a2:	f44f 724a 	mov.w	r2, #808	; 0x328
 80059a6:	fb02 f303 	mul.w	r3, r2, r3
 80059aa:	68ba      	ldr	r2, [r7, #8]
 80059ac:	4413      	add	r3, r2
 80059ae:	f893 214f 	ldrb.w	r2, [r3, #335]	; 0x14f
 80059b2:	7dbb      	ldrb	r3, [r7, #22]
 80059b4:	f44f 714a 	mov.w	r1, #808	; 0x328
 80059b8:	fb01 f303 	mul.w	r3, r1, r3
 80059bc:	68b9      	ldr	r1, [r7, #8]
 80059be:	440b      	add	r3, r1
 80059c0:	f002 0201 	and.w	r2, r2, #1
 80059c4:	b2d2      	uxtb	r2, r2
 80059c6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
    ic[curr_ic].statd.c_ov[0] = ((ic[curr_ic].stat.rx_data[0] & 0x02) >> 1);
 80059ca:	7dbb      	ldrb	r3, [r7, #22]
 80059cc:	f44f 724a 	mov.w	r2, #808	; 0x328
 80059d0:	fb02 f303 	mul.w	r3, r2, r3
 80059d4:	68ba      	ldr	r2, [r7, #8]
 80059d6:	4413      	add	r3, r2
 80059d8:	f893 314f 	ldrb.w	r3, [r3, #335]	; 0x14f
 80059dc:	105b      	asrs	r3, r3, #1
 80059de:	b2da      	uxtb	r2, r3
 80059e0:	7dbb      	ldrb	r3, [r7, #22]
 80059e2:	f44f 714a 	mov.w	r1, #808	; 0x328
 80059e6:	fb01 f303 	mul.w	r3, r1, r3
 80059ea:	68b9      	ldr	r1, [r7, #8]
 80059ec:	440b      	add	r3, r1
 80059ee:	f002 0201 	and.w	r2, r2, #1
 80059f2:	b2d2      	uxtb	r2, r2
 80059f4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
    ic[curr_ic].statd.c_uv[1] = ((ic[curr_ic].stat.rx_data[0] & 0x04) >> 2);
 80059f8:	7dbb      	ldrb	r3, [r7, #22]
 80059fa:	f44f 724a 	mov.w	r2, #808	; 0x328
 80059fe:	fb02 f303 	mul.w	r3, r2, r3
 8005a02:	68ba      	ldr	r2, [r7, #8]
 8005a04:	4413      	add	r3, r2
 8005a06:	f893 314f 	ldrb.w	r3, [r3, #335]	; 0x14f
 8005a0a:	109b      	asrs	r3, r3, #2
 8005a0c:	b2da      	uxtb	r2, r3
 8005a0e:	7dbb      	ldrb	r3, [r7, #22]
 8005a10:	f44f 714a 	mov.w	r1, #808	; 0x328
 8005a14:	fb01 f303 	mul.w	r3, r1, r3
 8005a18:	68b9      	ldr	r1, [r7, #8]
 8005a1a:	440b      	add	r3, r1
 8005a1c:	f002 0201 	and.w	r2, r2, #1
 8005a20:	b2d2      	uxtb	r2, r2
 8005a22:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
    ic[curr_ic].statd.c_ov[1] = ((ic[curr_ic].stat.rx_data[0] & 0x08) >> 3);
 8005a26:	7dbb      	ldrb	r3, [r7, #22]
 8005a28:	f44f 724a 	mov.w	r2, #808	; 0x328
 8005a2c:	fb02 f303 	mul.w	r3, r2, r3
 8005a30:	68ba      	ldr	r2, [r7, #8]
 8005a32:	4413      	add	r3, r2
 8005a34:	f893 314f 	ldrb.w	r3, [r3, #335]	; 0x14f
 8005a38:	10db      	asrs	r3, r3, #3
 8005a3a:	b2da      	uxtb	r2, r3
 8005a3c:	7dbb      	ldrb	r3, [r7, #22]
 8005a3e:	f44f 714a 	mov.w	r1, #808	; 0x328
 8005a42:	fb01 f303 	mul.w	r3, r1, r3
 8005a46:	68b9      	ldr	r1, [r7, #8]
 8005a48:	440b      	add	r3, r1
 8005a4a:	f002 0201 	and.w	r2, r2, #1
 8005a4e:	b2d2      	uxtb	r2, r2
 8005a50:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
    ic[curr_ic].statd.c_uv[2] = ((ic[curr_ic].stat.rx_data[0] & 0x10) >> 4);
 8005a54:	7dbb      	ldrb	r3, [r7, #22]
 8005a56:	f44f 724a 	mov.w	r2, #808	; 0x328
 8005a5a:	fb02 f303 	mul.w	r3, r2, r3
 8005a5e:	68ba      	ldr	r2, [r7, #8]
 8005a60:	4413      	add	r3, r2
 8005a62:	f893 314f 	ldrb.w	r3, [r3, #335]	; 0x14f
 8005a66:	111b      	asrs	r3, r3, #4
 8005a68:	b2da      	uxtb	r2, r3
 8005a6a:	7dbb      	ldrb	r3, [r7, #22]
 8005a6c:	f44f 714a 	mov.w	r1, #808	; 0x328
 8005a70:	fb01 f303 	mul.w	r3, r1, r3
 8005a74:	68b9      	ldr	r1, [r7, #8]
 8005a76:	440b      	add	r3, r1
 8005a78:	f002 0201 	and.w	r2, r2, #1
 8005a7c:	b2d2      	uxtb	r2, r2
 8005a7e:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
    ic[curr_ic].statd.c_ov[2] = ((ic[curr_ic].stat.rx_data[0] & 0x20) >> 5);
 8005a82:	7dbb      	ldrb	r3, [r7, #22]
 8005a84:	f44f 724a 	mov.w	r2, #808	; 0x328
 8005a88:	fb02 f303 	mul.w	r3, r2, r3
 8005a8c:	68ba      	ldr	r2, [r7, #8]
 8005a8e:	4413      	add	r3, r2
 8005a90:	f893 314f 	ldrb.w	r3, [r3, #335]	; 0x14f
 8005a94:	115b      	asrs	r3, r3, #5
 8005a96:	b2da      	uxtb	r2, r3
 8005a98:	7dbb      	ldrb	r3, [r7, #22]
 8005a9a:	f44f 714a 	mov.w	r1, #808	; 0x328
 8005a9e:	fb01 f303 	mul.w	r3, r1, r3
 8005aa2:	68b9      	ldr	r1, [r7, #8]
 8005aa4:	440b      	add	r3, r1
 8005aa6:	f002 0201 	and.w	r2, r2, #1
 8005aaa:	b2d2      	uxtb	r2, r2
 8005aac:	f883 20de 	strb.w	r2, [r3, #222]	; 0xde
    ic[curr_ic].statd.c_uv[3] = ((ic[curr_ic].stat.rx_data[0] & 0x40) >> 6);
 8005ab0:	7dbb      	ldrb	r3, [r7, #22]
 8005ab2:	f44f 724a 	mov.w	r2, #808	; 0x328
 8005ab6:	fb02 f303 	mul.w	r3, r2, r3
 8005aba:	68ba      	ldr	r2, [r7, #8]
 8005abc:	4413      	add	r3, r2
 8005abe:	f893 314f 	ldrb.w	r3, [r3, #335]	; 0x14f
 8005ac2:	119b      	asrs	r3, r3, #6
 8005ac4:	b2da      	uxtb	r2, r3
 8005ac6:	7dbb      	ldrb	r3, [r7, #22]
 8005ac8:	f44f 714a 	mov.w	r1, #808	; 0x328
 8005acc:	fb01 f303 	mul.w	r3, r1, r3
 8005ad0:	68b9      	ldr	r1, [r7, #8]
 8005ad2:	440b      	add	r3, r1
 8005ad4:	f002 0201 	and.w	r2, r2, #1
 8005ad8:	b2d2      	uxtb	r2, r2
 8005ada:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
    ic[curr_ic].statd.c_ov[3] = ((ic[curr_ic].stat.rx_data[0] & 0x80) >> 7);
 8005ade:	7dbb      	ldrb	r3, [r7, #22]
 8005ae0:	f44f 724a 	mov.w	r2, #808	; 0x328
 8005ae4:	fb02 f303 	mul.w	r3, r2, r3
 8005ae8:	68ba      	ldr	r2, [r7, #8]
 8005aea:	4413      	add	r3, r2
 8005aec:	f893 214f 	ldrb.w	r2, [r3, #335]	; 0x14f
 8005af0:	7dbb      	ldrb	r3, [r7, #22]
 8005af2:	f44f 714a 	mov.w	r1, #808	; 0x328
 8005af6:	fb01 f303 	mul.w	r3, r1, r3
 8005afa:	68b9      	ldr	r1, [r7, #8]
 8005afc:	440b      	add	r3, r1
 8005afe:	09d2      	lsrs	r2, r2, #7
 8005b00:	b2d2      	uxtb	r2, r2
 8005b02:	f883 20df 	strb.w	r2, [r3, #223]	; 0xdf
    /* uv, ov bits 5 to 8 status bits */
    ic[curr_ic].statd.c_uv[4] = (ic[curr_ic].stat.rx_data[1] & 0x01);
 8005b06:	7dbb      	ldrb	r3, [r7, #22]
 8005b08:	f44f 724a 	mov.w	r2, #808	; 0x328
 8005b0c:	fb02 f303 	mul.w	r3, r2, r3
 8005b10:	68ba      	ldr	r2, [r7, #8]
 8005b12:	4413      	add	r3, r2
 8005b14:	f893 2150 	ldrb.w	r2, [r3, #336]	; 0x150
 8005b18:	7dbb      	ldrb	r3, [r7, #22]
 8005b1a:	f44f 714a 	mov.w	r1, #808	; 0x328
 8005b1e:	fb01 f303 	mul.w	r3, r1, r3
 8005b22:	68b9      	ldr	r1, [r7, #8]
 8005b24:	440b      	add	r3, r1
 8005b26:	f002 0201 	and.w	r2, r2, #1
 8005b2a:	b2d2      	uxtb	r2, r2
 8005b2c:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    ic[curr_ic].statd.c_ov[4] = ((ic[curr_ic].stat.rx_data[1] & 0x02) >> 1);
 8005b30:	7dbb      	ldrb	r3, [r7, #22]
 8005b32:	f44f 724a 	mov.w	r2, #808	; 0x328
 8005b36:	fb02 f303 	mul.w	r3, r2, r3
 8005b3a:	68ba      	ldr	r2, [r7, #8]
 8005b3c:	4413      	add	r3, r2
 8005b3e:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8005b42:	105b      	asrs	r3, r3, #1
 8005b44:	b2da      	uxtb	r2, r3
 8005b46:	7dbb      	ldrb	r3, [r7, #22]
 8005b48:	f44f 714a 	mov.w	r1, #808	; 0x328
 8005b4c:	fb01 f303 	mul.w	r3, r1, r3
 8005b50:	68b9      	ldr	r1, [r7, #8]
 8005b52:	440b      	add	r3, r1
 8005b54:	f002 0201 	and.w	r2, r2, #1
 8005b58:	b2d2      	uxtb	r2, r2
 8005b5a:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    ic[curr_ic].statd.c_uv[5] = ((ic[curr_ic].stat.rx_data[1] & 0x04) >> 2);
 8005b5e:	7dbb      	ldrb	r3, [r7, #22]
 8005b60:	f44f 724a 	mov.w	r2, #808	; 0x328
 8005b64:	fb02 f303 	mul.w	r3, r2, r3
 8005b68:	68ba      	ldr	r2, [r7, #8]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8005b70:	109b      	asrs	r3, r3, #2
 8005b72:	b2da      	uxtb	r2, r3
 8005b74:	7dbb      	ldrb	r3, [r7, #22]
 8005b76:	f44f 714a 	mov.w	r1, #808	; 0x328
 8005b7a:	fb01 f303 	mul.w	r3, r1, r3
 8005b7e:	68b9      	ldr	r1, [r7, #8]
 8005b80:	440b      	add	r3, r1
 8005b82:	f002 0201 	and.w	r2, r2, #1
 8005b86:	b2d2      	uxtb	r2, r2
 8005b88:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
    ic[curr_ic].statd.c_ov[5] = ((ic[curr_ic].stat.rx_data[1] & 0x08) >> 3);
 8005b8c:	7dbb      	ldrb	r3, [r7, #22]
 8005b8e:	f44f 724a 	mov.w	r2, #808	; 0x328
 8005b92:	fb02 f303 	mul.w	r3, r2, r3
 8005b96:	68ba      	ldr	r2, [r7, #8]
 8005b98:	4413      	add	r3, r2
 8005b9a:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8005b9e:	10db      	asrs	r3, r3, #3
 8005ba0:	b2da      	uxtb	r2, r3
 8005ba2:	7dbb      	ldrb	r3, [r7, #22]
 8005ba4:	f44f 714a 	mov.w	r1, #808	; 0x328
 8005ba8:	fb01 f303 	mul.w	r3, r1, r3
 8005bac:	68b9      	ldr	r1, [r7, #8]
 8005bae:	440b      	add	r3, r1
 8005bb0:	f002 0201 	and.w	r2, r2, #1
 8005bb4:	b2d2      	uxtb	r2, r2
 8005bb6:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
    ic[curr_ic].statd.c_uv[6] = ((ic[curr_ic].stat.rx_data[1] & 0x10) >> 4);
 8005bba:	7dbb      	ldrb	r3, [r7, #22]
 8005bbc:	f44f 724a 	mov.w	r2, #808	; 0x328
 8005bc0:	fb02 f303 	mul.w	r3, r2, r3
 8005bc4:	68ba      	ldr	r2, [r7, #8]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8005bcc:	111b      	asrs	r3, r3, #4
 8005bce:	b2da      	uxtb	r2, r3
 8005bd0:	7dbb      	ldrb	r3, [r7, #22]
 8005bd2:	f44f 714a 	mov.w	r1, #808	; 0x328
 8005bd6:	fb01 f303 	mul.w	r3, r1, r3
 8005bda:	68b9      	ldr	r1, [r7, #8]
 8005bdc:	440b      	add	r3, r1
 8005bde:	f002 0201 	and.w	r2, r2, #1
 8005be2:	b2d2      	uxtb	r2, r2
 8005be4:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
    ic[curr_ic].statd.c_ov[6] = ((ic[curr_ic].stat.rx_data[1] & 0x20) >> 5);
 8005be8:	7dbb      	ldrb	r3, [r7, #22]
 8005bea:	f44f 724a 	mov.w	r2, #808	; 0x328
 8005bee:	fb02 f303 	mul.w	r3, r2, r3
 8005bf2:	68ba      	ldr	r2, [r7, #8]
 8005bf4:	4413      	add	r3, r2
 8005bf6:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8005bfa:	115b      	asrs	r3, r3, #5
 8005bfc:	b2da      	uxtb	r2, r3
 8005bfe:	7dbb      	ldrb	r3, [r7, #22]
 8005c00:	f44f 714a 	mov.w	r1, #808	; 0x328
 8005c04:	fb01 f303 	mul.w	r3, r1, r3
 8005c08:	68b9      	ldr	r1, [r7, #8]
 8005c0a:	440b      	add	r3, r1
 8005c0c:	f002 0201 	and.w	r2, r2, #1
 8005c10:	b2d2      	uxtb	r2, r2
 8005c12:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
    ic[curr_ic].statd.c_uv[7] = ((ic[curr_ic].stat.rx_data[1] & 0x40) >> 6);
 8005c16:	7dbb      	ldrb	r3, [r7, #22]
 8005c18:	f44f 724a 	mov.w	r2, #808	; 0x328
 8005c1c:	fb02 f303 	mul.w	r3, r2, r3
 8005c20:	68ba      	ldr	r2, [r7, #8]
 8005c22:	4413      	add	r3, r2
 8005c24:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8005c28:	119b      	asrs	r3, r3, #6
 8005c2a:	b2da      	uxtb	r2, r3
 8005c2c:	7dbb      	ldrb	r3, [r7, #22]
 8005c2e:	f44f 714a 	mov.w	r1, #808	; 0x328
 8005c32:	fb01 f303 	mul.w	r3, r1, r3
 8005c36:	68b9      	ldr	r1, [r7, #8]
 8005c38:	440b      	add	r3, r1
 8005c3a:	f002 0201 	and.w	r2, r2, #1
 8005c3e:	b2d2      	uxtb	r2, r2
 8005c40:	f883 20f3 	strb.w	r2, [r3, #243]	; 0xf3
    ic[curr_ic].statd.c_ov[7] = ((ic[curr_ic].stat.rx_data[1] & 0x80) >> 7);
 8005c44:	7dbb      	ldrb	r3, [r7, #22]
 8005c46:	f44f 724a 	mov.w	r2, #808	; 0x328
 8005c4a:	fb02 f303 	mul.w	r3, r2, r3
 8005c4e:	68ba      	ldr	r2, [r7, #8]
 8005c50:	4413      	add	r3, r2
 8005c52:	f893 2150 	ldrb.w	r2, [r3, #336]	; 0x150
 8005c56:	7dbb      	ldrb	r3, [r7, #22]
 8005c58:	f44f 714a 	mov.w	r1, #808	; 0x328
 8005c5c:	fb01 f303 	mul.w	r3, r1, r3
 8005c60:	68b9      	ldr	r1, [r7, #8]
 8005c62:	440b      	add	r3, r1
 8005c64:	09d2      	lsrs	r2, r2, #7
 8005c66:	b2d2      	uxtb	r2, r2
 8005c68:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
    /* uv, ov bits 9 to 12 status bits */
    ic[curr_ic].statd.c_uv[8] = (ic[curr_ic].stat.rx_data[2] & 0x01);
 8005c6c:	7dbb      	ldrb	r3, [r7, #22]
 8005c6e:	f44f 724a 	mov.w	r2, #808	; 0x328
 8005c72:	fb02 f303 	mul.w	r3, r2, r3
 8005c76:	68ba      	ldr	r2, [r7, #8]
 8005c78:	4413      	add	r3, r2
 8005c7a:	f893 2151 	ldrb.w	r2, [r3, #337]	; 0x151
 8005c7e:	7dbb      	ldrb	r3, [r7, #22]
 8005c80:	f44f 714a 	mov.w	r1, #808	; 0x328
 8005c84:	fb01 f303 	mul.w	r3, r1, r3
 8005c88:	68b9      	ldr	r1, [r7, #8]
 8005c8a:	440b      	add	r3, r1
 8005c8c:	f002 0201 	and.w	r2, r2, #1
 8005c90:	b2d2      	uxtb	r2, r2
 8005c92:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
    ic[curr_ic].statd.c_ov[8] = ((ic[curr_ic].stat.rx_data[2] & 0x02) >> 1);
 8005c96:	7dbb      	ldrb	r3, [r7, #22]
 8005c98:	f44f 724a 	mov.w	r2, #808	; 0x328
 8005c9c:	fb02 f303 	mul.w	r3, r2, r3
 8005ca0:	68ba      	ldr	r2, [r7, #8]
 8005ca2:	4413      	add	r3, r2
 8005ca4:	f893 3151 	ldrb.w	r3, [r3, #337]	; 0x151
 8005ca8:	105b      	asrs	r3, r3, #1
 8005caa:	b2da      	uxtb	r2, r3
 8005cac:	7dbb      	ldrb	r3, [r7, #22]
 8005cae:	f44f 714a 	mov.w	r1, #808	; 0x328
 8005cb2:	fb01 f303 	mul.w	r3, r1, r3
 8005cb6:	68b9      	ldr	r1, [r7, #8]
 8005cb8:	440b      	add	r3, r1
 8005cba:	f002 0201 	and.w	r2, r2, #1
 8005cbe:	b2d2      	uxtb	r2, r2
 8005cc0:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
    ic[curr_ic].statd.c_uv[9] = ((ic[curr_ic].stat.rx_data[2] & 0x04) >> 2);
 8005cc4:	7dbb      	ldrb	r3, [r7, #22]
 8005cc6:	f44f 724a 	mov.w	r2, #808	; 0x328
 8005cca:	fb02 f303 	mul.w	r3, r2, r3
 8005cce:	68ba      	ldr	r2, [r7, #8]
 8005cd0:	4413      	add	r3, r2
 8005cd2:	f893 3151 	ldrb.w	r3, [r3, #337]	; 0x151
 8005cd6:	109b      	asrs	r3, r3, #2
 8005cd8:	b2da      	uxtb	r2, r3
 8005cda:	7dbb      	ldrb	r3, [r7, #22]
 8005cdc:	f44f 714a 	mov.w	r1, #808	; 0x328
 8005ce0:	fb01 f303 	mul.w	r3, r1, r3
 8005ce4:	68b9      	ldr	r1, [r7, #8]
 8005ce6:	440b      	add	r3, r1
 8005ce8:	f002 0201 	and.w	r2, r2, #1
 8005cec:	b2d2      	uxtb	r2, r2
 8005cee:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
    ic[curr_ic].statd.c_ov[9] = ((ic[curr_ic].stat.rx_data[2] & 0x08) >> 3);
 8005cf2:	7dbb      	ldrb	r3, [r7, #22]
 8005cf4:	f44f 724a 	mov.w	r2, #808	; 0x328
 8005cf8:	fb02 f303 	mul.w	r3, r2, r3
 8005cfc:	68ba      	ldr	r2, [r7, #8]
 8005cfe:	4413      	add	r3, r2
 8005d00:	f893 3151 	ldrb.w	r3, [r3, #337]	; 0x151
 8005d04:	10db      	asrs	r3, r3, #3
 8005d06:	b2da      	uxtb	r2, r3
 8005d08:	7dbb      	ldrb	r3, [r7, #22]
 8005d0a:	f44f 714a 	mov.w	r1, #808	; 0x328
 8005d0e:	fb01 f303 	mul.w	r3, r1, r3
 8005d12:	68b9      	ldr	r1, [r7, #8]
 8005d14:	440b      	add	r3, r1
 8005d16:	f002 0201 	and.w	r2, r2, #1
 8005d1a:	b2d2      	uxtb	r2, r2
 8005d1c:	f883 20e5 	strb.w	r2, [r3, #229]	; 0xe5
    ic[curr_ic].statd.c_uv[10] = ((ic[curr_ic].stat.rx_data[2] & 0x10) >> 4);
 8005d20:	7dbb      	ldrb	r3, [r7, #22]
 8005d22:	f44f 724a 	mov.w	r2, #808	; 0x328
 8005d26:	fb02 f303 	mul.w	r3, r2, r3
 8005d2a:	68ba      	ldr	r2, [r7, #8]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	f893 3151 	ldrb.w	r3, [r3, #337]	; 0x151
 8005d32:	111b      	asrs	r3, r3, #4
 8005d34:	b2da      	uxtb	r2, r3
 8005d36:	7dbb      	ldrb	r3, [r7, #22]
 8005d38:	f44f 714a 	mov.w	r1, #808	; 0x328
 8005d3c:	fb01 f303 	mul.w	r3, r1, r3
 8005d40:	68b9      	ldr	r1, [r7, #8]
 8005d42:	440b      	add	r3, r1
 8005d44:	f002 0201 	and.w	r2, r2, #1
 8005d48:	b2d2      	uxtb	r2, r2
 8005d4a:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
    ic[curr_ic].statd.c_ov[10] = ((ic[curr_ic].stat.rx_data[2] & 0x20) >> 5);
 8005d4e:	7dbb      	ldrb	r3, [r7, #22]
 8005d50:	f44f 724a 	mov.w	r2, #808	; 0x328
 8005d54:	fb02 f303 	mul.w	r3, r2, r3
 8005d58:	68ba      	ldr	r2, [r7, #8]
 8005d5a:	4413      	add	r3, r2
 8005d5c:	f893 3151 	ldrb.w	r3, [r3, #337]	; 0x151
 8005d60:	115b      	asrs	r3, r3, #5
 8005d62:	b2da      	uxtb	r2, r3
 8005d64:	7dbb      	ldrb	r3, [r7, #22]
 8005d66:	f44f 714a 	mov.w	r1, #808	; 0x328
 8005d6a:	fb01 f303 	mul.w	r3, r1, r3
 8005d6e:	68b9      	ldr	r1, [r7, #8]
 8005d70:	440b      	add	r3, r1
 8005d72:	f002 0201 	and.w	r2, r2, #1
 8005d76:	b2d2      	uxtb	r2, r2
 8005d78:	f883 20e6 	strb.w	r2, [r3, #230]	; 0xe6
    ic[curr_ic].statd.c_uv[11] = ((ic[curr_ic].stat.rx_data[2] & 0x40) >> 6);
 8005d7c:	7dbb      	ldrb	r3, [r7, #22]
 8005d7e:	f44f 724a 	mov.w	r2, #808	; 0x328
 8005d82:	fb02 f303 	mul.w	r3, r2, r3
 8005d86:	68ba      	ldr	r2, [r7, #8]
 8005d88:	4413      	add	r3, r2
 8005d8a:	f893 3151 	ldrb.w	r3, [r3, #337]	; 0x151
 8005d8e:	119b      	asrs	r3, r3, #6
 8005d90:	b2da      	uxtb	r2, r3
 8005d92:	7dbb      	ldrb	r3, [r7, #22]
 8005d94:	f44f 714a 	mov.w	r1, #808	; 0x328
 8005d98:	fb01 f303 	mul.w	r3, r1, r3
 8005d9c:	68b9      	ldr	r1, [r7, #8]
 8005d9e:	440b      	add	r3, r1
 8005da0:	f002 0201 	and.w	r2, r2, #1
 8005da4:	b2d2      	uxtb	r2, r2
 8005da6:	f883 20f7 	strb.w	r2, [r3, #247]	; 0xf7
    ic[curr_ic].statd.c_ov[11] = ((ic[curr_ic].stat.rx_data[2] & 0x80) >> 7);
 8005daa:	7dbb      	ldrb	r3, [r7, #22]
 8005dac:	f44f 724a 	mov.w	r2, #808	; 0x328
 8005db0:	fb02 f303 	mul.w	r3, r2, r3
 8005db4:	68ba      	ldr	r2, [r7, #8]
 8005db6:	4413      	add	r3, r2
 8005db8:	f893 2151 	ldrb.w	r2, [r3, #337]	; 0x151
 8005dbc:	7dbb      	ldrb	r3, [r7, #22]
 8005dbe:	f44f 714a 	mov.w	r1, #808	; 0x328
 8005dc2:	fb01 f303 	mul.w	r3, r1, r3
 8005dc6:	68b9      	ldr	r1, [r7, #8]
 8005dc8:	440b      	add	r3, r1
 8005dca:	09d2      	lsrs	r2, r2, #7
 8005dcc:	b2d2      	uxtb	r2, r2
 8005dce:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
    /* uv, ov bits 13 to 16 status bits */
    ic[curr_ic].statd.c_uv[12] = (ic[curr_ic].stat.rx_data[3] & 0x01);
 8005dd2:	7dbb      	ldrb	r3, [r7, #22]
 8005dd4:	f44f 724a 	mov.w	r2, #808	; 0x328
 8005dd8:	fb02 f303 	mul.w	r3, r2, r3
 8005ddc:	68ba      	ldr	r2, [r7, #8]
 8005dde:	4413      	add	r3, r2
 8005de0:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
 8005de4:	7dbb      	ldrb	r3, [r7, #22]
 8005de6:	f44f 714a 	mov.w	r1, #808	; 0x328
 8005dea:	fb01 f303 	mul.w	r3, r1, r3
 8005dee:	68b9      	ldr	r1, [r7, #8]
 8005df0:	440b      	add	r3, r1
 8005df2:	f002 0201 	and.w	r2, r2, #1
 8005df6:	b2d2      	uxtb	r2, r2
 8005df8:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
    ic[curr_ic].statd.c_ov[12] = ((ic[curr_ic].stat.rx_data[3] & 0x02) >> 1);
 8005dfc:	7dbb      	ldrb	r3, [r7, #22]
 8005dfe:	f44f 724a 	mov.w	r2, #808	; 0x328
 8005e02:	fb02 f303 	mul.w	r3, r2, r3
 8005e06:	68ba      	ldr	r2, [r7, #8]
 8005e08:	4413      	add	r3, r2
 8005e0a:	f893 3152 	ldrb.w	r3, [r3, #338]	; 0x152
 8005e0e:	105b      	asrs	r3, r3, #1
 8005e10:	b2da      	uxtb	r2, r3
 8005e12:	7dbb      	ldrb	r3, [r7, #22]
 8005e14:	f44f 714a 	mov.w	r1, #808	; 0x328
 8005e18:	fb01 f303 	mul.w	r3, r1, r3
 8005e1c:	68b9      	ldr	r1, [r7, #8]
 8005e1e:	440b      	add	r3, r1
 8005e20:	f002 0201 	and.w	r2, r2, #1
 8005e24:	b2d2      	uxtb	r2, r2
 8005e26:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
    ic[curr_ic].statd.c_uv[13] = ((ic[curr_ic].stat.rx_data[3] & 0x04) >> 2);
 8005e2a:	7dbb      	ldrb	r3, [r7, #22]
 8005e2c:	f44f 724a 	mov.w	r2, #808	; 0x328
 8005e30:	fb02 f303 	mul.w	r3, r2, r3
 8005e34:	68ba      	ldr	r2, [r7, #8]
 8005e36:	4413      	add	r3, r2
 8005e38:	f893 3152 	ldrb.w	r3, [r3, #338]	; 0x152
 8005e3c:	109b      	asrs	r3, r3, #2
 8005e3e:	b2da      	uxtb	r2, r3
 8005e40:	7dbb      	ldrb	r3, [r7, #22]
 8005e42:	f44f 714a 	mov.w	r1, #808	; 0x328
 8005e46:	fb01 f303 	mul.w	r3, r1, r3
 8005e4a:	68b9      	ldr	r1, [r7, #8]
 8005e4c:	440b      	add	r3, r1
 8005e4e:	f002 0201 	and.w	r2, r2, #1
 8005e52:	b2d2      	uxtb	r2, r2
 8005e54:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
    ic[curr_ic].statd.c_ov[13] = ((ic[curr_ic].stat.rx_data[3] & 0x08) >> 3);
 8005e58:	7dbb      	ldrb	r3, [r7, #22]
 8005e5a:	f44f 724a 	mov.w	r2, #808	; 0x328
 8005e5e:	fb02 f303 	mul.w	r3, r2, r3
 8005e62:	68ba      	ldr	r2, [r7, #8]
 8005e64:	4413      	add	r3, r2
 8005e66:	f893 3152 	ldrb.w	r3, [r3, #338]	; 0x152
 8005e6a:	10db      	asrs	r3, r3, #3
 8005e6c:	b2da      	uxtb	r2, r3
 8005e6e:	7dbb      	ldrb	r3, [r7, #22]
 8005e70:	f44f 714a 	mov.w	r1, #808	; 0x328
 8005e74:	fb01 f303 	mul.w	r3, r1, r3
 8005e78:	68b9      	ldr	r1, [r7, #8]
 8005e7a:	440b      	add	r3, r1
 8005e7c:	f002 0201 	and.w	r2, r2, #1
 8005e80:	b2d2      	uxtb	r2, r2
 8005e82:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
    ic[curr_ic].statd.c_uv[14] = ((ic[curr_ic].stat.rx_data[3] & 0x10) >> 4);
 8005e86:	7dbb      	ldrb	r3, [r7, #22]
 8005e88:	f44f 724a 	mov.w	r2, #808	; 0x328
 8005e8c:	fb02 f303 	mul.w	r3, r2, r3
 8005e90:	68ba      	ldr	r2, [r7, #8]
 8005e92:	4413      	add	r3, r2
 8005e94:	f893 3152 	ldrb.w	r3, [r3, #338]	; 0x152
 8005e98:	111b      	asrs	r3, r3, #4
 8005e9a:	b2da      	uxtb	r2, r3
 8005e9c:	7dbb      	ldrb	r3, [r7, #22]
 8005e9e:	f44f 714a 	mov.w	r1, #808	; 0x328
 8005ea2:	fb01 f303 	mul.w	r3, r1, r3
 8005ea6:	68b9      	ldr	r1, [r7, #8]
 8005ea8:	440b      	add	r3, r1
 8005eaa:	f002 0201 	and.w	r2, r2, #1
 8005eae:	b2d2      	uxtb	r2, r2
 8005eb0:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
    ic[curr_ic].statd.c_ov[14] = ((ic[curr_ic].stat.rx_data[3] & 0x20) >> 5);
 8005eb4:	7dbb      	ldrb	r3, [r7, #22]
 8005eb6:	f44f 724a 	mov.w	r2, #808	; 0x328
 8005eba:	fb02 f303 	mul.w	r3, r2, r3
 8005ebe:	68ba      	ldr	r2, [r7, #8]
 8005ec0:	4413      	add	r3, r2
 8005ec2:	f893 3152 	ldrb.w	r3, [r3, #338]	; 0x152
 8005ec6:	115b      	asrs	r3, r3, #5
 8005ec8:	b2da      	uxtb	r2, r3
 8005eca:	7dbb      	ldrb	r3, [r7, #22]
 8005ecc:	f44f 714a 	mov.w	r1, #808	; 0x328
 8005ed0:	fb01 f303 	mul.w	r3, r1, r3
 8005ed4:	68b9      	ldr	r1, [r7, #8]
 8005ed6:	440b      	add	r3, r1
 8005ed8:	f002 0201 	and.w	r2, r2, #1
 8005edc:	b2d2      	uxtb	r2, r2
 8005ede:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
    ic[curr_ic].statd.c_uv[15] = ((ic[curr_ic].stat.rx_data[3] & 0x40) >> 6);
 8005ee2:	7dbb      	ldrb	r3, [r7, #22]
 8005ee4:	f44f 724a 	mov.w	r2, #808	; 0x328
 8005ee8:	fb02 f303 	mul.w	r3, r2, r3
 8005eec:	68ba      	ldr	r2, [r7, #8]
 8005eee:	4413      	add	r3, r2
 8005ef0:	f893 3152 	ldrb.w	r3, [r3, #338]	; 0x152
 8005ef4:	119b      	asrs	r3, r3, #6
 8005ef6:	b2da      	uxtb	r2, r3
 8005ef8:	7dbb      	ldrb	r3, [r7, #22]
 8005efa:	f44f 714a 	mov.w	r1, #808	; 0x328
 8005efe:	fb01 f303 	mul.w	r3, r1, r3
 8005f02:	68b9      	ldr	r1, [r7, #8]
 8005f04:	440b      	add	r3, r1
 8005f06:	f002 0201 	and.w	r2, r2, #1
 8005f0a:	b2d2      	uxtb	r2, r2
 8005f0c:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
    ic[curr_ic].statd.c_ov[15] = ((ic[curr_ic].stat.rx_data[3] & 0x80) >> 7);
 8005f10:	7dbb      	ldrb	r3, [r7, #22]
 8005f12:	f44f 724a 	mov.w	r2, #808	; 0x328
 8005f16:	fb02 f303 	mul.w	r3, r2, r3
 8005f1a:	68ba      	ldr	r2, [r7, #8]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
 8005f22:	7dbb      	ldrb	r3, [r7, #22]
 8005f24:	f44f 714a 	mov.w	r1, #808	; 0x328
 8005f28:	fb01 f303 	mul.w	r3, r1, r3
 8005f2c:	68b9      	ldr	r1, [r7, #8]
 8005f2e:	440b      	add	r3, r1
 8005f30:	09d2      	lsrs	r2, r2, #7
 8005f32:	b2d2      	uxtb	r2, r2
 8005f34:	f883 20eb 	strb.w	r2, [r3, #235]	; 0xeb
    /* ct and cts */
    ic[curr_ic].statd.cts = (ic[curr_ic].stat.rx_data[4] & 0x03);
 8005f38:	7dbb      	ldrb	r3, [r7, #22]
 8005f3a:	f44f 724a 	mov.w	r2, #808	; 0x328
 8005f3e:	fb02 f303 	mul.w	r3, r2, r3
 8005f42:	68ba      	ldr	r2, [r7, #8]
 8005f44:	4413      	add	r3, r2
 8005f46:	f893 1153 	ldrb.w	r1, [r3, #339]	; 0x153
 8005f4a:	7dbb      	ldrb	r3, [r7, #22]
 8005f4c:	f44f 724a 	mov.w	r2, #808	; 0x328
 8005f50:	fb02 f303 	mul.w	r3, r2, r3
 8005f54:	68ba      	ldr	r2, [r7, #8]
 8005f56:	441a      	add	r2, r3
 8005f58:	460b      	mov	r3, r1
 8005f5a:	f003 0303 	and.w	r3, r3, #3
 8005f5e:	b2d9      	uxtb	r1, r3
 8005f60:	f892 30fc 	ldrb.w	r3, [r2, #252]	; 0xfc
 8005f64:	f361 1387 	bfi	r3, r1, #6, #2
 8005f68:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc
    ic[curr_ic].statd.ct = ((ic[curr_ic].stat.rx_data[4] & 0xFC) >> 2);
 8005f6c:	7dbb      	ldrb	r3, [r7, #22]
 8005f6e:	f44f 724a 	mov.w	r2, #808	; 0x328
 8005f72:	fb02 f303 	mul.w	r3, r2, r3
 8005f76:	68ba      	ldr	r2, [r7, #8]
 8005f78:	4413      	add	r3, r2
 8005f7a:	f893 3153 	ldrb.w	r3, [r3, #339]	; 0x153
 8005f7e:	089b      	lsrs	r3, r3, #2
 8005f80:	b2d9      	uxtb	r1, r3
 8005f82:	7dbb      	ldrb	r3, [r7, #22]
 8005f84:	f44f 724a 	mov.w	r2, #808	; 0x328
 8005f88:	fb02 f303 	mul.w	r3, r2, r3
 8005f8c:	68ba      	ldr	r2, [r7, #8]
 8005f8e:	441a      	add	r2, r3
 8005f90:	460b      	mov	r3, r1
 8005f92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f96:	b2d9      	uxtb	r1, r3
 8005f98:	f892 30fc 	ldrb.w	r3, [r2, #252]	; 0xfc
 8005f9c:	f361 0305 	bfi	r3, r1, #0, #6
 8005fa0:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc
    /* oc_cntr */
    ic[curr_ic].statd.oc_cntr = (ic[curr_ic].stat.rx_data[5] & 0xFF);
 8005fa4:	7dbb      	ldrb	r3, [r7, #22]
 8005fa6:	f44f 724a 	mov.w	r2, #808	; 0x328
 8005faa:	fb02 f303 	mul.w	r3, r2, r3
 8005fae:	68ba      	ldr	r2, [r7, #8]
 8005fb0:	441a      	add	r2, r3
 8005fb2:	7dbb      	ldrb	r3, [r7, #22]
 8005fb4:	f44f 714a 	mov.w	r1, #808	; 0x328
 8005fb8:	fb01 f303 	mul.w	r3, r1, r3
 8005fbc:	68b9      	ldr	r1, [r7, #8]
 8005fbe:	440b      	add	r3, r1
 8005fc0:	f892 2154 	ldrb.w	r2, [r2, #340]	; 0x154
 8005fc4:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8005fc8:	7dbb      	ldrb	r3, [r7, #22]
 8005fca:	3301      	adds	r3, #1
 8005fcc:	75bb      	strb	r3, [r7, #22]
 8005fce:	7dba      	ldrb	r2, [r7, #22]
 8005fd0:	7bfb      	ldrb	r3, [r7, #15]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	f4ff accf 	bcc.w	8005976 <adBms6830ParseStatusD+0x18>
  }
}
 8005fd8:	bf00      	nop
 8005fda:	bf00      	nop
 8005fdc:	3718      	adds	r7, #24
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}

08005fe2 <adBms6830ParseStatusE>:
 * @return None
 *
 *******************************************************************************
*/
void adBms6830ParseStatusE(uint8_t tIC, cell_asic *ic, uint8_t *data)
{
 8005fe2:	b580      	push	{r7, lr}
 8005fe4:	b086      	sub	sp, #24
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	4603      	mov	r3, r0
 8005fea:	60b9      	str	r1, [r7, #8]
 8005fec:	607a      	str	r2, [r7, #4]
 8005fee:	73fb      	strb	r3, [r7, #15]
  uint8_t address = 0;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	75fb      	strb	r3, [r7, #23]
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	75bb      	strb	r3, [r7, #22]
 8005ff8:	e05e      	b.n	80060b8 <adBms6830ParseStatusE+0xd6>
  {
    memcpy(&ic[curr_ic].stat.rx_data[0], &data[address], RX_DATA); /* dst , src , size */
 8005ffa:	7dbb      	ldrb	r3, [r7, #22]
 8005ffc:	f44f 724a 	mov.w	r2, #808	; 0x328
 8006000:	fb02 f303 	mul.w	r3, r2, r3
 8006004:	68ba      	ldr	r2, [r7, #8]
 8006006:	4413      	add	r3, r2
 8006008:	f203 104f 	addw	r0, r3, #335	; 0x14f
 800600c:	7dfb      	ldrb	r3, [r7, #23]
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	4413      	add	r3, r2
 8006012:	2208      	movs	r2, #8
 8006014:	4619      	mov	r1, r3
 8006016:	f015 fc84 	bl	801b922 <memcpy>
    address = ((curr_ic+1) * (RX_DATA));
 800601a:	7dbb      	ldrb	r3, [r7, #22]
 800601c:	3301      	adds	r3, #1
 800601e:	b2db      	uxtb	r3, r3
 8006020:	00db      	lsls	r3, r3, #3
 8006022:	75fb      	strb	r3, [r7, #23]
    ic[curr_ic].state.gpi   = ((ic[curr_ic].stat.rx_data[4] + ((ic[curr_ic].stat.rx_data[5] & 0x03) << 8)));
 8006024:	7dbb      	ldrb	r3, [r7, #22]
 8006026:	f44f 724a 	mov.w	r2, #808	; 0x328
 800602a:	fb02 f303 	mul.w	r3, r2, r3
 800602e:	68ba      	ldr	r2, [r7, #8]
 8006030:	4413      	add	r3, r2
 8006032:	f893 3153 	ldrb.w	r3, [r3, #339]	; 0x153
 8006036:	b29a      	uxth	r2, r3
 8006038:	7dbb      	ldrb	r3, [r7, #22]
 800603a:	f44f 714a 	mov.w	r1, #808	; 0x328
 800603e:	fb01 f303 	mul.w	r3, r1, r3
 8006042:	68b9      	ldr	r1, [r7, #8]
 8006044:	440b      	add	r3, r1
 8006046:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800604a:	021b      	lsls	r3, r3, #8
 800604c:	b29b      	uxth	r3, r3
 800604e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006052:	b29b      	uxth	r3, r3
 8006054:	4413      	add	r3, r2
 8006056:	b299      	uxth	r1, r3
 8006058:	7dbb      	ldrb	r3, [r7, #22]
 800605a:	f44f 724a 	mov.w	r2, #808	; 0x328
 800605e:	fb02 f303 	mul.w	r3, r2, r3
 8006062:	68ba      	ldr	r2, [r7, #8]
 8006064:	441a      	add	r2, r3
 8006066:	460b      	mov	r3, r1
 8006068:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800606c:	b299      	uxth	r1, r3
 800606e:	f8b2 30fe 	ldrh.w	r3, [r2, #254]	; 0xfe
 8006072:	f361 0309 	bfi	r3, r1, #0, #10
 8006076:	f8a2 30fe 	strh.w	r3, [r2, #254]	; 0xfe
    ic[curr_ic].state.rev = ((ic[curr_ic].stat.rx_data[5] & 0xF0) >> 4);
 800607a:	7dbb      	ldrb	r3, [r7, #22]
 800607c:	f44f 724a 	mov.w	r2, #808	; 0x328
 8006080:	fb02 f303 	mul.w	r3, r2, r3
 8006084:	68ba      	ldr	r2, [r7, #8]
 8006086:	4413      	add	r3, r2
 8006088:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800608c:	091b      	lsrs	r3, r3, #4
 800608e:	b2d9      	uxtb	r1, r3
 8006090:	7dbb      	ldrb	r3, [r7, #22]
 8006092:	f44f 724a 	mov.w	r2, #808	; 0x328
 8006096:	fb02 f303 	mul.w	r3, r2, r3
 800609a:	68ba      	ldr	r2, [r7, #8]
 800609c:	441a      	add	r2, r3
 800609e:	460b      	mov	r3, r1
 80060a0:	f003 030f 	and.w	r3, r3, #15
 80060a4:	b2d9      	uxtb	r1, r3
 80060a6:	f892 30ff 	ldrb.w	r3, [r2, #255]	; 0xff
 80060aa:	f361 0385 	bfi	r3, r1, #2, #4
 80060ae:	f882 30ff 	strb.w	r3, [r2, #255]	; 0xff
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 80060b2:	7dbb      	ldrb	r3, [r7, #22]
 80060b4:	3301      	adds	r3, #1
 80060b6:	75bb      	strb	r3, [r7, #22]
 80060b8:	7dba      	ldrb	r2, [r7, #22]
 80060ba:	7bfb      	ldrb	r3, [r7, #15]
 80060bc:	429a      	cmp	r2, r3
 80060be:	d39c      	bcc.n	8005ffa <adBms6830ParseStatusE+0x18>
  }
}
 80060c0:	bf00      	nop
 80060c2:	bf00      	nop
 80060c4:	3718      	adds	r7, #24
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
	...

080060cc <adBms6830ParseStatus>:
 * @return None
 *
 *******************************************************************************
*/
void adBms6830ParseStatus(uint8_t tIC, cell_asic *ic, GRP grp, uint8_t *data)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b088      	sub	sp, #32
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	60b9      	str	r1, [r7, #8]
 80060d4:	607b      	str	r3, [r7, #4]
 80060d6:	4603      	mov	r3, r0
 80060d8:	73fb      	strb	r3, [r7, #15]
 80060da:	4613      	mov	r3, r2
 80060dc:	73bb      	strb	r3, [r7, #14]
  uint8_t statc[RX_DATA], state[RX_DATA];
  switch (grp)
 80060de:	7bbb      	ldrb	r3, [r7, #14]
 80060e0:	2b05      	cmp	r3, #5
 80060e2:	d868      	bhi.n	80061b6 <adBms6830ParseStatus+0xea>
 80060e4:	a201      	add	r2, pc, #4	; (adr r2, 80060ec <adBms6830ParseStatus+0x20>)
 80060e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ea:	bf00      	nop
 80060ec:	0800614b 	.word	0x0800614b
 80060f0:	08006105 	.word	0x08006105
 80060f4:	08006113 	.word	0x08006113
 80060f8:	08006121 	.word	0x08006121
 80060fc:	0800612f 	.word	0x0800612f
 8006100:	0800613d 	.word	0x0800613d
  {
    case A: /* Status Register group A */
      adBms6830ParseStatusA(tIC, &ic[0], &data[0]);
 8006104:	7bfb      	ldrb	r3, [r7, #15]
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	68b9      	ldr	r1, [r7, #8]
 800610a:	4618      	mov	r0, r3
 800610c:	f7ff f908 	bl	8005320 <adBms6830ParseStatusA>
      break;
 8006110:	e052      	b.n	80061b8 <adBms6830ParseStatus+0xec>

    case B: /* Status Register group B */
      adBms6830ParseStatusB(tIC, &ic[0], &data[0]);
 8006112:	7bfb      	ldrb	r3, [r7, #15]
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	68b9      	ldr	r1, [r7, #8]
 8006118:	4618      	mov	r0, r3
 800611a:	f7ff f991 	bl	8005440 <adBms6830ParseStatusB>
      break;
 800611e:	e04b      	b.n	80061b8 <adBms6830ParseStatus+0xec>

    case C: /* Status Register group C */
      adBms6830ParseStatusC(tIC, &ic[0], &data[0]);
 8006120:	7bfb      	ldrb	r3, [r7, #15]
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	68b9      	ldr	r1, [r7, #8]
 8006126:	4618      	mov	r0, r3
 8006128:	f7ff fa1a 	bl	8005560 <adBms6830ParseStatusC>
      break;
 800612c:	e044      	b.n	80061b8 <adBms6830ParseStatus+0xec>

    case D: /* Status Register group D */
      adBms6830ParseStatusD(tIC, &ic[0], &data[0]);
 800612e:	7bfb      	ldrb	r3, [r7, #15]
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	68b9      	ldr	r1, [r7, #8]
 8006134:	4618      	mov	r0, r3
 8006136:	f7ff fc12 	bl	800595e <adBms6830ParseStatusD>
      break;
 800613a:	e03d      	b.n	80061b8 <adBms6830ParseStatus+0xec>

    case E: /* Status Register group E */
      adBms6830ParseStatusE(tIC, &ic[0], &data[0]);
 800613c:	7bfb      	ldrb	r3, [r7, #15]
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	68b9      	ldr	r1, [r7, #8]
 8006142:	4618      	mov	r0, r3
 8006144:	f7ff ff4d 	bl	8005fe2 <adBms6830ParseStatusE>
      break;
 8006148:	e036      	b.n	80061b8 <adBms6830ParseStatus+0xec>

    case ALL_GRP: /* Status Register group ALL */
      /* Status A base address data[0] index */
      adBms6830ParseStatusA(tIC, &ic[0], &data[0]);
 800614a:	7bfb      	ldrb	r3, [r7, #15]
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	68b9      	ldr	r1, [r7, #8]
 8006150:	4618      	mov	r0, r3
 8006152:	f7ff f8e5 	bl	8005320 <adBms6830ParseStatusA>
      /* Status B base address data[6] index */
      adBms6830ParseStatusB(tIC, &ic[0], &data[6]);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	1d9a      	adds	r2, r3, #6
 800615a:	7bfb      	ldrb	r3, [r7, #15]
 800615c:	68b9      	ldr	r1, [r7, #8]
 800615e:	4618      	mov	r0, r3
 8006160:	f7ff f96e 	bl	8005440 <adBms6830ParseStatusB>
      /* Status C base address data[12] index */
      statc[0] = data[12];
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	7b1b      	ldrb	r3, [r3, #12]
 8006168:	763b      	strb	r3, [r7, #24]
      statc[1] = data[13];
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	7b5b      	ldrb	r3, [r3, #13]
 800616e:	767b      	strb	r3, [r7, #25]
      statc[4] = data[14];
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	7b9b      	ldrb	r3, [r3, #14]
 8006174:	773b      	strb	r3, [r7, #28]
      statc[5] = data[15];
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	7bdb      	ldrb	r3, [r3, #15]
 800617a:	777b      	strb	r3, [r7, #29]
      adBms6830ParseStatusC(tIC, &ic[0], &statc[0]);
 800617c:	f107 0218 	add.w	r2, r7, #24
 8006180:	7bfb      	ldrb	r3, [r7, #15]
 8006182:	68b9      	ldr	r1, [r7, #8]
 8006184:	4618      	mov	r0, r3
 8006186:	f7ff f9eb 	bl	8005560 <adBms6830ParseStatusC>
      /* Status D base address data[16] index */
      adBms6830ParseStatusD(tIC, &ic[0], &data[16]);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f103 0210 	add.w	r2, r3, #16
 8006190:	7bfb      	ldrb	r3, [r7, #15]
 8006192:	68b9      	ldr	r1, [r7, #8]
 8006194:	4618      	mov	r0, r3
 8006196:	f7ff fbe2 	bl	800595e <adBms6830ParseStatusD>
      /* Status E base address data[22] index */
      state[4] = data[22];
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	7d9b      	ldrb	r3, [r3, #22]
 800619e:	753b      	strb	r3, [r7, #20]
      state[5] = data[23];
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	7ddb      	ldrb	r3, [r3, #23]
 80061a4:	757b      	strb	r3, [r7, #21]
      adBms6830ParseStatusE(tIC, &ic[0], &state[0]);
 80061a6:	f107 0210 	add.w	r2, r7, #16
 80061aa:	7bfb      	ldrb	r3, [r7, #15]
 80061ac:	68b9      	ldr	r1, [r7, #8]
 80061ae:	4618      	mov	r0, r3
 80061b0:	f7ff ff17 	bl	8005fe2 <adBms6830ParseStatusE>
     break;
 80061b4:	e000      	b.n	80061b8 <adBms6830ParseStatus+0xec>

    default:
      break;
 80061b6:	bf00      	nop
  }
}
 80061b8:	bf00      	nop
 80061ba:	3720      	adds	r7, #32
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}

080061c0 <adBms6830ParseComm>:
 * @return None
 *
 *******************************************************************************
*/
void adBms6830ParseComm(uint8_t tIC, cell_asic *ic, uint8_t *data)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b086      	sub	sp, #24
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	4603      	mov	r3, r0
 80061c8:	60b9      	str	r1, [r7, #8]
 80061ca:	607a      	str	r2, [r7, #4]
 80061cc:	73fb      	strb	r3, [r7, #15]
  uint8_t address = 0;
 80061ce:	2300      	movs	r3, #0
 80061d0:	75fb      	strb	r3, [r7, #23]
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 80061d2:	2300      	movs	r3, #0
 80061d4:	75bb      	strb	r3, [r7, #22]
 80061d6:	e0c8      	b.n	800636a <adBms6830ParseComm+0x1aa>
  {
    memcpy(&ic[curr_ic].com.rx_data[0], &data[address], RX_DATA); /* dst , src , size */
 80061d8:	7dbb      	ldrb	r3, [r7, #22]
 80061da:	f44f 724a 	mov.w	r2, #808	; 0x328
 80061de:	fb02 f303 	mul.w	r3, r2, r3
 80061e2:	68ba      	ldr	r2, [r7, #8]
 80061e4:	4413      	add	r3, r2
 80061e6:	f203 105d 	addw	r0, r3, #349	; 0x15d
 80061ea:	7dfb      	ldrb	r3, [r7, #23]
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	4413      	add	r3, r2
 80061f0:	2208      	movs	r2, #8
 80061f2:	4619      	mov	r1, r3
 80061f4:	f015 fb95 	bl	801b922 <memcpy>
    address = ((curr_ic+1) * (RX_DATA));
 80061f8:	7dbb      	ldrb	r3, [r7, #22]
 80061fa:	3301      	adds	r3, #1
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	00db      	lsls	r3, r3, #3
 8006200:	75fb      	strb	r3, [r7, #23]
    ic[curr_ic].comm.icomm[0] = ((ic[curr_ic].com.rx_data[0] & 0xF0) >> 4);
 8006202:	7dbb      	ldrb	r3, [r7, #22]
 8006204:	f44f 724a 	mov.w	r2, #808	; 0x328
 8006208:	fb02 f303 	mul.w	r3, r2, r3
 800620c:	68ba      	ldr	r2, [r7, #8]
 800620e:	4413      	add	r3, r2
 8006210:	f893 215d 	ldrb.w	r2, [r3, #349]	; 0x15d
 8006214:	7dbb      	ldrb	r3, [r7, #22]
 8006216:	f44f 714a 	mov.w	r1, #808	; 0x328
 800621a:	fb01 f303 	mul.w	r3, r1, r3
 800621e:	68b9      	ldr	r1, [r7, #8]
 8006220:	440b      	add	r3, r1
 8006222:	0912      	lsrs	r2, r2, #4
 8006224:	b2d2      	uxtb	r2, r2
 8006226:	f883 2103 	strb.w	r2, [r3, #259]	; 0x103
    ic[curr_ic].comm.fcomm[0] = (ic[curr_ic].com.rx_data[0] & 0x0F);
 800622a:	7dbb      	ldrb	r3, [r7, #22]
 800622c:	f44f 724a 	mov.w	r2, #808	; 0x328
 8006230:	fb02 f303 	mul.w	r3, r2, r3
 8006234:	68ba      	ldr	r2, [r7, #8]
 8006236:	4413      	add	r3, r2
 8006238:	f893 215d 	ldrb.w	r2, [r3, #349]	; 0x15d
 800623c:	7dbb      	ldrb	r3, [r7, #22]
 800623e:	f44f 714a 	mov.w	r1, #808	; 0x328
 8006242:	fb01 f303 	mul.w	r3, r1, r3
 8006246:	68b9      	ldr	r1, [r7, #8]
 8006248:	440b      	add	r3, r1
 800624a:	f002 020f 	and.w	r2, r2, #15
 800624e:	b2d2      	uxtb	r2, r2
 8006250:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
    ic[curr_ic].comm.data[0] = (ic[curr_ic].com.rx_data[1]);
 8006254:	7dbb      	ldrb	r3, [r7, #22]
 8006256:	f44f 724a 	mov.w	r2, #808	; 0x328
 800625a:	fb02 f303 	mul.w	r3, r2, r3
 800625e:	68ba      	ldr	r2, [r7, #8]
 8006260:	441a      	add	r2, r3
 8006262:	7dbb      	ldrb	r3, [r7, #22]
 8006264:	f44f 714a 	mov.w	r1, #808	; 0x328
 8006268:	fb01 f303 	mul.w	r3, r1, r3
 800626c:	68b9      	ldr	r1, [r7, #8]
 800626e:	440b      	add	r3, r1
 8006270:	f892 215e 	ldrb.w	r2, [r2, #350]	; 0x15e
 8006274:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
    ic[curr_ic].comm.icomm[1] = ((ic[curr_ic].com.rx_data[2] & 0xF0) >> 4);
 8006278:	7dbb      	ldrb	r3, [r7, #22]
 800627a:	f44f 724a 	mov.w	r2, #808	; 0x328
 800627e:	fb02 f303 	mul.w	r3, r2, r3
 8006282:	68ba      	ldr	r2, [r7, #8]
 8006284:	4413      	add	r3, r2
 8006286:	f893 215f 	ldrb.w	r2, [r3, #351]	; 0x15f
 800628a:	7dbb      	ldrb	r3, [r7, #22]
 800628c:	f44f 714a 	mov.w	r1, #808	; 0x328
 8006290:	fb01 f303 	mul.w	r3, r1, r3
 8006294:	68b9      	ldr	r1, [r7, #8]
 8006296:	440b      	add	r3, r1
 8006298:	0912      	lsrs	r2, r2, #4
 800629a:	b2d2      	uxtb	r2, r2
 800629c:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
    ic[curr_ic].comm.data[1] = (ic[curr_ic].com.rx_data[3]);
 80062a0:	7dbb      	ldrb	r3, [r7, #22]
 80062a2:	f44f 724a 	mov.w	r2, #808	; 0x328
 80062a6:	fb02 f303 	mul.w	r3, r2, r3
 80062aa:	68ba      	ldr	r2, [r7, #8]
 80062ac:	441a      	add	r2, r3
 80062ae:	7dbb      	ldrb	r3, [r7, #22]
 80062b0:	f44f 714a 	mov.w	r1, #808	; 0x328
 80062b4:	fb01 f303 	mul.w	r3, r1, r3
 80062b8:	68b9      	ldr	r1, [r7, #8]
 80062ba:	440b      	add	r3, r1
 80062bc:	f892 2160 	ldrb.w	r2, [r2, #352]	; 0x160
 80062c0:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
    ic[curr_ic].comm.fcomm[1] = (ic[curr_ic].com.rx_data[2] & 0x0F);
 80062c4:	7dbb      	ldrb	r3, [r7, #22]
 80062c6:	f44f 724a 	mov.w	r2, #808	; 0x328
 80062ca:	fb02 f303 	mul.w	r3, r2, r3
 80062ce:	68ba      	ldr	r2, [r7, #8]
 80062d0:	4413      	add	r3, r2
 80062d2:	f893 215f 	ldrb.w	r2, [r3, #351]	; 0x15f
 80062d6:	7dbb      	ldrb	r3, [r7, #22]
 80062d8:	f44f 714a 	mov.w	r1, #808	; 0x328
 80062dc:	fb01 f303 	mul.w	r3, r1, r3
 80062e0:	68b9      	ldr	r1, [r7, #8]
 80062e2:	440b      	add	r3, r1
 80062e4:	f002 020f 	and.w	r2, r2, #15
 80062e8:	b2d2      	uxtb	r2, r2
 80062ea:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
    ic[curr_ic].comm.icomm[2] = ((ic[curr_ic].com.rx_data[4] & 0xF0) >> 4);
 80062ee:	7dbb      	ldrb	r3, [r7, #22]
 80062f0:	f44f 724a 	mov.w	r2, #808	; 0x328
 80062f4:	fb02 f303 	mul.w	r3, r2, r3
 80062f8:	68ba      	ldr	r2, [r7, #8]
 80062fa:	4413      	add	r3, r2
 80062fc:	f893 2161 	ldrb.w	r2, [r3, #353]	; 0x161
 8006300:	7dbb      	ldrb	r3, [r7, #22]
 8006302:	f44f 714a 	mov.w	r1, #808	; 0x328
 8006306:	fb01 f303 	mul.w	r3, r1, r3
 800630a:	68b9      	ldr	r1, [r7, #8]
 800630c:	440b      	add	r3, r1
 800630e:	0912      	lsrs	r2, r2, #4
 8006310:	b2d2      	uxtb	r2, r2
 8006312:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
    ic[curr_ic].comm.data[2] = (ic[curr_ic].com.rx_data[5]);
 8006316:	7dbb      	ldrb	r3, [r7, #22]
 8006318:	f44f 724a 	mov.w	r2, #808	; 0x328
 800631c:	fb02 f303 	mul.w	r3, r2, r3
 8006320:	68ba      	ldr	r2, [r7, #8]
 8006322:	441a      	add	r2, r3
 8006324:	7dbb      	ldrb	r3, [r7, #22]
 8006326:	f44f 714a 	mov.w	r1, #808	; 0x328
 800632a:	fb01 f303 	mul.w	r3, r1, r3
 800632e:	68b9      	ldr	r1, [r7, #8]
 8006330:	440b      	add	r3, r1
 8006332:	f892 2162 	ldrb.w	r2, [r2, #354]	; 0x162
 8006336:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
    ic[curr_ic].comm.fcomm[2] = (ic[curr_ic].com.rx_data[4] & 0x0F);
 800633a:	7dbb      	ldrb	r3, [r7, #22]
 800633c:	f44f 724a 	mov.w	r2, #808	; 0x328
 8006340:	fb02 f303 	mul.w	r3, r2, r3
 8006344:	68ba      	ldr	r2, [r7, #8]
 8006346:	4413      	add	r3, r2
 8006348:	f893 2161 	ldrb.w	r2, [r3, #353]	; 0x161
 800634c:	7dbb      	ldrb	r3, [r7, #22]
 800634e:	f44f 714a 	mov.w	r1, #808	; 0x328
 8006352:	fb01 f303 	mul.w	r3, r1, r3
 8006356:	68b9      	ldr	r1, [r7, #8]
 8006358:	440b      	add	r3, r1
 800635a:	f002 020f 	and.w	r2, r2, #15
 800635e:	b2d2      	uxtb	r2, r2
 8006360:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8006364:	7dbb      	ldrb	r3, [r7, #22]
 8006366:	3301      	adds	r3, #1
 8006368:	75bb      	strb	r3, [r7, #22]
 800636a:	7dba      	ldrb	r2, [r7, #22]
 800636c:	7bfb      	ldrb	r3, [r7, #15]
 800636e:	429a      	cmp	r2, r3
 8006370:	f4ff af32 	bcc.w	80061d8 <adBms6830ParseComm+0x18>
  }
}
 8006374:	bf00      	nop
 8006376:	bf00      	nop
 8006378:	3718      	adds	r7, #24
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}

0800637e <adBms6830ParseSID>:
 * @return None
 *
 *******************************************************************************
*/
void adBms6830ParseSID(uint8_t tIC, cell_asic *ic, uint8_t *data)
{
 800637e:	b580      	push	{r7, lr}
 8006380:	b086      	sub	sp, #24
 8006382:	af00      	add	r7, sp, #0
 8006384:	4603      	mov	r3, r0
 8006386:	60b9      	str	r1, [r7, #8]
 8006388:	607a      	str	r2, [r7, #4]
 800638a:	73fb      	strb	r3, [r7, #15]
  uint8_t address = 0;
 800638c:	2300      	movs	r3, #0
 800638e:	75fb      	strb	r3, [r7, #23]
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8006390:	2300      	movs	r3, #0
 8006392:	75bb      	strb	r3, [r7, #22]
 8006394:	e083      	b.n	800649e <adBms6830ParseSID+0x120>
  {
    memcpy(&ic[curr_ic].rsid.rx_data[0], &data[address], RX_DATA); /* dst , src , size */
 8006396:	7dbb      	ldrb	r3, [r7, #22]
 8006398:	f44f 724a 	mov.w	r2, #808	; 0x328
 800639c:	fb02 f303 	mul.w	r3, r2, r3
 80063a0:	68ba      	ldr	r2, [r7, #8]
 80063a2:	4413      	add	r3, r2
 80063a4:	f203 1087 	addw	r0, r3, #391	; 0x187
 80063a8:	7dfb      	ldrb	r3, [r7, #23]
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	4413      	add	r3, r2
 80063ae:	2208      	movs	r2, #8
 80063b0:	4619      	mov	r1, r3
 80063b2:	f015 fab6 	bl	801b922 <memcpy>
    address = ((curr_ic+1) * (RX_DATA));
 80063b6:	7dbb      	ldrb	r3, [r7, #22]
 80063b8:	3301      	adds	r3, #1
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	00db      	lsls	r3, r3, #3
 80063be:	75fb      	strb	r3, [r7, #23]
    ic[curr_ic].sid.sid[0] = ic[curr_ic].rsid.rx_data[0];
 80063c0:	7dbb      	ldrb	r3, [r7, #22]
 80063c2:	f44f 724a 	mov.w	r2, #808	; 0x328
 80063c6:	fb02 f303 	mul.w	r3, r2, r3
 80063ca:	68ba      	ldr	r2, [r7, #8]
 80063cc:	441a      	add	r2, r3
 80063ce:	7dbb      	ldrb	r3, [r7, #22]
 80063d0:	f44f 714a 	mov.w	r1, #808	; 0x328
 80063d4:	fb01 f303 	mul.w	r3, r1, r3
 80063d8:	68b9      	ldr	r1, [r7, #8]
 80063da:	440b      	add	r3, r1
 80063dc:	f892 2187 	ldrb.w	r2, [r2, #391]	; 0x187
 80063e0:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
    ic[curr_ic].sid.sid[1] = ic[curr_ic].rsid.rx_data[1];
 80063e4:	7dbb      	ldrb	r3, [r7, #22]
 80063e6:	f44f 724a 	mov.w	r2, #808	; 0x328
 80063ea:	fb02 f303 	mul.w	r3, r2, r3
 80063ee:	68ba      	ldr	r2, [r7, #8]
 80063f0:	441a      	add	r2, r3
 80063f2:	7dbb      	ldrb	r3, [r7, #22]
 80063f4:	f44f 714a 	mov.w	r1, #808	; 0x328
 80063f8:	fb01 f303 	mul.w	r3, r1, r3
 80063fc:	68b9      	ldr	r1, [r7, #8]
 80063fe:	440b      	add	r3, r1
 8006400:	f892 2188 	ldrb.w	r2, [r2, #392]	; 0x188
 8006404:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
    ic[curr_ic].sid.sid[2] = ic[curr_ic].rsid.rx_data[2];
 8006408:	7dbb      	ldrb	r3, [r7, #22]
 800640a:	f44f 724a 	mov.w	r2, #808	; 0x328
 800640e:	fb02 f303 	mul.w	r3, r2, r3
 8006412:	68ba      	ldr	r2, [r7, #8]
 8006414:	441a      	add	r2, r3
 8006416:	7dbb      	ldrb	r3, [r7, #22]
 8006418:	f44f 714a 	mov.w	r1, #808	; 0x328
 800641c:	fb01 f303 	mul.w	r3, r1, r3
 8006420:	68b9      	ldr	r1, [r7, #8]
 8006422:	440b      	add	r3, r1
 8006424:	f892 2189 	ldrb.w	r2, [r2, #393]	; 0x189
 8006428:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
    ic[curr_ic].sid.sid[3] = ic[curr_ic].rsid.rx_data[3];
 800642c:	7dbb      	ldrb	r3, [r7, #22]
 800642e:	f44f 724a 	mov.w	r2, #808	; 0x328
 8006432:	fb02 f303 	mul.w	r3, r2, r3
 8006436:	68ba      	ldr	r2, [r7, #8]
 8006438:	441a      	add	r2, r3
 800643a:	7dbb      	ldrb	r3, [r7, #22]
 800643c:	f44f 714a 	mov.w	r1, #808	; 0x328
 8006440:	fb01 f303 	mul.w	r3, r1, r3
 8006444:	68b9      	ldr	r1, [r7, #8]
 8006446:	440b      	add	r3, r1
 8006448:	f892 218a 	ldrb.w	r2, [r2, #394]	; 0x18a
 800644c:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
    ic[curr_ic].sid.sid[4] = ic[curr_ic].rsid.rx_data[4];
 8006450:	7dbb      	ldrb	r3, [r7, #22]
 8006452:	f44f 724a 	mov.w	r2, #808	; 0x328
 8006456:	fb02 f303 	mul.w	r3, r2, r3
 800645a:	68ba      	ldr	r2, [r7, #8]
 800645c:	441a      	add	r2, r3
 800645e:	7dbb      	ldrb	r3, [r7, #22]
 8006460:	f44f 714a 	mov.w	r1, #808	; 0x328
 8006464:	fb01 f303 	mul.w	r3, r1, r3
 8006468:	68b9      	ldr	r1, [r7, #8]
 800646a:	440b      	add	r3, r1
 800646c:	f892 218b 	ldrb.w	r2, [r2, #395]	; 0x18b
 8006470:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
    ic[curr_ic].sid.sid[5] = ic[curr_ic].rsid.rx_data[5];
 8006474:	7dbb      	ldrb	r3, [r7, #22]
 8006476:	f44f 724a 	mov.w	r2, #808	; 0x328
 800647a:	fb02 f303 	mul.w	r3, r2, r3
 800647e:	68ba      	ldr	r2, [r7, #8]
 8006480:	441a      	add	r2, r3
 8006482:	7dbb      	ldrb	r3, [r7, #22]
 8006484:	f44f 714a 	mov.w	r1, #808	; 0x328
 8006488:	fb01 f303 	mul.w	r3, r1, r3
 800648c:	68b9      	ldr	r1, [r7, #8]
 800648e:	440b      	add	r3, r1
 8006490:	f892 218c 	ldrb.w	r2, [r2, #396]	; 0x18c
 8006494:	f883 211e 	strb.w	r2, [r3, #286]	; 0x11e
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8006498:	7dbb      	ldrb	r3, [r7, #22]
 800649a:	3301      	adds	r3, #1
 800649c:	75bb      	strb	r3, [r7, #22]
 800649e:	7dba      	ldrb	r2, [r7, #22]
 80064a0:	7bfb      	ldrb	r3, [r7, #15]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	f4ff af77 	bcc.w	8006396 <adBms6830ParseSID+0x18>
  }
}
 80064a8:	bf00      	nop
 80064aa:	bf00      	nop
 80064ac:	3718      	adds	r7, #24
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}

080064b2 <adBms6830ParsePwma>:
 * @return None
 *
 *******************************************************************************
*/
void adBms6830ParsePwma(uint8_t tIC, cell_asic *ic, uint8_t *data)
{
 80064b2:	b580      	push	{r7, lr}
 80064b4:	b086      	sub	sp, #24
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	4603      	mov	r3, r0
 80064ba:	60b9      	str	r1, [r7, #8]
 80064bc:	607a      	str	r2, [r7, #4]
 80064be:	73fb      	strb	r3, [r7, #15]
  uint8_t address = 0;
 80064c0:	2300      	movs	r3, #0
 80064c2:	75fb      	strb	r3, [r7, #23]
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 80064c4:	2300      	movs	r3, #0
 80064c6:	75bb      	strb	r3, [r7, #22]
 80064c8:	e10d      	b.n	80066e6 <adBms6830ParsePwma+0x234>
  {
    memcpy(&ic[curr_ic].pwma.rx_data[0], &data[address], RX_DATA); /* dst , src , size */
 80064ca:	7dbb      	ldrb	r3, [r7, #22]
 80064cc:	f44f 724a 	mov.w	r2, #808	; 0x328
 80064d0:	fb02 f303 	mul.w	r3, r2, r3
 80064d4:	68ba      	ldr	r2, [r7, #8]
 80064d6:	4413      	add	r3, r2
 80064d8:	f203 106b 	addw	r0, r3, #363	; 0x16b
 80064dc:	7dfb      	ldrb	r3, [r7, #23]
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	4413      	add	r3, r2
 80064e2:	2208      	movs	r2, #8
 80064e4:	4619      	mov	r1, r3
 80064e6:	f015 fa1c 	bl	801b922 <memcpy>
    address = ((curr_ic+1) * (RX_DATA));
 80064ea:	7dbb      	ldrb	r3, [r7, #22]
 80064ec:	3301      	adds	r3, #1
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	00db      	lsls	r3, r3, #3
 80064f2:	75fb      	strb	r3, [r7, #23]
    ic[curr_ic].PwmA.pwma[0] = (ic[curr_ic].pwma.rx_data[0] & 0x0F);
 80064f4:	7dbb      	ldrb	r3, [r7, #22]
 80064f6:	f44f 724a 	mov.w	r2, #808	; 0x328
 80064fa:	fb02 f303 	mul.w	r3, r2, r3
 80064fe:	68ba      	ldr	r2, [r7, #8]
 8006500:	4413      	add	r3, r2
 8006502:	f893 216b 	ldrb.w	r2, [r3, #363]	; 0x16b
 8006506:	7dbb      	ldrb	r3, [r7, #22]
 8006508:	f44f 714a 	mov.w	r1, #808	; 0x328
 800650c:	fb01 f303 	mul.w	r3, r1, r3
 8006510:	68b9      	ldr	r1, [r7, #8]
 8006512:	440b      	add	r3, r1
 8006514:	f002 020f 	and.w	r2, r2, #15
 8006518:	b2d2      	uxtb	r2, r2
 800651a:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
    ic[curr_ic].PwmA.pwma[1] = ((ic[curr_ic].pwma.rx_data[0] & 0xF0) >> 4);
 800651e:	7dbb      	ldrb	r3, [r7, #22]
 8006520:	f44f 724a 	mov.w	r2, #808	; 0x328
 8006524:	fb02 f303 	mul.w	r3, r2, r3
 8006528:	68ba      	ldr	r2, [r7, #8]
 800652a:	4413      	add	r3, r2
 800652c:	f893 216b 	ldrb.w	r2, [r3, #363]	; 0x16b
 8006530:	7dbb      	ldrb	r3, [r7, #22]
 8006532:	f44f 714a 	mov.w	r1, #808	; 0x328
 8006536:	fb01 f303 	mul.w	r3, r1, r3
 800653a:	68b9      	ldr	r1, [r7, #8]
 800653c:	440b      	add	r3, r1
 800653e:	0912      	lsrs	r2, r2, #4
 8006540:	b2d2      	uxtb	r2, r2
 8006542:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
    ic[curr_ic].PwmA.pwma[2] = (ic[curr_ic].pwma.rx_data[1] & 0x0F);
 8006546:	7dbb      	ldrb	r3, [r7, #22]
 8006548:	f44f 724a 	mov.w	r2, #808	; 0x328
 800654c:	fb02 f303 	mul.w	r3, r2, r3
 8006550:	68ba      	ldr	r2, [r7, #8]
 8006552:	4413      	add	r3, r2
 8006554:	f893 216c 	ldrb.w	r2, [r3, #364]	; 0x16c
 8006558:	7dbb      	ldrb	r3, [r7, #22]
 800655a:	f44f 714a 	mov.w	r1, #808	; 0x328
 800655e:	fb01 f303 	mul.w	r3, r1, r3
 8006562:	68b9      	ldr	r1, [r7, #8]
 8006564:	440b      	add	r3, r1
 8006566:	f002 020f 	and.w	r2, r2, #15
 800656a:	b2d2      	uxtb	r2, r2
 800656c:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
    ic[curr_ic].PwmA.pwma[3] = ((ic[curr_ic].pwma.rx_data[1] & 0xF0) >> 4);
 8006570:	7dbb      	ldrb	r3, [r7, #22]
 8006572:	f44f 724a 	mov.w	r2, #808	; 0x328
 8006576:	fb02 f303 	mul.w	r3, r2, r3
 800657a:	68ba      	ldr	r2, [r7, #8]
 800657c:	4413      	add	r3, r2
 800657e:	f893 216c 	ldrb.w	r2, [r3, #364]	; 0x16c
 8006582:	7dbb      	ldrb	r3, [r7, #22]
 8006584:	f44f 714a 	mov.w	r1, #808	; 0x328
 8006588:	fb01 f303 	mul.w	r3, r1, r3
 800658c:	68b9      	ldr	r1, [r7, #8]
 800658e:	440b      	add	r3, r1
 8006590:	0912      	lsrs	r2, r2, #4
 8006592:	b2d2      	uxtb	r2, r2
 8006594:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
    ic[curr_ic].PwmA.pwma[4] = (ic[curr_ic].pwma.rx_data[2] & 0x0F);
 8006598:	7dbb      	ldrb	r3, [r7, #22]
 800659a:	f44f 724a 	mov.w	r2, #808	; 0x328
 800659e:	fb02 f303 	mul.w	r3, r2, r3
 80065a2:	68ba      	ldr	r2, [r7, #8]
 80065a4:	4413      	add	r3, r2
 80065a6:	f893 216d 	ldrb.w	r2, [r3, #365]	; 0x16d
 80065aa:	7dbb      	ldrb	r3, [r7, #22]
 80065ac:	f44f 714a 	mov.w	r1, #808	; 0x328
 80065b0:	fb01 f303 	mul.w	r3, r1, r3
 80065b4:	68b9      	ldr	r1, [r7, #8]
 80065b6:	440b      	add	r3, r1
 80065b8:	f002 020f 	and.w	r2, r2, #15
 80065bc:	b2d2      	uxtb	r2, r2
 80065be:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
    ic[curr_ic].PwmA.pwma[5] = ((ic[curr_ic].pwma.rx_data[2] & 0xF0) >> 4);
 80065c2:	7dbb      	ldrb	r3, [r7, #22]
 80065c4:	f44f 724a 	mov.w	r2, #808	; 0x328
 80065c8:	fb02 f303 	mul.w	r3, r2, r3
 80065cc:	68ba      	ldr	r2, [r7, #8]
 80065ce:	4413      	add	r3, r2
 80065d0:	f893 216d 	ldrb.w	r2, [r3, #365]	; 0x16d
 80065d4:	7dbb      	ldrb	r3, [r7, #22]
 80065d6:	f44f 714a 	mov.w	r1, #808	; 0x328
 80065da:	fb01 f303 	mul.w	r3, r1, r3
 80065de:	68b9      	ldr	r1, [r7, #8]
 80065e0:	440b      	add	r3, r1
 80065e2:	0912      	lsrs	r2, r2, #4
 80065e4:	b2d2      	uxtb	r2, r2
 80065e6:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    ic[curr_ic].PwmA.pwma[6] = (ic[curr_ic].pwma.rx_data[3] & 0x0F);
 80065ea:	7dbb      	ldrb	r3, [r7, #22]
 80065ec:	f44f 724a 	mov.w	r2, #808	; 0x328
 80065f0:	fb02 f303 	mul.w	r3, r2, r3
 80065f4:	68ba      	ldr	r2, [r7, #8]
 80065f6:	4413      	add	r3, r2
 80065f8:	f893 216e 	ldrb.w	r2, [r3, #366]	; 0x16e
 80065fc:	7dbb      	ldrb	r3, [r7, #22]
 80065fe:	f44f 714a 	mov.w	r1, #808	; 0x328
 8006602:	fb01 f303 	mul.w	r3, r1, r3
 8006606:	68b9      	ldr	r1, [r7, #8]
 8006608:	440b      	add	r3, r1
 800660a:	f002 020f 	and.w	r2, r2, #15
 800660e:	b2d2      	uxtb	r2, r2
 8006610:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
    ic[curr_ic].PwmA.pwma[7] = ((ic[curr_ic].pwma.rx_data[3] & 0xF0) >> 4);
 8006614:	7dbb      	ldrb	r3, [r7, #22]
 8006616:	f44f 724a 	mov.w	r2, #808	; 0x328
 800661a:	fb02 f303 	mul.w	r3, r2, r3
 800661e:	68ba      	ldr	r2, [r7, #8]
 8006620:	4413      	add	r3, r2
 8006622:	f893 216e 	ldrb.w	r2, [r3, #366]	; 0x16e
 8006626:	7dbb      	ldrb	r3, [r7, #22]
 8006628:	f44f 714a 	mov.w	r1, #808	; 0x328
 800662c:	fb01 f303 	mul.w	r3, r1, r3
 8006630:	68b9      	ldr	r1, [r7, #8]
 8006632:	440b      	add	r3, r1
 8006634:	0912      	lsrs	r2, r2, #4
 8006636:	b2d2      	uxtb	r2, r2
 8006638:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
    ic[curr_ic].PwmA.pwma[8] = (ic[curr_ic].pwma.rx_data[4] & 0x0F);
 800663c:	7dbb      	ldrb	r3, [r7, #22]
 800663e:	f44f 724a 	mov.w	r2, #808	; 0x328
 8006642:	fb02 f303 	mul.w	r3, r2, r3
 8006646:	68ba      	ldr	r2, [r7, #8]
 8006648:	4413      	add	r3, r2
 800664a:	f893 216f 	ldrb.w	r2, [r3, #367]	; 0x16f
 800664e:	7dbb      	ldrb	r3, [r7, #22]
 8006650:	f44f 714a 	mov.w	r1, #808	; 0x328
 8006654:	fb01 f303 	mul.w	r3, r1, r3
 8006658:	68b9      	ldr	r1, [r7, #8]
 800665a:	440b      	add	r3, r1
 800665c:	f002 020f 	and.w	r2, r2, #15
 8006660:	b2d2      	uxtb	r2, r2
 8006662:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
    ic[curr_ic].PwmA.pwma[9] = ((ic[curr_ic].pwma.rx_data[4] & 0xF0) >> 4);
 8006666:	7dbb      	ldrb	r3, [r7, #22]
 8006668:	f44f 724a 	mov.w	r2, #808	; 0x328
 800666c:	fb02 f303 	mul.w	r3, r2, r3
 8006670:	68ba      	ldr	r2, [r7, #8]
 8006672:	4413      	add	r3, r2
 8006674:	f893 216f 	ldrb.w	r2, [r3, #367]	; 0x16f
 8006678:	7dbb      	ldrb	r3, [r7, #22]
 800667a:	f44f 714a 	mov.w	r1, #808	; 0x328
 800667e:	fb01 f303 	mul.w	r3, r1, r3
 8006682:	68b9      	ldr	r1, [r7, #8]
 8006684:	440b      	add	r3, r1
 8006686:	0912      	lsrs	r2, r2, #4
 8006688:	b2d2      	uxtb	r2, r2
 800668a:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
    ic[curr_ic].PwmA.pwma[10] = (ic[curr_ic].pwma.rx_data[5] & 0x0F);
 800668e:	7dbb      	ldrb	r3, [r7, #22]
 8006690:	f44f 724a 	mov.w	r2, #808	; 0x328
 8006694:	fb02 f303 	mul.w	r3, r2, r3
 8006698:	68ba      	ldr	r2, [r7, #8]
 800669a:	4413      	add	r3, r2
 800669c:	f893 2170 	ldrb.w	r2, [r3, #368]	; 0x170
 80066a0:	7dbb      	ldrb	r3, [r7, #22]
 80066a2:	f44f 714a 	mov.w	r1, #808	; 0x328
 80066a6:	fb01 f303 	mul.w	r3, r1, r3
 80066aa:	68b9      	ldr	r1, [r7, #8]
 80066ac:	440b      	add	r3, r1
 80066ae:	f002 020f 	and.w	r2, r2, #15
 80066b2:	b2d2      	uxtb	r2, r2
 80066b4:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
    ic[curr_ic].PwmA.pwma[11] = ((ic[curr_ic].pwma.rx_data[5] & 0xF0) >> 4);
 80066b8:	7dbb      	ldrb	r3, [r7, #22]
 80066ba:	f44f 724a 	mov.w	r2, #808	; 0x328
 80066be:	fb02 f303 	mul.w	r3, r2, r3
 80066c2:	68ba      	ldr	r2, [r7, #8]
 80066c4:	4413      	add	r3, r2
 80066c6:	f893 2170 	ldrb.w	r2, [r3, #368]	; 0x170
 80066ca:	7dbb      	ldrb	r3, [r7, #22]
 80066cc:	f44f 714a 	mov.w	r1, #808	; 0x328
 80066d0:	fb01 f303 	mul.w	r3, r1, r3
 80066d4:	68b9      	ldr	r1, [r7, #8]
 80066d6:	440b      	add	r3, r1
 80066d8:	0912      	lsrs	r2, r2, #4
 80066da:	b2d2      	uxtb	r2, r2
 80066dc:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 80066e0:	7dbb      	ldrb	r3, [r7, #22]
 80066e2:	3301      	adds	r3, #1
 80066e4:	75bb      	strb	r3, [r7, #22]
 80066e6:	7dba      	ldrb	r2, [r7, #22]
 80066e8:	7bfb      	ldrb	r3, [r7, #15]
 80066ea:	429a      	cmp	r2, r3
 80066ec:	f4ff aeed 	bcc.w	80064ca <adBms6830ParsePwma+0x18>
  }
}
 80066f0:	bf00      	nop
 80066f2:	bf00      	nop
 80066f4:	3718      	adds	r7, #24
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}

080066fa <adBms6830ParsePwmb>:
 * @return None
 *
 *******************************************************************************
*/
void adBms6830ParsePwmb(uint8_t tIC, cell_asic *ic, uint8_t *data)
{
 80066fa:	b580      	push	{r7, lr}
 80066fc:	b086      	sub	sp, #24
 80066fe:	af00      	add	r7, sp, #0
 8006700:	4603      	mov	r3, r0
 8006702:	60b9      	str	r1, [r7, #8]
 8006704:	607a      	str	r2, [r7, #4]
 8006706:	73fb      	strb	r3, [r7, #15]
  uint8_t address = 0;
 8006708:	2300      	movs	r3, #0
 800670a:	75fb      	strb	r3, [r7, #23]
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 800670c:	2300      	movs	r3, #0
 800670e:	75bb      	strb	r3, [r7, #22]
 8006710:	e069      	b.n	80067e6 <adBms6830ParsePwmb+0xec>
  {
    memcpy(&ic[curr_ic].pwmb.rx_data[0], &data[address], RX_DATA); /* dst , src , size */
 8006712:	7dbb      	ldrb	r3, [r7, #22]
 8006714:	f44f 724a 	mov.w	r2, #808	; 0x328
 8006718:	fb02 f303 	mul.w	r3, r2, r3
 800671c:	68ba      	ldr	r2, [r7, #8]
 800671e:	4413      	add	r3, r2
 8006720:	f203 1079 	addw	r0, r3, #377	; 0x179
 8006724:	7dfb      	ldrb	r3, [r7, #23]
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	4413      	add	r3, r2
 800672a:	2208      	movs	r2, #8
 800672c:	4619      	mov	r1, r3
 800672e:	f015 f8f8 	bl	801b922 <memcpy>
    address = ((curr_ic+1) * (RX_DATA));
 8006732:	7dbb      	ldrb	r3, [r7, #22]
 8006734:	3301      	adds	r3, #1
 8006736:	b2db      	uxtb	r3, r3
 8006738:	00db      	lsls	r3, r3, #3
 800673a:	75fb      	strb	r3, [r7, #23]
    ic[curr_ic].PwmB.pwmb[0] = (ic[curr_ic].pwmb.rx_data[0] & 0x0F);
 800673c:	7dbb      	ldrb	r3, [r7, #22]
 800673e:	f44f 724a 	mov.w	r2, #808	; 0x328
 8006742:	fb02 f303 	mul.w	r3, r2, r3
 8006746:	68ba      	ldr	r2, [r7, #8]
 8006748:	4413      	add	r3, r2
 800674a:	f893 2179 	ldrb.w	r2, [r3, #377]	; 0x179
 800674e:	7dbb      	ldrb	r3, [r7, #22]
 8006750:	f44f 714a 	mov.w	r1, #808	; 0x328
 8006754:	fb01 f303 	mul.w	r3, r1, r3
 8006758:	68b9      	ldr	r1, [r7, #8]
 800675a:	440b      	add	r3, r1
 800675c:	f002 020f 	and.w	r2, r2, #15
 8006760:	b2d2      	uxtb	r2, r2
 8006762:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
    ic[curr_ic].PwmB.pwmb[1] = ((ic[curr_ic].pwmb.rx_data[0] & 0xF0) >> 4);
 8006766:	7dbb      	ldrb	r3, [r7, #22]
 8006768:	f44f 724a 	mov.w	r2, #808	; 0x328
 800676c:	fb02 f303 	mul.w	r3, r2, r3
 8006770:	68ba      	ldr	r2, [r7, #8]
 8006772:	4413      	add	r3, r2
 8006774:	f893 2179 	ldrb.w	r2, [r3, #377]	; 0x179
 8006778:	7dbb      	ldrb	r3, [r7, #22]
 800677a:	f44f 714a 	mov.w	r1, #808	; 0x328
 800677e:	fb01 f303 	mul.w	r3, r1, r3
 8006782:	68b9      	ldr	r1, [r7, #8]
 8006784:	440b      	add	r3, r1
 8006786:	0912      	lsrs	r2, r2, #4
 8006788:	b2d2      	uxtb	r2, r2
 800678a:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116
    ic[curr_ic].PwmB.pwmb[2] = (ic[curr_ic].pwmb.rx_data[1] & 0x0F);
 800678e:	7dbb      	ldrb	r3, [r7, #22]
 8006790:	f44f 724a 	mov.w	r2, #808	; 0x328
 8006794:	fb02 f303 	mul.w	r3, r2, r3
 8006798:	68ba      	ldr	r2, [r7, #8]
 800679a:	4413      	add	r3, r2
 800679c:	f893 217a 	ldrb.w	r2, [r3, #378]	; 0x17a
 80067a0:	7dbb      	ldrb	r3, [r7, #22]
 80067a2:	f44f 714a 	mov.w	r1, #808	; 0x328
 80067a6:	fb01 f303 	mul.w	r3, r1, r3
 80067aa:	68b9      	ldr	r1, [r7, #8]
 80067ac:	440b      	add	r3, r1
 80067ae:	f002 020f 	and.w	r2, r2, #15
 80067b2:	b2d2      	uxtb	r2, r2
 80067b4:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
    ic[curr_ic].PwmB.pwmb[3] = ((ic[curr_ic].pwmb.rx_data[1] & 0xF0) >> 4);
 80067b8:	7dbb      	ldrb	r3, [r7, #22]
 80067ba:	f44f 724a 	mov.w	r2, #808	; 0x328
 80067be:	fb02 f303 	mul.w	r3, r2, r3
 80067c2:	68ba      	ldr	r2, [r7, #8]
 80067c4:	4413      	add	r3, r2
 80067c6:	f893 217a 	ldrb.w	r2, [r3, #378]	; 0x17a
 80067ca:	7dbb      	ldrb	r3, [r7, #22]
 80067cc:	f44f 714a 	mov.w	r1, #808	; 0x328
 80067d0:	fb01 f303 	mul.w	r3, r1, r3
 80067d4:	68b9      	ldr	r1, [r7, #8]
 80067d6:	440b      	add	r3, r1
 80067d8:	0912      	lsrs	r2, r2, #4
 80067da:	b2d2      	uxtb	r2, r2
 80067dc:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 80067e0:	7dbb      	ldrb	r3, [r7, #22]
 80067e2:	3301      	adds	r3, #1
 80067e4:	75bb      	strb	r3, [r7, #22]
 80067e6:	7dba      	ldrb	r2, [r7, #22]
 80067e8:	7bfb      	ldrb	r3, [r7, #15]
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d391      	bcc.n	8006712 <adBms6830ParsePwmb+0x18>
  }
}
 80067ee:	bf00      	nop
 80067f0:	bf00      	nop
 80067f2:	3718      	adds	r7, #24
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}

080067f8 <adBms6830ParsePwm>:
 * @return None
 *
 *******************************************************************************
*/
void adBms6830ParsePwm(uint8_t tIC, cell_asic *ic, GRP grp, uint8_t *data)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	60b9      	str	r1, [r7, #8]
 8006800:	607b      	str	r3, [r7, #4]
 8006802:	4603      	mov	r3, r0
 8006804:	73fb      	strb	r3, [r7, #15]
 8006806:	4613      	mov	r3, r2
 8006808:	73bb      	strb	r3, [r7, #14]
  switch (grp)
 800680a:	7bbb      	ldrb	r3, [r7, #14]
 800680c:	2b01      	cmp	r3, #1
 800680e:	d002      	beq.n	8006816 <adBms6830ParsePwm+0x1e>
 8006810:	2b02      	cmp	r3, #2
 8006812:	d007      	beq.n	8006824 <adBms6830ParsePwm+0x2c>
    case B:
      adBms6830ParsePwmb(tIC, &ic[0], &data[0]);
      break;

    default:
      break;
 8006814:	e00d      	b.n	8006832 <adBms6830ParsePwm+0x3a>
      adBms6830ParsePwma(tIC, &ic[0], &data[0]);
 8006816:	7bfb      	ldrb	r3, [r7, #15]
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	68b9      	ldr	r1, [r7, #8]
 800681c:	4618      	mov	r0, r3
 800681e:	f7ff fe48 	bl	80064b2 <adBms6830ParsePwma>
      break;
 8006822:	e006      	b.n	8006832 <adBms6830ParsePwm+0x3a>
      adBms6830ParsePwmb(tIC, &ic[0], &data[0]);
 8006824:	7bfb      	ldrb	r3, [r7, #15]
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	68b9      	ldr	r1, [r7, #8]
 800682a:	4618      	mov	r0, r3
 800682c:	f7ff ff65 	bl	80066fa <adBms6830ParsePwmb>
      break;
 8006830:	bf00      	nop
  }
}
 8006832:	bf00      	nop
 8006834:	3710      	adds	r7, #16
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}

0800683a <adBms6830CreateConfiga>:
 * @return None
 *
 *******************************************************************************
*/
void adBms6830CreateConfiga(uint8_t tIC, cell_asic *ic)
{
 800683a:	b480      	push	{r7}
 800683c:	b085      	sub	sp, #20
 800683e:	af00      	add	r7, sp, #0
 8006840:	4603      	mov	r3, r0
 8006842:	6039      	str	r1, [r7, #0]
 8006844:	71fb      	strb	r3, [r7, #7]
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8006846:	2300      	movs	r3, #0
 8006848:	73fb      	strb	r3, [r7, #15]
 800684a:	e0f3      	b.n	8006a34 <adBms6830CreateConfiga+0x1fa>
  {
    ic[curr_ic].configa.tx_data[0] = (((ic[curr_ic].tx_cfga.refon & 0x01) << 7) | (ic[curr_ic].tx_cfga.cth & 0x07));
 800684c:	7bfb      	ldrb	r3, [r7, #15]
 800684e:	f44f 724a 	mov.w	r2, #808	; 0x328
 8006852:	fb02 f303 	mul.w	r3, r2, r3
 8006856:	683a      	ldr	r2, [r7, #0]
 8006858:	4413      	add	r3, r2
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006860:	b2db      	uxtb	r3, r3
 8006862:	01db      	lsls	r3, r3, #7
 8006864:	b25a      	sxtb	r2, r3
 8006866:	7bfb      	ldrb	r3, [r7, #15]
 8006868:	f44f 714a 	mov.w	r1, #808	; 0x328
 800686c:	fb01 f303 	mul.w	r3, r1, r3
 8006870:	6839      	ldr	r1, [r7, #0]
 8006872:	440b      	add	r3, r1
 8006874:	781b      	ldrb	r3, [r3, #0]
 8006876:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800687a:	b2db      	uxtb	r3, r3
 800687c:	b25b      	sxtb	r3, r3
 800687e:	f003 0307 	and.w	r3, r3, #7
 8006882:	b25b      	sxtb	r3, r3
 8006884:	4313      	orrs	r3, r2
 8006886:	b259      	sxtb	r1, r3
 8006888:	7bfb      	ldrb	r3, [r7, #15]
 800688a:	f44f 724a 	mov.w	r2, #808	; 0x328
 800688e:	fb02 f303 	mul.w	r3, r2, r3
 8006892:	683a      	ldr	r2, [r7, #0]
 8006894:	4413      	add	r3, r2
 8006896:	b2ca      	uxtb	r2, r1
 8006898:	f883 211f 	strb.w	r2, [r3, #287]	; 0x11f
    ic[curr_ic].configa.tx_data[1] = (ic[curr_ic].tx_cfga.flag_d & 0xFF);
 800689c:	7bfb      	ldrb	r3, [r7, #15]
 800689e:	f44f 724a 	mov.w	r2, #808	; 0x328
 80068a2:	fb02 f303 	mul.w	r3, r2, r3
 80068a6:	683a      	ldr	r2, [r7, #0]
 80068a8:	441a      	add	r2, r3
 80068aa:	7bfb      	ldrb	r3, [r7, #15]
 80068ac:	f44f 714a 	mov.w	r1, #808	; 0x328
 80068b0:	fb01 f303 	mul.w	r3, r1, r3
 80068b4:	6839      	ldr	r1, [r7, #0]
 80068b6:	440b      	add	r3, r1
 80068b8:	7852      	ldrb	r2, [r2, #1]
 80068ba:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
    ic[curr_ic].configa.tx_data[2] = (((ic[curr_ic].tx_cfga.soakon & 0x01) << 7) | ((ic[curr_ic].tx_cfga.owrng & 0x01) << 6) | ((ic[curr_ic].tx_cfga.owa & 0x07) << 3));
 80068be:	7bfb      	ldrb	r3, [r7, #15]
 80068c0:	f44f 724a 	mov.w	r2, #808	; 0x328
 80068c4:	fb02 f303 	mul.w	r3, r2, r3
 80068c8:	683a      	ldr	r2, [r7, #0]
 80068ca:	4413      	add	r3, r2
 80068cc:	789b      	ldrb	r3, [r3, #2]
 80068ce:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	01db      	lsls	r3, r3, #7
 80068d6:	b25a      	sxtb	r2, r3
 80068d8:	7bfb      	ldrb	r3, [r7, #15]
 80068da:	f44f 714a 	mov.w	r1, #808	; 0x328
 80068de:	fb01 f303 	mul.w	r3, r1, r3
 80068e2:	6839      	ldr	r1, [r7, #0]
 80068e4:	440b      	add	r3, r1
 80068e6:	789b      	ldrb	r3, [r3, #2]
 80068e8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	019b      	lsls	r3, r3, #6
 80068f0:	b25b      	sxtb	r3, r3
 80068f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068f6:	b25b      	sxtb	r3, r3
 80068f8:	4313      	orrs	r3, r2
 80068fa:	b25a      	sxtb	r2, r3
 80068fc:	7bfb      	ldrb	r3, [r7, #15]
 80068fe:	f44f 714a 	mov.w	r1, #808	; 0x328
 8006902:	fb01 f303 	mul.w	r3, r1, r3
 8006906:	6839      	ldr	r1, [r7, #0]
 8006908:	440b      	add	r3, r1
 800690a:	789b      	ldrb	r3, [r3, #2]
 800690c:	f3c3 0382 	ubfx	r3, r3, #2, #3
 8006910:	b2db      	uxtb	r3, r3
 8006912:	00db      	lsls	r3, r3, #3
 8006914:	b25b      	sxtb	r3, r3
 8006916:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800691a:	b25b      	sxtb	r3, r3
 800691c:	4313      	orrs	r3, r2
 800691e:	b259      	sxtb	r1, r3
 8006920:	7bfb      	ldrb	r3, [r7, #15]
 8006922:	f44f 724a 	mov.w	r2, #808	; 0x328
 8006926:	fb02 f303 	mul.w	r3, r2, r3
 800692a:	683a      	ldr	r2, [r7, #0]
 800692c:	4413      	add	r3, r2
 800692e:	b2ca      	uxtb	r2, r1
 8006930:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121
    ic[curr_ic].configa.tx_data[3] = ((ic[curr_ic].tx_cfga.gpo & 0x00FF));
 8006934:	7bfb      	ldrb	r3, [r7, #15]
 8006936:	f44f 724a 	mov.w	r2, #808	; 0x328
 800693a:	fb02 f303 	mul.w	r3, r2, r3
 800693e:	683a      	ldr	r2, [r7, #0]
 8006940:	4413      	add	r3, r2
 8006942:	885b      	ldrh	r3, [r3, #2]
 8006944:	f3c3 1349 	ubfx	r3, r3, #5, #10
 8006948:	b299      	uxth	r1, r3
 800694a:	7bfb      	ldrb	r3, [r7, #15]
 800694c:	f44f 724a 	mov.w	r2, #808	; 0x328
 8006950:	fb02 f303 	mul.w	r3, r2, r3
 8006954:	683a      	ldr	r2, [r7, #0]
 8006956:	4413      	add	r3, r2
 8006958:	b2ca      	uxtb	r2, r1
 800695a:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
    ic[curr_ic].configa.tx_data[4] = ((ic[curr_ic].tx_cfga.gpo & 0x0300)>>8);
 800695e:	7bfb      	ldrb	r3, [r7, #15]
 8006960:	f44f 724a 	mov.w	r2, #808	; 0x328
 8006964:	fb02 f303 	mul.w	r3, r2, r3
 8006968:	683a      	ldr	r2, [r7, #0]
 800696a:	4413      	add	r3, r2
 800696c:	885b      	ldrh	r3, [r3, #2]
 800696e:	f3c3 1349 	ubfx	r3, r3, #5, #10
 8006972:	b29b      	uxth	r3, r3
 8006974:	121b      	asrs	r3, r3, #8
 8006976:	b2da      	uxtb	r2, r3
 8006978:	7bfb      	ldrb	r3, [r7, #15]
 800697a:	f44f 714a 	mov.w	r1, #808	; 0x328
 800697e:	fb01 f303 	mul.w	r3, r1, r3
 8006982:	6839      	ldr	r1, [r7, #0]
 8006984:	440b      	add	r3, r1
 8006986:	f002 0203 	and.w	r2, r2, #3
 800698a:	b2d2      	uxtb	r2, r2
 800698c:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
    ic[curr_ic].configa.tx_data[5] = (((ic[curr_ic].tx_cfga.snap & 0x01) << 5) | ((ic[curr_ic].tx_cfga.mute_st & 0x01) << 4) | ((ic[curr_ic].tx_cfga.comm_bk & 0x01) << 3) | (ic[curr_ic].tx_cfga.fc & 0x07));
 8006990:	7bfb      	ldrb	r3, [r7, #15]
 8006992:	f44f 724a 	mov.w	r2, #808	; 0x328
 8006996:	fb02 f303 	mul.w	r3, r2, r3
 800699a:	683a      	ldr	r2, [r7, #0]
 800699c:	4413      	add	r3, r2
 800699e:	78db      	ldrb	r3, [r3, #3]
 80069a0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	015b      	lsls	r3, r3, #5
 80069a8:	b25b      	sxtb	r3, r3
 80069aa:	f003 0320 	and.w	r3, r3, #32
 80069ae:	b25a      	sxtb	r2, r3
 80069b0:	7bfb      	ldrb	r3, [r7, #15]
 80069b2:	f44f 714a 	mov.w	r1, #808	; 0x328
 80069b6:	fb01 f303 	mul.w	r3, r1, r3
 80069ba:	6839      	ldr	r1, [r7, #0]
 80069bc:	440b      	add	r3, r1
 80069be:	791b      	ldrb	r3, [r3, #4]
 80069c0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	011b      	lsls	r3, r3, #4
 80069c8:	b25b      	sxtb	r3, r3
 80069ca:	f003 0310 	and.w	r3, r3, #16
 80069ce:	b25b      	sxtb	r3, r3
 80069d0:	4313      	orrs	r3, r2
 80069d2:	b25a      	sxtb	r2, r3
 80069d4:	7bfb      	ldrb	r3, [r7, #15]
 80069d6:	f44f 714a 	mov.w	r1, #808	; 0x328
 80069da:	fb01 f303 	mul.w	r3, r1, r3
 80069de:	6839      	ldr	r1, [r7, #0]
 80069e0:	440b      	add	r3, r1
 80069e2:	791b      	ldrb	r3, [r3, #4]
 80069e4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	00db      	lsls	r3, r3, #3
 80069ec:	b25b      	sxtb	r3, r3
 80069ee:	f003 0308 	and.w	r3, r3, #8
 80069f2:	b25b      	sxtb	r3, r3
 80069f4:	4313      	orrs	r3, r2
 80069f6:	b25a      	sxtb	r2, r3
 80069f8:	7bfb      	ldrb	r3, [r7, #15]
 80069fa:	f44f 714a 	mov.w	r1, #808	; 0x328
 80069fe:	fb01 f303 	mul.w	r3, r1, r3
 8006a02:	6839      	ldr	r1, [r7, #0]
 8006a04:	440b      	add	r3, r1
 8006a06:	791b      	ldrb	r3, [r3, #4]
 8006a08:	f3c3 0382 	ubfx	r3, r3, #2, #3
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	b25b      	sxtb	r3, r3
 8006a10:	f003 0307 	and.w	r3, r3, #7
 8006a14:	b25b      	sxtb	r3, r3
 8006a16:	4313      	orrs	r3, r2
 8006a18:	b259      	sxtb	r1, r3
 8006a1a:	7bfb      	ldrb	r3, [r7, #15]
 8006a1c:	f44f 724a 	mov.w	r2, #808	; 0x328
 8006a20:	fb02 f303 	mul.w	r3, r2, r3
 8006a24:	683a      	ldr	r2, [r7, #0]
 8006a26:	4413      	add	r3, r2
 8006a28:	b2ca      	uxtb	r2, r1
 8006a2a:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8006a2e:	7bfb      	ldrb	r3, [r7, #15]
 8006a30:	3301      	adds	r3, #1
 8006a32:	73fb      	strb	r3, [r7, #15]
 8006a34:	7bfa      	ldrb	r2, [r7, #15]
 8006a36:	79fb      	ldrb	r3, [r7, #7]
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	f4ff af07 	bcc.w	800684c <adBms6830CreateConfiga+0x12>
  }
}
 8006a3e:	bf00      	nop
 8006a40:	bf00      	nop
 8006a42:	3714      	adds	r7, #20
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr

08006a4c <adBms6830CreateConfigb>:
 * @return None
 *
 *******************************************************************************
*/
void adBms6830CreateConfigb(uint8_t tIC, cell_asic *ic)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b085      	sub	sp, #20
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	4603      	mov	r3, r0
 8006a54:	6039      	str	r1, [r7, #0]
 8006a56:	71fb      	strb	r3, [r7, #7]
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8006a58:	2300      	movs	r3, #0
 8006a5a:	73fb      	strb	r3, [r7, #15]
 8006a5c:	e0a9      	b.n	8006bb2 <adBms6830CreateConfigb+0x166>
  {
    ic[curr_ic].configb.tx_data[0] = ((ic[curr_ic].tx_cfgb.vuv ));
 8006a5e:	7bfb      	ldrb	r3, [r7, #15]
 8006a60:	f44f 724a 	mov.w	r2, #808	; 0x328
 8006a64:	fb02 f303 	mul.w	r3, r2, r3
 8006a68:	683a      	ldr	r2, [r7, #0]
 8006a6a:	4413      	add	r3, r2
 8006a6c:	8999      	ldrh	r1, [r3, #12]
 8006a6e:	7bfb      	ldrb	r3, [r7, #15]
 8006a70:	f44f 724a 	mov.w	r2, #808	; 0x328
 8006a74:	fb02 f303 	mul.w	r3, r2, r3
 8006a78:	683a      	ldr	r2, [r7, #0]
 8006a7a:	4413      	add	r3, r2
 8006a7c:	b2ca      	uxtb	r2, r1
 8006a7e:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d
    ic[curr_ic].configb.tx_data[1] = (((ic[curr_ic].tx_cfgb.vov & 0x000F) << 4) | ((ic[curr_ic].tx_cfgb.vuv ) >> 8));
 8006a82:	7bfb      	ldrb	r3, [r7, #15]
 8006a84:	f44f 724a 	mov.w	r2, #808	; 0x328
 8006a88:	fb02 f303 	mul.w	r3, r2, r3
 8006a8c:	683a      	ldr	r2, [r7, #0]
 8006a8e:	4413      	add	r3, r2
 8006a90:	89db      	ldrh	r3, [r3, #14]
 8006a92:	011b      	lsls	r3, r3, #4
 8006a94:	b25a      	sxtb	r2, r3
 8006a96:	7bfb      	ldrb	r3, [r7, #15]
 8006a98:	f44f 714a 	mov.w	r1, #808	; 0x328
 8006a9c:	fb01 f303 	mul.w	r3, r1, r3
 8006aa0:	6839      	ldr	r1, [r7, #0]
 8006aa2:	440b      	add	r3, r1
 8006aa4:	899b      	ldrh	r3, [r3, #12]
 8006aa6:	0a1b      	lsrs	r3, r3, #8
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	b25b      	sxtb	r3, r3
 8006aac:	4313      	orrs	r3, r2
 8006aae:	b259      	sxtb	r1, r3
 8006ab0:	7bfb      	ldrb	r3, [r7, #15]
 8006ab2:	f44f 724a 	mov.w	r2, #808	; 0x328
 8006ab6:	fb02 f303 	mul.w	r3, r2, r3
 8006aba:	683a      	ldr	r2, [r7, #0]
 8006abc:	4413      	add	r3, r2
 8006abe:	b2ca      	uxtb	r2, r1
 8006ac0:	f883 212e 	strb.w	r2, [r3, #302]	; 0x12e
    ic[curr_ic].configb.tx_data[2] = ((ic[curr_ic].tx_cfgb.vov >>4)&0x0FF);
 8006ac4:	7bfb      	ldrb	r3, [r7, #15]
 8006ac6:	f44f 724a 	mov.w	r2, #808	; 0x328
 8006aca:	fb02 f303 	mul.w	r3, r2, r3
 8006ace:	683a      	ldr	r2, [r7, #0]
 8006ad0:	4413      	add	r3, r2
 8006ad2:	89db      	ldrh	r3, [r3, #14]
 8006ad4:	091b      	lsrs	r3, r3, #4
 8006ad6:	b299      	uxth	r1, r3
 8006ad8:	7bfb      	ldrb	r3, [r7, #15]
 8006ada:	f44f 724a 	mov.w	r2, #808	; 0x328
 8006ade:	fb02 f303 	mul.w	r3, r2, r3
 8006ae2:	683a      	ldr	r2, [r7, #0]
 8006ae4:	4413      	add	r3, r2
 8006ae6:	b2ca      	uxtb	r2, r1
 8006ae8:	f883 212f 	strb.w	r2, [r3, #303]	; 0x12f
    ic[curr_ic].configb.tx_data[3] = (((ic[curr_ic].tx_cfgb.dtmen & 0x01) << 7) | ((ic[curr_ic].tx_cfgb.dtrng & 0x01) << 6) | ((ic[curr_ic].tx_cfgb.dcto & 0x3F) << 0));
 8006aec:	7bfb      	ldrb	r3, [r7, #15]
 8006aee:	f44f 724a 	mov.w	r2, #808	; 0x328
 8006af2:	fb02 f303 	mul.w	r3, r2, r3
 8006af6:	683a      	ldr	r2, [r7, #0]
 8006af8:	4413      	add	r3, r2
 8006afa:	7c1b      	ldrb	r3, [r3, #16]
 8006afc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	01db      	lsls	r3, r3, #7
 8006b04:	b25a      	sxtb	r2, r3
 8006b06:	7bfb      	ldrb	r3, [r7, #15]
 8006b08:	f44f 714a 	mov.w	r1, #808	; 0x328
 8006b0c:	fb01 f303 	mul.w	r3, r1, r3
 8006b10:	6839      	ldr	r1, [r7, #0]
 8006b12:	440b      	add	r3, r1
 8006b14:	7c1b      	ldrb	r3, [r3, #16]
 8006b16:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	019b      	lsls	r3, r3, #6
 8006b1e:	b25b      	sxtb	r3, r3
 8006b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b24:	b25b      	sxtb	r3, r3
 8006b26:	4313      	orrs	r3, r2
 8006b28:	b25a      	sxtb	r2, r3
 8006b2a:	7bfb      	ldrb	r3, [r7, #15]
 8006b2c:	f44f 714a 	mov.w	r1, #808	; 0x328
 8006b30:	fb01 f303 	mul.w	r3, r1, r3
 8006b34:	6839      	ldr	r1, [r7, #0]
 8006b36:	440b      	add	r3, r1
 8006b38:	7c1b      	ldrb	r3, [r3, #16]
 8006b3a:	f3c3 0385 	ubfx	r3, r3, #2, #6
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	b25b      	sxtb	r3, r3
 8006b42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b46:	b25b      	sxtb	r3, r3
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	b259      	sxtb	r1, r3
 8006b4c:	7bfb      	ldrb	r3, [r7, #15]
 8006b4e:	f44f 724a 	mov.w	r2, #808	; 0x328
 8006b52:	fb02 f303 	mul.w	r3, r2, r3
 8006b56:	683a      	ldr	r2, [r7, #0]
 8006b58:	4413      	add	r3, r2
 8006b5a:	b2ca      	uxtb	r2, r1
 8006b5c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
    ic[curr_ic].configb.tx_data[4] = ((ic[curr_ic].tx_cfgb.dcc & 0xFF));
 8006b60:	7bfb      	ldrb	r3, [r7, #15]
 8006b62:	f44f 724a 	mov.w	r2, #808	; 0x328
 8006b66:	fb02 f303 	mul.w	r3, r2, r3
 8006b6a:	683a      	ldr	r2, [r7, #0]
 8006b6c:	4413      	add	r3, r2
 8006b6e:	8a59      	ldrh	r1, [r3, #18]
 8006b70:	7bfb      	ldrb	r3, [r7, #15]
 8006b72:	f44f 724a 	mov.w	r2, #808	; 0x328
 8006b76:	fb02 f303 	mul.w	r3, r2, r3
 8006b7a:	683a      	ldr	r2, [r7, #0]
 8006b7c:	4413      	add	r3, r2
 8006b7e:	b2ca      	uxtb	r2, r1
 8006b80:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131
    ic[curr_ic].configb.tx_data[5] = ((ic[curr_ic].tx_cfgb.dcc >>8 ));
 8006b84:	7bfb      	ldrb	r3, [r7, #15]
 8006b86:	f44f 724a 	mov.w	r2, #808	; 0x328
 8006b8a:	fb02 f303 	mul.w	r3, r2, r3
 8006b8e:	683a      	ldr	r2, [r7, #0]
 8006b90:	4413      	add	r3, r2
 8006b92:	8a5b      	ldrh	r3, [r3, #18]
 8006b94:	0a1b      	lsrs	r3, r3, #8
 8006b96:	b299      	uxth	r1, r3
 8006b98:	7bfb      	ldrb	r3, [r7, #15]
 8006b9a:	f44f 724a 	mov.w	r2, #808	; 0x328
 8006b9e:	fb02 f303 	mul.w	r3, r2, r3
 8006ba2:	683a      	ldr	r2, [r7, #0]
 8006ba4:	4413      	add	r3, r2
 8006ba6:	b2ca      	uxtb	r2, r1
 8006ba8:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8006bac:	7bfb      	ldrb	r3, [r7, #15]
 8006bae:	3301      	adds	r3, #1
 8006bb0:	73fb      	strb	r3, [r7, #15]
 8006bb2:	7bfa      	ldrb	r2, [r7, #15]
 8006bb4:	79fb      	ldrb	r3, [r7, #7]
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	f4ff af51 	bcc.w	8006a5e <adBms6830CreateConfigb+0x12>
  }
}
 8006bbc:	bf00      	nop
 8006bbe:	bf00      	nop
 8006bc0:	3714      	adds	r7, #20
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr

08006bca <adBms6830CreateClrflagData>:
 * @return None
 *
 *******************************************************************************
*/
void adBms6830CreateClrflagData(uint8_t tIC, cell_asic *ic)
{
 8006bca:	b480      	push	{r7}
 8006bcc:	b085      	sub	sp, #20
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	6039      	str	r1, [r7, #0]
 8006bd4:	71fb      	strb	r3, [r7, #7]
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	73fb      	strb	r3, [r7, #15]
 8006bda:	e12b      	b.n	8006e34 <adBms6830CreateClrflagData+0x26a>
  {
    ic[curr_ic].clrflag.tx_data[0] = (ic[curr_ic].clflag.cl_csflt & 0x00FF);
 8006bdc:	7bfb      	ldrb	r3, [r7, #15]
 8006bde:	f44f 724a 	mov.w	r2, #808	; 0x328
 8006be2:	fb02 f303 	mul.w	r3, r2, r3
 8006be6:	683a      	ldr	r2, [r7, #0]
 8006be8:	4413      	add	r3, r2
 8006bea:	8b99      	ldrh	r1, [r3, #28]
 8006bec:	7bfb      	ldrb	r3, [r7, #15]
 8006bee:	f44f 724a 	mov.w	r2, #808	; 0x328
 8006bf2:	fb02 f303 	mul.w	r3, r2, r3
 8006bf6:	683a      	ldr	r2, [r7, #0]
 8006bf8:	4413      	add	r3, r2
 8006bfa:	b2ca      	uxtb	r2, r1
 8006bfc:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
    ic[curr_ic].clrflag.tx_data[1] = ((ic[curr_ic].clflag.cl_csflt & 0xFF00) >> 8);
 8006c00:	7bfb      	ldrb	r3, [r7, #15]
 8006c02:	f44f 724a 	mov.w	r2, #808	; 0x328
 8006c06:	fb02 f303 	mul.w	r3, r2, r3
 8006c0a:	683a      	ldr	r2, [r7, #0]
 8006c0c:	4413      	add	r3, r2
 8006c0e:	8b9b      	ldrh	r3, [r3, #28]
 8006c10:	0a1b      	lsrs	r3, r3, #8
 8006c12:	b299      	uxth	r1, r3
 8006c14:	7bfb      	ldrb	r3, [r7, #15]
 8006c16:	f44f 724a 	mov.w	r2, #808	; 0x328
 8006c1a:	fb02 f303 	mul.w	r3, r2, r3
 8006c1e:	683a      	ldr	r2, [r7, #0]
 8006c20:	4413      	add	r3, r2
 8006c22:	b2ca      	uxtb	r2, r1
 8006c24:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
    ic[curr_ic].clrflag.tx_data[2] = 0x00;
 8006c28:	7bfb      	ldrb	r3, [r7, #15]
 8006c2a:	f44f 724a 	mov.w	r2, #808	; 0x328
 8006c2e:	fb02 f303 	mul.w	r3, r2, r3
 8006c32:	683a      	ldr	r2, [r7, #0]
 8006c34:	4413      	add	r3, r2
 8006c36:	2200      	movs	r2, #0
 8006c38:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
    ic[curr_ic].clrflag.tx_data[3] = 0x00;
 8006c3c:	7bfb      	ldrb	r3, [r7, #15]
 8006c3e:	f44f 724a 	mov.w	r2, #808	; 0x328
 8006c42:	fb02 f303 	mul.w	r3, r2, r3
 8006c46:	683a      	ldr	r2, [r7, #0]
 8006c48:	4413      	add	r3, r2
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
    ic[curr_ic].clrflag.tx_data[4] = ((ic[curr_ic].clflag.cl_vaov << 7) | (ic[curr_ic].clflag.cl_vauv << 6) | (ic[curr_ic].clflag.cl_vdov << 5) | (ic[curr_ic].clflag.cl_vduv << 4)
 8006c50:	7bfb      	ldrb	r3, [r7, #15]
 8006c52:	f44f 724a 	mov.w	r2, #808	; 0x328
 8006c56:	fb02 f303 	mul.w	r3, r2, r3
 8006c5a:	683a      	ldr	r2, [r7, #0]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	7f9b      	ldrb	r3, [r3, #30]
 8006c60:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	01db      	lsls	r3, r3, #7
 8006c68:	b25a      	sxtb	r2, r3
 8006c6a:	7bfb      	ldrb	r3, [r7, #15]
 8006c6c:	f44f 714a 	mov.w	r1, #808	; 0x328
 8006c70:	fb01 f303 	mul.w	r3, r1, r3
 8006c74:	6839      	ldr	r1, [r7, #0]
 8006c76:	440b      	add	r3, r1
 8006c78:	7f9b      	ldrb	r3, [r3, #30]
 8006c7a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	019b      	lsls	r3, r3, #6
 8006c82:	b25b      	sxtb	r3, r3
 8006c84:	4313      	orrs	r3, r2
 8006c86:	b25a      	sxtb	r2, r3
 8006c88:	7bfb      	ldrb	r3, [r7, #15]
 8006c8a:	f44f 714a 	mov.w	r1, #808	; 0x328
 8006c8e:	fb01 f303 	mul.w	r3, r1, r3
 8006c92:	6839      	ldr	r1, [r7, #0]
 8006c94:	440b      	add	r3, r1
 8006c96:	7f9b      	ldrb	r3, [r3, #30]
 8006c98:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	015b      	lsls	r3, r3, #5
 8006ca0:	b25b      	sxtb	r3, r3
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	b25a      	sxtb	r2, r3
 8006ca6:	7bfb      	ldrb	r3, [r7, #15]
 8006ca8:	f44f 714a 	mov.w	r1, #808	; 0x328
 8006cac:	fb01 f303 	mul.w	r3, r1, r3
 8006cb0:	6839      	ldr	r1, [r7, #0]
 8006cb2:	440b      	add	r3, r1
 8006cb4:	7f9b      	ldrb	r3, [r3, #30]
 8006cb6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	011b      	lsls	r3, r3, #4
 8006cbe:	b25b      	sxtb	r3, r3
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	b25a      	sxtb	r2, r3
                                      |(ic[curr_ic].clflag.cl_ced << 3)| (ic[curr_ic].clflag.cl_cmed << 2) | (ic[curr_ic].clflag.cl_sed << 1) | (ic[curr_ic].clflag.cl_smed));
 8006cc4:	7bfb      	ldrb	r3, [r7, #15]
 8006cc6:	f44f 714a 	mov.w	r1, #808	; 0x328
 8006cca:	fb01 f303 	mul.w	r3, r1, r3
 8006cce:	6839      	ldr	r1, [r7, #0]
 8006cd0:	440b      	add	r3, r1
 8006cd2:	7f9b      	ldrb	r3, [r3, #30]
 8006cd4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	00db      	lsls	r3, r3, #3
 8006cdc:	b25b      	sxtb	r3, r3
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	b25a      	sxtb	r2, r3
 8006ce2:	7bfb      	ldrb	r3, [r7, #15]
 8006ce4:	f44f 714a 	mov.w	r1, #808	; 0x328
 8006ce8:	fb01 f303 	mul.w	r3, r1, r3
 8006cec:	6839      	ldr	r1, [r7, #0]
 8006cee:	440b      	add	r3, r1
 8006cf0:	7f9b      	ldrb	r3, [r3, #30]
 8006cf2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	b25b      	sxtb	r3, r3
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	b25a      	sxtb	r2, r3
 8006d00:	7bfb      	ldrb	r3, [r7, #15]
 8006d02:	f44f 714a 	mov.w	r1, #808	; 0x328
 8006d06:	fb01 f303 	mul.w	r3, r1, r3
 8006d0a:	6839      	ldr	r1, [r7, #0]
 8006d0c:	440b      	add	r3, r1
 8006d0e:	7f9b      	ldrb	r3, [r3, #30]
 8006d10:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006d14:	b2db      	uxtb	r3, r3
 8006d16:	005b      	lsls	r3, r3, #1
 8006d18:	b25b      	sxtb	r3, r3
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	b25a      	sxtb	r2, r3
 8006d1e:	7bfb      	ldrb	r3, [r7, #15]
 8006d20:	f44f 714a 	mov.w	r1, #808	; 0x328
 8006d24:	fb01 f303 	mul.w	r3, r1, r3
 8006d28:	6839      	ldr	r1, [r7, #0]
 8006d2a:	440b      	add	r3, r1
 8006d2c:	7f9b      	ldrb	r3, [r3, #30]
 8006d2e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	b25b      	sxtb	r3, r3
 8006d36:	4313      	orrs	r3, r2
 8006d38:	b259      	sxtb	r1, r3
    ic[curr_ic].clrflag.tx_data[4] = ((ic[curr_ic].clflag.cl_vaov << 7) | (ic[curr_ic].clflag.cl_vauv << 6) | (ic[curr_ic].clflag.cl_vdov << 5) | (ic[curr_ic].clflag.cl_vduv << 4)
 8006d3a:	7bfb      	ldrb	r3, [r7, #15]
 8006d3c:	f44f 724a 	mov.w	r2, #808	; 0x328
 8006d40:	fb02 f303 	mul.w	r3, r2, r3
 8006d44:	683a      	ldr	r2, [r7, #0]
 8006d46:	4413      	add	r3, r2
                                      |(ic[curr_ic].clflag.cl_ced << 3)| (ic[curr_ic].clflag.cl_cmed << 2) | (ic[curr_ic].clflag.cl_sed << 1) | (ic[curr_ic].clflag.cl_smed));
 8006d48:	b2ca      	uxtb	r2, r1
    ic[curr_ic].clrflag.tx_data[4] = ((ic[curr_ic].clflag.cl_vaov << 7) | (ic[curr_ic].clflag.cl_vauv << 6) | (ic[curr_ic].clflag.cl_vdov << 5) | (ic[curr_ic].clflag.cl_vduv << 4)
 8006d4a:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
    ic[curr_ic].clrflag.tx_data[5] = ((ic[curr_ic].clflag.cl_vde << 7) | (ic[curr_ic].clflag.cl_vdel << 6) | (ic[curr_ic].clflag.cl_spiflt << 4) |(ic[curr_ic].clflag.cl_sleep << 3)
 8006d4e:	7bfb      	ldrb	r3, [r7, #15]
 8006d50:	f44f 724a 	mov.w	r2, #808	; 0x328
 8006d54:	fb02 f303 	mul.w	r3, r2, r3
 8006d58:	683a      	ldr	r2, [r7, #0]
 8006d5a:	4413      	add	r3, r2
 8006d5c:	7fdb      	ldrb	r3, [r3, #31]
 8006d5e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	01db      	lsls	r3, r3, #7
 8006d66:	b25a      	sxtb	r2, r3
 8006d68:	7bfb      	ldrb	r3, [r7, #15]
 8006d6a:	f44f 714a 	mov.w	r1, #808	; 0x328
 8006d6e:	fb01 f303 	mul.w	r3, r1, r3
 8006d72:	6839      	ldr	r1, [r7, #0]
 8006d74:	440b      	add	r3, r1
 8006d76:	7fdb      	ldrb	r3, [r3, #31]
 8006d78:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006d7c:	b2db      	uxtb	r3, r3
 8006d7e:	019b      	lsls	r3, r3, #6
 8006d80:	b25b      	sxtb	r3, r3
 8006d82:	4313      	orrs	r3, r2
 8006d84:	b25a      	sxtb	r2, r3
 8006d86:	7bfb      	ldrb	r3, [r7, #15]
 8006d88:	f44f 714a 	mov.w	r1, #808	; 0x328
 8006d8c:	fb01 f303 	mul.w	r3, r1, r3
 8006d90:	6839      	ldr	r1, [r7, #0]
 8006d92:	440b      	add	r3, r1
 8006d94:	7fdb      	ldrb	r3, [r3, #31]
 8006d96:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	011b      	lsls	r3, r3, #4
 8006d9e:	b25b      	sxtb	r3, r3
 8006da0:	4313      	orrs	r3, r2
 8006da2:	b25a      	sxtb	r2, r3
 8006da4:	7bfb      	ldrb	r3, [r7, #15]
 8006da6:	f44f 714a 	mov.w	r1, #808	; 0x328
 8006daa:	fb01 f303 	mul.w	r3, r1, r3
 8006dae:	6839      	ldr	r1, [r7, #0]
 8006db0:	440b      	add	r3, r1
 8006db2:	7fdb      	ldrb	r3, [r3, #31]
 8006db4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006db8:	b2db      	uxtb	r3, r3
 8006dba:	00db      	lsls	r3, r3, #3
 8006dbc:	b25b      	sxtb	r3, r3
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	b25a      	sxtb	r2, r3
                                      | (ic[curr_ic].clflag.cl_thsd << 2) | (ic[curr_ic].clflag.cl_tmode << 1) | (ic[curr_ic].clflag.cl_oscchk));
 8006dc2:	7bfb      	ldrb	r3, [r7, #15]
 8006dc4:	f44f 714a 	mov.w	r1, #808	; 0x328
 8006dc8:	fb01 f303 	mul.w	r3, r1, r3
 8006dcc:	6839      	ldr	r1, [r7, #0]
 8006dce:	440b      	add	r3, r1
 8006dd0:	7fdb      	ldrb	r3, [r3, #31]
 8006dd2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006dd6:	b2db      	uxtb	r3, r3
 8006dd8:	009b      	lsls	r3, r3, #2
 8006dda:	b25b      	sxtb	r3, r3
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	b25a      	sxtb	r2, r3
 8006de0:	7bfb      	ldrb	r3, [r7, #15]
 8006de2:	f44f 714a 	mov.w	r1, #808	; 0x328
 8006de6:	fb01 f303 	mul.w	r3, r1, r3
 8006dea:	6839      	ldr	r1, [r7, #0]
 8006dec:	440b      	add	r3, r1
 8006dee:	7fdb      	ldrb	r3, [r3, #31]
 8006df0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006df4:	b2db      	uxtb	r3, r3
 8006df6:	005b      	lsls	r3, r3, #1
 8006df8:	b25b      	sxtb	r3, r3
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	b25a      	sxtb	r2, r3
 8006dfe:	7bfb      	ldrb	r3, [r7, #15]
 8006e00:	f44f 714a 	mov.w	r1, #808	; 0x328
 8006e04:	fb01 f303 	mul.w	r3, r1, r3
 8006e08:	6839      	ldr	r1, [r7, #0]
 8006e0a:	440b      	add	r3, r1
 8006e0c:	7fdb      	ldrb	r3, [r3, #31]
 8006e0e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006e12:	b2db      	uxtb	r3, r3
 8006e14:	b25b      	sxtb	r3, r3
 8006e16:	4313      	orrs	r3, r2
 8006e18:	b259      	sxtb	r1, r3
    ic[curr_ic].clrflag.tx_data[5] = ((ic[curr_ic].clflag.cl_vde << 7) | (ic[curr_ic].clflag.cl_vdel << 6) | (ic[curr_ic].clflag.cl_spiflt << 4) |(ic[curr_ic].clflag.cl_sleep << 3)
 8006e1a:	7bfb      	ldrb	r3, [r7, #15]
 8006e1c:	f44f 724a 	mov.w	r2, #808	; 0x328
 8006e20:	fb02 f303 	mul.w	r3, r2, r3
 8006e24:	683a      	ldr	r2, [r7, #0]
 8006e26:	4413      	add	r3, r2
                                      | (ic[curr_ic].clflag.cl_thsd << 2) | (ic[curr_ic].clflag.cl_tmode << 1) | (ic[curr_ic].clflag.cl_oscchk));
 8006e28:	b2ca      	uxtb	r2, r1
    ic[curr_ic].clrflag.tx_data[5] = ((ic[curr_ic].clflag.cl_vde << 7) | (ic[curr_ic].clflag.cl_vdel << 6) | (ic[curr_ic].clflag.cl_spiflt << 4) |(ic[curr_ic].clflag.cl_sleep << 3)
 8006e2a:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8006e2e:	7bfb      	ldrb	r3, [r7, #15]
 8006e30:	3301      	adds	r3, #1
 8006e32:	73fb      	strb	r3, [r7, #15]
 8006e34:	7bfa      	ldrb	r2, [r7, #15]
 8006e36:	79fb      	ldrb	r3, [r7, #7]
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	f4ff aecf 	bcc.w	8006bdc <adBms6830CreateClrflagData+0x12>
  }
}
 8006e3e:	bf00      	nop
 8006e40:	bf00      	nop
 8006e42:	3714      	adds	r7, #20
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr

08006e4c <adBms6830CreateComm>:
 * @return None
 *
 *******************************************************************************
*/
void adBms6830CreateComm(uint8_t tIC, cell_asic *ic)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b085      	sub	sp, #20
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	4603      	mov	r3, r0
 8006e54:	6039      	str	r1, [r7, #0]
 8006e56:	71fb      	strb	r3, [r7, #7]
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8006e58:	2300      	movs	r3, #0
 8006e5a:	73fb      	strb	r3, [r7, #15]
 8006e5c:	e0a4      	b.n	8006fa8 <adBms6830CreateComm+0x15c>
  {
    ic[curr_ic].com.tx_data[0] = ((ic[curr_ic].comm.icomm[0] & 0x0F)  << 4  | (ic[curr_ic].comm.fcomm[0]   & 0x0F));
 8006e5e:	7bfb      	ldrb	r3, [r7, #15]
 8006e60:	f44f 724a 	mov.w	r2, #808	; 0x328
 8006e64:	fb02 f303 	mul.w	r3, r2, r3
 8006e68:	683a      	ldr	r2, [r7, #0]
 8006e6a:	4413      	add	r3, r2
 8006e6c:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
 8006e70:	011b      	lsls	r3, r3, #4
 8006e72:	b25a      	sxtb	r2, r3
 8006e74:	7bfb      	ldrb	r3, [r7, #15]
 8006e76:	f44f 714a 	mov.w	r1, #808	; 0x328
 8006e7a:	fb01 f303 	mul.w	r3, r1, r3
 8006e7e:	6839      	ldr	r1, [r7, #0]
 8006e80:	440b      	add	r3, r1
 8006e82:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8006e86:	b25b      	sxtb	r3, r3
 8006e88:	f003 030f 	and.w	r3, r3, #15
 8006e8c:	b25b      	sxtb	r3, r3
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	b259      	sxtb	r1, r3
 8006e92:	7bfb      	ldrb	r3, [r7, #15]
 8006e94:	f44f 724a 	mov.w	r2, #808	; 0x328
 8006e98:	fb02 f303 	mul.w	r3, r2, r3
 8006e9c:	683a      	ldr	r2, [r7, #0]
 8006e9e:	4413      	add	r3, r2
 8006ea0:	b2ca      	uxtb	r2, r1
 8006ea2:	f883 2157 	strb.w	r2, [r3, #343]	; 0x157
    ic[curr_ic].com.tx_data[1] = ((ic[curr_ic].comm.data[0] ));
 8006ea6:	7bfb      	ldrb	r3, [r7, #15]
 8006ea8:	f44f 724a 	mov.w	r2, #808	; 0x328
 8006eac:	fb02 f303 	mul.w	r3, r2, r3
 8006eb0:	683a      	ldr	r2, [r7, #0]
 8006eb2:	441a      	add	r2, r3
 8006eb4:	7bfb      	ldrb	r3, [r7, #15]
 8006eb6:	f44f 714a 	mov.w	r1, #808	; 0x328
 8006eba:	fb01 f303 	mul.w	r3, r1, r3
 8006ebe:	6839      	ldr	r1, [r7, #0]
 8006ec0:	440b      	add	r3, r1
 8006ec2:	f892 2106 	ldrb.w	r2, [r2, #262]	; 0x106
 8006ec6:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
    ic[curr_ic].com.tx_data[2] = ((ic[curr_ic].comm.icomm[1] & 0x0F)  << 4 ) | (ic[curr_ic].comm.fcomm[1]   & 0x0F);
 8006eca:	7bfb      	ldrb	r3, [r7, #15]
 8006ecc:	f44f 724a 	mov.w	r2, #808	; 0x328
 8006ed0:	fb02 f303 	mul.w	r3, r2, r3
 8006ed4:	683a      	ldr	r2, [r7, #0]
 8006ed6:	4413      	add	r3, r2
 8006ed8:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8006edc:	011b      	lsls	r3, r3, #4
 8006ede:	b25a      	sxtb	r2, r3
 8006ee0:	7bfb      	ldrb	r3, [r7, #15]
 8006ee2:	f44f 714a 	mov.w	r1, #808	; 0x328
 8006ee6:	fb01 f303 	mul.w	r3, r1, r3
 8006eea:	6839      	ldr	r1, [r7, #0]
 8006eec:	440b      	add	r3, r1
 8006eee:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8006ef2:	b25b      	sxtb	r3, r3
 8006ef4:	f003 030f 	and.w	r3, r3, #15
 8006ef8:	b25b      	sxtb	r3, r3
 8006efa:	4313      	orrs	r3, r2
 8006efc:	b259      	sxtb	r1, r3
 8006efe:	7bfb      	ldrb	r3, [r7, #15]
 8006f00:	f44f 724a 	mov.w	r2, #808	; 0x328
 8006f04:	fb02 f303 	mul.w	r3, r2, r3
 8006f08:	683a      	ldr	r2, [r7, #0]
 8006f0a:	4413      	add	r3, r2
 8006f0c:	b2ca      	uxtb	r2, r1
 8006f0e:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
    ic[curr_ic].com.tx_data[3] = ((ic[curr_ic].comm.data[1]));
 8006f12:	7bfb      	ldrb	r3, [r7, #15]
 8006f14:	f44f 724a 	mov.w	r2, #808	; 0x328
 8006f18:	fb02 f303 	mul.w	r3, r2, r3
 8006f1c:	683a      	ldr	r2, [r7, #0]
 8006f1e:	441a      	add	r2, r3
 8006f20:	7bfb      	ldrb	r3, [r7, #15]
 8006f22:	f44f 714a 	mov.w	r1, #808	; 0x328
 8006f26:	fb01 f303 	mul.w	r3, r1, r3
 8006f2a:	6839      	ldr	r1, [r7, #0]
 8006f2c:	440b      	add	r3, r1
 8006f2e:	f892 2107 	ldrb.w	r2, [r2, #263]	; 0x107
 8006f32:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    ic[curr_ic].com.tx_data[4] = ((ic[curr_ic].comm.icomm[2] & 0x0F)  << 4  | (ic[curr_ic].comm.fcomm[2]   & 0x0F));
 8006f36:	7bfb      	ldrb	r3, [r7, #15]
 8006f38:	f44f 724a 	mov.w	r2, #808	; 0x328
 8006f3c:	fb02 f303 	mul.w	r3, r2, r3
 8006f40:	683a      	ldr	r2, [r7, #0]
 8006f42:	4413      	add	r3, r2
 8006f44:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 8006f48:	011b      	lsls	r3, r3, #4
 8006f4a:	b25a      	sxtb	r2, r3
 8006f4c:	7bfb      	ldrb	r3, [r7, #15]
 8006f4e:	f44f 714a 	mov.w	r1, #808	; 0x328
 8006f52:	fb01 f303 	mul.w	r3, r1, r3
 8006f56:	6839      	ldr	r1, [r7, #0]
 8006f58:	440b      	add	r3, r1
 8006f5a:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 8006f5e:	b25b      	sxtb	r3, r3
 8006f60:	f003 030f 	and.w	r3, r3, #15
 8006f64:	b25b      	sxtb	r3, r3
 8006f66:	4313      	orrs	r3, r2
 8006f68:	b259      	sxtb	r1, r3
 8006f6a:	7bfb      	ldrb	r3, [r7, #15]
 8006f6c:	f44f 724a 	mov.w	r2, #808	; 0x328
 8006f70:	fb02 f303 	mul.w	r3, r2, r3
 8006f74:	683a      	ldr	r2, [r7, #0]
 8006f76:	4413      	add	r3, r2
 8006f78:	b2ca      	uxtb	r2, r1
 8006f7a:	f883 215b 	strb.w	r2, [r3, #347]	; 0x15b
    ic[curr_ic].com.tx_data[5] = ((ic[curr_ic].comm.data[2]));
 8006f7e:	7bfb      	ldrb	r3, [r7, #15]
 8006f80:	f44f 724a 	mov.w	r2, #808	; 0x328
 8006f84:	fb02 f303 	mul.w	r3, r2, r3
 8006f88:	683a      	ldr	r2, [r7, #0]
 8006f8a:	441a      	add	r2, r3
 8006f8c:	7bfb      	ldrb	r3, [r7, #15]
 8006f8e:	f44f 714a 	mov.w	r1, #808	; 0x328
 8006f92:	fb01 f303 	mul.w	r3, r1, r3
 8006f96:	6839      	ldr	r1, [r7, #0]
 8006f98:	440b      	add	r3, r1
 8006f9a:	f892 2108 	ldrb.w	r2, [r2, #264]	; 0x108
 8006f9e:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8006fa2:	7bfb      	ldrb	r3, [r7, #15]
 8006fa4:	3301      	adds	r3, #1
 8006fa6:	73fb      	strb	r3, [r7, #15]
 8006fa8:	7bfa      	ldrb	r2, [r7, #15]
 8006faa:	79fb      	ldrb	r3, [r7, #7]
 8006fac:	429a      	cmp	r2, r3
 8006fae:	f4ff af56 	bcc.w	8006e5e <adBms6830CreateComm+0x12>
  }
}
 8006fb2:	bf00      	nop
 8006fb4:	bf00      	nop
 8006fb6:	3714      	adds	r7, #20
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr

08006fc0 <adBms6830CreatePwma>:
 * @return None
 *
 *******************************************************************************
*/
void adBms6830CreatePwma(uint8_t tIC, cell_asic *ic)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b085      	sub	sp, #20
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	6039      	str	r1, [r7, #0]
 8006fca:	71fb      	strb	r3, [r7, #7]
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8006fcc:	2300      	movs	r3, #0
 8006fce:	73fb      	strb	r3, [r7, #15]
 8006fd0:	e0da      	b.n	8007188 <adBms6830CreatePwma+0x1c8>
  {
    ic[curr_ic].pwma.tx_data[0] = ((ic[curr_ic].PwmA.pwma[1] & 0x0F) << 4 | (ic[curr_ic].PwmA.pwma[0] & 0x0F));
 8006fd2:	7bfb      	ldrb	r3, [r7, #15]
 8006fd4:	f44f 724a 	mov.w	r2, #808	; 0x328
 8006fd8:	fb02 f303 	mul.w	r3, r2, r3
 8006fdc:	683a      	ldr	r2, [r7, #0]
 8006fde:	4413      	add	r3, r2
 8006fe0:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8006fe4:	011b      	lsls	r3, r3, #4
 8006fe6:	b25a      	sxtb	r2, r3
 8006fe8:	7bfb      	ldrb	r3, [r7, #15]
 8006fea:	f44f 714a 	mov.w	r1, #808	; 0x328
 8006fee:	fb01 f303 	mul.w	r3, r1, r3
 8006ff2:	6839      	ldr	r1, [r7, #0]
 8006ff4:	440b      	add	r3, r1
 8006ff6:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
 8006ffa:	b25b      	sxtb	r3, r3
 8006ffc:	f003 030f 	and.w	r3, r3, #15
 8007000:	b25b      	sxtb	r3, r3
 8007002:	4313      	orrs	r3, r2
 8007004:	b259      	sxtb	r1, r3
 8007006:	7bfb      	ldrb	r3, [r7, #15]
 8007008:	f44f 724a 	mov.w	r2, #808	; 0x328
 800700c:	fb02 f303 	mul.w	r3, r2, r3
 8007010:	683a      	ldr	r2, [r7, #0]
 8007012:	4413      	add	r3, r2
 8007014:	b2ca      	uxtb	r2, r1
 8007016:	f883 2165 	strb.w	r2, [r3, #357]	; 0x165
    ic[curr_ic].pwma.tx_data[1] = ((ic[curr_ic].PwmA.pwma[3] & 0x0F) << 4 | (ic[curr_ic].PwmA.pwma[2] & 0x0F));
 800701a:	7bfb      	ldrb	r3, [r7, #15]
 800701c:	f44f 724a 	mov.w	r2, #808	; 0x328
 8007020:	fb02 f303 	mul.w	r3, r2, r3
 8007024:	683a      	ldr	r2, [r7, #0]
 8007026:	4413      	add	r3, r2
 8007028:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800702c:	011b      	lsls	r3, r3, #4
 800702e:	b25a      	sxtb	r2, r3
 8007030:	7bfb      	ldrb	r3, [r7, #15]
 8007032:	f44f 714a 	mov.w	r1, #808	; 0x328
 8007036:	fb01 f303 	mul.w	r3, r1, r3
 800703a:	6839      	ldr	r1, [r7, #0]
 800703c:	440b      	add	r3, r1
 800703e:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 8007042:	b25b      	sxtb	r3, r3
 8007044:	f003 030f 	and.w	r3, r3, #15
 8007048:	b25b      	sxtb	r3, r3
 800704a:	4313      	orrs	r3, r2
 800704c:	b259      	sxtb	r1, r3
 800704e:	7bfb      	ldrb	r3, [r7, #15]
 8007050:	f44f 724a 	mov.w	r2, #808	; 0x328
 8007054:	fb02 f303 	mul.w	r3, r2, r3
 8007058:	683a      	ldr	r2, [r7, #0]
 800705a:	4413      	add	r3, r2
 800705c:	b2ca      	uxtb	r2, r1
 800705e:	f883 2166 	strb.w	r2, [r3, #358]	; 0x166
    ic[curr_ic].pwma.tx_data[2] = ((ic[curr_ic].PwmA.pwma[5] & 0x0F) << 4 | (ic[curr_ic].PwmA.pwma[4] & 0x0F));
 8007062:	7bfb      	ldrb	r3, [r7, #15]
 8007064:	f44f 724a 	mov.w	r2, #808	; 0x328
 8007068:	fb02 f303 	mul.w	r3, r2, r3
 800706c:	683a      	ldr	r2, [r7, #0]
 800706e:	4413      	add	r3, r2
 8007070:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 8007074:	011b      	lsls	r3, r3, #4
 8007076:	b25a      	sxtb	r2, r3
 8007078:	7bfb      	ldrb	r3, [r7, #15]
 800707a:	f44f 714a 	mov.w	r1, #808	; 0x328
 800707e:	fb01 f303 	mul.w	r3, r1, r3
 8007082:	6839      	ldr	r1, [r7, #0]
 8007084:	440b      	add	r3, r1
 8007086:	f893 310d 	ldrb.w	r3, [r3, #269]	; 0x10d
 800708a:	b25b      	sxtb	r3, r3
 800708c:	f003 030f 	and.w	r3, r3, #15
 8007090:	b25b      	sxtb	r3, r3
 8007092:	4313      	orrs	r3, r2
 8007094:	b259      	sxtb	r1, r3
 8007096:	7bfb      	ldrb	r3, [r7, #15]
 8007098:	f44f 724a 	mov.w	r2, #808	; 0x328
 800709c:	fb02 f303 	mul.w	r3, r2, r3
 80070a0:	683a      	ldr	r2, [r7, #0]
 80070a2:	4413      	add	r3, r2
 80070a4:	b2ca      	uxtb	r2, r1
 80070a6:	f883 2167 	strb.w	r2, [r3, #359]	; 0x167
    ic[curr_ic].pwma.tx_data[3] = ((ic[curr_ic].PwmA.pwma[7] & 0x0F) << 4 | (ic[curr_ic].PwmA.pwma[6] & 0x0F));
 80070aa:	7bfb      	ldrb	r3, [r7, #15]
 80070ac:	f44f 724a 	mov.w	r2, #808	; 0x328
 80070b0:	fb02 f303 	mul.w	r3, r2, r3
 80070b4:	683a      	ldr	r2, [r7, #0]
 80070b6:	4413      	add	r3, r2
 80070b8:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 80070bc:	011b      	lsls	r3, r3, #4
 80070be:	b25a      	sxtb	r2, r3
 80070c0:	7bfb      	ldrb	r3, [r7, #15]
 80070c2:	f44f 714a 	mov.w	r1, #808	; 0x328
 80070c6:	fb01 f303 	mul.w	r3, r1, r3
 80070ca:	6839      	ldr	r1, [r7, #0]
 80070cc:	440b      	add	r3, r1
 80070ce:	f893 310f 	ldrb.w	r3, [r3, #271]	; 0x10f
 80070d2:	b25b      	sxtb	r3, r3
 80070d4:	f003 030f 	and.w	r3, r3, #15
 80070d8:	b25b      	sxtb	r3, r3
 80070da:	4313      	orrs	r3, r2
 80070dc:	b259      	sxtb	r1, r3
 80070de:	7bfb      	ldrb	r3, [r7, #15]
 80070e0:	f44f 724a 	mov.w	r2, #808	; 0x328
 80070e4:	fb02 f303 	mul.w	r3, r2, r3
 80070e8:	683a      	ldr	r2, [r7, #0]
 80070ea:	4413      	add	r3, r2
 80070ec:	b2ca      	uxtb	r2, r1
 80070ee:	f883 2168 	strb.w	r2, [r3, #360]	; 0x168
    ic[curr_ic].pwma.tx_data[4] = ((ic[curr_ic].PwmA.pwma[9] & 0x0F) << 4 | (ic[curr_ic].PwmA.pwma[8] & 0x0F));
 80070f2:	7bfb      	ldrb	r3, [r7, #15]
 80070f4:	f44f 724a 	mov.w	r2, #808	; 0x328
 80070f8:	fb02 f303 	mul.w	r3, r2, r3
 80070fc:	683a      	ldr	r2, [r7, #0]
 80070fe:	4413      	add	r3, r2
 8007100:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8007104:	011b      	lsls	r3, r3, #4
 8007106:	b25a      	sxtb	r2, r3
 8007108:	7bfb      	ldrb	r3, [r7, #15]
 800710a:	f44f 714a 	mov.w	r1, #808	; 0x328
 800710e:	fb01 f303 	mul.w	r3, r1, r3
 8007112:	6839      	ldr	r1, [r7, #0]
 8007114:	440b      	add	r3, r1
 8007116:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 800711a:	b25b      	sxtb	r3, r3
 800711c:	f003 030f 	and.w	r3, r3, #15
 8007120:	b25b      	sxtb	r3, r3
 8007122:	4313      	orrs	r3, r2
 8007124:	b259      	sxtb	r1, r3
 8007126:	7bfb      	ldrb	r3, [r7, #15]
 8007128:	f44f 724a 	mov.w	r2, #808	; 0x328
 800712c:	fb02 f303 	mul.w	r3, r2, r3
 8007130:	683a      	ldr	r2, [r7, #0]
 8007132:	4413      	add	r3, r2
 8007134:	b2ca      	uxtb	r2, r1
 8007136:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
    ic[curr_ic].pwma.tx_data[5] = ((ic[curr_ic].PwmA.pwma[11] & 0x0F) << 4 | (ic[curr_ic].PwmA.pwma[10] & 0x0F));
 800713a:	7bfb      	ldrb	r3, [r7, #15]
 800713c:	f44f 724a 	mov.w	r2, #808	; 0x328
 8007140:	fb02 f303 	mul.w	r3, r2, r3
 8007144:	683a      	ldr	r2, [r7, #0]
 8007146:	4413      	add	r3, r2
 8007148:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 800714c:	011b      	lsls	r3, r3, #4
 800714e:	b25a      	sxtb	r2, r3
 8007150:	7bfb      	ldrb	r3, [r7, #15]
 8007152:	f44f 714a 	mov.w	r1, #808	; 0x328
 8007156:	fb01 f303 	mul.w	r3, r1, r3
 800715a:	6839      	ldr	r1, [r7, #0]
 800715c:	440b      	add	r3, r1
 800715e:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8007162:	b25b      	sxtb	r3, r3
 8007164:	f003 030f 	and.w	r3, r3, #15
 8007168:	b25b      	sxtb	r3, r3
 800716a:	4313      	orrs	r3, r2
 800716c:	b259      	sxtb	r1, r3
 800716e:	7bfb      	ldrb	r3, [r7, #15]
 8007170:	f44f 724a 	mov.w	r2, #808	; 0x328
 8007174:	fb02 f303 	mul.w	r3, r2, r3
 8007178:	683a      	ldr	r2, [r7, #0]
 800717a:	4413      	add	r3, r2
 800717c:	b2ca      	uxtb	r2, r1
 800717e:	f883 216a 	strb.w	r2, [r3, #362]	; 0x16a
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8007182:	7bfb      	ldrb	r3, [r7, #15]
 8007184:	3301      	adds	r3, #1
 8007186:	73fb      	strb	r3, [r7, #15]
 8007188:	7bfa      	ldrb	r2, [r7, #15]
 800718a:	79fb      	ldrb	r3, [r7, #7]
 800718c:	429a      	cmp	r2, r3
 800718e:	f4ff af20 	bcc.w	8006fd2 <adBms6830CreatePwma+0x12>
  }
}
 8007192:	bf00      	nop
 8007194:	bf00      	nop
 8007196:	3714      	adds	r7, #20
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr

080071a0 <adBms6830CreatePwmb>:
 * @return None
 *
 *******************************************************************************
*/
void adBms6830CreatePwmb(uint8_t tIC, cell_asic *ic)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b085      	sub	sp, #20
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	4603      	mov	r3, r0
 80071a8:	6039      	str	r1, [r7, #0]
 80071aa:	71fb      	strb	r3, [r7, #7]
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 80071ac:	2300      	movs	r3, #0
 80071ae:	73fb      	strb	r3, [r7, #15]
 80071b0:	e04a      	b.n	8007248 <adBms6830CreatePwmb+0xa8>
  {
    ic[curr_ic].pwmb.tx_data[0] = ((ic[curr_ic].PwmB.pwmb[1] & 0x0F) << 4 | (ic[curr_ic].PwmB.pwmb[0] & 0x0F));
 80071b2:	7bfb      	ldrb	r3, [r7, #15]
 80071b4:	f44f 724a 	mov.w	r2, #808	; 0x328
 80071b8:	fb02 f303 	mul.w	r3, r2, r3
 80071bc:	683a      	ldr	r2, [r7, #0]
 80071be:	4413      	add	r3, r2
 80071c0:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 80071c4:	011b      	lsls	r3, r3, #4
 80071c6:	b25a      	sxtb	r2, r3
 80071c8:	7bfb      	ldrb	r3, [r7, #15]
 80071ca:	f44f 714a 	mov.w	r1, #808	; 0x328
 80071ce:	fb01 f303 	mul.w	r3, r1, r3
 80071d2:	6839      	ldr	r1, [r7, #0]
 80071d4:	440b      	add	r3, r1
 80071d6:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 80071da:	b25b      	sxtb	r3, r3
 80071dc:	f003 030f 	and.w	r3, r3, #15
 80071e0:	b25b      	sxtb	r3, r3
 80071e2:	4313      	orrs	r3, r2
 80071e4:	b259      	sxtb	r1, r3
 80071e6:	7bfb      	ldrb	r3, [r7, #15]
 80071e8:	f44f 724a 	mov.w	r2, #808	; 0x328
 80071ec:	fb02 f303 	mul.w	r3, r2, r3
 80071f0:	683a      	ldr	r2, [r7, #0]
 80071f2:	4413      	add	r3, r2
 80071f4:	b2ca      	uxtb	r2, r1
 80071f6:	f883 2173 	strb.w	r2, [r3, #371]	; 0x173
    ic[curr_ic].pwmb.tx_data[1] = ((ic[curr_ic].PwmB.pwmb[3] & 0x0F) << 4 | (ic[curr_ic].PwmB.pwmb[2] & 0x0F));
 80071fa:	7bfb      	ldrb	r3, [r7, #15]
 80071fc:	f44f 724a 	mov.w	r2, #808	; 0x328
 8007200:	fb02 f303 	mul.w	r3, r2, r3
 8007204:	683a      	ldr	r2, [r7, #0]
 8007206:	4413      	add	r3, r2
 8007208:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800720c:	011b      	lsls	r3, r3, #4
 800720e:	b25a      	sxtb	r2, r3
 8007210:	7bfb      	ldrb	r3, [r7, #15]
 8007212:	f44f 714a 	mov.w	r1, #808	; 0x328
 8007216:	fb01 f303 	mul.w	r3, r1, r3
 800721a:	6839      	ldr	r1, [r7, #0]
 800721c:	440b      	add	r3, r1
 800721e:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 8007222:	b25b      	sxtb	r3, r3
 8007224:	f003 030f 	and.w	r3, r3, #15
 8007228:	b25b      	sxtb	r3, r3
 800722a:	4313      	orrs	r3, r2
 800722c:	b259      	sxtb	r1, r3
 800722e:	7bfb      	ldrb	r3, [r7, #15]
 8007230:	f44f 724a 	mov.w	r2, #808	; 0x328
 8007234:	fb02 f303 	mul.w	r3, r2, r3
 8007238:	683a      	ldr	r2, [r7, #0]
 800723a:	4413      	add	r3, r2
 800723c:	b2ca      	uxtb	r2, r1
 800723e:	f883 2174 	strb.w	r2, [r3, #372]	; 0x174
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8007242:	7bfb      	ldrb	r3, [r7, #15]
 8007244:	3301      	adds	r3, #1
 8007246:	73fb      	strb	r3, [r7, #15]
 8007248:	7bfa      	ldrb	r2, [r7, #15]
 800724a:	79fb      	ldrb	r3, [r7, #7]
 800724c:	429a      	cmp	r2, r3
 800724e:	d3b0      	bcc.n	80071b2 <adBms6830CreatePwmb+0x12>
  }
}
 8007250:	bf00      	nop
 8007252:	bf00      	nop
 8007254:	3714      	adds	r7, #20
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr
	...

08007260 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b082      	sub	sp, #8
 8007264:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007266:	f003 fa0f 	bl	800a688 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800726a:	f000 f8c9 	bl	8007400 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800726e:	f000 fb77 	bl	8007960 <MX_GPIO_Init>
  MX_DMA_Init();
 8007272:	f000 fb55 	bl	8007920 <MX_DMA_Init>
  MX_ADC1_Init();
 8007276:	f000 f931 	bl	80074dc <MX_ADC1_Init>
  MX_TIM2_Init();
 800727a:	f000 fadb 	bl	8007834 <MX_TIM2_Init>
  MX_SPI1_Init();
 800727e:	f000 fa1b 	bl	80076b8 <MX_SPI1_Init>
  MX_SPI2_Init();
 8007282:	f000 fa4f 	bl	8007724 <MX_SPI2_Init>
  MX_I2C1_Init();
 8007286:	f000 f9e9 	bl	800765c <MX_I2C1_Init>
  MX_USART3_UART_Init();
 800728a:	f000 fb1f 	bl	80078cc <MX_USART3_UART_Init>
  MX_TIM1_Init();
 800728e:	f000 fa7f 	bl	8007790 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 8007292:	f011 ff8f 	bl	80191b4 <MX_USB_DEVICE_Init>
  MX_CAN1_Init();
 8007296:	f000 f98f 	bl	80075b8 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(1000);
 800729a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800729e:	f003 fa35 	bl	800a70c <HAL_Delay>
//
//
//   EEPROM_SetConfigs((uint8_t *) MAINBUFFER, sizeof(MAINBUFFER));
//

    EEPROM_GetConfigs((uint8_t *) MAINBUFFER, sizeof(MAINBUFFER));
 80072a2:	2150      	movs	r1, #80	; 0x50
 80072a4:	483b      	ldr	r0, [pc, #236]	; (8007394 <main+0x134>)
 80072a6:	f7fb fc89 	bl	8002bbc <EEPROM_GetConfigs>
    MAINBUFFER[34]=-31.31;
 80072aa:	4b3a      	ldr	r3, [pc, #232]	; (8007394 <main+0x134>)
 80072ac:	2200      	movs	r2, #0
 80072ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    MAINBUFFER[33]= 4000;
 80072b2:	4b38      	ldr	r3, [pc, #224]	; (8007394 <main+0x134>)
 80072b4:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80072b8:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    MAINBUFFER[CHARGER_SET_VOLTAGE] = 40310;
 80072bc:	4b35      	ldr	r3, [pc, #212]	; (8007394 <main+0x134>)
 80072be:	f649 5276 	movw	r2, #40310	; 0x9d76
 80072c2:	80da      	strh	r2, [r3, #6]


	HAL_ADC_Start_DMA(&hadc1,  adc_buffer, 3);
 80072c4:	2203      	movs	r2, #3
 80072c6:	4934      	ldr	r1, [pc, #208]	; (8007398 <main+0x138>)
 80072c8:	4834      	ldr	r0, [pc, #208]	; (800739c <main+0x13c>)
 80072ca:	f003 fb97 	bl	800a9fc <HAL_ADC_Start_DMA>
	HAL_CAN_Start(&hcan1);
 80072ce:	4834      	ldr	r0, [pc, #208]	; (80073a0 <main+0x140>)
 80072d0:	f004 f97a 	bl	800b5c8 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80072d4:	2102      	movs	r1, #2
 80072d6:	4832      	ldr	r0, [pc, #200]	; (80073a0 <main+0x140>)
 80072d8:	f004 fbf0 	bl	800babc <HAL_CAN_ActivateNotification>
//	HAL_GPIO_WritePin(GPIO, GPIO_Pin, PinState)
	TxHeader.IDE = CAN_ID_STD;
 80072dc:	4b31      	ldr	r3, [pc, #196]	; (80073a4 <main+0x144>)
 80072de:	2200      	movs	r2, #0
 80072e0:	609a      	str	r2, [r3, #8]
	TxHeader.StdId = 0x00; //değişecek
 80072e2:	4b30      	ldr	r3, [pc, #192]	; (80073a4 <main+0x144>)
 80072e4:	2200      	movs	r2, #0
 80072e6:	601a      	str	r2, [r3, #0]
	TxHeader.RTR = CAN_RTR_DATA;
 80072e8:	4b2e      	ldr	r3, [pc, #184]	; (80073a4 <main+0x144>)
 80072ea:	2200      	movs	r2, #0
 80072ec:	60da      	str	r2, [r3, #12]
	TxHeader.DLC = 8; //değişebilir
 80072ee:	4b2d      	ldr	r3, [pc, #180]	; (80073a4 <main+0x144>)
 80072f0:	2208      	movs	r2, #8
 80072f2:	611a      	str	r2, [r3, #16]
//	}


//	HAL_TIM_Base_Start(&htim1);

	adBms6830_init_config(total_ic, &ic[0]);
 80072f4:	492c      	ldr	r1, [pc, #176]	; (80073a8 <main+0x148>)
 80072f6:	2006      	movs	r0, #6
 80072f8:	f7f9 fe9a 	bl	8001030 <adBms6830_init_config>
	//FREERTOS TASK CREATION PART

	//SEGGER_SYSVIEW_Conf();
	//SEGGER_SYSVIEW_Start();

	xTaskCreate(vVoltageRead, "VoltageRead", 300, NULL, 2, &VoltageRead);
 80072fc:	4b2b      	ldr	r3, [pc, #172]	; (80073ac <main+0x14c>)
 80072fe:	9301      	str	r3, [sp, #4]
 8007300:	2302      	movs	r3, #2
 8007302:	9300      	str	r3, [sp, #0]
 8007304:	2300      	movs	r3, #0
 8007306:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800730a:	4929      	ldr	r1, [pc, #164]	; (80073b0 <main+0x150>)
 800730c:	4829      	ldr	r0, [pc, #164]	; (80073b4 <main+0x154>)
 800730e:	f00f ff17 	bl	8017140 <xTaskCreate>
	xTaskCreate(vTemp_OWire, "Temp_OWire", 400, NULL, 3, &Temp_OWire);
 8007312:	4b29      	ldr	r3, [pc, #164]	; (80073b8 <main+0x158>)
 8007314:	9301      	str	r3, [sp, #4]
 8007316:	2303      	movs	r3, #3
 8007318:	9300      	str	r3, [sp, #0]
 800731a:	2300      	movs	r3, #0
 800731c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8007320:	4926      	ldr	r1, [pc, #152]	; (80073bc <main+0x15c>)
 8007322:	4827      	ldr	r0, [pc, #156]	; (80073c0 <main+0x160>)
 8007324:	f00f ff0c 	bl	8017140 <xTaskCreate>
	xTaskCreate(vMeasure_Precharge, "Measure_Precharge", 200, NULL, 1, &Measure_Precharge);
 8007328:	4b26      	ldr	r3, [pc, #152]	; (80073c4 <main+0x164>)
 800732a:	9301      	str	r3, [sp, #4]
 800732c:	2301      	movs	r3, #1
 800732e:	9300      	str	r3, [sp, #0]
 8007330:	2300      	movs	r3, #0
 8007332:	22c8      	movs	r2, #200	; 0xc8
 8007334:	4924      	ldr	r1, [pc, #144]	; (80073c8 <main+0x168>)
 8007336:	4825      	ldr	r0, [pc, #148]	; (80073cc <main+0x16c>)
 8007338:	f00f ff02 	bl	8017140 <xTaskCreate>
	xTaskCreate(vChargeControl, "ChargeControl", 200, NULL, 5, &ChargeControl);
 800733c:	4b24      	ldr	r3, [pc, #144]	; (80073d0 <main+0x170>)
 800733e:	9301      	str	r3, [sp, #4]
 8007340:	2305      	movs	r3, #5
 8007342:	9300      	str	r3, [sp, #0]
 8007344:	2300      	movs	r3, #0
 8007346:	22c8      	movs	r2, #200	; 0xc8
 8007348:	4922      	ldr	r1, [pc, #136]	; (80073d4 <main+0x174>)
 800734a:	4823      	ldr	r0, [pc, #140]	; (80073d8 <main+0x178>)
 800734c:	f00f fef8 	bl	8017140 <xTaskCreate>
	xTaskCreate(vVCUcom, "VCUcom", 200, NULL, 6, &VCUcom);
 8007350:	4b22      	ldr	r3, [pc, #136]	; (80073dc <main+0x17c>)
 8007352:	9301      	str	r3, [sp, #4]
 8007354:	2306      	movs	r3, #6
 8007356:	9300      	str	r3, [sp, #0]
 8007358:	2300      	movs	r3, #0
 800735a:	22c8      	movs	r2, #200	; 0xc8
 800735c:	4920      	ldr	r1, [pc, #128]	; (80073e0 <main+0x180>)
 800735e:	4821      	ldr	r0, [pc, #132]	; (80073e4 <main+0x184>)
 8007360:	f00f feee 	bl	8017140 <xTaskCreate>
	xTaskCreate(vUSBTASK, "USBTASK", 200, NULL, 15, &USBTASK);
 8007364:	4b20      	ldr	r3, [pc, #128]	; (80073e8 <main+0x188>)
 8007366:	9301      	str	r3, [sp, #4]
 8007368:	230f      	movs	r3, #15
 800736a:	9300      	str	r3, [sp, #0]
 800736c:	2300      	movs	r3, #0
 800736e:	22c8      	movs	r2, #200	; 0xc8
 8007370:	491e      	ldr	r1, [pc, #120]	; (80073ec <main+0x18c>)
 8007372:	481f      	ldr	r0, [pc, #124]	; (80073f0 <main+0x190>)
 8007374:	f00f fee4 	bl	8017140 <xTaskCreate>
	xTaskCreate(vSoCTASK, "SoCTASK", 200, NULL, 4, &SoCTASK);
 8007378:	4b1e      	ldr	r3, [pc, #120]	; (80073f4 <main+0x194>)
 800737a:	9301      	str	r3, [sp, #4]
 800737c:	2304      	movs	r3, #4
 800737e:	9300      	str	r3, [sp, #0]
 8007380:	2300      	movs	r3, #0
 8007382:	22c8      	movs	r2, #200	; 0xc8
 8007384:	491c      	ldr	r1, [pc, #112]	; (80073f8 <main+0x198>)
 8007386:	481d      	ldr	r0, [pc, #116]	; (80073fc <main+0x19c>)
 8007388:	f00f feda 	bl	8017140 <xTaskCreate>
	vTaskStartScheduler();
 800738c:	f010 f90a 	bl	80175a4 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8007390:	e7fe      	b.n	8007390 <main+0x130>
 8007392:	bf00      	nop
 8007394:	200024b8 	.word	0x200024b8
 8007398:	200018f8 	.word	0x200018f8
 800739c:	20000350 	.word	0x20000350
 80073a0:	200003f8 	.word	0x200003f8
 80073a4:	20002508 	.word	0x20002508
 80073a8:	200005f8 	.word	0x200005f8
 80073ac:	20002550 	.word	0x20002550
 80073b0:	0801fdec 	.word	0x0801fdec
 80073b4:	08007b51 	.word	0x08007b51
 80073b8:	20002554 	.word	0x20002554
 80073bc:	0801fdf8 	.word	0x0801fdf8
 80073c0:	08008049 	.word	0x08008049
 80073c4:	20002558 	.word	0x20002558
 80073c8:	0801fe04 	.word	0x0801fe04
 80073cc:	08008bc9 	.word	0x08008bc9
 80073d0:	2000255c 	.word	0x2000255c
 80073d4:	0801fe18 	.word	0x0801fe18
 80073d8:	080092d9 	.word	0x080092d9
 80073dc:	20002560 	.word	0x20002560
 80073e0:	0801fe28 	.word	0x0801fe28
 80073e4:	08009699 	.word	0x08009699
 80073e8:	20002564 	.word	0x20002564
 80073ec:	0801fe30 	.word	0x0801fe30
 80073f0:	080097c9 	.word	0x080097c9
 80073f4:	20002568 	.word	0x20002568
 80073f8:	0801fe38 	.word	0x0801fe38
 80073fc:	08009151 	.word	0x08009151

08007400 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b094      	sub	sp, #80	; 0x50
 8007404:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007406:	f107 031c 	add.w	r3, r7, #28
 800740a:	2234      	movs	r2, #52	; 0x34
 800740c:	2100      	movs	r1, #0
 800740e:	4618      	mov	r0, r3
 8007410:	f014 f9f8 	bl	801b804 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007414:	f107 0308 	add.w	r3, r7, #8
 8007418:	2200      	movs	r2, #0
 800741a:	601a      	str	r2, [r3, #0]
 800741c:	605a      	str	r2, [r3, #4]
 800741e:	609a      	str	r2, [r3, #8]
 8007420:	60da      	str	r2, [r3, #12]
 8007422:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8007424:	2300      	movs	r3, #0
 8007426:	607b      	str	r3, [r7, #4]
 8007428:	4b2a      	ldr	r3, [pc, #168]	; (80074d4 <SystemClock_Config+0xd4>)
 800742a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800742c:	4a29      	ldr	r2, [pc, #164]	; (80074d4 <SystemClock_Config+0xd4>)
 800742e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007432:	6413      	str	r3, [r2, #64]	; 0x40
 8007434:	4b27      	ldr	r3, [pc, #156]	; (80074d4 <SystemClock_Config+0xd4>)
 8007436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007438:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800743c:	607b      	str	r3, [r7, #4]
 800743e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8007440:	2300      	movs	r3, #0
 8007442:	603b      	str	r3, [r7, #0]
 8007444:	4b24      	ldr	r3, [pc, #144]	; (80074d8 <SystemClock_Config+0xd8>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800744c:	4a22      	ldr	r2, [pc, #136]	; (80074d8 <SystemClock_Config+0xd8>)
 800744e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007452:	6013      	str	r3, [r2, #0]
 8007454:	4b20      	ldr	r3, [pc, #128]	; (80074d8 <SystemClock_Config+0xd8>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800745c:	603b      	str	r3, [r7, #0]
 800745e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007460:	2301      	movs	r3, #1
 8007462:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007464:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007468:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800746a:	2302      	movs	r3, #2
 800746c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800746e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007472:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 15;
 8007474:	230f      	movs	r3, #15
 8007476:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 144;
 8007478:	2390      	movs	r3, #144	; 0x90
 800747a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800747c:	2302      	movs	r3, #2
 800747e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8007480:	2305      	movs	r3, #5
 8007482:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8007484:	2302      	movs	r3, #2
 8007486:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007488:	f107 031c 	add.w	r3, r7, #28
 800748c:	4618      	mov	r0, r3
 800748e:	f008 fd51 	bl	800ff34 <HAL_RCC_OscConfig>
 8007492:	4603      	mov	r3, r0
 8007494:	2b00      	cmp	r3, #0
 8007496:	d001      	beq.n	800749c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8007498:	f002 fd2a 	bl	8009ef0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800749c:	230f      	movs	r3, #15
 800749e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80074a0:	2302      	movs	r3, #2
 80074a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80074a4:	2300      	movs	r3, #0
 80074a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80074a8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80074ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80074ae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80074b2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80074b4:	f107 0308 	add.w	r3, r7, #8
 80074b8:	2103      	movs	r1, #3
 80074ba:	4618      	mov	r0, r3
 80074bc:	f007 ff1a 	bl	800f2f4 <HAL_RCC_ClockConfig>
 80074c0:	4603      	mov	r3, r0
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d001      	beq.n	80074ca <SystemClock_Config+0xca>
  {
    Error_Handler();
 80074c6:	f002 fd13 	bl	8009ef0 <Error_Handler>
  }
}
 80074ca:	bf00      	nop
 80074cc:	3750      	adds	r7, #80	; 0x50
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
 80074d2:	bf00      	nop
 80074d4:	40023800 	.word	0x40023800
 80074d8:	40007000 	.word	0x40007000

080074dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b084      	sub	sp, #16
 80074e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80074e2:	463b      	mov	r3, r7
 80074e4:	2200      	movs	r2, #0
 80074e6:	601a      	str	r2, [r3, #0]
 80074e8:	605a      	str	r2, [r3, #4]
 80074ea:	609a      	str	r2, [r3, #8]
 80074ec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80074ee:	4b2f      	ldr	r3, [pc, #188]	; (80075ac <MX_ADC1_Init+0xd0>)
 80074f0:	4a2f      	ldr	r2, [pc, #188]	; (80075b0 <MX_ADC1_Init+0xd4>)
 80074f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80074f4:	4b2d      	ldr	r3, [pc, #180]	; (80075ac <MX_ADC1_Init+0xd0>)
 80074f6:	2200      	movs	r2, #0
 80074f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80074fa:	4b2c      	ldr	r3, [pc, #176]	; (80075ac <MX_ADC1_Init+0xd0>)
 80074fc:	2200      	movs	r2, #0
 80074fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8007500:	4b2a      	ldr	r3, [pc, #168]	; (80075ac <MX_ADC1_Init+0xd0>)
 8007502:	2201      	movs	r2, #1
 8007504:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8007506:	4b29      	ldr	r3, [pc, #164]	; (80075ac <MX_ADC1_Init+0xd0>)
 8007508:	2201      	movs	r2, #1
 800750a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800750c:	4b27      	ldr	r3, [pc, #156]	; (80075ac <MX_ADC1_Init+0xd0>)
 800750e:	2200      	movs	r2, #0
 8007510:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007514:	4b25      	ldr	r3, [pc, #148]	; (80075ac <MX_ADC1_Init+0xd0>)
 8007516:	2200      	movs	r2, #0
 8007518:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800751a:	4b24      	ldr	r3, [pc, #144]	; (80075ac <MX_ADC1_Init+0xd0>)
 800751c:	4a25      	ldr	r2, [pc, #148]	; (80075b4 <MX_ADC1_Init+0xd8>)
 800751e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007520:	4b22      	ldr	r3, [pc, #136]	; (80075ac <MX_ADC1_Init+0xd0>)
 8007522:	2200      	movs	r2, #0
 8007524:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8007526:	4b21      	ldr	r3, [pc, #132]	; (80075ac <MX_ADC1_Init+0xd0>)
 8007528:	2203      	movs	r2, #3
 800752a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800752c:	4b1f      	ldr	r3, [pc, #124]	; (80075ac <MX_ADC1_Init+0xd0>)
 800752e:	2201      	movs	r2, #1
 8007530:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007534:	4b1d      	ldr	r3, [pc, #116]	; (80075ac <MX_ADC1_Init+0xd0>)
 8007536:	2201      	movs	r2, #1
 8007538:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800753a:	481c      	ldr	r0, [pc, #112]	; (80075ac <MX_ADC1_Init+0xd0>)
 800753c:	f003 f90a 	bl	800a754 <HAL_ADC_Init>
 8007540:	4603      	mov	r3, r0
 8007542:	2b00      	cmp	r3, #0
 8007544:	d001      	beq.n	800754a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8007546:	f002 fcd3 	bl	8009ef0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800754a:	2301      	movs	r3, #1
 800754c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800754e:	2301      	movs	r3, #1
 8007550:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8007552:	2305      	movs	r3, #5
 8007554:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007556:	463b      	mov	r3, r7
 8007558:	4619      	mov	r1, r3
 800755a:	4814      	ldr	r0, [pc, #80]	; (80075ac <MX_ADC1_Init+0xd0>)
 800755c:	f003 fb7c 	bl	800ac58 <HAL_ADC_ConfigChannel>
 8007560:	4603      	mov	r3, r0
 8007562:	2b00      	cmp	r3, #0
 8007564:	d001      	beq.n	800756a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8007566:	f002 fcc3 	bl	8009ef0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800756a:	2302      	movs	r3, #2
 800756c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800756e:	2302      	movs	r3, #2
 8007570:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007572:	463b      	mov	r3, r7
 8007574:	4619      	mov	r1, r3
 8007576:	480d      	ldr	r0, [pc, #52]	; (80075ac <MX_ADC1_Init+0xd0>)
 8007578:	f003 fb6e 	bl	800ac58 <HAL_ADC_ConfigChannel>
 800757c:	4603      	mov	r3, r0
 800757e:	2b00      	cmp	r3, #0
 8007580:	d001      	beq.n	8007586 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8007582:	f002 fcb5 	bl	8009ef0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8007586:	2304      	movs	r3, #4
 8007588:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800758a:	2303      	movs	r3, #3
 800758c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800758e:	463b      	mov	r3, r7
 8007590:	4619      	mov	r1, r3
 8007592:	4806      	ldr	r0, [pc, #24]	; (80075ac <MX_ADC1_Init+0xd0>)
 8007594:	f003 fb60 	bl	800ac58 <HAL_ADC_ConfigChannel>
 8007598:	4603      	mov	r3, r0
 800759a:	2b00      	cmp	r3, #0
 800759c:	d001      	beq.n	80075a2 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800759e:	f002 fca7 	bl	8009ef0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80075a2:	bf00      	nop
 80075a4:	3710      	adds	r7, #16
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}
 80075aa:	bf00      	nop
 80075ac:	20000350 	.word	0x20000350
 80075b0:	40012000 	.word	0x40012000
 80075b4:	0f000001 	.word	0x0f000001

080075b8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b08a      	sub	sp, #40	; 0x28
 80075bc:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80075be:	4b25      	ldr	r3, [pc, #148]	; (8007654 <MX_CAN1_Init+0x9c>)
 80075c0:	4a25      	ldr	r2, [pc, #148]	; (8007658 <MX_CAN1_Init+0xa0>)
 80075c2:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 12;
 80075c4:	4b23      	ldr	r3, [pc, #140]	; (8007654 <MX_CAN1_Init+0x9c>)
 80075c6:	220c      	movs	r2, #12
 80075c8:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80075ca:	4b22      	ldr	r3, [pc, #136]	; (8007654 <MX_CAN1_Init+0x9c>)
 80075cc:	2200      	movs	r2, #0
 80075ce:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80075d0:	4b20      	ldr	r3, [pc, #128]	; (8007654 <MX_CAN1_Init+0x9c>)
 80075d2:	2200      	movs	r2, #0
 80075d4:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 80075d6:	4b1f      	ldr	r3, [pc, #124]	; (8007654 <MX_CAN1_Init+0x9c>)
 80075d8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80075dc:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80075de:	4b1d      	ldr	r3, [pc, #116]	; (8007654 <MX_CAN1_Init+0x9c>)
 80075e0:	2200      	movs	r2, #0
 80075e2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80075e4:	4b1b      	ldr	r3, [pc, #108]	; (8007654 <MX_CAN1_Init+0x9c>)
 80075e6:	2200      	movs	r2, #0
 80075e8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80075ea:	4b1a      	ldr	r3, [pc, #104]	; (8007654 <MX_CAN1_Init+0x9c>)
 80075ec:	2200      	movs	r2, #0
 80075ee:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80075f0:	4b18      	ldr	r3, [pc, #96]	; (8007654 <MX_CAN1_Init+0x9c>)
 80075f2:	2200      	movs	r2, #0
 80075f4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80075f6:	4b17      	ldr	r3, [pc, #92]	; (8007654 <MX_CAN1_Init+0x9c>)
 80075f8:	2200      	movs	r2, #0
 80075fa:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80075fc:	4b15      	ldr	r3, [pc, #84]	; (8007654 <MX_CAN1_Init+0x9c>)
 80075fe:	2200      	movs	r2, #0
 8007600:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8007602:	4b14      	ldr	r3, [pc, #80]	; (8007654 <MX_CAN1_Init+0x9c>)
 8007604:	2200      	movs	r2, #0
 8007606:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8007608:	4812      	ldr	r0, [pc, #72]	; (8007654 <MX_CAN1_Init+0x9c>)
 800760a:	f003 fddf 	bl	800b1cc <HAL_CAN_Init>
 800760e:	4603      	mov	r3, r0
 8007610:	2b00      	cmp	r3, #0
 8007612:	d001      	beq.n	8007618 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8007614:	f002 fc6c 	bl	8009ef0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8007618:	2301      	movs	r3, #1
 800761a:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 18;  // which filter bank to use from the assigned ones
 800761c:	2312      	movs	r3, #18
 800761e:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8007620:	2300      	movs	r3, #0
 8007622:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x00;
 8007624:	2300      	movs	r3, #0
 8007626:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0x00;
 8007628:	2300      	movs	r3, #0
 800762a:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x00;
 800762c:	2300      	movs	r3, #0
 800762e:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x00;
 8007630:	2300      	movs	r3, #0
 8007632:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8007634:	2300      	movs	r3, #0
 8007636:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8007638:	2301      	movs	r3, #1
 800763a:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)
 800763c:	2314      	movs	r3, #20
 800763e:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8007640:	463b      	mov	r3, r7
 8007642:	4619      	mov	r1, r3
 8007644:	4803      	ldr	r0, [pc, #12]	; (8007654 <MX_CAN1_Init+0x9c>)
 8007646:	f003 fedf 	bl	800b408 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 800764a:	bf00      	nop
 800764c:	3728      	adds	r7, #40	; 0x28
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}
 8007652:	bf00      	nop
 8007654:	200003f8 	.word	0x200003f8
 8007658:	40006400 	.word	0x40006400

0800765c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007660:	4b12      	ldr	r3, [pc, #72]	; (80076ac <MX_I2C1_Init+0x50>)
 8007662:	4a13      	ldr	r2, [pc, #76]	; (80076b0 <MX_I2C1_Init+0x54>)
 8007664:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8007666:	4b11      	ldr	r3, [pc, #68]	; (80076ac <MX_I2C1_Init+0x50>)
 8007668:	4a12      	ldr	r2, [pc, #72]	; (80076b4 <MX_I2C1_Init+0x58>)
 800766a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800766c:	4b0f      	ldr	r3, [pc, #60]	; (80076ac <MX_I2C1_Init+0x50>)
 800766e:	2200      	movs	r2, #0
 8007670:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8007672:	4b0e      	ldr	r3, [pc, #56]	; (80076ac <MX_I2C1_Init+0x50>)
 8007674:	2200      	movs	r2, #0
 8007676:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007678:	4b0c      	ldr	r3, [pc, #48]	; (80076ac <MX_I2C1_Init+0x50>)
 800767a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800767e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007680:	4b0a      	ldr	r3, [pc, #40]	; (80076ac <MX_I2C1_Init+0x50>)
 8007682:	2200      	movs	r2, #0
 8007684:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8007686:	4b09      	ldr	r3, [pc, #36]	; (80076ac <MX_I2C1_Init+0x50>)
 8007688:	2200      	movs	r2, #0
 800768a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800768c:	4b07      	ldr	r3, [pc, #28]	; (80076ac <MX_I2C1_Init+0x50>)
 800768e:	2200      	movs	r2, #0
 8007690:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007692:	4b06      	ldr	r3, [pc, #24]	; (80076ac <MX_I2C1_Init+0x50>)
 8007694:	2200      	movs	r2, #0
 8007696:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007698:	4804      	ldr	r0, [pc, #16]	; (80076ac <MX_I2C1_Init+0x50>)
 800769a:	f005 fba3 	bl	800cde4 <HAL_I2C_Init>
 800769e:	4603      	mov	r3, r0
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d001      	beq.n	80076a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80076a4:	f002 fc24 	bl	8009ef0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80076a8:	bf00      	nop
 80076aa:	bd80      	pop	{r7, pc}
 80076ac:	20000420 	.word	0x20000420
 80076b0:	40005400 	.word	0x40005400
 80076b4:	00061a80 	.word	0x00061a80

080076b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80076bc:	4b17      	ldr	r3, [pc, #92]	; (800771c <MX_SPI1_Init+0x64>)
 80076be:	4a18      	ldr	r2, [pc, #96]	; (8007720 <MX_SPI1_Init+0x68>)
 80076c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80076c2:	4b16      	ldr	r3, [pc, #88]	; (800771c <MX_SPI1_Init+0x64>)
 80076c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80076c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80076ca:	4b14      	ldr	r3, [pc, #80]	; (800771c <MX_SPI1_Init+0x64>)
 80076cc:	2200      	movs	r2, #0
 80076ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80076d0:	4b12      	ldr	r3, [pc, #72]	; (800771c <MX_SPI1_Init+0x64>)
 80076d2:	2200      	movs	r2, #0
 80076d4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80076d6:	4b11      	ldr	r3, [pc, #68]	; (800771c <MX_SPI1_Init+0x64>)
 80076d8:	2200      	movs	r2, #0
 80076da:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80076dc:	4b0f      	ldr	r3, [pc, #60]	; (800771c <MX_SPI1_Init+0x64>)
 80076de:	2200      	movs	r2, #0
 80076e0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80076e2:	4b0e      	ldr	r3, [pc, #56]	; (800771c <MX_SPI1_Init+0x64>)
 80076e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80076e8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80076ea:	4b0c      	ldr	r3, [pc, #48]	; (800771c <MX_SPI1_Init+0x64>)
 80076ec:	2230      	movs	r2, #48	; 0x30
 80076ee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80076f0:	4b0a      	ldr	r3, [pc, #40]	; (800771c <MX_SPI1_Init+0x64>)
 80076f2:	2200      	movs	r2, #0
 80076f4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80076f6:	4b09      	ldr	r3, [pc, #36]	; (800771c <MX_SPI1_Init+0x64>)
 80076f8:	2200      	movs	r2, #0
 80076fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80076fc:	4b07      	ldr	r3, [pc, #28]	; (800771c <MX_SPI1_Init+0x64>)
 80076fe:	2200      	movs	r2, #0
 8007700:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8007702:	4b06      	ldr	r3, [pc, #24]	; (800771c <MX_SPI1_Init+0x64>)
 8007704:	220a      	movs	r2, #10
 8007706:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8007708:	4804      	ldr	r0, [pc, #16]	; (800771c <MX_SPI1_Init+0x64>)
 800770a:	f008 feb5 	bl	8010478 <HAL_SPI_Init>
 800770e:	4603      	mov	r3, r0
 8007710:	2b00      	cmp	r3, #0
 8007712:	d001      	beq.n	8007718 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8007714:	f002 fbec 	bl	8009ef0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8007718:	bf00      	nop
 800771a:	bd80      	pop	{r7, pc}
 800771c:	20000474 	.word	0x20000474
 8007720:	40013000 	.word	0x40013000

08007724 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8007728:	4b17      	ldr	r3, [pc, #92]	; (8007788 <MX_SPI2_Init+0x64>)
 800772a:	4a18      	ldr	r2, [pc, #96]	; (800778c <MX_SPI2_Init+0x68>)
 800772c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800772e:	4b16      	ldr	r3, [pc, #88]	; (8007788 <MX_SPI2_Init+0x64>)
 8007730:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007734:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8007736:	4b14      	ldr	r3, [pc, #80]	; (8007788 <MX_SPI2_Init+0x64>)
 8007738:	2200      	movs	r2, #0
 800773a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800773c:	4b12      	ldr	r3, [pc, #72]	; (8007788 <MX_SPI2_Init+0x64>)
 800773e:	2200      	movs	r2, #0
 8007740:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007742:	4b11      	ldr	r3, [pc, #68]	; (8007788 <MX_SPI2_Init+0x64>)
 8007744:	2200      	movs	r2, #0
 8007746:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007748:	4b0f      	ldr	r3, [pc, #60]	; (8007788 <MX_SPI2_Init+0x64>)
 800774a:	2200      	movs	r2, #0
 800774c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800774e:	4b0e      	ldr	r3, [pc, #56]	; (8007788 <MX_SPI2_Init+0x64>)
 8007750:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007754:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8007756:	4b0c      	ldr	r3, [pc, #48]	; (8007788 <MX_SPI2_Init+0x64>)
 8007758:	2218      	movs	r2, #24
 800775a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800775c:	4b0a      	ldr	r3, [pc, #40]	; (8007788 <MX_SPI2_Init+0x64>)
 800775e:	2200      	movs	r2, #0
 8007760:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8007762:	4b09      	ldr	r3, [pc, #36]	; (8007788 <MX_SPI2_Init+0x64>)
 8007764:	2200      	movs	r2, #0
 8007766:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007768:	4b07      	ldr	r3, [pc, #28]	; (8007788 <MX_SPI2_Init+0x64>)
 800776a:	2200      	movs	r2, #0
 800776c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800776e:	4b06      	ldr	r3, [pc, #24]	; (8007788 <MX_SPI2_Init+0x64>)
 8007770:	220a      	movs	r2, #10
 8007772:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8007774:	4804      	ldr	r0, [pc, #16]	; (8007788 <MX_SPI2_Init+0x64>)
 8007776:	f008 fe7f 	bl	8010478 <HAL_SPI_Init>
 800777a:	4603      	mov	r3, r0
 800777c:	2b00      	cmp	r3, #0
 800777e:	d001      	beq.n	8007784 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8007780:	f002 fbb6 	bl	8009ef0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8007784:	bf00      	nop
 8007786:	bd80      	pop	{r7, pc}
 8007788:	200004cc 	.word	0x200004cc
 800778c:	40003800 	.word	0x40003800

08007790 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b086      	sub	sp, #24
 8007794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007796:	f107 0308 	add.w	r3, r7, #8
 800779a:	2200      	movs	r2, #0
 800779c:	601a      	str	r2, [r3, #0]
 800779e:	605a      	str	r2, [r3, #4]
 80077a0:	609a      	str	r2, [r3, #8]
 80077a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80077a4:	463b      	mov	r3, r7
 80077a6:	2200      	movs	r2, #0
 80077a8:	601a      	str	r2, [r3, #0]
 80077aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80077ac:	4b1f      	ldr	r3, [pc, #124]	; (800782c <MX_TIM1_Init+0x9c>)
 80077ae:	4a20      	ldr	r2, [pc, #128]	; (8007830 <MX_TIM1_Init+0xa0>)
 80077b0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 60000-1;
 80077b2:	4b1e      	ldr	r3, [pc, #120]	; (800782c <MX_TIM1_Init+0x9c>)
 80077b4:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80077b8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80077ba:	4b1c      	ldr	r3, [pc, #112]	; (800782c <MX_TIM1_Init+0x9c>)
 80077bc:	2200      	movs	r2, #0
 80077be:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80077c0:	4b1a      	ldr	r3, [pc, #104]	; (800782c <MX_TIM1_Init+0x9c>)
 80077c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80077c6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80077c8:	4b18      	ldr	r3, [pc, #96]	; (800782c <MX_TIM1_Init+0x9c>)
 80077ca:	2200      	movs	r2, #0
 80077cc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80077ce:	4b17      	ldr	r3, [pc, #92]	; (800782c <MX_TIM1_Init+0x9c>)
 80077d0:	2200      	movs	r2, #0
 80077d2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80077d4:	4b15      	ldr	r3, [pc, #84]	; (800782c <MX_TIM1_Init+0x9c>)
 80077d6:	2200      	movs	r2, #0
 80077d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80077da:	4814      	ldr	r0, [pc, #80]	; (800782c <MX_TIM1_Init+0x9c>)
 80077dc:	f009 fbf4 	bl	8010fc8 <HAL_TIM_Base_Init>
 80077e0:	4603      	mov	r3, r0
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d001      	beq.n	80077ea <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80077e6:	f002 fb83 	bl	8009ef0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80077ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80077ee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80077f0:	f107 0308 	add.w	r3, r7, #8
 80077f4:	4619      	mov	r1, r3
 80077f6:	480d      	ldr	r0, [pc, #52]	; (800782c <MX_TIM1_Init+0x9c>)
 80077f8:	f009 fdae 	bl	8011358 <HAL_TIM_ConfigClockSource>
 80077fc:	4603      	mov	r3, r0
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d001      	beq.n	8007806 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8007802:	f002 fb75 	bl	8009ef0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007806:	2300      	movs	r3, #0
 8007808:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800780a:	2300      	movs	r3, #0
 800780c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800780e:	463b      	mov	r3, r7
 8007810:	4619      	mov	r1, r3
 8007812:	4806      	ldr	r0, [pc, #24]	; (800782c <MX_TIM1_Init+0x9c>)
 8007814:	f009 ffca 	bl	80117ac <HAL_TIMEx_MasterConfigSynchronization>
 8007818:	4603      	mov	r3, r0
 800781a:	2b00      	cmp	r3, #0
 800781c:	d001      	beq.n	8007822 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800781e:	f002 fb67 	bl	8009ef0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8007822:	bf00      	nop
 8007824:	3718      	adds	r7, #24
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
 800782a:	bf00      	nop
 800782c:	20000524 	.word	0x20000524
 8007830:	40010000 	.word	0x40010000

08007834 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b086      	sub	sp, #24
 8007838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800783a:	f107 0308 	add.w	r3, r7, #8
 800783e:	2200      	movs	r2, #0
 8007840:	601a      	str	r2, [r3, #0]
 8007842:	605a      	str	r2, [r3, #4]
 8007844:	609a      	str	r2, [r3, #8]
 8007846:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007848:	463b      	mov	r3, r7
 800784a:	2200      	movs	r2, #0
 800784c:	601a      	str	r2, [r3, #0]
 800784e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8007850:	4b1d      	ldr	r3, [pc, #116]	; (80078c8 <MX_TIM2_Init+0x94>)
 8007852:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007856:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 56;
 8007858:	4b1b      	ldr	r3, [pc, #108]	; (80078c8 <MX_TIM2_Init+0x94>)
 800785a:	2238      	movs	r2, #56	; 0x38
 800785c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800785e:	4b1a      	ldr	r3, [pc, #104]	; (80078c8 <MX_TIM2_Init+0x94>)
 8007860:	2200      	movs	r2, #0
 8007862:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8007864:	4b18      	ldr	r3, [pc, #96]	; (80078c8 <MX_TIM2_Init+0x94>)
 8007866:	f240 32e7 	movw	r2, #999	; 0x3e7
 800786a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800786c:	4b16      	ldr	r3, [pc, #88]	; (80078c8 <MX_TIM2_Init+0x94>)
 800786e:	2200      	movs	r2, #0
 8007870:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007872:	4b15      	ldr	r3, [pc, #84]	; (80078c8 <MX_TIM2_Init+0x94>)
 8007874:	2200      	movs	r2, #0
 8007876:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8007878:	4813      	ldr	r0, [pc, #76]	; (80078c8 <MX_TIM2_Init+0x94>)
 800787a:	f009 fba5 	bl	8010fc8 <HAL_TIM_Base_Init>
 800787e:	4603      	mov	r3, r0
 8007880:	2b00      	cmp	r3, #0
 8007882:	d001      	beq.n	8007888 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8007884:	f002 fb34 	bl	8009ef0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007888:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800788c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800788e:	f107 0308 	add.w	r3, r7, #8
 8007892:	4619      	mov	r1, r3
 8007894:	480c      	ldr	r0, [pc, #48]	; (80078c8 <MX_TIM2_Init+0x94>)
 8007896:	f009 fd5f 	bl	8011358 <HAL_TIM_ConfigClockSource>
 800789a:	4603      	mov	r3, r0
 800789c:	2b00      	cmp	r3, #0
 800789e:	d001      	beq.n	80078a4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80078a0:	f002 fb26 	bl	8009ef0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80078a4:	2300      	movs	r3, #0
 80078a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80078a8:	2300      	movs	r3, #0
 80078aa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80078ac:	463b      	mov	r3, r7
 80078ae:	4619      	mov	r1, r3
 80078b0:	4805      	ldr	r0, [pc, #20]	; (80078c8 <MX_TIM2_Init+0x94>)
 80078b2:	f009 ff7b 	bl	80117ac <HAL_TIMEx_MasterConfigSynchronization>
 80078b6:	4603      	mov	r3, r0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d001      	beq.n	80078c0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80078bc:	f002 fb18 	bl	8009ef0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80078c0:	bf00      	nop
 80078c2:	3718      	adds	r7, #24
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}
 80078c8:	2000056c 	.word	0x2000056c

080078cc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80078d0:	4b11      	ldr	r3, [pc, #68]	; (8007918 <MX_USART3_UART_Init+0x4c>)
 80078d2:	4a12      	ldr	r2, [pc, #72]	; (800791c <MX_USART3_UART_Init+0x50>)
 80078d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80078d6:	4b10      	ldr	r3, [pc, #64]	; (8007918 <MX_USART3_UART_Init+0x4c>)
 80078d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80078dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80078de:	4b0e      	ldr	r3, [pc, #56]	; (8007918 <MX_USART3_UART_Init+0x4c>)
 80078e0:	2200      	movs	r2, #0
 80078e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80078e4:	4b0c      	ldr	r3, [pc, #48]	; (8007918 <MX_USART3_UART_Init+0x4c>)
 80078e6:	2200      	movs	r2, #0
 80078e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80078ea:	4b0b      	ldr	r3, [pc, #44]	; (8007918 <MX_USART3_UART_Init+0x4c>)
 80078ec:	2200      	movs	r2, #0
 80078ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80078f0:	4b09      	ldr	r3, [pc, #36]	; (8007918 <MX_USART3_UART_Init+0x4c>)
 80078f2:	220c      	movs	r2, #12
 80078f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80078f6:	4b08      	ldr	r3, [pc, #32]	; (8007918 <MX_USART3_UART_Init+0x4c>)
 80078f8:	2200      	movs	r2, #0
 80078fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80078fc:	4b06      	ldr	r3, [pc, #24]	; (8007918 <MX_USART3_UART_Init+0x4c>)
 80078fe:	2200      	movs	r2, #0
 8007900:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8007902:	4805      	ldr	r0, [pc, #20]	; (8007918 <MX_USART3_UART_Init+0x4c>)
 8007904:	f009 ffe2 	bl	80118cc <HAL_UART_Init>
 8007908:	4603      	mov	r3, r0
 800790a:	2b00      	cmp	r3, #0
 800790c:	d001      	beq.n	8007912 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800790e:	f002 faef 	bl	8009ef0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8007912:	bf00      	nop
 8007914:	bd80      	pop	{r7, pc}
 8007916:	bf00      	nop
 8007918:	200005b4 	.word	0x200005b4
 800791c:	40004800 	.word	0x40004800

08007920 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b082      	sub	sp, #8
 8007924:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8007926:	2300      	movs	r3, #0
 8007928:	607b      	str	r3, [r7, #4]
 800792a:	4b0c      	ldr	r3, [pc, #48]	; (800795c <MX_DMA_Init+0x3c>)
 800792c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800792e:	4a0b      	ldr	r2, [pc, #44]	; (800795c <MX_DMA_Init+0x3c>)
 8007930:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007934:	6313      	str	r3, [r2, #48]	; 0x30
 8007936:	4b09      	ldr	r3, [pc, #36]	; (800795c <MX_DMA_Init+0x3c>)
 8007938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800793a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800793e:	607b      	str	r3, [r7, #4]
 8007940:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8007942:	2200      	movs	r2, #0
 8007944:	2100      	movs	r1, #0
 8007946:	2038      	movs	r0, #56	; 0x38
 8007948:	f004 fbea 	bl	800c120 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800794c:	2038      	movs	r0, #56	; 0x38
 800794e:	f004 fc03 	bl	800c158 <HAL_NVIC_EnableIRQ>

}
 8007952:	bf00      	nop
 8007954:	3708      	adds	r7, #8
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
 800795a:	bf00      	nop
 800795c:	40023800 	.word	0x40023800

08007960 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b08a      	sub	sp, #40	; 0x28
 8007964:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007966:	f107 0314 	add.w	r3, r7, #20
 800796a:	2200      	movs	r2, #0
 800796c:	601a      	str	r2, [r3, #0]
 800796e:	605a      	str	r2, [r3, #4]
 8007970:	609a      	str	r2, [r3, #8]
 8007972:	60da      	str	r2, [r3, #12]
 8007974:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007976:	2300      	movs	r3, #0
 8007978:	613b      	str	r3, [r7, #16]
 800797a:	4b41      	ldr	r3, [pc, #260]	; (8007a80 <MX_GPIO_Init+0x120>)
 800797c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800797e:	4a40      	ldr	r2, [pc, #256]	; (8007a80 <MX_GPIO_Init+0x120>)
 8007980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007984:	6313      	str	r3, [r2, #48]	; 0x30
 8007986:	4b3e      	ldr	r3, [pc, #248]	; (8007a80 <MX_GPIO_Init+0x120>)
 8007988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800798a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800798e:	613b      	str	r3, [r7, #16]
 8007990:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007992:	2300      	movs	r3, #0
 8007994:	60fb      	str	r3, [r7, #12]
 8007996:	4b3a      	ldr	r3, [pc, #232]	; (8007a80 <MX_GPIO_Init+0x120>)
 8007998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800799a:	4a39      	ldr	r2, [pc, #228]	; (8007a80 <MX_GPIO_Init+0x120>)
 800799c:	f043 0304 	orr.w	r3, r3, #4
 80079a0:	6313      	str	r3, [r2, #48]	; 0x30
 80079a2:	4b37      	ldr	r3, [pc, #220]	; (8007a80 <MX_GPIO_Init+0x120>)
 80079a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079a6:	f003 0304 	and.w	r3, r3, #4
 80079aa:	60fb      	str	r3, [r7, #12]
 80079ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80079ae:	2300      	movs	r3, #0
 80079b0:	60bb      	str	r3, [r7, #8]
 80079b2:	4b33      	ldr	r3, [pc, #204]	; (8007a80 <MX_GPIO_Init+0x120>)
 80079b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079b6:	4a32      	ldr	r2, [pc, #200]	; (8007a80 <MX_GPIO_Init+0x120>)
 80079b8:	f043 0301 	orr.w	r3, r3, #1
 80079bc:	6313      	str	r3, [r2, #48]	; 0x30
 80079be:	4b30      	ldr	r3, [pc, #192]	; (8007a80 <MX_GPIO_Init+0x120>)
 80079c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079c2:	f003 0301 	and.w	r3, r3, #1
 80079c6:	60bb      	str	r3, [r7, #8]
 80079c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80079ca:	2300      	movs	r3, #0
 80079cc:	607b      	str	r3, [r7, #4]
 80079ce:	4b2c      	ldr	r3, [pc, #176]	; (8007a80 <MX_GPIO_Init+0x120>)
 80079d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079d2:	4a2b      	ldr	r2, [pc, #172]	; (8007a80 <MX_GPIO_Init+0x120>)
 80079d4:	f043 0302 	orr.w	r3, r3, #2
 80079d8:	6313      	str	r3, [r2, #48]	; 0x30
 80079da:	4b29      	ldr	r3, [pc, #164]	; (8007a80 <MX_GPIO_Init+0x120>)
 80079dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079de:	f003 0302 	and.w	r3, r3, #2
 80079e2:	607b      	str	r3, [r7, #4]
 80079e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI2_CS_Pin|SPI1_CS_Pin, GPIO_PIN_SET);
 80079e6:	2201      	movs	r2, #1
 80079e8:	f240 1101 	movw	r1, #257	; 0x101
 80079ec:	4825      	ldr	r0, [pc, #148]	; (8007a84 <MX_GPIO_Init+0x124>)
 80079ee:	f005 f9df 	bl	800cdb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ERROR_OUT_Pin|AIR__OUT_Pin|PRE_OUT_Pin, GPIO_PIN_RESET);
 80079f2:	2200      	movs	r2, #0
 80079f4:	2107      	movs	r1, #7
 80079f6:	4824      	ldr	r0, [pc, #144]	; (8007a88 <MX_GPIO_Init+0x128>)
 80079f8:	f005 f9da 	bl	800cdb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80079fc:	2200      	movs	r2, #0
 80079fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007a02:	4822      	ldr	r0, [pc, #136]	; (8007a8c <MX_GPIO_Init+0x12c>)
 8007a04:	f005 f9d4 	bl	800cdb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI2_CS_Pin SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin|SPI1_CS_Pin;
 8007a08:	f240 1301 	movw	r3, #257	; 0x101
 8007a0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a12:	2300      	movs	r3, #0
 8007a14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a16:	2303      	movs	r3, #3
 8007a18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007a1a:	f107 0314 	add.w	r3, r7, #20
 8007a1e:	4619      	mov	r1, r3
 8007a20:	4818      	ldr	r0, [pc, #96]	; (8007a84 <MX_GPIO_Init+0x124>)
 8007a22:	f004 ff25 	bl	800c870 <HAL_GPIO_Init>

  /*Configure GPIO pin : SC_END_Pin */
  GPIO_InitStruct.Pin = SC_END_Pin;
 8007a26:	2310      	movs	r3, #16
 8007a28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SC_END_GPIO_Port, &GPIO_InitStruct);
 8007a32:	f107 0314 	add.w	r3, r7, #20
 8007a36:	4619      	mov	r1, r3
 8007a38:	4812      	ldr	r0, [pc, #72]	; (8007a84 <MX_GPIO_Init+0x124>)
 8007a3a:	f004 ff19 	bl	800c870 <HAL_GPIO_Init>

  /*Configure GPIO pins : ERROR_OUT_Pin AIR__OUT_Pin PRE_OUT_Pin */
  GPIO_InitStruct.Pin = ERROR_OUT_Pin|AIR__OUT_Pin|PRE_OUT_Pin;
 8007a3e:	2307      	movs	r3, #7
 8007a40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007a42:	2301      	movs	r3, #1
 8007a44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a46:	2300      	movs	r3, #0
 8007a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007a4e:	f107 0314 	add.w	r3, r7, #20
 8007a52:	4619      	mov	r1, r3
 8007a54:	480c      	ldr	r0, [pc, #48]	; (8007a88 <MX_GPIO_Init+0x128>)
 8007a56:	f004 ff0b 	bl	800c870 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8007a5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007a5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007a60:	2301      	movs	r3, #1
 8007a62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a64:	2300      	movs	r3, #0
 8007a66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a68:	2303      	movs	r3, #3
 8007a6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8007a6c:	f107 0314 	add.w	r3, r7, #20
 8007a70:	4619      	mov	r1, r3
 8007a72:	4806      	ldr	r0, [pc, #24]	; (8007a8c <MX_GPIO_Init+0x12c>)
 8007a74:	f004 fefc 	bl	800c870 <HAL_GPIO_Init>

}
 8007a78:	bf00      	nop
 8007a7a:	3728      	adds	r7, #40	; 0x28
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}
 8007a80:	40023800 	.word	0x40023800
 8007a84:	40020800 	.word	0x40020800
 8007a88:	40020400 	.word	0x40020400
 8007a8c:	40020000 	.word	0x40020000

08007a90 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b084      	sub	sp, #16
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]

	BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	60fb      	str	r3, [r7, #12]


	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData)!= HAL_OK)
 8007a9c:	4b24      	ldr	r3, [pc, #144]	; (8007b30 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 8007a9e:	4a25      	ldr	r2, [pc, #148]	; (8007b34 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 8007aa0:	2100      	movs	r1, #0
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f003 fef8 	bl	800b898 <HAL_CAN_GetRxMessage>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d001      	beq.n	8007ab2 <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
	{
		Error_Handler();
 8007aae:	f002 fa1f 	bl	8009ef0 <Error_Handler>
	}

	if(RxHeader.IDE == CAN_ID_STD)
 8007ab2:	4b20      	ldr	r3, [pc, #128]	; (8007b34 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 8007ab4:	689b      	ldr	r3, [r3, #8]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d11a      	bne.n	8007af0 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>
	{
		if(RxHeader.StdId == VCU_ID)
 8007aba:	4b1e      	ldr	r3, [pc, #120]	; (8007b34 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	2b60      	cmp	r3, #96	; 0x60
 8007ac0:	d131      	bne.n	8007b26 <HAL_CAN_RxFifo0MsgPendingCallback+0x96>
		{
			vTaskNotifyGiveFromISR(VCUcom,&pxHigherPriorityTaskWoken);
 8007ac2:	4b1d      	ldr	r3, [pc, #116]	; (8007b38 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f107 020c 	add.w	r2, r7, #12
 8007aca:	2100      	movs	r1, #0
 8007acc:	4618      	mov	r0, r3
 8007ace:	f010 fb47 	bl	8018160 <vTaskGenericNotifyGiveFromISR>
			portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d007      	beq.n	8007ae8 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>
 8007ad8:	4b18      	ldr	r3, [pc, #96]	; (8007b3c <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8007ada:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ade:	601a      	str	r2, [r3, #0]
 8007ae0:	f3bf 8f4f 	dsb	sy
 8007ae4:	f3bf 8f6f 	isb	sy
			VCUflag = 1;
 8007ae8:	4b15      	ldr	r3, [pc, #84]	; (8007b40 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8007aea:	2201      	movs	r2, #1
 8007aec:	701a      	strb	r2, [r3, #0]
	}




}
 8007aee:	e01a      	b.n	8007b26 <HAL_CAN_RxFifo0MsgPendingCallback+0x96>
		if(RxHeader.ExtId == CHARGER_ID)
 8007af0:	4b10      	ldr	r3, [pc, #64]	; (8007b34 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	4a13      	ldr	r2, [pc, #76]	; (8007b44 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d115      	bne.n	8007b26 <HAL_CAN_RxFifo0MsgPendingCallback+0x96>
			vTaskNotifyGiveFromISR(ChargeControl,&pxHigherPriorityTaskWoken);
 8007afa:	4b13      	ldr	r3, [pc, #76]	; (8007b48 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f107 020c 	add.w	r2, r7, #12
 8007b02:	2100      	movs	r1, #0
 8007b04:	4618      	mov	r0, r3
 8007b06:	f010 fb2b 	bl	8018160 <vTaskGenericNotifyGiveFromISR>
			portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d007      	beq.n	8007b20 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>
 8007b10:	4b0a      	ldr	r3, [pc, #40]	; (8007b3c <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8007b12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b16:	601a      	str	r2, [r3, #0]
 8007b18:	f3bf 8f4f 	dsb	sy
 8007b1c:	f3bf 8f6f 	isb	sy
			Chargerflag = 1;
 8007b20:	4b0a      	ldr	r3, [pc, #40]	; (8007b4c <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 8007b22:	2201      	movs	r2, #1
 8007b24:	701a      	strb	r2, [r3, #0]
}
 8007b26:	bf00      	nop
 8007b28:	3710      	adds	r7, #16
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}
 8007b2e:	bf00      	nop
 8007b30:	2000253c 	.word	0x2000253c
 8007b34:	20002520 	.word	0x20002520
 8007b38:	20002560 	.word	0x20002560
 8007b3c:	e000ed04 	.word	0xe000ed04
 8007b40:	2000254d 	.word	0x2000254d
 8007b44:	18ff50e5 	.word	0x18ff50e5
 8007b48:	2000255c 	.word	0x2000255c
 8007b4c:	2000254e 	.word	0x2000254e

08007b50 <vVoltageRead>:

static void vVoltageRead(void *parameter) {
 8007b50:	b5b0      	push	{r4, r5, r7, lr}
 8007b52:	b08c      	sub	sp, #48	; 0x30
 8007b54:	af02      	add	r7, sp, #8
 8007b56:	6078      	str	r0, [r7, #4]

	uint8_t pecflag = 0;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t underVoltageflag = 0;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t overVoltageflag = 0;
 8007b64:	2300      	movs	r3, #0
 8007b66:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t dummyflag = 0;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	uint32_t SlaveOpenWiretick = 0;
 8007b70:	2300      	movs	r3, #0
 8007b72:	623b      	str	r3, [r7, #32]
	uint32_t OverVoltagetick = 0;
 8007b74:	2300      	movs	r3, #0
 8007b76:	61fb      	str	r3, [r7, #28]
	uint32_t UnderVoltagetick = 0;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	61bb      	str	r3, [r7, #24]

	float TotalVoltage = 0;
 8007b7c:	f04f 0300 	mov.w	r3, #0
 8007b80:	617b      	str	r3, [r7, #20]
	float MaxCellVoltage = 0;
 8007b82:	f04f 0300 	mov.w	r3, #0
 8007b86:	613b      	str	r3, [r7, #16]
	float MinCellVoltage = 0;
 8007b88:	f04f 0300 	mov.w	r3, #0
 8007b8c:	60fb      	str	r3, [r7, #12]

		//SECTION OF VOLTAGE READING AND DETECTION OF OVER AND UNDER VOLTAGE
		//
		//

		taskENTER_CRITICAL();
 8007b8e:	f011 f823 	bl	8018bd8 <vPortEnterCritical>
		adBmsWakeupIc(total_ic);
 8007b92:	2006      	movs	r0, #6
 8007b94:	f7f9 fc34 	bl	8001400 <adBmsWakeupIc>
		adBmsWriteData(total_ic, &ic[0], WRCFGA, Config, A);
 8007b98:	2301      	movs	r3, #1
 8007b9a:	9300      	str	r3, [sp, #0]
 8007b9c:	2308      	movs	r3, #8
 8007b9e:	4a3d      	ldr	r2, [pc, #244]	; (8007c94 <vVoltageRead+0x144>)
 8007ba0:	493d      	ldr	r1, [pc, #244]	; (8007c98 <vVoltageRead+0x148>)
 8007ba2:	2006      	movs	r0, #6
 8007ba4:	f7fa f982 	bl	8001eac <adBmsWriteData>
		adBmsWriteData(total_ic, &ic[0], WRCFGB, Config, B);
 8007ba8:	2302      	movs	r3, #2
 8007baa:	9300      	str	r3, [sp, #0]
 8007bac:	2308      	movs	r3, #8
 8007bae:	4a3b      	ldr	r2, [pc, #236]	; (8007c9c <vVoltageRead+0x14c>)
 8007bb0:	4939      	ldr	r1, [pc, #228]	; (8007c98 <vVoltageRead+0x148>)
 8007bb2:	2006      	movs	r0, #6
 8007bb4:	f7fa f97a 	bl	8001eac <adBmsWriteData>
		adBmsWakeupIc(total_ic);
 8007bb8:	2006      	movs	r0, #6
 8007bba:	f7f9 fc21 	bl	8001400 <adBmsWakeupIc>
		adBms6830_Adcv_ALL(REDUNDANT_MEASUREMENT, CONTINUOUS, DISCHARGE_PERMITTED,
 8007bbe:	4b38      	ldr	r3, [pc, #224]	; (8007ca0 <vVoltageRead+0x150>)
 8007bc0:	7818      	ldrb	r0, [r3, #0]
 8007bc2:	4b38      	ldr	r3, [pc, #224]	; (8007ca4 <vVoltageRead+0x154>)
 8007bc4:	781a      	ldrb	r2, [r3, #0]
 8007bc6:	4b38      	ldr	r3, [pc, #224]	; (8007ca8 <vVoltageRead+0x158>)
 8007bc8:	7819      	ldrb	r1, [r3, #0]
 8007bca:	4b38      	ldr	r3, [pc, #224]	; (8007cac <vVoltageRead+0x15c>)
 8007bcc:	781b      	ldrb	r3, [r3, #0]
 8007bce:	2406      	movs	r4, #6
 8007bd0:	9401      	str	r4, [sp, #4]
 8007bd2:	9300      	str	r3, [sp, #0]
 8007bd4:	460b      	mov	r3, r1
 8007bd6:	2101      	movs	r1, #1
 8007bd8:	f7fa fd86 	bl	80026e8 <adBms6830_Adcv_ALL>
				RESET_FILTER, CELL_OPEN_WIRE_DETECTION,total_ic);
		vTaskDelay(1); // ADCs are updated at their conversion rate is 1ms
 8007bdc:	2001      	movs	r0, #1
 8007bde:	f00f fcad 	bl	801753c <vTaskDelay>
		adBms6830_Adcv_ALL(RD_ON, CONTINUOUS, DISCHARGE_PERMITTED, RESET_FILTER,
 8007be2:	4b30      	ldr	r3, [pc, #192]	; (8007ca4 <vVoltageRead+0x154>)
 8007be4:	781a      	ldrb	r2, [r3, #0]
 8007be6:	4b30      	ldr	r3, [pc, #192]	; (8007ca8 <vVoltageRead+0x158>)
 8007be8:	7819      	ldrb	r1, [r3, #0]
 8007bea:	4b30      	ldr	r3, [pc, #192]	; (8007cac <vVoltageRead+0x15c>)
 8007bec:	781b      	ldrb	r3, [r3, #0]
 8007bee:	2006      	movs	r0, #6
 8007bf0:	9001      	str	r0, [sp, #4]
 8007bf2:	9300      	str	r3, [sp, #0]
 8007bf4:	460b      	mov	r3, r1
 8007bf6:	2101      	movs	r1, #1
 8007bf8:	2001      	movs	r0, #1
 8007bfa:	f7fa fd75 	bl	80026e8 <adBms6830_Adcv_ALL>
				CELL_OPEN_WIRE_DETECTION,total_ic);
		vTaskDelay(1); // ADCs are updated at their conversion rate is 1ms
 8007bfe:	2001      	movs	r0, #1
 8007c00:	f00f fc9c 	bl	801753c <vTaskDelay>
		adBmsReadData(total_ic, &ic[0], RDCVA, Cell, A);
 8007c04:	2301      	movs	r3, #1
 8007c06:	9300      	str	r3, [sp, #0]
 8007c08:	2300      	movs	r3, #0
 8007c0a:	4a29      	ldr	r2, [pc, #164]	; (8007cb0 <vVoltageRead+0x160>)
 8007c0c:	4922      	ldr	r1, [pc, #136]	; (8007c98 <vVoltageRead+0x148>)
 8007c0e:	2006      	movs	r0, #6
 8007c10:	f7f9 fc14 	bl	800143c <adBmsReadData>
		adBmsReadData(total_ic, &ic[0], RDCVB, Cell, B);
 8007c14:	2302      	movs	r3, #2
 8007c16:	9300      	str	r3, [sp, #0]
 8007c18:	2300      	movs	r3, #0
 8007c1a:	4a26      	ldr	r2, [pc, #152]	; (8007cb4 <vVoltageRead+0x164>)
 8007c1c:	491e      	ldr	r1, [pc, #120]	; (8007c98 <vVoltageRead+0x148>)
 8007c1e:	2006      	movs	r0, #6
 8007c20:	f7f9 fc0c 	bl	800143c <adBmsReadData>
		adBmsReadData(total_ic, &ic[0], RDCVC, Cell, C);
 8007c24:	2303      	movs	r3, #3
 8007c26:	9300      	str	r3, [sp, #0]
 8007c28:	2300      	movs	r3, #0
 8007c2a:	4a23      	ldr	r2, [pc, #140]	; (8007cb8 <vVoltageRead+0x168>)
 8007c2c:	491a      	ldr	r1, [pc, #104]	; (8007c98 <vVoltageRead+0x148>)
 8007c2e:	2006      	movs	r0, #6
 8007c30:	f7f9 fc04 	bl	800143c <adBmsReadData>
		adBmsReadData(total_ic, &ic[0], RDCVD, Cell, D);
 8007c34:	2304      	movs	r3, #4
 8007c36:	9300      	str	r3, [sp, #0]
 8007c38:	2300      	movs	r3, #0
 8007c3a:	4a20      	ldr	r2, [pc, #128]	; (8007cbc <vVoltageRead+0x16c>)
 8007c3c:	4916      	ldr	r1, [pc, #88]	; (8007c98 <vVoltageRead+0x148>)
 8007c3e:	2006      	movs	r0, #6
 8007c40:	f7f9 fbfc 	bl	800143c <adBmsReadData>
		adBmsReadData(total_ic, &ic[0], RDCVE, Cell, E);
 8007c44:	2305      	movs	r3, #5
 8007c46:	9300      	str	r3, [sp, #0]
 8007c48:	2300      	movs	r3, #0
 8007c4a:	4a1d      	ldr	r2, [pc, #116]	; (8007cc0 <vVoltageRead+0x170>)
 8007c4c:	4912      	ldr	r1, [pc, #72]	; (8007c98 <vVoltageRead+0x148>)
 8007c4e:	2006      	movs	r0, #6
 8007c50:	f7f9 fbf4 	bl	800143c <adBmsReadData>
		adBmsReadData(total_ic, &ic[0], RDCVF, Cell, F);
 8007c54:	2306      	movs	r3, #6
 8007c56:	9300      	str	r3, [sp, #0]
 8007c58:	2300      	movs	r3, #0
 8007c5a:	4a1a      	ldr	r2, [pc, #104]	; (8007cc4 <vVoltageRead+0x174>)
 8007c5c:	490e      	ldr	r1, [pc, #56]	; (8007c98 <vVoltageRead+0x148>)
 8007c5e:	2006      	movs	r0, #6
 8007c60:	f7f9 fbec 	bl	800143c <adBmsReadData>
		taskEXIT_CRITICAL();
 8007c64:	f010 ffe8 	bl	8018c38 <vPortExitCritical>

		for (uint8_t icCounter = 0; icCounter < total_ic; icCounter++) {
 8007c68:	2300      	movs	r3, #0
 8007c6a:	72fb      	strb	r3, [r7, #11]
 8007c6c:	e100      	b.n	8007e70 <vVoltageRead+0x320>
			for (uint8_t cellCounter = 0; cellCounter < 16; cellCounter++) {
 8007c6e:	2300      	movs	r3, #0
 8007c70:	72bb      	strb	r3, [r7, #10]
 8007c72:	e0f6      	b.n	8007e62 <vVoltageRead+0x312>
				//openwire check
				if (ic[icCounter].cccrc.cell_pec == 1){
 8007c74:	7afb      	ldrb	r3, [r7, #11]
 8007c76:	4a08      	ldr	r2, [pc, #32]	; (8007c98 <vVoltageRead+0x148>)
 8007c78:	f44f 714a 	mov.w	r1, #808	; 0x328
 8007c7c:	fb01 f303 	mul.w	r3, r1, r3
 8007c80:	4413      	add	r3, r2
 8007c82:	f203 1391 	addw	r3, r3, #401	; 0x191
 8007c86:	781b      	ldrb	r3, [r3, #0]
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d11d      	bne.n	8007cc8 <vVoltageRead+0x178>
					pecflag = 1;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007c92:	e0e3      	b.n	8007e5c <vVoltageRead+0x30c>
 8007c94:	20000004 	.word	0x20000004
 8007c98:	200005f8 	.word	0x200005f8
 8007c9c:	20000008 	.word	0x20000008
 8007ca0:	2000034c 	.word	0x2000034c
 8007ca4:	2000034e 	.word	0x2000034e
 8007ca8:	2000034f 	.word	0x2000034f
 8007cac:	2000034d 	.word	0x2000034d
 8007cb0:	2000000c 	.word	0x2000000c
 8007cb4:	20000010 	.word	0x20000010
 8007cb8:	20000014 	.word	0x20000014
 8007cbc:	20000018 	.word	0x20000018
 8007cc0:	2000001c 	.word	0x2000001c
 8007cc4:	20000020 	.word	0x20000020
				}
				else {
					if(ic[icCounter].cell.c_codes[cellCounter]>0){
 8007cc8:	7afa      	ldrb	r2, [r7, #11]
 8007cca:	7abb      	ldrb	r3, [r7, #10]
 8007ccc:	49ba      	ldr	r1, [pc, #744]	; (8007fb8 <vVoltageRead+0x468>)
 8007cce:	f44f 70ca 	mov.w	r0, #404	; 0x194
 8007cd2:	fb00 f202 	mul.w	r2, r0, r2
 8007cd6:	4413      	add	r3, r2
 8007cd8:	3310      	adds	r3, #16
 8007cda:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	dd1b      	ble.n	8007d1a <vVoltageRead+0x1ca>
						ic[icCounter].mesured_cell_voltages[cellCounter] =
								getVoltage(ic[icCounter].cell.c_codes[cellCounter]);
 8007ce2:	7afa      	ldrb	r2, [r7, #11]
 8007ce4:	7abb      	ldrb	r3, [r7, #10]
 8007ce6:	49b4      	ldr	r1, [pc, #720]	; (8007fb8 <vVoltageRead+0x468>)
 8007ce8:	f44f 70ca 	mov.w	r0, #404	; 0x194
 8007cec:	fb00 f202 	mul.w	r2, r0, r2
 8007cf0:	4413      	add	r3, r2
 8007cf2:	3310      	adds	r3, #16
 8007cf4:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
						ic[icCounter].mesured_cell_voltages[cellCounter] =
 8007cf8:	7afd      	ldrb	r5, [r7, #11]
 8007cfa:	7abc      	ldrb	r4, [r7, #10]
								getVoltage(ic[icCounter].cell.c_codes[cellCounter]);
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f7fa fe57 	bl	80029b0 <getVoltage>
 8007d02:	eef0 7a40 	vmov.f32	s15, s0
						ic[icCounter].mesured_cell_voltages[cellCounter] =
 8007d06:	4aac      	ldr	r2, [pc, #688]	; (8007fb8 <vVoltageRead+0x468>)
 8007d08:	23ca      	movs	r3, #202	; 0xca
 8007d0a:	fb05 f303 	mul.w	r3, r5, r3
 8007d0e:	4423      	add	r3, r4
 8007d10:	33b8      	adds	r3, #184	; 0xb8
 8007d12:	009b      	lsls	r3, r3, #2
 8007d14:	4413      	add	r3, r2
 8007d16:	edc3 7a00 	vstr	s15, [r3]
					}

					//printf("cell%d: %f\n", cellCounter + 1,
					//		ic[icCounter].mesured_cell_voltages[cellCounter]);

					if (ic[icCounter].mesured_cell_voltages[cellCounter] < CELL_UNDER_VOLTAGE_TRESHOLD) {
 8007d1a:	7afa      	ldrb	r2, [r7, #11]
 8007d1c:	7abb      	ldrb	r3, [r7, #10]
 8007d1e:	49a6      	ldr	r1, [pc, #664]	; (8007fb8 <vVoltageRead+0x468>)
 8007d20:	20ca      	movs	r0, #202	; 0xca
 8007d22:	fb00 f202 	mul.w	r2, r0, r2
 8007d26:	4413      	add	r3, r2
 8007d28:	33b8      	adds	r3, #184	; 0xb8
 8007d2a:	009b      	lsls	r3, r3, #2
 8007d2c:	440b      	add	r3, r1
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4618      	mov	r0, r3
 8007d32:	f7f8 fc29 	bl	8000588 <__aeabi_f2d>
 8007d36:	a39c      	add	r3, pc, #624	; (adr r3, 8007fa8 <vVoltageRead+0x458>)
 8007d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d3c:	f7f8 feee 	bl	8000b1c <__aeabi_dcmplt>
 8007d40:	4603      	mov	r3, r0
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d002      	beq.n	8007d4c <vVoltageRead+0x1fc>
						underVoltageflag = 1;
 8007d46:	2301      	movs	r3, #1
 8007d48:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					}

					if (ic[icCounter].mesured_cell_voltages[cellCounter] > CELL_OVER_VOLTAGE_TRESHOLD) {
 8007d4c:	7afa      	ldrb	r2, [r7, #11]
 8007d4e:	7abb      	ldrb	r3, [r7, #10]
 8007d50:	4999      	ldr	r1, [pc, #612]	; (8007fb8 <vVoltageRead+0x468>)
 8007d52:	20ca      	movs	r0, #202	; 0xca
 8007d54:	fb00 f202 	mul.w	r2, r0, r2
 8007d58:	4413      	add	r3, r2
 8007d5a:	33b8      	adds	r3, #184	; 0xb8
 8007d5c:	009b      	lsls	r3, r3, #2
 8007d5e:	440b      	add	r3, r1
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4618      	mov	r0, r3
 8007d64:	f7f8 fc10 	bl	8000588 <__aeabi_f2d>
 8007d68:	a391      	add	r3, pc, #580	; (adr r3, 8007fb0 <vVoltageRead+0x460>)
 8007d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d6e:	f7f8 fef3 	bl	8000b58 <__aeabi_dcmpgt>
 8007d72:	4603      	mov	r3, r0
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d002      	beq.n	8007d7e <vVoltageRead+0x22e>
						overVoltageflag = 1;
 8007d78:	2301      	movs	r3, #1
 8007d7a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
					}

					//MAINBUFFER CALCULATIONS
					if(dummyflag == 0)
 8007d7e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d11a      	bne.n	8007dbc <vVoltageRead+0x26c>
					{
						MaxCellVoltage = ic[icCounter].mesured_cell_voltages[cellCounter];
 8007d86:	7afa      	ldrb	r2, [r7, #11]
 8007d88:	7abb      	ldrb	r3, [r7, #10]
 8007d8a:	498b      	ldr	r1, [pc, #556]	; (8007fb8 <vVoltageRead+0x468>)
 8007d8c:	20ca      	movs	r0, #202	; 0xca
 8007d8e:	fb00 f202 	mul.w	r2, r0, r2
 8007d92:	4413      	add	r3, r2
 8007d94:	33b8      	adds	r3, #184	; 0xb8
 8007d96:	009b      	lsls	r3, r3, #2
 8007d98:	440b      	add	r3, r1
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	613b      	str	r3, [r7, #16]
						MinCellVoltage = ic[icCounter].mesured_cell_voltages[cellCounter];
 8007d9e:	7afa      	ldrb	r2, [r7, #11]
 8007da0:	7abb      	ldrb	r3, [r7, #10]
 8007da2:	4985      	ldr	r1, [pc, #532]	; (8007fb8 <vVoltageRead+0x468>)
 8007da4:	20ca      	movs	r0, #202	; 0xca
 8007da6:	fb00 f202 	mul.w	r2, r0, r2
 8007daa:	4413      	add	r3, r2
 8007dac:	33b8      	adds	r3, #184	; 0xb8
 8007dae:	009b      	lsls	r3, r3, #2
 8007db0:	440b      	add	r3, r1
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	60fb      	str	r3, [r7, #12]
						dummyflag = 1;
 8007db6:	2301      	movs	r3, #1
 8007db8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
					}

					TotalVoltage += ic[icCounter].mesured_cell_voltages[cellCounter];
 8007dbc:	7afa      	ldrb	r2, [r7, #11]
 8007dbe:	7abb      	ldrb	r3, [r7, #10]
 8007dc0:	497d      	ldr	r1, [pc, #500]	; (8007fb8 <vVoltageRead+0x468>)
 8007dc2:	20ca      	movs	r0, #202	; 0xca
 8007dc4:	fb00 f202 	mul.w	r2, r0, r2
 8007dc8:	4413      	add	r3, r2
 8007dca:	33b8      	adds	r3, #184	; 0xb8
 8007dcc:	009b      	lsls	r3, r3, #2
 8007dce:	440b      	add	r3, r1
 8007dd0:	edd3 7a00 	vldr	s15, [r3]
 8007dd4:	ed97 7a05 	vldr	s14, [r7, #20]
 8007dd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007ddc:	edc7 7a05 	vstr	s15, [r7, #20]

					if(ic[icCounter].mesured_cell_voltages[cellCounter] > MaxCellVoltage)
 8007de0:	7afa      	ldrb	r2, [r7, #11]
 8007de2:	7abb      	ldrb	r3, [r7, #10]
 8007de4:	4974      	ldr	r1, [pc, #464]	; (8007fb8 <vVoltageRead+0x468>)
 8007de6:	20ca      	movs	r0, #202	; 0xca
 8007de8:	fb00 f202 	mul.w	r2, r0, r2
 8007dec:	4413      	add	r3, r2
 8007dee:	33b8      	adds	r3, #184	; 0xb8
 8007df0:	009b      	lsls	r3, r3, #2
 8007df2:	440b      	add	r3, r1
 8007df4:	edd3 7a00 	vldr	s15, [r3]
 8007df8:	ed97 7a04 	vldr	s14, [r7, #16]
 8007dfc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e04:	d50b      	bpl.n	8007e1e <vVoltageRead+0x2ce>
					{
						MaxCellVoltage = ic[icCounter].mesured_cell_voltages[cellCounter];
 8007e06:	7afa      	ldrb	r2, [r7, #11]
 8007e08:	7abb      	ldrb	r3, [r7, #10]
 8007e0a:	496b      	ldr	r1, [pc, #428]	; (8007fb8 <vVoltageRead+0x468>)
 8007e0c:	20ca      	movs	r0, #202	; 0xca
 8007e0e:	fb00 f202 	mul.w	r2, r0, r2
 8007e12:	4413      	add	r3, r2
 8007e14:	33b8      	adds	r3, #184	; 0xb8
 8007e16:	009b      	lsls	r3, r3, #2
 8007e18:	440b      	add	r3, r1
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	613b      	str	r3, [r7, #16]
					}

					if(ic[icCounter].mesured_cell_voltages[cellCounter] < MinCellVoltage)
 8007e1e:	7afa      	ldrb	r2, [r7, #11]
 8007e20:	7abb      	ldrb	r3, [r7, #10]
 8007e22:	4965      	ldr	r1, [pc, #404]	; (8007fb8 <vVoltageRead+0x468>)
 8007e24:	20ca      	movs	r0, #202	; 0xca
 8007e26:	fb00 f202 	mul.w	r2, r0, r2
 8007e2a:	4413      	add	r3, r2
 8007e2c:	33b8      	adds	r3, #184	; 0xb8
 8007e2e:	009b      	lsls	r3, r3, #2
 8007e30:	440b      	add	r3, r1
 8007e32:	edd3 7a00 	vldr	s15, [r3]
 8007e36:	ed97 7a03 	vldr	s14, [r7, #12]
 8007e3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e42:	dd0b      	ble.n	8007e5c <vVoltageRead+0x30c>
					{
						MinCellVoltage = ic[icCounter].mesured_cell_voltages[cellCounter];
 8007e44:	7afa      	ldrb	r2, [r7, #11]
 8007e46:	7abb      	ldrb	r3, [r7, #10]
 8007e48:	495b      	ldr	r1, [pc, #364]	; (8007fb8 <vVoltageRead+0x468>)
 8007e4a:	20ca      	movs	r0, #202	; 0xca
 8007e4c:	fb00 f202 	mul.w	r2, r0, r2
 8007e50:	4413      	add	r3, r2
 8007e52:	33b8      	adds	r3, #184	; 0xb8
 8007e54:	009b      	lsls	r3, r3, #2
 8007e56:	440b      	add	r3, r1
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	60fb      	str	r3, [r7, #12]
			for (uint8_t cellCounter = 0; cellCounter < 16; cellCounter++) {
 8007e5c:	7abb      	ldrb	r3, [r7, #10]
 8007e5e:	3301      	adds	r3, #1
 8007e60:	72bb      	strb	r3, [r7, #10]
 8007e62:	7abb      	ldrb	r3, [r7, #10]
 8007e64:	2b0f      	cmp	r3, #15
 8007e66:	f67f af05 	bls.w	8007c74 <vVoltageRead+0x124>
		for (uint8_t icCounter = 0; icCounter < total_ic; icCounter++) {
 8007e6a:	7afb      	ldrb	r3, [r7, #11]
 8007e6c:	3301      	adds	r3, #1
 8007e6e:	72fb      	strb	r3, [r7, #11]
 8007e70:	7afb      	ldrb	r3, [r7, #11]
 8007e72:	2b05      	cmp	r3, #5
 8007e74:	f67f aefb 	bls.w	8007c6e <vVoltageRead+0x11e>
			}
		}

		//MAINBUFFER LOADING

		MAINBUFFER[PACK_TOTAL_CELL_VOLTAGE] = (uint16_t) (TotalVoltage*100);
 8007e78:	edd7 7a05 	vldr	s15, [r7, #20]
 8007e7c:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8007fbc <vVoltageRead+0x46c>
 8007e80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007e84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e88:	ee17 3a90 	vmov	r3, s15
 8007e8c:	b29a      	uxth	r2, r3
 8007e8e:	4b4c      	ldr	r3, [pc, #304]	; (8007fc0 <vVoltageRead+0x470>)
 8007e90:	82da      	strh	r2, [r3, #22]
		MAINBUFFER[PACK_AVG_CELL_VOLTAGE] = (uint16_t) ((TotalVoltage/(16.0*total_ic))*100);
 8007e92:	6978      	ldr	r0, [r7, #20]
 8007e94:	f7f8 fb78 	bl	8000588 <__aeabi_f2d>
 8007e98:	f04f 0200 	mov.w	r2, #0
 8007e9c:	4b49      	ldr	r3, [pc, #292]	; (8007fc4 <vVoltageRead+0x474>)
 8007e9e:	f7f8 fcf5 	bl	800088c <__aeabi_ddiv>
 8007ea2:	4602      	mov	r2, r0
 8007ea4:	460b      	mov	r3, r1
 8007ea6:	4610      	mov	r0, r2
 8007ea8:	4619      	mov	r1, r3
 8007eaa:	f04f 0200 	mov.w	r2, #0
 8007eae:	4b46      	ldr	r3, [pc, #280]	; (8007fc8 <vVoltageRead+0x478>)
 8007eb0:	f7f8 fbc2 	bl	8000638 <__aeabi_dmul>
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	460b      	mov	r3, r1
 8007eb8:	4610      	mov	r0, r2
 8007eba:	4619      	mov	r1, r3
 8007ebc:	f7f8 fe94 	bl	8000be8 <__aeabi_d2uiz>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	b29a      	uxth	r2, r3
 8007ec4:	4b3e      	ldr	r3, [pc, #248]	; (8007fc0 <vVoltageRead+0x470>)
 8007ec6:	839a      	strh	r2, [r3, #28]
		MAINBUFFER[PACK_MAX_CELL_VOLTAGE] = (uint16_t) (MaxCellVoltage*100);
 8007ec8:	edd7 7a04 	vldr	s15, [r7, #16]
 8007ecc:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8007fbc <vVoltageRead+0x46c>
 8007ed0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007ed4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ed8:	ee17 3a90 	vmov	r3, s15
 8007edc:	b29a      	uxth	r2, r3
 8007ede:	4b38      	ldr	r3, [pc, #224]	; (8007fc0 <vVoltageRead+0x470>)
 8007ee0:	825a      	strh	r2, [r3, #18]
		MAINBUFFER[PACK_MIN_CELL_VOLTAGE] = (uint16_t) (MinCellVoltage*100);
 8007ee2:	edd7 7a03 	vldr	s15, [r7, #12]
 8007ee6:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8007fbc <vVoltageRead+0x46c>
 8007eea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007eee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ef2:	ee17 3a90 	vmov	r3, s15
 8007ef6:	b29a      	uxth	r2, r3
 8007ef8:	4b31      	ldr	r3, [pc, #196]	; (8007fc0 <vVoltageRead+0x470>)
 8007efa:	829a      	strh	r2, [r3, #20]

		dummyflag = 0;
 8007efc:	2300      	movs	r3, #0
 8007efe:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		TotalVoltage = 0;
 8007f02:	f04f 0300 	mov.w	r3, #0
 8007f06:	617b      	str	r3, [r7, #20]

		//FAULT PROCESS

		if (pecflag == 1) {
 8007f08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	d11d      	bne.n	8007f4c <vVoltageRead+0x3fc>

			if (SlaveOpenWiretick == 0) SlaveOpenWiretick = xTaskGetTickCount();
 8007f10:	6a3b      	ldr	r3, [r7, #32]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d103      	bne.n	8007f1e <vVoltageRead+0x3ce>
 8007f16:	f00f fca1 	bl	801785c <xTaskGetTickCount>
 8007f1a:	6238      	str	r0, [r7, #32]
 8007f1c:	e012      	b.n	8007f44 <vVoltageRead+0x3f4>
			else if(xTaskGetTickCount()-SlaveOpenWiretick >= MAINBUFFER[OPEN_WIRE_ERROR_DELAY]){
 8007f1e:	f00f fc9d 	bl	801785c <xTaskGetTickCount>
 8007f22:	4602      	mov	r2, r0
 8007f24:	6a3b      	ldr	r3, [r7, #32]
 8007f26:	1ad3      	subs	r3, r2, r3
 8007f28:	4a25      	ldr	r2, [pc, #148]	; (8007fc0 <vVoltageRead+0x470>)
 8007f2a:	f8b2 204e 	ldrh.w	r2, [r2, #78]	; 0x4e
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d308      	bcc.n	8007f44 <vVoltageRead+0x3f4>
				MAINBUFFER[FAULTS] |= 1;
 8007f32:	4b23      	ldr	r3, [pc, #140]	; (8007fc0 <vVoltageRead+0x470>)
 8007f34:	881b      	ldrh	r3, [r3, #0]
 8007f36:	f043 0301 	orr.w	r3, r3, #1
 8007f3a:	b29a      	uxth	r2, r3
 8007f3c:	4b20      	ldr	r3, [pc, #128]	; (8007fc0 <vVoltageRead+0x470>)
 8007f3e:	801a      	strh	r2, [r3, #0]
				faultLatch();
 8007f40:	f001 ff3c 	bl	8009dbc <faultLatch>
			}
			pecflag = 0;
 8007f44:	2300      	movs	r3, #0
 8007f46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007f4a:	e008      	b.n	8007f5e <vVoltageRead+0x40e>

		} else{

			MAINBUFFER[FAULTS] &= ~(1);
 8007f4c:	4b1c      	ldr	r3, [pc, #112]	; (8007fc0 <vVoltageRead+0x470>)
 8007f4e:	881b      	ldrh	r3, [r3, #0]
 8007f50:	f023 0301 	bic.w	r3, r3, #1
 8007f54:	b29a      	uxth	r2, r3
 8007f56:	4b1a      	ldr	r3, [pc, #104]	; (8007fc0 <vVoltageRead+0x470>)
 8007f58:	801a      	strh	r2, [r3, #0]
			SlaveOpenWiretick = 0;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	623b      	str	r3, [r7, #32]
		}


		if (underVoltageflag == 1) {
 8007f5e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007f62:	2b01      	cmp	r3, #1
 8007f64:	d132      	bne.n	8007fcc <vVoltageRead+0x47c>
			if (UnderVoltagetick == 0) UnderVoltagetick = xTaskGetTickCount();
 8007f66:	69bb      	ldr	r3, [r7, #24]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d103      	bne.n	8007f74 <vVoltageRead+0x424>
 8007f6c:	f00f fc76 	bl	801785c <xTaskGetTickCount>
 8007f70:	61b8      	str	r0, [r7, #24]
 8007f72:	e012      	b.n	8007f9a <vVoltageRead+0x44a>
			else if(xTaskGetTickCount()-UnderVoltagetick >= MAINBUFFER[UNDER_VOLTAGE_ERROR_DELAY]){
 8007f74:	f00f fc72 	bl	801785c <xTaskGetTickCount>
 8007f78:	4602      	mov	r2, r0
 8007f7a:	69bb      	ldr	r3, [r7, #24]
 8007f7c:	1ad3      	subs	r3, r2, r3
 8007f7e:	4a10      	ldr	r2, [pc, #64]	; (8007fc0 <vVoltageRead+0x470>)
 8007f80:	f8b2 204a 	ldrh.w	r2, [r2, #74]	; 0x4a
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d308      	bcc.n	8007f9a <vVoltageRead+0x44a>
				MAINBUFFER[FAULTS] |= 1 << 1;
 8007f88:	4b0d      	ldr	r3, [pc, #52]	; (8007fc0 <vVoltageRead+0x470>)
 8007f8a:	881b      	ldrh	r3, [r3, #0]
 8007f8c:	f043 0302 	orr.w	r3, r3, #2
 8007f90:	b29a      	uxth	r2, r3
 8007f92:	4b0b      	ldr	r3, [pc, #44]	; (8007fc0 <vVoltageRead+0x470>)
 8007f94:	801a      	strh	r2, [r3, #0]
				faultLatch();
 8007f96:	f001 ff11 	bl	8009dbc <faultLatch>
			}
			underVoltageflag = 0;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007fa0:	e01d      	b.n	8007fde <vVoltageRead+0x48e>
 8007fa2:	bf00      	nop
 8007fa4:	f3af 8000 	nop.w
 8007fa8:	33333333 	.word	0x33333333
 8007fac:	40033333 	.word	0x40033333
 8007fb0:	33333333 	.word	0x33333333
 8007fb4:	40113333 	.word	0x40113333
 8007fb8:	200005f8 	.word	0x200005f8
 8007fbc:	42c80000 	.word	0x42c80000
 8007fc0:	200024b8 	.word	0x200024b8
 8007fc4:	40580000 	.word	0x40580000
 8007fc8:	40590000 	.word	0x40590000

		} else{
			MAINBUFFER[FAULTS] &= ~(1 << 1);
 8007fcc:	4b1c      	ldr	r3, [pc, #112]	; (8008040 <vVoltageRead+0x4f0>)
 8007fce:	881b      	ldrh	r3, [r3, #0]
 8007fd0:	f023 0302 	bic.w	r3, r3, #2
 8007fd4:	b29a      	uxth	r2, r3
 8007fd6:	4b1a      	ldr	r3, [pc, #104]	; (8008040 <vVoltageRead+0x4f0>)
 8007fd8:	801a      	strh	r2, [r3, #0]
			UnderVoltagetick = 0;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	61bb      	str	r3, [r7, #24]
		}

		if (overVoltageflag == 1) {
 8007fde:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8007fe2:	2b01      	cmp	r3, #1
 8007fe4:	d11d      	bne.n	8008022 <vVoltageRead+0x4d2>
			if (OverVoltagetick == 0) OverVoltagetick = xTaskGetTickCount();
 8007fe6:	69fb      	ldr	r3, [r7, #28]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d103      	bne.n	8007ff4 <vVoltageRead+0x4a4>
 8007fec:	f00f fc36 	bl	801785c <xTaskGetTickCount>
 8007ff0:	61f8      	str	r0, [r7, #28]
 8007ff2:	e012      	b.n	800801a <vVoltageRead+0x4ca>
			else if(xTaskGetTickCount()-OverVoltagetick >= MAINBUFFER[OVER_VOLTAGE_ERROR_DELAY]){
 8007ff4:	f00f fc32 	bl	801785c <xTaskGetTickCount>
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	69fb      	ldr	r3, [r7, #28]
 8007ffc:	1ad3      	subs	r3, r2, r3
 8007ffe:	4a10      	ldr	r2, [pc, #64]	; (8008040 <vVoltageRead+0x4f0>)
 8008000:	f8b2 2048 	ldrh.w	r2, [r2, #72]	; 0x48
 8008004:	4293      	cmp	r3, r2
 8008006:	d308      	bcc.n	800801a <vVoltageRead+0x4ca>
				MAINBUFFER[FAULTS] |= 1 << 2;
 8008008:	4b0d      	ldr	r3, [pc, #52]	; (8008040 <vVoltageRead+0x4f0>)
 800800a:	881b      	ldrh	r3, [r3, #0]
 800800c:	f043 0304 	orr.w	r3, r3, #4
 8008010:	b29a      	uxth	r2, r3
 8008012:	4b0b      	ldr	r3, [pc, #44]	; (8008040 <vVoltageRead+0x4f0>)
 8008014:	801a      	strh	r2, [r3, #0]
				faultLatch();
 8008016:	f001 fed1 	bl	8009dbc <faultLatch>
			}
			overVoltageflag = 0;
 800801a:	2300      	movs	r3, #0
 800801c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8008020:	e008      	b.n	8008034 <vVoltageRead+0x4e4>

		} else{
			MAINBUFFER[FAULTS] &= ~(1 << 2);
 8008022:	4b07      	ldr	r3, [pc, #28]	; (8008040 <vVoltageRead+0x4f0>)
 8008024:	881b      	ldrh	r3, [r3, #0]
 8008026:	f023 0304 	bic.w	r3, r3, #4
 800802a:	b29a      	uxth	r2, r3
 800802c:	4b04      	ldr	r3, [pc, #16]	; (8008040 <vVoltageRead+0x4f0>)
 800802e:	801a      	strh	r2, [r3, #0]
			OverVoltagetick = 0;
 8008030:	2300      	movs	r3, #0
 8008032:	61fb      	str	r3, [r7, #28]
		}


		vTaskDelay(30);
 8008034:	201e      	movs	r0, #30
 8008036:	f00f fa81 	bl	801753c <vTaskDelay>
		faultLatch();
 800803a:	f001 febf 	bl	8009dbc <faultLatch>
		taskENTER_CRITICAL();
 800803e:	e5a6      	b.n	8007b8e <vVoltageRead+0x3e>
 8008040:	200024b8 	.word	0x200024b8
 8008044:	00000000 	.word	0x00000000

08008048 <vTemp_OWire>:
	}

}
static void vTemp_OWire(void *parameter) {
 8008048:	b5b0      	push	{r4, r5, r7, lr}
 800804a:	ed2d 8b02 	vpush	{d8}
 800804e:	f5ad 7d58 	sub.w	sp, sp, #864	; 0x360
 8008052:	af02      	add	r7, sp, #8
 8008054:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8008058:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 800805c:	6018      	str	r0, [r3, #0]

	float voltage[total_ic][2][16];
	float MaxCellHeat =0;
 800805e:	f04f 0300 	mov.w	r3, #0
 8008062:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
	float MinCellHeat =0;
 8008066:	f04f 0300 	mov.w	r3, #0
 800806a:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
	float TotalCellHeat =0;
 800806e:	f04f 0300 	mov.w	r3, #0
 8008072:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
	float MaxSlaveHeat =0;
 8008076:	f04f 0300 	mov.w	r3, #0
 800807a:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348

	uint8_t dummyflag = 0;
 800807e:	2300      	movs	r3, #0
 8008080:	f887 3347 	strb.w	r3, [r7, #839]	; 0x347
	uint8_t dummyflag2 = 0;
 8008084:	2300      	movs	r3, #0
 8008086:	f887 3346 	strb.w	r3, [r7, #838]	; 0x346
	uint8_t pecflag = 0;
 800808a:	2300      	movs	r3, #0
 800808c:	f887 3345 	strb.w	r3, [r7, #837]	; 0x345
	uint8_t cellOWflag = 0;
 8008090:	2300      	movs	r3, #0
 8008092:	f887 3344 	strb.w	r3, [r7, #836]	; 0x344
	uint8_t tempOWflag = 0;
 8008096:	2300      	movs	r3, #0
 8008098:	f887 3343 	strb.w	r3, [r7, #835]	; 0x343
	uint8_t slaveOHeatflag = 0;
 800809c:	2300      	movs	r3, #0
 800809e:	f887 3342 	strb.w	r3, [r7, #834]	; 0x342
	uint8_t overHeatflag = 0;
 80080a2:	2300      	movs	r3, #0
 80080a4:	f887 3341 	strb.w	r3, [r7, #833]	; 0x341
	uint8_t underHeatflag = 0;
 80080a8:	2300      	movs	r3, #0
 80080aa:	f887 3340 	strb.w	r3, [r7, #832]	; 0x340

	uint32_t SlaveOpenWiretick =0;
 80080ae:	2300      	movs	r3, #0
 80080b0:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
	uint32_t CellOpenWiretick =0;
 80080b4:	2300      	movs	r3, #0
 80080b6:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
	uint32_t TempOpenWiretick =0;
 80080ba:	2300      	movs	r3, #0
 80080bc:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
	uint32_t SlaveOverHeattick =0;
 80080c0:	2300      	movs	r3, #0
 80080c2:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
	uint32_t CellOverHeattick =0;
 80080c6:	2300      	movs	r3, #0
 80080c8:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
	uint32_t CellUnderHeattick =0;
 80080cc:	2300      	movs	r3, #0
 80080ce:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328

	uint8_t ntcSellectionList[16] = { 15, 1, 14, 2, 13, 3, 12, 4, 11, 5, 10, 6,
 80080d2:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80080d6:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 80080da:	4a9b      	ldr	r2, [pc, #620]	; (8008348 <vTemp_OWire+0x300>)
 80080dc:	461c      	mov	r4, r3
 80080de:	4613      	mov	r3, r2
 80080e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80080e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	for (;;) {

		//SECTION OF CELL OPEN WIRE DETECTION
		//
		//
		taskENTER_CRITICAL();
 80080e6:	f010 fd77 	bl	8018bd8 <vPortEnterCritical>
		adBmsReadData(total_ic, &ic[0], RDSVA, S_volt, A);
 80080ea:	2301      	movs	r3, #1
 80080ec:	9300      	str	r3, [sp, #0]
 80080ee:	2306      	movs	r3, #6
 80080f0:	4a96      	ldr	r2, [pc, #600]	; (800834c <vTemp_OWire+0x304>)
 80080f2:	4997      	ldr	r1, [pc, #604]	; (8008350 <vTemp_OWire+0x308>)
 80080f4:	2006      	movs	r0, #6
 80080f6:	f7f9 f9a1 	bl	800143c <adBmsReadData>
		adBmsWakeupIc(total_ic);
 80080fa:	2006      	movs	r0, #6
 80080fc:	f7f9 f980 	bl	8001400 <adBmsWakeupIc>
		adBms6830_Adsv_ALL(CONTINUOUS, DISCHARGE_PERMITTED, OW_ON_EVEN_CH, total_ic);
 8008100:	4b94      	ldr	r3, [pc, #592]	; (8008354 <vTemp_OWire+0x30c>)
 8008102:	7819      	ldrb	r1, [r3, #0]
 8008104:	2306      	movs	r3, #6
 8008106:	2201      	movs	r2, #1
 8008108:	2001      	movs	r0, #1
 800810a:	f7fa fb2c 	bl	8002766 <adBms6830_Adsv_ALL>
		vTaskDelay(2);
 800810e:	2002      	movs	r0, #2
 8008110:	f00f fa14 	bl	801753c <vTaskDelay>
		adBmsReadData(total_ic, &ic[0], RDSVA, S_volt, A);
 8008114:	2301      	movs	r3, #1
 8008116:	9300      	str	r3, [sp, #0]
 8008118:	2306      	movs	r3, #6
 800811a:	4a8c      	ldr	r2, [pc, #560]	; (800834c <vTemp_OWire+0x304>)
 800811c:	498c      	ldr	r1, [pc, #560]	; (8008350 <vTemp_OWire+0x308>)
 800811e:	2006      	movs	r0, #6
 8008120:	f7f9 f98c 	bl	800143c <adBmsReadData>
		adBmsReadData(total_ic, &ic[0], RDSVB, S_volt, B);
 8008124:	2302      	movs	r3, #2
 8008126:	9300      	str	r3, [sp, #0]
 8008128:	2306      	movs	r3, #6
 800812a:	4a8b      	ldr	r2, [pc, #556]	; (8008358 <vTemp_OWire+0x310>)
 800812c:	4988      	ldr	r1, [pc, #544]	; (8008350 <vTemp_OWire+0x308>)
 800812e:	2006      	movs	r0, #6
 8008130:	f7f9 f984 	bl	800143c <adBmsReadData>
		adBmsReadData(total_ic, &ic[0], RDSVC, S_volt, C);
 8008134:	2303      	movs	r3, #3
 8008136:	9300      	str	r3, [sp, #0]
 8008138:	2306      	movs	r3, #6
 800813a:	4a88      	ldr	r2, [pc, #544]	; (800835c <vTemp_OWire+0x314>)
 800813c:	4984      	ldr	r1, [pc, #528]	; (8008350 <vTemp_OWire+0x308>)
 800813e:	2006      	movs	r0, #6
 8008140:	f7f9 f97c 	bl	800143c <adBmsReadData>
		adBmsReadData(total_ic, &ic[0], RDSVD, S_volt, D);
 8008144:	2304      	movs	r3, #4
 8008146:	9300      	str	r3, [sp, #0]
 8008148:	2306      	movs	r3, #6
 800814a:	4a85      	ldr	r2, [pc, #532]	; (8008360 <vTemp_OWire+0x318>)
 800814c:	4980      	ldr	r1, [pc, #512]	; (8008350 <vTemp_OWire+0x308>)
 800814e:	2006      	movs	r0, #6
 8008150:	f7f9 f974 	bl	800143c <adBmsReadData>
		adBmsReadData(total_ic, &ic[0], RDSVE, S_volt, E);
 8008154:	2305      	movs	r3, #5
 8008156:	9300      	str	r3, [sp, #0]
 8008158:	2306      	movs	r3, #6
 800815a:	4a82      	ldr	r2, [pc, #520]	; (8008364 <vTemp_OWire+0x31c>)
 800815c:	497c      	ldr	r1, [pc, #496]	; (8008350 <vTemp_OWire+0x308>)
 800815e:	2006      	movs	r0, #6
 8008160:	f7f9 f96c 	bl	800143c <adBmsReadData>
		adBmsReadData(total_ic, &ic[0], RDSVF, S_volt, F);
 8008164:	2306      	movs	r3, #6
 8008166:	9300      	str	r3, [sp, #0]
 8008168:	2306      	movs	r3, #6
 800816a:	4a7f      	ldr	r2, [pc, #508]	; (8008368 <vTemp_OWire+0x320>)
 800816c:	4978      	ldr	r1, [pc, #480]	; (8008350 <vTemp_OWire+0x308>)
 800816e:	2006      	movs	r0, #6
 8008170:	f7f9 f964 	bl	800143c <adBmsReadData>
		taskEXIT_CRITICAL();
 8008174:	f010 fd60 	bl	8018c38 <vPortExitCritical>

		for (uint8_t icCounter = 0; icCounter < total_ic; icCounter++) {
 8008178:	2300      	movs	r3, #0
 800817a:	f887 3327 	strb.w	r3, [r7, #807]	; 0x327
 800817e:	e042      	b.n	8008206 <vTemp_OWire+0x1be>
			for (uint8_t cell = 0; cell < 16; cell++) {
 8008180:	2300      	movs	r3, #0
 8008182:	f887 3326 	strb.w	r3, [r7, #806]	; 0x326
 8008186:	e035      	b.n	80081f4 <vTemp_OWire+0x1ac>
				if (ic[icCounter].cccrc.scell_pec == 1)
 8008188:	f897 3327 	ldrb.w	r3, [r7, #807]	; 0x327
 800818c:	4a70      	ldr	r2, [pc, #448]	; (8008350 <vTemp_OWire+0x308>)
 800818e:	f44f 714a 	mov.w	r1, #808	; 0x328
 8008192:	fb01 f303 	mul.w	r3, r1, r3
 8008196:	4413      	add	r3, r2
 8008198:	f203 1393 	addw	r3, r3, #403	; 0x193
 800819c:	781b      	ldrb	r3, [r3, #0]
 800819e:	2b01      	cmp	r3, #1
 80081a0:	d103      	bne.n	80081aa <vTemp_OWire+0x162>
					pecflag = 1;
 80081a2:	2301      	movs	r3, #1
 80081a4:	f887 3345 	strb.w	r3, [r7, #837]	; 0x345
 80081a8:	e01f      	b.n	80081ea <vTemp_OWire+0x1a2>

				else {
					voltage[icCounter][0][cell] = getVoltage(
							ic[icCounter].scell.sc_codes[cell]);
 80081aa:	f897 2327 	ldrb.w	r2, [r7, #807]	; 0x327
 80081ae:	f897 3326 	ldrb.w	r3, [r7, #806]	; 0x326
 80081b2:	4967      	ldr	r1, [pc, #412]	; (8008350 <vTemp_OWire+0x308>)
 80081b4:	f44f 70ca 	mov.w	r0, #404	; 0x194
 80081b8:	fb00 f202 	mul.w	r2, r0, r2
 80081bc:	4413      	add	r3, r2
 80081be:	3330      	adds	r3, #48	; 0x30
 80081c0:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
					voltage[icCounter][0][cell] = getVoltage(
 80081c4:	f897 5327 	ldrb.w	r5, [r7, #807]	; 0x327
 80081c8:	f897 4326 	ldrb.w	r4, [r7, #806]	; 0x326
 80081cc:	4618      	mov	r0, r3
 80081ce:	f7fa fbef 	bl	80029b0 <getVoltage>
 80081d2:	eef0 7a40 	vmov.f32	s15, s0
 80081d6:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80081da:	f5a3 724f 	sub.w	r2, r3, #828	; 0x33c
 80081de:	016b      	lsls	r3, r5, #5
 80081e0:	4423      	add	r3, r4
 80081e2:	009b      	lsls	r3, r3, #2
 80081e4:	4413      	add	r3, r2
 80081e6:	edc3 7a00 	vstr	s15, [r3]
			for (uint8_t cell = 0; cell < 16; cell++) {
 80081ea:	f897 3326 	ldrb.w	r3, [r7, #806]	; 0x326
 80081ee:	3301      	adds	r3, #1
 80081f0:	f887 3326 	strb.w	r3, [r7, #806]	; 0x326
 80081f4:	f897 3326 	ldrb.w	r3, [r7, #806]	; 0x326
 80081f8:	2b0f      	cmp	r3, #15
 80081fa:	d9c5      	bls.n	8008188 <vTemp_OWire+0x140>
		for (uint8_t icCounter = 0; icCounter < total_ic; icCounter++) {
 80081fc:	f897 3327 	ldrb.w	r3, [r7, #807]	; 0x327
 8008200:	3301      	adds	r3, #1
 8008202:	f887 3327 	strb.w	r3, [r7, #807]	; 0x327
 8008206:	f897 3327 	ldrb.w	r3, [r7, #807]	; 0x327
 800820a:	2b05      	cmp	r3, #5
 800820c:	d9b8      	bls.n	8008180 <vTemp_OWire+0x138>

				}

			}
		}
		vTaskDelay(8);
 800820e:	2008      	movs	r0, #8
 8008210:	f00f f994 	bl	801753c <vTaskDelay>

		taskENTER_CRITICAL();
 8008214:	f010 fce0 	bl	8018bd8 <vPortEnterCritical>
		adBmsWakeupIc(total_ic);
 8008218:	2006      	movs	r0, #6
 800821a:	f7f9 f8f1 	bl	8001400 <adBmsWakeupIc>
		adBms6830_Adsv_ALL(CONTINUOUS, DISCHARGE_PERMITTED, OW_ON_ODD_CH, total_ic);
 800821e:	4b4d      	ldr	r3, [pc, #308]	; (8008354 <vTemp_OWire+0x30c>)
 8008220:	7819      	ldrb	r1, [r3, #0]
 8008222:	2306      	movs	r3, #6
 8008224:	2202      	movs	r2, #2
 8008226:	2001      	movs	r0, #1
 8008228:	f7fa fa9d 	bl	8002766 <adBms6830_Adsv_ALL>
		vTaskDelay(2);
 800822c:	2002      	movs	r0, #2
 800822e:	f00f f985 	bl	801753c <vTaskDelay>
		adBmsReadData(total_ic, &ic[0], RDSVB, S_volt, B);
 8008232:	2302      	movs	r3, #2
 8008234:	9300      	str	r3, [sp, #0]
 8008236:	2306      	movs	r3, #6
 8008238:	4a47      	ldr	r2, [pc, #284]	; (8008358 <vTemp_OWire+0x310>)
 800823a:	4945      	ldr	r1, [pc, #276]	; (8008350 <vTemp_OWire+0x308>)
 800823c:	2006      	movs	r0, #6
 800823e:	f7f9 f8fd 	bl	800143c <adBmsReadData>
		adBmsReadData(total_ic, &ic[0], RDSVA, S_volt, A);
 8008242:	2301      	movs	r3, #1
 8008244:	9300      	str	r3, [sp, #0]
 8008246:	2306      	movs	r3, #6
 8008248:	4a40      	ldr	r2, [pc, #256]	; (800834c <vTemp_OWire+0x304>)
 800824a:	4941      	ldr	r1, [pc, #260]	; (8008350 <vTemp_OWire+0x308>)
 800824c:	2006      	movs	r0, #6
 800824e:	f7f9 f8f5 	bl	800143c <adBmsReadData>
		adBmsReadData(total_ic, &ic[0], RDSVC, S_volt, C);
 8008252:	2303      	movs	r3, #3
 8008254:	9300      	str	r3, [sp, #0]
 8008256:	2306      	movs	r3, #6
 8008258:	4a40      	ldr	r2, [pc, #256]	; (800835c <vTemp_OWire+0x314>)
 800825a:	493d      	ldr	r1, [pc, #244]	; (8008350 <vTemp_OWire+0x308>)
 800825c:	2006      	movs	r0, #6
 800825e:	f7f9 f8ed 	bl	800143c <adBmsReadData>
		adBmsReadData(total_ic, &ic[0], RDSVD, S_volt, D);
 8008262:	2304      	movs	r3, #4
 8008264:	9300      	str	r3, [sp, #0]
 8008266:	2306      	movs	r3, #6
 8008268:	4a3d      	ldr	r2, [pc, #244]	; (8008360 <vTemp_OWire+0x318>)
 800826a:	4939      	ldr	r1, [pc, #228]	; (8008350 <vTemp_OWire+0x308>)
 800826c:	2006      	movs	r0, #6
 800826e:	f7f9 f8e5 	bl	800143c <adBmsReadData>
		adBmsReadData(total_ic, &ic[0], RDSVE, S_volt, E);
 8008272:	2305      	movs	r3, #5
 8008274:	9300      	str	r3, [sp, #0]
 8008276:	2306      	movs	r3, #6
 8008278:	4a3a      	ldr	r2, [pc, #232]	; (8008364 <vTemp_OWire+0x31c>)
 800827a:	4935      	ldr	r1, [pc, #212]	; (8008350 <vTemp_OWire+0x308>)
 800827c:	2006      	movs	r0, #6
 800827e:	f7f9 f8dd 	bl	800143c <adBmsReadData>
		adBmsReadData(total_ic, &ic[0], RDSVF, S_volt, F);
 8008282:	2306      	movs	r3, #6
 8008284:	9300      	str	r3, [sp, #0]
 8008286:	2306      	movs	r3, #6
 8008288:	4a37      	ldr	r2, [pc, #220]	; (8008368 <vTemp_OWire+0x320>)
 800828a:	4931      	ldr	r1, [pc, #196]	; (8008350 <vTemp_OWire+0x308>)
 800828c:	2006      	movs	r0, #6
 800828e:	f7f9 f8d5 	bl	800143c <adBmsReadData>
		taskEXIT_CRITICAL();
 8008292:	f010 fcd1 	bl	8018c38 <vPortExitCritical>

		for (uint8_t icCounter = 0; icCounter < total_ic; icCounter++) {
 8008296:	2300      	movs	r3, #0
 8008298:	f887 3325 	strb.w	r3, [r7, #805]	; 0x325
 800829c:	e043      	b.n	8008326 <vTemp_OWire+0x2de>
			for (uint8_t cell = 0; cell < 16; cell++) {
 800829e:	2300      	movs	r3, #0
 80082a0:	f887 3324 	strb.w	r3, [r7, #804]	; 0x324
 80082a4:	e036      	b.n	8008314 <vTemp_OWire+0x2cc>
				if (ic[icCounter].cccrc.scell_pec == 1)
 80082a6:	f897 3325 	ldrb.w	r3, [r7, #805]	; 0x325
 80082aa:	4a29      	ldr	r2, [pc, #164]	; (8008350 <vTemp_OWire+0x308>)
 80082ac:	f44f 714a 	mov.w	r1, #808	; 0x328
 80082b0:	fb01 f303 	mul.w	r3, r1, r3
 80082b4:	4413      	add	r3, r2
 80082b6:	f203 1393 	addw	r3, r3, #403	; 0x193
 80082ba:	781b      	ldrb	r3, [r3, #0]
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d103      	bne.n	80082c8 <vTemp_OWire+0x280>
					pecflag = 1;
 80082c0:	2301      	movs	r3, #1
 80082c2:	f887 3345 	strb.w	r3, [r7, #837]	; 0x345
 80082c6:	e020      	b.n	800830a <vTemp_OWire+0x2c2>
				else {
					voltage[icCounter][1][cell] = getVoltage(
							ic[icCounter].scell.sc_codes[cell]);
 80082c8:	f897 2325 	ldrb.w	r2, [r7, #805]	; 0x325
 80082cc:	f897 3324 	ldrb.w	r3, [r7, #804]	; 0x324
 80082d0:	491f      	ldr	r1, [pc, #124]	; (8008350 <vTemp_OWire+0x308>)
 80082d2:	f44f 70ca 	mov.w	r0, #404	; 0x194
 80082d6:	fb00 f202 	mul.w	r2, r0, r2
 80082da:	4413      	add	r3, r2
 80082dc:	3330      	adds	r3, #48	; 0x30
 80082de:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
					voltage[icCounter][1][cell] = getVoltage(
 80082e2:	f897 5325 	ldrb.w	r5, [r7, #805]	; 0x325
 80082e6:	f897 4324 	ldrb.w	r4, [r7, #804]	; 0x324
 80082ea:	4618      	mov	r0, r3
 80082ec:	f7fa fb60 	bl	80029b0 <getVoltage>
 80082f0:	eef0 7a40 	vmov.f32	s15, s0
 80082f4:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80082f8:	f5a3 724f 	sub.w	r2, r3, #828	; 0x33c
 80082fc:	016b      	lsls	r3, r5, #5
 80082fe:	4423      	add	r3, r4
 8008300:	3310      	adds	r3, #16
 8008302:	009b      	lsls	r3, r3, #2
 8008304:	4413      	add	r3, r2
 8008306:	edc3 7a00 	vstr	s15, [r3]
			for (uint8_t cell = 0; cell < 16; cell++) {
 800830a:	f897 3324 	ldrb.w	r3, [r7, #804]	; 0x324
 800830e:	3301      	adds	r3, #1
 8008310:	f887 3324 	strb.w	r3, [r7, #804]	; 0x324
 8008314:	f897 3324 	ldrb.w	r3, [r7, #804]	; 0x324
 8008318:	2b0f      	cmp	r3, #15
 800831a:	d9c4      	bls.n	80082a6 <vTemp_OWire+0x25e>
		for (uint8_t icCounter = 0; icCounter < total_ic; icCounter++) {
 800831c:	f897 3325 	ldrb.w	r3, [r7, #805]	; 0x325
 8008320:	3301      	adds	r3, #1
 8008322:	f887 3325 	strb.w	r3, [r7, #805]	; 0x325
 8008326:	f897 3325 	ldrb.w	r3, [r7, #805]	; 0x325
 800832a:	2b05      	cmp	r3, #5
 800832c:	d9b7      	bls.n	800829e <vTemp_OWire+0x256>
					//				printf("\n");

				}
			}
		}
		for (uint8_t icCounter = 0; icCounter < total_ic; icCounter++) {
 800832e:	2300      	movs	r3, #0
 8008330:	f887 3323 	strb.w	r3, [r7, #803]	; 0x323
 8008334:	e066      	b.n	8008404 <vTemp_OWire+0x3bc>
			for (uint8_t cell = 0; cell < 16; cell++) {
 8008336:	2300      	movs	r3, #0
 8008338:	f887 3322 	strb.w	r3, [r7, #802]	; 0x322
 800833c:	e059      	b.n	80083f2 <vTemp_OWire+0x3aa>
				for (uint8_t cifttek = 0; cifttek < 2; cifttek++) {
 800833e:	2300      	movs	r3, #0
 8008340:	f887 3321 	strb.w	r3, [r7, #801]	; 0x321
 8008344:	e04c      	b.n	80083e0 <vTemp_OWire+0x398>
 8008346:	bf00      	nop
 8008348:	0801fe40 	.word	0x0801fe40
 800834c:	20000024 	.word	0x20000024
 8008350:	200005f8 	.word	0x200005f8
 8008354:	2000034e 	.word	0x2000034e
 8008358:	20000028 	.word	0x20000028
 800835c:	2000002c 	.word	0x2000002c
 8008360:	20000030 	.word	0x20000030
 8008364:	20000034 	.word	0x20000034
 8008368:	20000038 	.word	0x20000038
									//printf("ic:%d cell %d %d: %f\n", icCounter, cell + 1, cifttek,
										//	voltage[icCounter][cifttek][cell]);
					if (voltage[icCounter][cifttek][cell] < 2
 800836c:	f897 0323 	ldrb.w	r0, [r7, #803]	; 0x323
 8008370:	f897 1321 	ldrb.w	r1, [r7, #801]	; 0x321
 8008374:	f897 3322 	ldrb.w	r3, [r7, #802]	; 0x322
 8008378:	f507 7256 	add.w	r2, r7, #856	; 0x358
 800837c:	f5a2 724f 	sub.w	r2, r2, #828	; 0x33c
 8008380:	0040      	lsls	r0, r0, #1
 8008382:	4401      	add	r1, r0
 8008384:	0109      	lsls	r1, r1, #4
 8008386:	440b      	add	r3, r1
 8008388:	009b      	lsls	r3, r3, #2
 800838a:	4413      	add	r3, r2
 800838c:	edd3 7a00 	vldr	s15, [r3]
 8008390:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008394:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800839c:	d418      	bmi.n	80083d0 <vTemp_OWire+0x388>
							|| voltage[icCounter][cifttek][cell] > 4.5) {
 800839e:	f897 0323 	ldrb.w	r0, [r7, #803]	; 0x323
 80083a2:	f897 1321 	ldrb.w	r1, [r7, #801]	; 0x321
 80083a6:	f897 3322 	ldrb.w	r3, [r7, #802]	; 0x322
 80083aa:	f507 7256 	add.w	r2, r7, #856	; 0x358
 80083ae:	f5a2 724f 	sub.w	r2, r2, #828	; 0x33c
 80083b2:	0040      	lsls	r0, r0, #1
 80083b4:	4401      	add	r1, r0
 80083b6:	0109      	lsls	r1, r1, #4
 80083b8:	440b      	add	r3, r1
 80083ba:	009b      	lsls	r3, r3, #2
 80083bc:	4413      	add	r3, r2
 80083be:	edd3 7a00 	vldr	s15, [r3]
 80083c2:	eeb1 7a02 	vmov.f32	s14, #18	; 0x40900000  4.5
 80083c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80083ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083ce:	dd02      	ble.n	80083d6 <vTemp_OWire+0x38e>
						//printf("HATA:%d\n",cell+1);
						cellOWflag = 1;
 80083d0:	2301      	movs	r3, #1
 80083d2:	f887 3344 	strb.w	r3, [r7, #836]	; 0x344
				for (uint8_t cifttek = 0; cifttek < 2; cifttek++) {
 80083d6:	f897 3321 	ldrb.w	r3, [r7, #801]	; 0x321
 80083da:	3301      	adds	r3, #1
 80083dc:	f887 3321 	strb.w	r3, [r7, #801]	; 0x321
 80083e0:	f897 3321 	ldrb.w	r3, [r7, #801]	; 0x321
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d9c1      	bls.n	800836c <vTemp_OWire+0x324>
			for (uint8_t cell = 0; cell < 16; cell++) {
 80083e8:	f897 3322 	ldrb.w	r3, [r7, #802]	; 0x322
 80083ec:	3301      	adds	r3, #1
 80083ee:	f887 3322 	strb.w	r3, [r7, #802]	; 0x322
 80083f2:	f897 3322 	ldrb.w	r3, [r7, #802]	; 0x322
 80083f6:	2b0f      	cmp	r3, #15
 80083f8:	d9a1      	bls.n	800833e <vTemp_OWire+0x2f6>
		for (uint8_t icCounter = 0; icCounter < total_ic; icCounter++) {
 80083fa:	f897 3323 	ldrb.w	r3, [r7, #803]	; 0x323
 80083fe:	3301      	adds	r3, #1
 8008400:	f887 3323 	strb.w	r3, [r7, #803]	; 0x323
 8008404:	f897 3323 	ldrb.w	r3, [r7, #803]	; 0x323
 8008408:	2b05      	cmp	r3, #5
 800840a:	d994      	bls.n	8008336 <vTemp_OWire+0x2ee>
        //SLAVE TEMPERATURE
//		adBmsCsLow();
//		vTaskDelay(4);
//		adBmsCsHigh();
//		vTaskDelay(4);
		taskENTER_CRITICAL();
 800840c:	f010 fbe4 	bl	8018bd8 <vPortEnterCritical>
		adBmsWakeupIc(total_ic);
 8008410:	2006      	movs	r0, #6
 8008412:	f7f8 fff5 	bl	8001400 <adBmsWakeupIc>
		adBmsWriteData(total_ic, &ic[0], WRCFGA, Config, A);
 8008416:	2301      	movs	r3, #1
 8008418:	9300      	str	r3, [sp, #0]
 800841a:	2308      	movs	r3, #8
 800841c:	4aa4      	ldr	r2, [pc, #656]	; (80086b0 <vTemp_OWire+0x668>)
 800841e:	49a5      	ldr	r1, [pc, #660]	; (80086b4 <vTemp_OWire+0x66c>)
 8008420:	2006      	movs	r0, #6
 8008422:	f7f9 fd43 	bl	8001eac <adBmsWriteData>
		adBms6830_Adax_ALL(AUX_OW_OFF, PUP_DOWN, AUX_ALL,total_ic);
 8008426:	2306      	movs	r3, #6
 8008428:	2200      	movs	r2, #0
 800842a:	2100      	movs	r1, #0
 800842c:	2000      	movs	r0, #0
 800842e:	f7fa f9d0 	bl	80027d2 <adBms6830_Adax_ALL>
		adBmsReadData(total_ic, &ic[0], RDAUXA, Aux, A);
 8008432:	2301      	movs	r3, #1
 8008434:	9300      	str	r3, [sp, #0]
 8008436:	2301      	movs	r3, #1
 8008438:	4a9f      	ldr	r2, [pc, #636]	; (80086b8 <vTemp_OWire+0x670>)
 800843a:	499e      	ldr	r1, [pc, #632]	; (80086b4 <vTemp_OWire+0x66c>)
 800843c:	2006      	movs	r0, #6
 800843e:	f7f8 fffd 	bl	800143c <adBmsReadData>
		taskEXIT_CRITICAL();
 8008442:	f010 fbf9 	bl	8018c38 <vPortExitCritical>

		for (uint8_t icCounter = 0; icCounter < total_ic; icCounter++) {
 8008446:	2300      	movs	r3, #0
 8008448:	f887 3320 	strb.w	r3, [r7, #800]	; 0x320
 800844c:	e236      	b.n	80088bc <vTemp_OWire+0x874>
			ic[icCounter].TempOpenWire = 0;
 800844e:	f897 3320 	ldrb.w	r3, [r7, #800]	; 0x320
 8008452:	4a98      	ldr	r2, [pc, #608]	; (80086b4 <vTemp_OWire+0x66c>)
 8008454:	f44f 714a 	mov.w	r1, #808	; 0x328
 8008458:	fb01 f303 	mul.w	r3, r1, r3
 800845c:	4413      	add	r3, r2
 800845e:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8008462:	2200      	movs	r2, #0
 8008464:	801a      	strh	r2, [r3, #0]

			ic[icCounter].board_temp = ((getVoltage(ic[icCounter].aux.a_codes[0]))-0.4)*50;
 8008466:	f897 3320 	ldrb.w	r3, [r7, #800]	; 0x320
 800846a:	4a92      	ldr	r2, [pc, #584]	; (80086b4 <vTemp_OWire+0x66c>)
 800846c:	f44f 714a 	mov.w	r1, #808	; 0x328
 8008470:	fb01 f303 	mul.w	r3, r1, r3
 8008474:	4413      	add	r3, r2
 8008476:	33a0      	adds	r3, #160	; 0xa0
 8008478:	f9b3 3000 	ldrsh.w	r3, [r3]
 800847c:	4618      	mov	r0, r3
 800847e:	f7fa fa97 	bl	80029b0 <getVoltage>
 8008482:	ee10 3a10 	vmov	r3, s0
 8008486:	4618      	mov	r0, r3
 8008488:	f7f8 f87e 	bl	8000588 <__aeabi_f2d>
 800848c:	a386      	add	r3, pc, #536	; (adr r3, 80086a8 <vTemp_OWire+0x660>)
 800848e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008492:	f7f7 ff19 	bl	80002c8 <__aeabi_dsub>
 8008496:	4602      	mov	r2, r0
 8008498:	460b      	mov	r3, r1
 800849a:	4610      	mov	r0, r2
 800849c:	4619      	mov	r1, r3
 800849e:	f04f 0200 	mov.w	r2, #0
 80084a2:	4b86      	ldr	r3, [pc, #536]	; (80086bc <vTemp_OWire+0x674>)
 80084a4:	f7f8 f8c8 	bl	8000638 <__aeabi_dmul>
 80084a8:	4602      	mov	r2, r0
 80084aa:	460b      	mov	r3, r1
 80084ac:	f897 4320 	ldrb.w	r4, [r7, #800]	; 0x320
 80084b0:	4610      	mov	r0, r2
 80084b2:	4619      	mov	r1, r3
 80084b4:	f7f8 fbb8 	bl	8000c28 <__aeabi_d2f>
 80084b8:	4602      	mov	r2, r0
 80084ba:	497e      	ldr	r1, [pc, #504]	; (80086b4 <vTemp_OWire+0x66c>)
 80084bc:	f44f 734a 	mov.w	r3, #808	; 0x328
 80084c0:	fb04 f303 	mul.w	r3, r4, r3
 80084c4:	440b      	add	r3, r1
 80084c6:	f503 7348 	add.w	r3, r3, #800	; 0x320
 80084ca:	601a      	str	r2, [r3, #0]

			if(ic[icCounter].board_temp > SLAVE_OVER_HEAT_TRESHOLD) slaveOHeatflag = 1;
 80084cc:	f897 3320 	ldrb.w	r3, [r7, #800]	; 0x320
 80084d0:	4a78      	ldr	r2, [pc, #480]	; (80086b4 <vTemp_OWire+0x66c>)
 80084d2:	f44f 714a 	mov.w	r1, #808	; 0x328
 80084d6:	fb01 f303 	mul.w	r3, r1, r3
 80084da:	4413      	add	r3, r2
 80084dc:	f503 7348 	add.w	r3, r3, #800	; 0x320
 80084e0:	edd3 7a00 	vldr	s15, [r3]
 80084e4:	ed9f 7a76 	vldr	s14, [pc, #472]	; 80086c0 <vTemp_OWire+0x678>
 80084e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80084ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084f0:	dd02      	ble.n	80084f8 <vTemp_OWire+0x4b0>
 80084f2:	2301      	movs	r3, #1
 80084f4:	f887 3342 	strb.w	r3, [r7, #834]	; 0x342

			if(dummyflag == 0)
 80084f8:	f897 3347 	ldrb.w	r3, [r7, #839]	; 0x347
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d10f      	bne.n	8008520 <vTemp_OWire+0x4d8>
			{
				MaxSlaveHeat = ic[icCounter].board_temp;
 8008500:	f897 3320 	ldrb.w	r3, [r7, #800]	; 0x320
 8008504:	4a6b      	ldr	r2, [pc, #428]	; (80086b4 <vTemp_OWire+0x66c>)
 8008506:	f44f 714a 	mov.w	r1, #808	; 0x328
 800850a:	fb01 f303 	mul.w	r3, r1, r3
 800850e:	4413      	add	r3, r2
 8008510:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348
				dummyflag = 1;
 800851a:	2301      	movs	r3, #1
 800851c:	f887 3347 	strb.w	r3, [r7, #839]	; 0x347
		    }

			if(ic[icCounter].board_temp > MaxSlaveHeat)
 8008520:	f897 3320 	ldrb.w	r3, [r7, #800]	; 0x320
 8008524:	4a63      	ldr	r2, [pc, #396]	; (80086b4 <vTemp_OWire+0x66c>)
 8008526:	f44f 714a 	mov.w	r1, #808	; 0x328
 800852a:	fb01 f303 	mul.w	r3, r1, r3
 800852e:	4413      	add	r3, r2
 8008530:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8008534:	edd3 7a00 	vldr	s15, [r3]
 8008538:	ed97 7ad2 	vldr	s14, [r7, #840]	; 0x348
 800853c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008544:	d50c      	bpl.n	8008560 <vTemp_OWire+0x518>
			{
				MaxSlaveHeat = ic[icCounter].board_temp;
 8008546:	f897 3320 	ldrb.w	r3, [r7, #800]	; 0x320
 800854a:	4a5a      	ldr	r2, [pc, #360]	; (80086b4 <vTemp_OWire+0x66c>)
 800854c:	f44f 714a 	mov.w	r1, #808	; 0x328
 8008550:	fb01 f303 	mul.w	r3, r1, r3
 8008554:	4413      	add	r3, r2
 8008556:	f503 7348 	add.w	r3, r3, #800	; 0x320
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348
			}
	        //CELL TEMPERATURE
			//adBmsWakeupIc(total_ic);
			for (uint8_t ntcSellection = 0; ntcSellection < 16;
 8008560:	2300      	movs	r3, #0
 8008562:	f887 331f 	strb.w	r3, [r7, #799]	; 0x31f
 8008566:	e19f      	b.n	80088a8 <vTemp_OWire+0x860>
					ntcSellection++) {

				ic[icCounter].tx_cfga.gpo = ntcSellectionList[ntcSellection]
 8008568:	f897 331f 	ldrb.w	r3, [r7, #799]	; 0x31f
 800856c:	f507 7256 	add.w	r2, r7, #856	; 0x358
 8008570:	f5a2 7253 	sub.w	r2, r2, #844	; 0x34c
 8008574:	5cd3      	ldrb	r3, [r2, r3]
						<< 6 | 0x3F;
 8008576:	019b      	lsls	r3, r3, #6
 8008578:	b21b      	sxth	r3, r3
 800857a:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 800857e:	b21a      	sxth	r2, r3
				ic[icCounter].tx_cfga.gpo = ntcSellectionList[ntcSellection]
 8008580:	f897 3320 	ldrb.w	r3, [r7, #800]	; 0x320
						<< 6 | 0x3F;
 8008584:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8008588:	b291      	uxth	r1, r2
				ic[icCounter].tx_cfga.gpo = ntcSellectionList[ntcSellection]
 800858a:	4a4a      	ldr	r2, [pc, #296]	; (80086b4 <vTemp_OWire+0x66c>)
 800858c:	f44f 704a 	mov.w	r0, #808	; 0x328
 8008590:	fb00 f303 	mul.w	r3, r0, r3
 8008594:	441a      	add	r2, r3
 8008596:	8853      	ldrh	r3, [r2, #2]
 8008598:	f361 134e 	bfi	r3, r1, #5, #10
 800859c:	8053      	strh	r3, [r2, #2]


				taskENTER_CRITICAL();
 800859e:	f010 fb1b 	bl	8018bd8 <vPortEnterCritical>
				adBmsWakeupIc(total_ic);
 80085a2:	2006      	movs	r0, #6
 80085a4:	f7f8 ff2c 	bl	8001400 <adBmsWakeupIc>
				adBmsWriteData(total_ic, &ic[0], WRCFGA, Config, A);
 80085a8:	2301      	movs	r3, #1
 80085aa:	9300      	str	r3, [sp, #0]
 80085ac:	2308      	movs	r3, #8
 80085ae:	4a40      	ldr	r2, [pc, #256]	; (80086b0 <vTemp_OWire+0x668>)
 80085b0:	4940      	ldr	r1, [pc, #256]	; (80086b4 <vTemp_OWire+0x66c>)
 80085b2:	2006      	movs	r0, #6
 80085b4:	f7f9 fc7a 	bl	8001eac <adBmsWriteData>
				adBms6830_Adax_ALL(AUX_OW_OFF, PUP_DOWN, AUX_ALL,total_ic);
 80085b8:	2306      	movs	r3, #6
 80085ba:	2200      	movs	r2, #0
 80085bc:	2100      	movs	r1, #0
 80085be:	2000      	movs	r0, #0
 80085c0:	f7fa f907 	bl	80027d2 <adBms6830_Adax_ALL>
				adBmsWakeupIc(total_ic);
 80085c4:	2006      	movs	r0, #6
 80085c6:	f7f8 ff1b 	bl	8001400 <adBmsWakeupIc>
				adBmsReadData(total_ic, &ic[0], RDAUXB, Aux, B);
 80085ca:	2302      	movs	r3, #2
 80085cc:	9300      	str	r3, [sp, #0]
 80085ce:	2301      	movs	r3, #1
 80085d0:	4a3c      	ldr	r2, [pc, #240]	; (80086c4 <vTemp_OWire+0x67c>)
 80085d2:	4938      	ldr	r1, [pc, #224]	; (80086b4 <vTemp_OWire+0x66c>)
 80085d4:	2006      	movs	r0, #6
 80085d6:	f7f8 ff31 	bl	800143c <adBmsReadData>
				adBmsReadData(total_ic, &ic[0], RDSTATA, Status, A);
 80085da:	2301      	movs	r3, #1
 80085dc:	9300      	str	r3, [sp, #0]
 80085de:	2303      	movs	r3, #3
 80085e0:	4a39      	ldr	r2, [pc, #228]	; (80086c8 <vTemp_OWire+0x680>)
 80085e2:	4934      	ldr	r1, [pc, #208]	; (80086b4 <vTemp_OWire+0x66c>)
 80085e4:	2006      	movs	r0, #6
 80085e6:	f7f8 ff29 	bl	800143c <adBmsReadData>
				taskEXIT_CRITICAL();
 80085ea:	f010 fb25 	bl	8018c38 <vPortExitCritical>

				if (ic[icCounter].cccrc.aux_pec != 1)  {
 80085ee:	f897 3320 	ldrb.w	r3, [r7, #800]	; 0x320
 80085f2:	4a30      	ldr	r2, [pc, #192]	; (80086b4 <vTemp_OWire+0x66c>)
 80085f4:	f44f 714a 	mov.w	r1, #808	; 0x328
 80085f8:	fb01 f303 	mul.w	r3, r1, r3
 80085fc:	4413      	add	r3, r2
 80085fe:	f203 1395 	addw	r3, r3, #405	; 0x195
 8008602:	781b      	ldrb	r3, [r3, #0]
 8008604:	2b01      	cmp	r3, #1
 8008606:	f000 8096 	beq.w	8008736 <vTemp_OWire+0x6ee>
					//FAULTS

					if (abs(getVoltage(ic[icCounter].aux.a_codes[5])- getVoltage(ic[icCounter].stata.vref2))< 0.001) {
 800860a:	f897 3320 	ldrb.w	r3, [r7, #800]	; 0x320
 800860e:	4a29      	ldr	r2, [pc, #164]	; (80086b4 <vTemp_OWire+0x66c>)
 8008610:	f44f 714a 	mov.w	r1, #808	; 0x328
 8008614:	fb01 f303 	mul.w	r3, r1, r3
 8008618:	4413      	add	r3, r2
 800861a:	33aa      	adds	r3, #170	; 0xaa
 800861c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008620:	4618      	mov	r0, r3
 8008622:	f7fa f9c5 	bl	80029b0 <getVoltage>
 8008626:	eeb0 8a40 	vmov.f32	s16, s0
 800862a:	f897 3320 	ldrb.w	r3, [r7, #800]	; 0x320
 800862e:	4a21      	ldr	r2, [pc, #132]	; (80086b4 <vTemp_OWire+0x66c>)
 8008630:	f44f 714a 	mov.w	r1, #808	; 0x328
 8008634:	fb01 f303 	mul.w	r3, r1, r3
 8008638:	4413      	add	r3, r2
 800863a:	33cc      	adds	r3, #204	; 0xcc
 800863c:	881b      	ldrh	r3, [r3, #0]
 800863e:	4618      	mov	r0, r3
 8008640:	f7fa f9b6 	bl	80029b0 <getVoltage>
 8008644:	eef0 7a40 	vmov.f32	s15, s0
 8008648:	ee78 7a67 	vsub.f32	s15, s16, s15
 800864c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008650:	ee17 3a90 	vmov	r3, s15
 8008654:	2b00      	cmp	r3, #0
 8008656:	bfb8      	it	lt
 8008658:	425b      	neglt	r3, r3
 800865a:	2b00      	cmp	r3, #0
 800865c:	dc36      	bgt.n	80086cc <vTemp_OWire+0x684>
						ic[icCounter].TempOpenWire |= 1 << ntcSellection;
 800865e:	f897 3320 	ldrb.w	r3, [r7, #800]	; 0x320
 8008662:	4a14      	ldr	r2, [pc, #80]	; (80086b4 <vTemp_OWire+0x66c>)
 8008664:	f44f 714a 	mov.w	r1, #808	; 0x328
 8008668:	fb01 f303 	mul.w	r3, r1, r3
 800866c:	4413      	add	r3, r2
 800866e:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8008672:	881b      	ldrh	r3, [r3, #0]
 8008674:	b21a      	sxth	r2, r3
 8008676:	f897 331f 	ldrb.w	r3, [r7, #799]	; 0x31f
 800867a:	2101      	movs	r1, #1
 800867c:	fa01 f303 	lsl.w	r3, r1, r3
 8008680:	b21b      	sxth	r3, r3
 8008682:	4313      	orrs	r3, r2
 8008684:	b21a      	sxth	r2, r3
 8008686:	f897 3320 	ldrb.w	r3, [r7, #800]	; 0x320
 800868a:	b290      	uxth	r0, r2
 800868c:	4a09      	ldr	r2, [pc, #36]	; (80086b4 <vTemp_OWire+0x66c>)
 800868e:	f44f 714a 	mov.w	r1, #808	; 0x328
 8008692:	fb01 f303 	mul.w	r3, r1, r3
 8008696:	4413      	add	r3, r2
 8008698:	f503 7349 	add.w	r3, r3, #804	; 0x324
 800869c:	4602      	mov	r2, r0
 800869e:	801a      	strh	r2, [r3, #0]
						tempOWflag=1;
 80086a0:	2301      	movs	r3, #1
 80086a2:	f887 3343 	strb.w	r3, [r7, #835]	; 0x343
 80086a6:	e046      	b.n	8008736 <vTemp_OWire+0x6ee>
 80086a8:	9999999a 	.word	0x9999999a
 80086ac:	3fd99999 	.word	0x3fd99999
 80086b0:	20000004 	.word	0x20000004
 80086b4:	200005f8 	.word	0x200005f8
 80086b8:	2000003c 	.word	0x2000003c
 80086bc:	40490000 	.word	0x40490000
 80086c0:	428c0000 	.word	0x428c0000
 80086c4:	20000040 	.word	0x20000040
 80086c8:	20000044 	.word	0x20000044
					}
					else ic[icCounter].mesured_cell_temps[ntcSellection] =
							Thermistor(getVoltage(ic[icCounter].aux.a_codes[5]),
 80086cc:	f897 3320 	ldrb.w	r3, [r7, #800]	; 0x320
 80086d0:	4acd      	ldr	r2, [pc, #820]	; (8008a08 <vTemp_OWire+0x9c0>)
 80086d2:	f44f 714a 	mov.w	r1, #808	; 0x328
 80086d6:	fb01 f303 	mul.w	r3, r1, r3
 80086da:	4413      	add	r3, r2
 80086dc:	33aa      	adds	r3, #170	; 0xaa
 80086de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80086e2:	4618      	mov	r0, r3
 80086e4:	f7fa f964 	bl	80029b0 <getVoltage>
 80086e8:	eeb0 8a40 	vmov.f32	s16, s0
									getVoltage(ic[icCounter].stata.vref2));
 80086ec:	f897 3320 	ldrb.w	r3, [r7, #800]	; 0x320
 80086f0:	4ac5      	ldr	r2, [pc, #788]	; (8008a08 <vTemp_OWire+0x9c0>)
 80086f2:	f44f 714a 	mov.w	r1, #808	; 0x328
 80086f6:	fb01 f303 	mul.w	r3, r1, r3
 80086fa:	4413      	add	r3, r2
 80086fc:	33cc      	adds	r3, #204	; 0xcc
 80086fe:	881b      	ldrh	r3, [r3, #0]
							Thermistor(getVoltage(ic[icCounter].aux.a_codes[5]),
 8008700:	4618      	mov	r0, r3
 8008702:	f7fa f955 	bl	80029b0 <getVoltage>
 8008706:	eef0 7a40 	vmov.f32	s15, s0
					else ic[icCounter].mesured_cell_temps[ntcSellection] =
 800870a:	f897 5320 	ldrb.w	r5, [r7, #800]	; 0x320
 800870e:	f897 431f 	ldrb.w	r4, [r7, #799]	; 0x31f
							Thermistor(getVoltage(ic[icCounter].aux.a_codes[5]),
 8008712:	eef0 0a67 	vmov.f32	s1, s15
 8008716:	eeb0 0a48 	vmov.f32	s0, s16
 800871a:	f7fa f899 	bl	8002850 <Thermistor>
 800871e:	eef0 7a40 	vmov.f32	s15, s0
					else ic[icCounter].mesured_cell_temps[ntcSellection] =
 8008722:	4ab9      	ldr	r2, [pc, #740]	; (8008a08 <vTemp_OWire+0x9c0>)
 8008724:	23ca      	movs	r3, #202	; 0xca
 8008726:	fb05 f303 	mul.w	r3, r5, r3
 800872a:	4423      	add	r3, r4
 800872c:	33a8      	adds	r3, #168	; 0xa8
 800872e:	009b      	lsls	r3, r3, #2
 8008730:	4413      	add	r3, r2
 8008732:	edc3 7a00 	vstr	s15, [r3]
					//printf("ntc%d:%f %f \n",ntcSellection+1,ic[icCounter].mesured_cell_temps[ntcSellection],getVoltage(ic[icCounter].aux.a_codes[5]));
				    }

					if (ic[icCounter].mesured_cell_temps[ntcSellection]>CELL_OVER_HEAT_TRESHOLD) {
 8008736:	f897 2320 	ldrb.w	r2, [r7, #800]	; 0x320
 800873a:	f897 331f 	ldrb.w	r3, [r7, #799]	; 0x31f
 800873e:	49b2      	ldr	r1, [pc, #712]	; (8008a08 <vTemp_OWire+0x9c0>)
 8008740:	20ca      	movs	r0, #202	; 0xca
 8008742:	fb00 f202 	mul.w	r2, r0, r2
 8008746:	4413      	add	r3, r2
 8008748:	33a8      	adds	r3, #168	; 0xa8
 800874a:	009b      	lsls	r3, r3, #2
 800874c:	440b      	add	r3, r1
 800874e:	edd3 7a00 	vldr	s15, [r3]
 8008752:	ed9f 7aae 	vldr	s14, [pc, #696]	; 8008a0c <vTemp_OWire+0x9c4>
 8008756:	eef4 7ac7 	vcmpe.f32	s15, s14
 800875a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800875e:	dd02      	ble.n	8008766 <vTemp_OWire+0x71e>
						overHeatflag=1;
 8008760:	2301      	movs	r3, #1
 8008762:	f887 3341 	strb.w	r3, [r7, #833]	; 0x341
					}

					if (ic[icCounter].mesured_cell_temps[ntcSellection]<CELL_UNDER_HEAT_TRESHOLD) {
 8008766:	f897 2320 	ldrb.w	r2, [r7, #800]	; 0x320
 800876a:	f897 331f 	ldrb.w	r3, [r7, #799]	; 0x31f
 800876e:	49a6      	ldr	r1, [pc, #664]	; (8008a08 <vTemp_OWire+0x9c0>)
 8008770:	20ca      	movs	r0, #202	; 0xca
 8008772:	fb00 f202 	mul.w	r2, r0, r2
 8008776:	4413      	add	r3, r2
 8008778:	33a8      	adds	r3, #168	; 0xa8
 800877a:	009b      	lsls	r3, r3, #2
 800877c:	440b      	add	r3, r1
 800877e:	edd3 7a00 	vldr	s15, [r3]
 8008782:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 8008a10 <vTemp_OWire+0x9c8>
 8008786:	eef4 7ac7 	vcmpe.f32	s15, s14
 800878a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800878e:	d502      	bpl.n	8008796 <vTemp_OWire+0x74e>
						underHeatflag=1;
 8008790:	2301      	movs	r3, #1
 8008792:	f887 3340 	strb.w	r3, [r7, #832]	; 0x340
					}

					//MAINBUFFER CALCULATIONS
					if(dummyflag2 == 0)
 8008796:	f897 3346 	ldrb.w	r3, [r7, #838]	; 0x346
 800879a:	2b00      	cmp	r3, #0
 800879c:	d120      	bne.n	80087e0 <vTemp_OWire+0x798>
					{
						MaxCellHeat = ic[icCounter].mesured_cell_temps[ntcSellection];
 800879e:	f897 2320 	ldrb.w	r2, [r7, #800]	; 0x320
 80087a2:	f897 331f 	ldrb.w	r3, [r7, #799]	; 0x31f
 80087a6:	4998      	ldr	r1, [pc, #608]	; (8008a08 <vTemp_OWire+0x9c0>)
 80087a8:	20ca      	movs	r0, #202	; 0xca
 80087aa:	fb00 f202 	mul.w	r2, r0, r2
 80087ae:	4413      	add	r3, r2
 80087b0:	33a8      	adds	r3, #168	; 0xa8
 80087b2:	009b      	lsls	r3, r3, #2
 80087b4:	440b      	add	r3, r1
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
						MinCellHeat = ic[icCounter].mesured_cell_temps[ntcSellection];
 80087bc:	f897 2320 	ldrb.w	r2, [r7, #800]	; 0x320
 80087c0:	f897 331f 	ldrb.w	r3, [r7, #799]	; 0x31f
 80087c4:	4990      	ldr	r1, [pc, #576]	; (8008a08 <vTemp_OWire+0x9c0>)
 80087c6:	20ca      	movs	r0, #202	; 0xca
 80087c8:	fb00 f202 	mul.w	r2, r0, r2
 80087cc:	4413      	add	r3, r2
 80087ce:	33a8      	adds	r3, #168	; 0xa8
 80087d0:	009b      	lsls	r3, r3, #2
 80087d2:	440b      	add	r3, r1
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
						dummyflag2 = 1;
 80087da:	2301      	movs	r3, #1
 80087dc:	f887 3346 	strb.w	r3, [r7, #838]	; 0x346
					}

					TotalCellHeat += ic[icCounter].mesured_cell_temps[ntcSellection];
 80087e0:	f897 2320 	ldrb.w	r2, [r7, #800]	; 0x320
 80087e4:	f897 331f 	ldrb.w	r3, [r7, #799]	; 0x31f
 80087e8:	4987      	ldr	r1, [pc, #540]	; (8008a08 <vTemp_OWire+0x9c0>)
 80087ea:	20ca      	movs	r0, #202	; 0xca
 80087ec:	fb00 f202 	mul.w	r2, r0, r2
 80087f0:	4413      	add	r3, r2
 80087f2:	33a8      	adds	r3, #168	; 0xa8
 80087f4:	009b      	lsls	r3, r3, #2
 80087f6:	440b      	add	r3, r1
 80087f8:	edd3 7a00 	vldr	s15, [r3]
 80087fc:	ed97 7ad3 	vldr	s14, [r7, #844]	; 0x34c
 8008800:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008804:	edc7 7ad3 	vstr	s15, [r7, #844]	; 0x34c

					if(ic[icCounter].mesured_cell_temps[ntcSellection] > MaxCellHeat)
 8008808:	f897 2320 	ldrb.w	r2, [r7, #800]	; 0x320
 800880c:	f897 331f 	ldrb.w	r3, [r7, #799]	; 0x31f
 8008810:	497d      	ldr	r1, [pc, #500]	; (8008a08 <vTemp_OWire+0x9c0>)
 8008812:	20ca      	movs	r0, #202	; 0xca
 8008814:	fb00 f202 	mul.w	r2, r0, r2
 8008818:	4413      	add	r3, r2
 800881a:	33a8      	adds	r3, #168	; 0xa8
 800881c:	009b      	lsls	r3, r3, #2
 800881e:	440b      	add	r3, r1
 8008820:	edd3 7a00 	vldr	s15, [r3]
 8008824:	ed97 7ad5 	vldr	s14, [r7, #852]	; 0x354
 8008828:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800882c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008830:	d50e      	bpl.n	8008850 <vTemp_OWire+0x808>
					{
						MaxCellHeat = ic[icCounter].mesured_cell_temps[ntcSellection];
 8008832:	f897 2320 	ldrb.w	r2, [r7, #800]	; 0x320
 8008836:	f897 331f 	ldrb.w	r3, [r7, #799]	; 0x31f
 800883a:	4973      	ldr	r1, [pc, #460]	; (8008a08 <vTemp_OWire+0x9c0>)
 800883c:	20ca      	movs	r0, #202	; 0xca
 800883e:	fb00 f202 	mul.w	r2, r0, r2
 8008842:	4413      	add	r3, r2
 8008844:	33a8      	adds	r3, #168	; 0xa8
 8008846:	009b      	lsls	r3, r3, #2
 8008848:	440b      	add	r3, r1
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
					}

					if(ic[icCounter].mesured_cell_temps[ntcSellection] < MinCellHeat)
 8008850:	f897 2320 	ldrb.w	r2, [r7, #800]	; 0x320
 8008854:	f897 331f 	ldrb.w	r3, [r7, #799]	; 0x31f
 8008858:	496b      	ldr	r1, [pc, #428]	; (8008a08 <vTemp_OWire+0x9c0>)
 800885a:	20ca      	movs	r0, #202	; 0xca
 800885c:	fb00 f202 	mul.w	r2, r0, r2
 8008860:	4413      	add	r3, r2
 8008862:	33a8      	adds	r3, #168	; 0xa8
 8008864:	009b      	lsls	r3, r3, #2
 8008866:	440b      	add	r3, r1
 8008868:	edd3 7a00 	vldr	s15, [r3]
 800886c:	ed97 7ad4 	vldr	s14, [r7, #848]	; 0x350
 8008870:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008878:	dd0e      	ble.n	8008898 <vTemp_OWire+0x850>
					{
						MinCellHeat = ic[icCounter].mesured_cell_temps[ntcSellection];
 800887a:	f897 2320 	ldrb.w	r2, [r7, #800]	; 0x320
 800887e:	f897 331f 	ldrb.w	r3, [r7, #799]	; 0x31f
 8008882:	4961      	ldr	r1, [pc, #388]	; (8008a08 <vTemp_OWire+0x9c0>)
 8008884:	20ca      	movs	r0, #202	; 0xca
 8008886:	fb00 f202 	mul.w	r2, r0, r2
 800888a:	4413      	add	r3, r2
 800888c:	33a8      	adds	r3, #168	; 0xa8
 800888e:	009b      	lsls	r3, r3, #2
 8008890:	440b      	add	r3, r1
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
					}

					vTaskDelay(3);
 8008898:	2003      	movs	r0, #3
 800889a:	f00e fe4f 	bl	801753c <vTaskDelay>
					ntcSellection++) {
 800889e:	f897 331f 	ldrb.w	r3, [r7, #799]	; 0x31f
 80088a2:	3301      	adds	r3, #1
 80088a4:	f887 331f 	strb.w	r3, [r7, #799]	; 0x31f
			for (uint8_t ntcSellection = 0; ntcSellection < 16;
 80088a8:	f897 331f 	ldrb.w	r3, [r7, #799]	; 0x31f
 80088ac:	2b0f      	cmp	r3, #15
 80088ae:	f67f ae5b 	bls.w	8008568 <vTemp_OWire+0x520>
		for (uint8_t icCounter = 0; icCounter < total_ic; icCounter++) {
 80088b2:	f897 3320 	ldrb.w	r3, [r7, #800]	; 0x320
 80088b6:	3301      	adds	r3, #1
 80088b8:	f887 3320 	strb.w	r3, [r7, #800]	; 0x320
 80088bc:	f897 3320 	ldrb.w	r3, [r7, #800]	; 0x320
 80088c0:	2b05      	cmp	r3, #5
 80088c2:	f67f adc4 	bls.w	800844e <vTemp_OWire+0x406>

			}

		}
		//MAINBUFFER LOADING
		MAINBUFFER[PACK_MAX_CELL_TEMP] = (uint16_t) (MaxCellHeat*100);
 80088c6:	edd7 7ad5 	vldr	s15, [r7, #852]	; 0x354
 80088ca:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8008a14 <vTemp_OWire+0x9cc>
 80088ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80088d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088d6:	ee17 3a90 	vmov	r3, s15
 80088da:	b29a      	uxth	r2, r3
 80088dc:	4b4e      	ldr	r3, [pc, #312]	; (8008a18 <vTemp_OWire+0x9d0>)
 80088de:	831a      	strh	r2, [r3, #24]
		MAINBUFFER[PACK_MIN_CELL_TEMP] = (uint16_t) (MinCellHeat*100);
 80088e0:	edd7 7ad4 	vldr	s15, [r7, #848]	; 0x350
 80088e4:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8008a14 <vTemp_OWire+0x9cc>
 80088e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80088ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088f0:	ee17 3a90 	vmov	r3, s15
 80088f4:	b29a      	uxth	r2, r3
 80088f6:	4b48      	ldr	r3, [pc, #288]	; (8008a18 <vTemp_OWire+0x9d0>)
 80088f8:	835a      	strh	r2, [r3, #26]
		MAINBUFFER[PACK_AVG_CELL_TEMP] = (uint16_t) ((TotalCellHeat/(16.0*total_ic))*100.0);
 80088fa:	f8d7 034c 	ldr.w	r0, [r7, #844]	; 0x34c
 80088fe:	f7f7 fe43 	bl	8000588 <__aeabi_f2d>
 8008902:	f04f 0200 	mov.w	r2, #0
 8008906:	4b45      	ldr	r3, [pc, #276]	; (8008a1c <vTemp_OWire+0x9d4>)
 8008908:	f7f7 ffc0 	bl	800088c <__aeabi_ddiv>
 800890c:	4602      	mov	r2, r0
 800890e:	460b      	mov	r3, r1
 8008910:	4610      	mov	r0, r2
 8008912:	4619      	mov	r1, r3
 8008914:	f04f 0200 	mov.w	r2, #0
 8008918:	4b41      	ldr	r3, [pc, #260]	; (8008a20 <vTemp_OWire+0x9d8>)
 800891a:	f7f7 fe8d 	bl	8000638 <__aeabi_dmul>
 800891e:	4602      	mov	r2, r0
 8008920:	460b      	mov	r3, r1
 8008922:	4610      	mov	r0, r2
 8008924:	4619      	mov	r1, r3
 8008926:	f7f8 f95f 	bl	8000be8 <__aeabi_d2uiz>
 800892a:	4603      	mov	r3, r0
 800892c:	b29a      	uxth	r2, r3
 800892e:	4b3a      	ldr	r3, [pc, #232]	; (8008a18 <vTemp_OWire+0x9d0>)
 8008930:	83da      	strh	r2, [r3, #30]
		MAINBUFFER[PACK_MAX_SLAVE_TEMP] = (uint16_t) (MaxSlaveHeat*100);
 8008932:	edd7 7ad2 	vldr	s15, [r7, #840]	; 0x348
 8008936:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8008a14 <vTemp_OWire+0x9cc>
 800893a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800893e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008942:	ee17 3a90 	vmov	r3, s15
 8008946:	b29a      	uxth	r2, r3
 8008948:	4b33      	ldr	r3, [pc, #204]	; (8008a18 <vTemp_OWire+0x9d0>)
 800894a:	841a      	strh	r2, [r3, #32]

        dummyflag = 0;
 800894c:	2300      	movs	r3, #0
 800894e:	f887 3347 	strb.w	r3, [r7, #839]	; 0x347
        dummyflag2 = 0;
 8008952:	2300      	movs	r3, #0
 8008954:	f887 3346 	strb.w	r3, [r7, #838]	; 0x346
        TotalCellHeat = 0;
 8008958:	f04f 0300 	mov.w	r3, #0
 800895c:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c

        //FAULT

		if (pecflag == 1) {
 8008960:	f897 3345 	ldrb.w	r3, [r7, #837]	; 0x345
 8008964:	2b01      	cmp	r3, #1
 8008966:	d120      	bne.n	80089aa <vTemp_OWire+0x962>

			if (SlaveOpenWiretick == 0) SlaveOpenWiretick = xTaskGetTickCount();
 8008968:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 800896c:	2b00      	cmp	r3, #0
 800896e:	d104      	bne.n	800897a <vTemp_OWire+0x932>
 8008970:	f00e ff74 	bl	801785c <xTaskGetTickCount>
 8008974:	f8c7 033c 	str.w	r0, [r7, #828]	; 0x33c
 8008978:	e013      	b.n	80089a2 <vTemp_OWire+0x95a>
			else if(xTaskGetTickCount()-SlaveOpenWiretick >= MAINBUFFER[OPEN_WIRE_ERROR_DELAY]){
 800897a:	f00e ff6f 	bl	801785c <xTaskGetTickCount>
 800897e:	4602      	mov	r2, r0
 8008980:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 8008984:	1ad3      	subs	r3, r2, r3
 8008986:	4a24      	ldr	r2, [pc, #144]	; (8008a18 <vTemp_OWire+0x9d0>)
 8008988:	f8b2 204e 	ldrh.w	r2, [r2, #78]	; 0x4e
 800898c:	4293      	cmp	r3, r2
 800898e:	d308      	bcc.n	80089a2 <vTemp_OWire+0x95a>
				MAINBUFFER[FAULTS] |= 1;
 8008990:	4b21      	ldr	r3, [pc, #132]	; (8008a18 <vTemp_OWire+0x9d0>)
 8008992:	881b      	ldrh	r3, [r3, #0]
 8008994:	f043 0301 	orr.w	r3, r3, #1
 8008998:	b29a      	uxth	r2, r3
 800899a:	4b1f      	ldr	r3, [pc, #124]	; (8008a18 <vTemp_OWire+0x9d0>)
 800899c:	801a      	strh	r2, [r3, #0]
				faultLatch();
 800899e:	f001 fa0d 	bl	8009dbc <faultLatch>
			}
			pecflag = 0;
 80089a2:	2300      	movs	r3, #0
 80089a4:	f887 3345 	strb.w	r3, [r7, #837]	; 0x345
 80089a8:	e009      	b.n	80089be <vTemp_OWire+0x976>

		} else{

			MAINBUFFER[FAULTS] &= ~(1);
 80089aa:	4b1b      	ldr	r3, [pc, #108]	; (8008a18 <vTemp_OWire+0x9d0>)
 80089ac:	881b      	ldrh	r3, [r3, #0]
 80089ae:	f023 0301 	bic.w	r3, r3, #1
 80089b2:	b29a      	uxth	r2, r3
 80089b4:	4b18      	ldr	r3, [pc, #96]	; (8008a18 <vTemp_OWire+0x9d0>)
 80089b6:	801a      	strh	r2, [r3, #0]
			SlaveOpenWiretick = 0;
 80089b8:	2300      	movs	r3, #0
 80089ba:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
		}


		if (cellOWflag == 1) {
 80089be:	f897 3344 	ldrb.w	r3, [r7, #836]	; 0x344
 80089c2:	2b01      	cmp	r3, #1
 80089c4:	d12e      	bne.n	8008a24 <vTemp_OWire+0x9dc>
			if (CellOpenWiretick == 0) CellOpenWiretick = xTaskGetTickCount();
 80089c6:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d104      	bne.n	80089d8 <vTemp_OWire+0x990>
 80089ce:	f00e ff45 	bl	801785c <xTaskGetTickCount>
 80089d2:	f8c7 0338 	str.w	r0, [r7, #824]	; 0x338
 80089d6:	e013      	b.n	8008a00 <vTemp_OWire+0x9b8>
			else if(xTaskGetTickCount()-CellOpenWiretick >= MAINBUFFER[OPEN_WIRE_ERROR_DELAY]){
 80089d8:	f00e ff40 	bl	801785c <xTaskGetTickCount>
 80089dc:	4602      	mov	r2, r0
 80089de:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 80089e2:	1ad3      	subs	r3, r2, r3
 80089e4:	4a0c      	ldr	r2, [pc, #48]	; (8008a18 <vTemp_OWire+0x9d0>)
 80089e6:	f8b2 204e 	ldrh.w	r2, [r2, #78]	; 0x4e
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d308      	bcc.n	8008a00 <vTemp_OWire+0x9b8>
				MAINBUFFER[FAULTS] |= 1 << 7;
 80089ee:	4b0a      	ldr	r3, [pc, #40]	; (8008a18 <vTemp_OWire+0x9d0>)
 80089f0:	881b      	ldrh	r3, [r3, #0]
 80089f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089f6:	b29a      	uxth	r2, r3
 80089f8:	4b07      	ldr	r3, [pc, #28]	; (8008a18 <vTemp_OWire+0x9d0>)
 80089fa:	801a      	strh	r2, [r3, #0]
				faultLatch();
 80089fc:	f001 f9de 	bl	8009dbc <faultLatch>
			}
			cellOWflag = 0;
 8008a00:	2300      	movs	r3, #0
 8008a02:	f887 3344 	strb.w	r3, [r7, #836]	; 0x344
 8008a06:	e017      	b.n	8008a38 <vTemp_OWire+0x9f0>
 8008a08:	200005f8 	.word	0x200005f8
 8008a0c:	42700000 	.word	0x42700000
 8008a10:	c2200000 	.word	0xc2200000
 8008a14:	42c80000 	.word	0x42c80000
 8008a18:	200024b8 	.word	0x200024b8
 8008a1c:	40580000 	.word	0x40580000
 8008a20:	40590000 	.word	0x40590000

		} else{
			MAINBUFFER[FAULTS] &= ~(1 << 7);
 8008a24:	4b66      	ldr	r3, [pc, #408]	; (8008bc0 <vTemp_OWire+0xb78>)
 8008a26:	881b      	ldrh	r3, [r3, #0]
 8008a28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a2c:	b29a      	uxth	r2, r3
 8008a2e:	4b64      	ldr	r3, [pc, #400]	; (8008bc0 <vTemp_OWire+0xb78>)
 8008a30:	801a      	strh	r2, [r3, #0]
			CellOpenWiretick = 0;
 8008a32:	2300      	movs	r3, #0
 8008a34:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
		}

		if (tempOWflag == 1) {
 8008a38:	f897 3343 	ldrb.w	r3, [r7, #835]	; 0x343
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	d120      	bne.n	8008a82 <vTemp_OWire+0xa3a>
			if (TempOpenWiretick == 0) TempOpenWiretick = xTaskGetTickCount();
 8008a40:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d104      	bne.n	8008a52 <vTemp_OWire+0xa0a>
 8008a48:	f00e ff08 	bl	801785c <xTaskGetTickCount>
 8008a4c:	f8c7 0334 	str.w	r0, [r7, #820]	; 0x334
 8008a50:	e013      	b.n	8008a7a <vTemp_OWire+0xa32>
			else if(xTaskGetTickCount()-TempOpenWiretick >= MAINBUFFER[HEAT_ERROR_DELAY]){
 8008a52:	f00e ff03 	bl	801785c <xTaskGetTickCount>
 8008a56:	4602      	mov	r2, r0
 8008a58:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8008a5c:	1ad3      	subs	r3, r2, r3
 8008a5e:	4a58      	ldr	r2, [pc, #352]	; (8008bc0 <vTemp_OWire+0xb78>)
 8008a60:	f8b2 2050 	ldrh.w	r2, [r2, #80]	; 0x50
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d308      	bcc.n	8008a7a <vTemp_OWire+0xa32>
				MAINBUFFER[FAULTS] |= 1 << 12;
 8008a68:	4b55      	ldr	r3, [pc, #340]	; (8008bc0 <vTemp_OWire+0xb78>)
 8008a6a:	881b      	ldrh	r3, [r3, #0]
 8008a6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008a70:	b29a      	uxth	r2, r3
 8008a72:	4b53      	ldr	r3, [pc, #332]	; (8008bc0 <vTemp_OWire+0xb78>)
 8008a74:	801a      	strh	r2, [r3, #0]
				faultLatch();
 8008a76:	f001 f9a1 	bl	8009dbc <faultLatch>
			}
			tempOWflag = 0;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	f887 3343 	strb.w	r3, [r7, #835]	; 0x343
 8008a80:	e009      	b.n	8008a96 <vTemp_OWire+0xa4e>

		} else{
			MAINBUFFER[FAULTS] &= ~(1 << 12);
 8008a82:	4b4f      	ldr	r3, [pc, #316]	; (8008bc0 <vTemp_OWire+0xb78>)
 8008a84:	881b      	ldrh	r3, [r3, #0]
 8008a86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a8a:	b29a      	uxth	r2, r3
 8008a8c:	4b4c      	ldr	r3, [pc, #304]	; (8008bc0 <vTemp_OWire+0xb78>)
 8008a8e:	801a      	strh	r2, [r3, #0]
			TempOpenWiretick = 0;
 8008a90:	2300      	movs	r3, #0
 8008a92:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
		}

		if (slaveOHeatflag == 1) {
 8008a96:	f897 3342 	ldrb.w	r3, [r7, #834]	; 0x342
 8008a9a:	2b01      	cmp	r3, #1
 8008a9c:	d120      	bne.n	8008ae0 <vTemp_OWire+0xa98>
			if (SlaveOverHeattick == 0) SlaveOverHeattick = xTaskGetTickCount();
 8008a9e:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d104      	bne.n	8008ab0 <vTemp_OWire+0xa68>
 8008aa6:	f00e fed9 	bl	801785c <xTaskGetTickCount>
 8008aaa:	f8c7 0330 	str.w	r0, [r7, #816]	; 0x330
 8008aae:	e013      	b.n	8008ad8 <vTemp_OWire+0xa90>
			else if(xTaskGetTickCount()-SlaveOverHeattick >= MAINBUFFER[HEAT_ERROR_DELAY]){
 8008ab0:	f00e fed4 	bl	801785c <xTaskGetTickCount>
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 8008aba:	1ad3      	subs	r3, r2, r3
 8008abc:	4a40      	ldr	r2, [pc, #256]	; (8008bc0 <vTemp_OWire+0xb78>)
 8008abe:	f8b2 2050 	ldrh.w	r2, [r2, #80]	; 0x50
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d308      	bcc.n	8008ad8 <vTemp_OWire+0xa90>
				MAINBUFFER[FAULTS] |= 1 << 9;
 8008ac6:	4b3e      	ldr	r3, [pc, #248]	; (8008bc0 <vTemp_OWire+0xb78>)
 8008ac8:	881b      	ldrh	r3, [r3, #0]
 8008aca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008ace:	b29a      	uxth	r2, r3
 8008ad0:	4b3b      	ldr	r3, [pc, #236]	; (8008bc0 <vTemp_OWire+0xb78>)
 8008ad2:	801a      	strh	r2, [r3, #0]
				faultLatch();
 8008ad4:	f001 f972 	bl	8009dbc <faultLatch>
			}
			slaveOHeatflag = 0;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	f887 3342 	strb.w	r3, [r7, #834]	; 0x342
 8008ade:	e009      	b.n	8008af4 <vTemp_OWire+0xaac>

		} else{
			MAINBUFFER[FAULTS] &= ~(1 << 9);
 8008ae0:	4b37      	ldr	r3, [pc, #220]	; (8008bc0 <vTemp_OWire+0xb78>)
 8008ae2:	881b      	ldrh	r3, [r3, #0]
 8008ae4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008ae8:	b29a      	uxth	r2, r3
 8008aea:	4b35      	ldr	r3, [pc, #212]	; (8008bc0 <vTemp_OWire+0xb78>)
 8008aec:	801a      	strh	r2, [r3, #0]
			SlaveOverHeattick = 0;
 8008aee:	2300      	movs	r3, #0
 8008af0:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
		}

		if (overHeatflag == 1) {
 8008af4:	f897 3341 	ldrb.w	r3, [r7, #833]	; 0x341
 8008af8:	2b01      	cmp	r3, #1
 8008afa:	d120      	bne.n	8008b3e <vTemp_OWire+0xaf6>
			if (CellOverHeattick == 0) CellOverHeattick = xTaskGetTickCount();
 8008afc:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d104      	bne.n	8008b0e <vTemp_OWire+0xac6>
 8008b04:	f00e feaa 	bl	801785c <xTaskGetTickCount>
 8008b08:	f8c7 032c 	str.w	r0, [r7, #812]	; 0x32c
 8008b0c:	e013      	b.n	8008b36 <vTemp_OWire+0xaee>
			else if(xTaskGetTickCount()-CellOverHeattick >= MAINBUFFER[HEAT_ERROR_DELAY]){
 8008b0e:	f00e fea5 	bl	801785c <xTaskGetTickCount>
 8008b12:	4602      	mov	r2, r0
 8008b14:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8008b18:	1ad3      	subs	r3, r2, r3
 8008b1a:	4a29      	ldr	r2, [pc, #164]	; (8008bc0 <vTemp_OWire+0xb78>)
 8008b1c:	f8b2 2050 	ldrh.w	r2, [r2, #80]	; 0x50
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d308      	bcc.n	8008b36 <vTemp_OWire+0xaee>
				MAINBUFFER[FAULTS] |= 1 << 6;
 8008b24:	4b26      	ldr	r3, [pc, #152]	; (8008bc0 <vTemp_OWire+0xb78>)
 8008b26:	881b      	ldrh	r3, [r3, #0]
 8008b28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b2c:	b29a      	uxth	r2, r3
 8008b2e:	4b24      	ldr	r3, [pc, #144]	; (8008bc0 <vTemp_OWire+0xb78>)
 8008b30:	801a      	strh	r2, [r3, #0]
				faultLatch();
 8008b32:	f001 f943 	bl	8009dbc <faultLatch>
			}
			overHeatflag = 0;
 8008b36:	2300      	movs	r3, #0
 8008b38:	f887 3341 	strb.w	r3, [r7, #833]	; 0x341
 8008b3c:	e009      	b.n	8008b52 <vTemp_OWire+0xb0a>

		} else{
			MAINBUFFER[FAULTS] &= ~(1 << 6);
 8008b3e:	4b20      	ldr	r3, [pc, #128]	; (8008bc0 <vTemp_OWire+0xb78>)
 8008b40:	881b      	ldrh	r3, [r3, #0]
 8008b42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b46:	b29a      	uxth	r2, r3
 8008b48:	4b1d      	ldr	r3, [pc, #116]	; (8008bc0 <vTemp_OWire+0xb78>)
 8008b4a:	801a      	strh	r2, [r3, #0]
			CellOverHeattick = 0;
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
		}

		if (underHeatflag == 1) {
 8008b52:	f897 3340 	ldrb.w	r3, [r7, #832]	; 0x340
 8008b56:	2b01      	cmp	r3, #1
 8008b58:	d120      	bne.n	8008b9c <vTemp_OWire+0xb54>
			if (CellUnderHeattick == 0) CellUnderHeattick = xTaskGetTickCount();
 8008b5a:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d104      	bne.n	8008b6c <vTemp_OWire+0xb24>
 8008b62:	f00e fe7b 	bl	801785c <xTaskGetTickCount>
 8008b66:	f8c7 0328 	str.w	r0, [r7, #808]	; 0x328
 8008b6a:	e013      	b.n	8008b94 <vTemp_OWire+0xb4c>
			else if(xTaskGetTickCount()-CellUnderHeattick >= MAINBUFFER[HEAT_ERROR_DELAY]){
 8008b6c:	f00e fe76 	bl	801785c <xTaskGetTickCount>
 8008b70:	4602      	mov	r2, r0
 8008b72:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8008b76:	1ad3      	subs	r3, r2, r3
 8008b78:	4a11      	ldr	r2, [pc, #68]	; (8008bc0 <vTemp_OWire+0xb78>)
 8008b7a:	f8b2 2050 	ldrh.w	r2, [r2, #80]	; 0x50
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d308      	bcc.n	8008b94 <vTemp_OWire+0xb4c>
				MAINBUFFER[FAULTS] |= 1 << 5;
 8008b82:	4b0f      	ldr	r3, [pc, #60]	; (8008bc0 <vTemp_OWire+0xb78>)
 8008b84:	881b      	ldrh	r3, [r3, #0]
 8008b86:	f043 0320 	orr.w	r3, r3, #32
 8008b8a:	b29a      	uxth	r2, r3
 8008b8c:	4b0c      	ldr	r3, [pc, #48]	; (8008bc0 <vTemp_OWire+0xb78>)
 8008b8e:	801a      	strh	r2, [r3, #0]
				faultLatch();
 8008b90:	f001 f914 	bl	8009dbc <faultLatch>
			}
			underHeatflag = 0;
 8008b94:	2300      	movs	r3, #0
 8008b96:	f887 3340 	strb.w	r3, [r7, #832]	; 0x340
 8008b9a:	e009      	b.n	8008bb0 <vTemp_OWire+0xb68>

		} else{
			MAINBUFFER[FAULTS] &= ~(1 << 5);
 8008b9c:	4b08      	ldr	r3, [pc, #32]	; (8008bc0 <vTemp_OWire+0xb78>)
 8008b9e:	881b      	ldrh	r3, [r3, #0]
 8008ba0:	f023 0320 	bic.w	r3, r3, #32
 8008ba4:	b29a      	uxth	r2, r3
 8008ba6:	4b06      	ldr	r3, [pc, #24]	; (8008bc0 <vTemp_OWire+0xb78>)
 8008ba8:	801a      	strh	r2, [r3, #0]
			CellUnderHeattick = 0;
 8008baa:	2300      	movs	r3, #0
 8008bac:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
		}

		faultLatch();
 8008bb0:	f001 f904 	bl	8009dbc <faultLatch>
		vTaskDelay(20);
 8008bb4:	2014      	movs	r0, #20
 8008bb6:	f00e fcc1 	bl	801753c <vTaskDelay>
		taskENTER_CRITICAL();
 8008bba:	f7ff ba94 	b.w	80080e6 <vTemp_OWire+0x9e>
 8008bbe:	bf00      	nop
 8008bc0:	200024b8 	.word	0x200024b8
 8008bc4:	00000000 	.word	0x00000000

08008bc8 <vMeasure_Precharge>:

	}

}
static void vMeasure_Precharge(void *parameter) {
 8008bc8:	b5b0      	push	{r4, r5, r7, lr}
 8008bca:	b08a      	sub	sp, #40	; 0x28
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]

	uint8_t SCflag = 0;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	uint32_t prechargetick = 0;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	623b      	str	r3, [r7, #32]
	uint32_t PackOverVoltagetick = 0;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	61fb      	str	r3, [r7, #28]
	uint32_t PackUnderVoltagetick = 0;
 8008bde:	2300      	movs	r3, #0
 8008be0:	61bb      	str	r3, [r7, #24]
	uint32_t DischargeOverCurrenttick = 0;
 8008be2:	2300      	movs	r3, #0
 8008be4:	617b      	str	r3, [r7, #20]
	uint32_t ChargeOverCurrenttick = 0;
 8008be6:	2300      	movs	r3, #0
 8008be8:	613b      	str	r3, [r7, #16]
	uint32_t NoCurrentSensortick = 0;
 8008bea:	2300      	movs	r3, #0
 8008bec:	60fb      	str	r3, [r7, #12]


	float current = 0;
 8008bee:	f04f 0300 	mov.w	r3, #0
 8008bf2:	60bb      	str	r3, [r7, #8]


	for (;;)
	{

		Get_ADC_Data();
 8008bf4:	f000 ff8e 	bl	8009b14 <Get_ADC_Data>

		volt_bc = ((float) adc_data[0] - 56.15) / 5.083;
 8008bf8:	4bb9      	ldr	r3, [pc, #740]	; (8008ee0 <vMeasure_Precharge+0x318>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	ee07 3a90 	vmov	s15, r3
 8008c00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c04:	ee17 0a90 	vmov	r0, s15
 8008c08:	f7f7 fcbe 	bl	8000588 <__aeabi_f2d>
 8008c0c:	a3aa      	add	r3, pc, #680	; (adr r3, 8008eb8 <vMeasure_Precharge+0x2f0>)
 8008c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c12:	f7f7 fb59 	bl	80002c8 <__aeabi_dsub>
 8008c16:	4602      	mov	r2, r0
 8008c18:	460b      	mov	r3, r1
 8008c1a:	4610      	mov	r0, r2
 8008c1c:	4619      	mov	r1, r3
 8008c1e:	a3a8      	add	r3, pc, #672	; (adr r3, 8008ec0 <vMeasure_Precharge+0x2f8>)
 8008c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c24:	f7f7 fe32 	bl	800088c <__aeabi_ddiv>
 8008c28:	4602      	mov	r2, r0
 8008c2a:	460b      	mov	r3, r1
 8008c2c:	4610      	mov	r0, r2
 8008c2e:	4619      	mov	r1, r3
 8008c30:	f7f7 fffa 	bl	8000c28 <__aeabi_d2f>
 8008c34:	4603      	mov	r3, r0
 8008c36:	4aab      	ldr	r2, [pc, #684]	; (8008ee4 <vMeasure_Precharge+0x31c>)
 8008c38:	6013      	str	r3, [r2, #0]
		volt_ac = ((float) adc_data[1] - 56.15) / 5.083;
 8008c3a:	4ba9      	ldr	r3, [pc, #676]	; (8008ee0 <vMeasure_Precharge+0x318>)
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	ee07 3a90 	vmov	s15, r3
 8008c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c46:	ee17 0a90 	vmov	r0, s15
 8008c4a:	f7f7 fc9d 	bl	8000588 <__aeabi_f2d>
 8008c4e:	a39a      	add	r3, pc, #616	; (adr r3, 8008eb8 <vMeasure_Precharge+0x2f0>)
 8008c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c54:	f7f7 fb38 	bl	80002c8 <__aeabi_dsub>
 8008c58:	4602      	mov	r2, r0
 8008c5a:	460b      	mov	r3, r1
 8008c5c:	4610      	mov	r0, r2
 8008c5e:	4619      	mov	r1, r3
 8008c60:	a397      	add	r3, pc, #604	; (adr r3, 8008ec0 <vMeasure_Precharge+0x2f8>)
 8008c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c66:	f7f7 fe11 	bl	800088c <__aeabi_ddiv>
 8008c6a:	4602      	mov	r2, r0
 8008c6c:	460b      	mov	r3, r1
 8008c6e:	4610      	mov	r0, r2
 8008c70:	4619      	mov	r1, r3
 8008c72:	f7f7 ffd9 	bl	8000c28 <__aeabi_d2f>
 8008c76:	4603      	mov	r3, r0
 8008c78:	4a9b      	ldr	r2, [pc, #620]	; (8008ee8 <vMeasure_Precharge+0x320>)
 8008c7a:	6013      	str	r3, [r2, #0]



		if(!IsSCActive()) //if SC is not active close the contactors
 8008c7c:	f001 f8d6 	bl	8009e2c <IsSCActive>
 8008c80:	4603      	mov	r3, r0
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d10e      	bne.n	8008ca4 <vMeasure_Precharge+0xdc>
		{
			HAL_GPIO_WritePin(AIR__OUT_GPIO_Port, AIR__OUT_Pin, 0);
 8008c86:	2200      	movs	r2, #0
 8008c88:	2102      	movs	r1, #2
 8008c8a:	4898      	ldr	r0, [pc, #608]	; (8008eec <vMeasure_Precharge+0x324>)
 8008c8c:	f004 f890 	bl	800cdb0 <HAL_GPIO_WritePin>
			MAINBUFFER[OUTPUTS] &= ~(1);
 8008c90:	4b97      	ldr	r3, [pc, #604]	; (8008ef0 <vMeasure_Precharge+0x328>)
 8008c92:	885b      	ldrh	r3, [r3, #2]
 8008c94:	f023 0301 	bic.w	r3, r3, #1
 8008c98:	b29a      	uxth	r2, r3
 8008c9a:	4b95      	ldr	r3, [pc, #596]	; (8008ef0 <vMeasure_Precharge+0x328>)
 8008c9c:	805a      	strh	r2, [r3, #2]
			SCflag = 0;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}

	    if(IsSCActive() && SCflag == 0) //if sc is active for the first time
 8008ca4:	f001 f8c2 	bl	8009e2c <IsSCActive>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	f000 8089 	beq.w	8008dc2 <vMeasure_Precharge+0x1fa>
 8008cb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	f040 8084 	bne.w	8008dc2 <vMeasure_Precharge+0x1fa>
	    {
	    	if (volt_ac<=(volt_bc* (float)MAINBUFFER[PRECHARGE_PERCENTAGE]/100.0)){
 8008cba:	4b8b      	ldr	r3, [pc, #556]	; (8008ee8 <vMeasure_Precharge+0x320>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f7f7 fc62 	bl	8000588 <__aeabi_f2d>
 8008cc4:	4604      	mov	r4, r0
 8008cc6:	460d      	mov	r5, r1
 8008cc8:	4b89      	ldr	r3, [pc, #548]	; (8008ef0 <vMeasure_Precharge+0x328>)
 8008cca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008cce:	ee07 3a90 	vmov	s15, r3
 8008cd2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008cd6:	4b83      	ldr	r3, [pc, #524]	; (8008ee4 <vMeasure_Precharge+0x31c>)
 8008cd8:	edd3 7a00 	vldr	s15, [r3]
 8008cdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ce0:	ee17 0a90 	vmov	r0, s15
 8008ce4:	f7f7 fc50 	bl	8000588 <__aeabi_f2d>
 8008ce8:	f04f 0200 	mov.w	r2, #0
 8008cec:	4b81      	ldr	r3, [pc, #516]	; (8008ef4 <vMeasure_Precharge+0x32c>)
 8008cee:	f7f7 fdcd 	bl	800088c <__aeabi_ddiv>
 8008cf2:	4602      	mov	r2, r0
 8008cf4:	460b      	mov	r3, r1
 8008cf6:	4620      	mov	r0, r4
 8008cf8:	4629      	mov	r1, r5
 8008cfa:	f7f7 ff19 	bl	8000b30 <__aeabi_dcmple>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d03a      	beq.n	8008d7a <vMeasure_Precharge+0x1b2>
	    		if(prechargetick == 0)//if timer is active for the first time
 8008d04:	6a3b      	ldr	r3, [r7, #32]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d103      	bne.n	8008d12 <vMeasure_Precharge+0x14a>
	    		{
	    			prechargetick=xTaskGetTickCount();
 8008d0a:	f00e fda7 	bl	801785c <xTaskGetTickCount>
 8008d0e:	6238      	str	r0, [r7, #32]
 8008d10:	e01e      	b.n	8008d50 <vMeasure_Precharge+0x188>
	    		}

	    		else if(xTaskGetTickCount()-prechargetick >= MAINBUFFER[PRECHARGE_TIMEOUT])
 8008d12:	f00e fda3 	bl	801785c <xTaskGetTickCount>
 8008d16:	4602      	mov	r2, r0
 8008d18:	6a3b      	ldr	r3, [r7, #32]
 8008d1a:	1ad3      	subs	r3, r2, r3
 8008d1c:	4a74      	ldr	r2, [pc, #464]	; (8008ef0 <vMeasure_Precharge+0x328>)
 8008d1e:	f8b2 2042 	ldrh.w	r2, [r2, #66]	; 0x42
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d314      	bcc.n	8008d50 <vMeasure_Precharge+0x188>
	    		{
	    			MAINBUFFER[FAULTS] |= 1 << 13;
 8008d26:	4b72      	ldr	r3, [pc, #456]	; (8008ef0 <vMeasure_Precharge+0x328>)
 8008d28:	881b      	ldrh	r3, [r3, #0]
 8008d2a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008d2e:	b29a      	uxth	r2, r3
 8008d30:	4b6f      	ldr	r3, [pc, #444]	; (8008ef0 <vMeasure_Precharge+0x328>)
 8008d32:	801a      	strh	r2, [r3, #0]
	    			faultLatch();
 8008d34:	f001 f842 	bl	8009dbc <faultLatch>
	    			HAL_GPIO_WritePin(PRE_OUT_GPIO_Port, PRE_OUT_Pin, 0);
 8008d38:	2200      	movs	r2, #0
 8008d3a:	2104      	movs	r1, #4
 8008d3c:	486b      	ldr	r0, [pc, #428]	; (8008eec <vMeasure_Precharge+0x324>)
 8008d3e:	f004 f837 	bl	800cdb0 <HAL_GPIO_WritePin>
					MAINBUFFER[OUTPUTS] &= ~(1 << 1);
 8008d42:	4b6b      	ldr	r3, [pc, #428]	; (8008ef0 <vMeasure_Precharge+0x328>)
 8008d44:	885b      	ldrh	r3, [r3, #2]
 8008d46:	f023 0302 	bic.w	r3, r3, #2
 8008d4a:	b29a      	uxth	r2, r3
 8008d4c:	4b68      	ldr	r3, [pc, #416]	; (8008ef0 <vMeasure_Precharge+0x328>)
 8008d4e:	805a      	strh	r2, [r3, #2]
	    		}

				if ((((MAINBUFFER[FAULTS] >> 13) & 1) != 1)) {
 8008d50:	4b67      	ldr	r3, [pc, #412]	; (8008ef0 <vMeasure_Precharge+0x328>)
 8008d52:	881b      	ldrh	r3, [r3, #0]
 8008d54:	0b5b      	lsrs	r3, r3, #13
 8008d56:	b29b      	uxth	r3, r3
 8008d58:	f003 0301 	and.w	r3, r3, #1
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d130      	bne.n	8008dc2 <vMeasure_Precharge+0x1fa>
		    		HAL_GPIO_WritePin(PRE_OUT_GPIO_Port, PRE_OUT_Pin, 1);
 8008d60:	2201      	movs	r2, #1
 8008d62:	2104      	movs	r1, #4
 8008d64:	4861      	ldr	r0, [pc, #388]	; (8008eec <vMeasure_Precharge+0x324>)
 8008d66:	f004 f823 	bl	800cdb0 <HAL_GPIO_WritePin>
		    		MAINBUFFER[OUTPUTS] |= 1 << 1;
 8008d6a:	4b61      	ldr	r3, [pc, #388]	; (8008ef0 <vMeasure_Precharge+0x328>)
 8008d6c:	885b      	ldrh	r3, [r3, #2]
 8008d6e:	f043 0302 	orr.w	r3, r3, #2
 8008d72:	b29a      	uxth	r2, r3
 8008d74:	4b5e      	ldr	r3, [pc, #376]	; (8008ef0 <vMeasure_Precharge+0x328>)
 8008d76:	805a      	strh	r2, [r3, #2]
 8008d78:	e023      	b.n	8008dc2 <vMeasure_Precharge+0x1fa>
				}


	    	}else {
	    		prechargetick = 0;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	623b      	str	r3, [r7, #32]

	    		HAL_GPIO_WritePin(PRE_OUT_GPIO_Port, PRE_OUT_Pin, 0);
 8008d7e:	2200      	movs	r2, #0
 8008d80:	2104      	movs	r1, #4
 8008d82:	485a      	ldr	r0, [pc, #360]	; (8008eec <vMeasure_Precharge+0x324>)
 8008d84:	f004 f814 	bl	800cdb0 <HAL_GPIO_WritePin>
	    		MAINBUFFER[OUTPUTS] &= ~(1 << 1);
 8008d88:	4b59      	ldr	r3, [pc, #356]	; (8008ef0 <vMeasure_Precharge+0x328>)
 8008d8a:	885b      	ldrh	r3, [r3, #2]
 8008d8c:	f023 0302 	bic.w	r3, r3, #2
 8008d90:	b29a      	uxth	r2, r3
 8008d92:	4b57      	ldr	r3, [pc, #348]	; (8008ef0 <vMeasure_Precharge+0x328>)
 8008d94:	805a      	strh	r2, [r3, #2]

	    		HAL_GPIO_WritePin(AIR__OUT_GPIO_Port, AIR__OUT_Pin, 1);
 8008d96:	2201      	movs	r2, #1
 8008d98:	2102      	movs	r1, #2
 8008d9a:	4854      	ldr	r0, [pc, #336]	; (8008eec <vMeasure_Precharge+0x324>)
 8008d9c:	f004 f808 	bl	800cdb0 <HAL_GPIO_WritePin>
	    		MAINBUFFER[OUTPUTS] |= 1 << 2;
 8008da0:	4b53      	ldr	r3, [pc, #332]	; (8008ef0 <vMeasure_Precharge+0x328>)
 8008da2:	885b      	ldrh	r3, [r3, #2]
 8008da4:	f043 0304 	orr.w	r3, r3, #4
 8008da8:	b29a      	uxth	r2, r3
 8008daa:	4b51      	ldr	r3, [pc, #324]	; (8008ef0 <vMeasure_Precharge+0x328>)
 8008dac:	805a      	strh	r2, [r3, #2]

	    		MAINBUFFER[FAULTS] &= ~(1 << 13);
 8008dae:	4b50      	ldr	r3, [pc, #320]	; (8008ef0 <vMeasure_Precharge+0x328>)
 8008db0:	881b      	ldrh	r3, [r3, #0]
 8008db2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008db6:	b29a      	uxth	r2, r3
 8008db8:	4b4d      	ldr	r3, [pc, #308]	; (8008ef0 <vMeasure_Precharge+0x328>)
 8008dba:	801a      	strh	r2, [r3, #0]
	    		SCflag = 1;
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	    	}
	    }

	    //MAINBUFFER LOADING
	    MAINBUFFER[PACK_VOLTAGE] = (uint16_t)(volt_bc*100);
 8008dc2:	4b48      	ldr	r3, [pc, #288]	; (8008ee4 <vMeasure_Precharge+0x31c>)
 8008dc4:	edd3 7a00 	vldr	s15, [r3]
 8008dc8:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8008ef8 <vMeasure_Precharge+0x330>
 8008dcc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008dd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008dd4:	ee17 3a90 	vmov	r3, s15
 8008dd8:	b29a      	uxth	r2, r3
 8008dda:	4b45      	ldr	r3, [pc, #276]	; (8008ef0 <vMeasure_Precharge+0x328>)
 8008ddc:	81da      	strh	r2, [r3, #14]
	    if (current < 0.5 && current > -0.5) MAINBUFFER[PACK_CURRENT] = (uint16_t)(0*10);
 8008dde:	edd7 7a02 	vldr	s15, [r7, #8]
 8008de2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008de6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dee:	d50c      	bpl.n	8008e0a <vMeasure_Precharge+0x242>
 8008df0:	edd7 7a02 	vldr	s15, [r7, #8]
 8008df4:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8008df8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e00:	dd03      	ble.n	8008e0a <vMeasure_Precharge+0x242>
 8008e02:	4b3b      	ldr	r3, [pc, #236]	; (8008ef0 <vMeasure_Precharge+0x328>)
 8008e04:	2200      	movs	r2, #0
 8008e06:	821a      	strh	r2, [r3, #16]
 8008e08:	e00c      	b.n	8008e24 <vMeasure_Precharge+0x25c>
	    else MAINBUFFER[PACK_CURRENT] = (uint16_t)(current*10);
 8008e0a:	edd7 7a02 	vldr	s15, [r7, #8]
 8008e0e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8008e12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008e16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e1a:	ee17 3a90 	vmov	r3, s15
 8008e1e:	b29a      	uxth	r2, r3
 8008e20:	4b33      	ldr	r3, [pc, #204]	; (8008ef0 <vMeasure_Precharge+0x328>)
 8008e22:	821a      	strh	r2, [r3, #16]

	    //FAULT PROCESS
		if (((adc_data[2]*0.805)<301.0) || ((adc_data[2]*0.805)>3031.0) ){
 8008e24:	4b2e      	ldr	r3, [pc, #184]	; (8008ee0 <vMeasure_Precharge+0x318>)
 8008e26:	689b      	ldr	r3, [r3, #8]
 8008e28:	4618      	mov	r0, r3
 8008e2a:	f7f7 fb8b 	bl	8000544 <__aeabi_ui2d>
 8008e2e:	a326      	add	r3, pc, #152	; (adr r3, 8008ec8 <vMeasure_Precharge+0x300>)
 8008e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e34:	f7f7 fc00 	bl	8000638 <__aeabi_dmul>
 8008e38:	4602      	mov	r2, r0
 8008e3a:	460b      	mov	r3, r1
 8008e3c:	4610      	mov	r0, r2
 8008e3e:	4619      	mov	r1, r3
 8008e40:	a323      	add	r3, pc, #140	; (adr r3, 8008ed0 <vMeasure_Precharge+0x308>)
 8008e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e46:	f7f7 fe69 	bl	8000b1c <__aeabi_dcmplt>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d115      	bne.n	8008e7c <vMeasure_Precharge+0x2b4>
 8008e50:	4b23      	ldr	r3, [pc, #140]	; (8008ee0 <vMeasure_Precharge+0x318>)
 8008e52:	689b      	ldr	r3, [r3, #8]
 8008e54:	4618      	mov	r0, r3
 8008e56:	f7f7 fb75 	bl	8000544 <__aeabi_ui2d>
 8008e5a:	a31b      	add	r3, pc, #108	; (adr r3, 8008ec8 <vMeasure_Precharge+0x300>)
 8008e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e60:	f7f7 fbea 	bl	8000638 <__aeabi_dmul>
 8008e64:	4602      	mov	r2, r0
 8008e66:	460b      	mov	r3, r1
 8008e68:	4610      	mov	r0, r2
 8008e6a:	4619      	mov	r1, r3
 8008e6c:	a31a      	add	r3, pc, #104	; (adr r3, 8008ed8 <vMeasure_Precharge+0x310>)
 8008e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e72:	f7f7 fe71 	bl	8000b58 <__aeabi_dcmpgt>
 8008e76:	4603      	mov	r3, r0
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d03f      	beq.n	8008efc <vMeasure_Precharge+0x334>

			if(NoCurrentSensortick==0) NoCurrentSensortick=xTaskGetTickCount();
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d103      	bne.n	8008e8a <vMeasure_Precharge+0x2c2>
 8008e82:	f00e fceb 	bl	801785c <xTaskGetTickCount>
 8008e86:	60f8      	str	r0, [r7, #12]
 8008e88:	e06b      	b.n	8008f62 <vMeasure_Precharge+0x39a>
			else if(xTaskGetTickCount()-NoCurrentSensortick >= MAINBUFFER[OPEN_WIRE_ERROR_DELAY]){
 8008e8a:	f00e fce7 	bl	801785c <xTaskGetTickCount>
 8008e8e:	4602      	mov	r2, r0
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	1ad3      	subs	r3, r2, r3
 8008e94:	4a16      	ldr	r2, [pc, #88]	; (8008ef0 <vMeasure_Precharge+0x328>)
 8008e96:	f8b2 204e 	ldrh.w	r2, [r2, #78]	; 0x4e
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d361      	bcc.n	8008f62 <vMeasure_Precharge+0x39a>
				MAINBUFFER[FAULTS] |= 1 << 8;
 8008e9e:	4b14      	ldr	r3, [pc, #80]	; (8008ef0 <vMeasure_Precharge+0x328>)
 8008ea0:	881b      	ldrh	r3, [r3, #0]
 8008ea2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ea6:	b29a      	uxth	r2, r3
 8008ea8:	4b11      	ldr	r3, [pc, #68]	; (8008ef0 <vMeasure_Precharge+0x328>)
 8008eaa:	801a      	strh	r2, [r3, #0]
				faultLatch();
 8008eac:	f000 ff86 	bl	8009dbc <faultLatch>
			if(NoCurrentSensortick==0) NoCurrentSensortick=xTaskGetTickCount();
 8008eb0:	e057      	b.n	8008f62 <vMeasure_Precharge+0x39a>
 8008eb2:	bf00      	nop
 8008eb4:	f3af 8000 	nop.w
 8008eb8:	33333333 	.word	0x33333333
 8008ebc:	404c1333 	.word	0x404c1333
 8008ec0:	f3b645a2 	.word	0xf3b645a2
 8008ec4:	401454fd 	.word	0x401454fd
 8008ec8:	5c28f5c3 	.word	0x5c28f5c3
 8008ecc:	3fe9c28f 	.word	0x3fe9c28f
 8008ed0:	00000000 	.word	0x00000000
 8008ed4:	4072d000 	.word	0x4072d000
 8008ed8:	00000000 	.word	0x00000000
 8008edc:	40a7ae00 	.word	0x40a7ae00
 8008ee0:	200018ec 	.word	0x200018ec
 8008ee4:	2000256c 	.word	0x2000256c
 8008ee8:	20002570 	.word	0x20002570
 8008eec:	40020400 	.word	0x40020400
 8008ef0:	200024b8 	.word	0x200024b8
 8008ef4:	40590000 	.word	0x40590000
 8008ef8:	42c80000 	.word	0x42c80000
			}

		}else{
			current = (((float)adc_data[2]*0.80586)-1667.32139)/3.10382376;
 8008efc:	4b8e      	ldr	r3, [pc, #568]	; (8009138 <vMeasure_Precharge+0x570>)
 8008efe:	689b      	ldr	r3, [r3, #8]
 8008f00:	ee07 3a90 	vmov	s15, r3
 8008f04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f08:	ee17 0a90 	vmov	r0, s15
 8008f0c:	f7f7 fb3c 	bl	8000588 <__aeabi_f2d>
 8008f10:	a383      	add	r3, pc, #524	; (adr r3, 8009120 <vMeasure_Precharge+0x558>)
 8008f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f16:	f7f7 fb8f 	bl	8000638 <__aeabi_dmul>
 8008f1a:	4602      	mov	r2, r0
 8008f1c:	460b      	mov	r3, r1
 8008f1e:	4610      	mov	r0, r2
 8008f20:	4619      	mov	r1, r3
 8008f22:	a381      	add	r3, pc, #516	; (adr r3, 8009128 <vMeasure_Precharge+0x560>)
 8008f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f28:	f7f7 f9ce 	bl	80002c8 <__aeabi_dsub>
 8008f2c:	4602      	mov	r2, r0
 8008f2e:	460b      	mov	r3, r1
 8008f30:	4610      	mov	r0, r2
 8008f32:	4619      	mov	r1, r3
 8008f34:	a37e      	add	r3, pc, #504	; (adr r3, 8009130 <vMeasure_Precharge+0x568>)
 8008f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f3a:	f7f7 fca7 	bl	800088c <__aeabi_ddiv>
 8008f3e:	4602      	mov	r2, r0
 8008f40:	460b      	mov	r3, r1
 8008f42:	4610      	mov	r0, r2
 8008f44:	4619      	mov	r1, r3
 8008f46:	f7f7 fe6f 	bl	8000c28 <__aeabi_d2f>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	60bb      	str	r3, [r7, #8]
			NoCurrentSensortick=0;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	60fb      	str	r3, [r7, #12]
			MAINBUFFER[FAULTS] &= ~(1 << 8);
 8008f52:	4b7a      	ldr	r3, [pc, #488]	; (800913c <vMeasure_Precharge+0x574>)
 8008f54:	881b      	ldrh	r3, [r3, #0]
 8008f56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f5a:	b29a      	uxth	r2, r3
 8008f5c:	4b77      	ldr	r3, [pc, #476]	; (800913c <vMeasure_Precharge+0x574>)
 8008f5e:	801a      	strh	r2, [r3, #0]
 8008f60:	e000      	b.n	8008f64 <vMeasure_Precharge+0x39c>
			if(NoCurrentSensortick==0) NoCurrentSensortick=xTaskGetTickCount();
 8008f62:	bf00      	nop
		}

	    if (volt_bc > BATTERY_OVER_VOLTAGE_TRESHOLD)
 8008f64:	4b76      	ldr	r3, [pc, #472]	; (8009140 <vMeasure_Precharge+0x578>)
 8008f66:	edd3 7a00 	vldr	s15, [r3]
 8008f6a:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8009144 <vMeasure_Precharge+0x57c>
 8008f6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f76:	dd1a      	ble.n	8008fae <vMeasure_Precharge+0x3e6>
	    {
	    	if(PackOverVoltagetick==0) PackOverVoltagetick=xTaskGetTickCount();
 8008f78:	69fb      	ldr	r3, [r7, #28]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d103      	bne.n	8008f86 <vMeasure_Precharge+0x3be>
 8008f7e:	f00e fc6d 	bl	801785c <xTaskGetTickCount>
 8008f82:	61f8      	str	r0, [r7, #28]
 8008f84:	e01c      	b.n	8008fc0 <vMeasure_Precharge+0x3f8>
			else if(xTaskGetTickCount()-PackOverVoltagetick >= MAINBUFFER[OVER_VOLTAGE_ERROR_DELAY]){
 8008f86:	f00e fc69 	bl	801785c <xTaskGetTickCount>
 8008f8a:	4602      	mov	r2, r0
 8008f8c:	69fb      	ldr	r3, [r7, #28]
 8008f8e:	1ad3      	subs	r3, r2, r3
 8008f90:	4a6a      	ldr	r2, [pc, #424]	; (800913c <vMeasure_Precharge+0x574>)
 8008f92:	f8b2 2048 	ldrh.w	r2, [r2, #72]	; 0x48
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d312      	bcc.n	8008fc0 <vMeasure_Precharge+0x3f8>
		    	MAINBUFFER[FAULTS] |= 1 << 11;
 8008f9a:	4b68      	ldr	r3, [pc, #416]	; (800913c <vMeasure_Precharge+0x574>)
 8008f9c:	881b      	ldrh	r3, [r3, #0]
 8008f9e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008fa2:	b29a      	uxth	r2, r3
 8008fa4:	4b65      	ldr	r3, [pc, #404]	; (800913c <vMeasure_Precharge+0x574>)
 8008fa6:	801a      	strh	r2, [r3, #0]
				faultLatch();
 8008fa8:	f000 ff08 	bl	8009dbc <faultLatch>
 8008fac:	e008      	b.n	8008fc0 <vMeasure_Precharge+0x3f8>
			}

	    }else
	    {
	    	PackOverVoltagetick = 0;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	61fb      	str	r3, [r7, #28]
	    	MAINBUFFER[FAULTS] &= ~(1 << 11);
 8008fb2:	4b62      	ldr	r3, [pc, #392]	; (800913c <vMeasure_Precharge+0x574>)
 8008fb4:	881b      	ldrh	r3, [r3, #0]
 8008fb6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008fba:	b29a      	uxth	r2, r3
 8008fbc:	4b5f      	ldr	r3, [pc, #380]	; (800913c <vMeasure_Precharge+0x574>)
 8008fbe:	801a      	strh	r2, [r3, #0]
	    }

	    if (volt_bc < BATTERY_UNDER_VOLTAGE_TRESHOLD)
 8008fc0:	4b5f      	ldr	r3, [pc, #380]	; (8009140 <vMeasure_Precharge+0x578>)
 8008fc2:	edd3 7a00 	vldr	s15, [r3]
 8008fc6:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8009148 <vMeasure_Precharge+0x580>
 8008fca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fd2:	d51a      	bpl.n	800900a <vMeasure_Precharge+0x442>
	    {
	    	if(PackUnderVoltagetick==0) PackUnderVoltagetick=xTaskGetTickCount();
 8008fd4:	69bb      	ldr	r3, [r7, #24]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d103      	bne.n	8008fe2 <vMeasure_Precharge+0x41a>
 8008fda:	f00e fc3f 	bl	801785c <xTaskGetTickCount>
 8008fde:	61b8      	str	r0, [r7, #24]
 8008fe0:	e01c      	b.n	800901c <vMeasure_Precharge+0x454>
			else if(xTaskGetTickCount()-PackUnderVoltagetick >= MAINBUFFER[UNDER_VOLTAGE_ERROR_DELAY]){
 8008fe2:	f00e fc3b 	bl	801785c <xTaskGetTickCount>
 8008fe6:	4602      	mov	r2, r0
 8008fe8:	69bb      	ldr	r3, [r7, #24]
 8008fea:	1ad3      	subs	r3, r2, r3
 8008fec:	4a53      	ldr	r2, [pc, #332]	; (800913c <vMeasure_Precharge+0x574>)
 8008fee:	f8b2 204a 	ldrh.w	r2, [r2, #74]	; 0x4a
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d312      	bcc.n	800901c <vMeasure_Precharge+0x454>
		    	MAINBUFFER[FAULTS] |= 1 << 10;
 8008ff6:	4b51      	ldr	r3, [pc, #324]	; (800913c <vMeasure_Precharge+0x574>)
 8008ff8:	881b      	ldrh	r3, [r3, #0]
 8008ffa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008ffe:	b29a      	uxth	r2, r3
 8009000:	4b4e      	ldr	r3, [pc, #312]	; (800913c <vMeasure_Precharge+0x574>)
 8009002:	801a      	strh	r2, [r3, #0]
				faultLatch();
 8009004:	f000 feda 	bl	8009dbc <faultLatch>
 8009008:	e008      	b.n	800901c <vMeasure_Precharge+0x454>
			}

	    }else
	    {
	    	PackUnderVoltagetick = 0;
 800900a:	2300      	movs	r3, #0
 800900c:	61bb      	str	r3, [r7, #24]
	    	MAINBUFFER[FAULTS] &= ~(1 << 10);
 800900e:	4b4b      	ldr	r3, [pc, #300]	; (800913c <vMeasure_Precharge+0x574>)
 8009010:	881b      	ldrh	r3, [r3, #0]
 8009012:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009016:	b29a      	uxth	r2, r3
 8009018:	4b48      	ldr	r3, [pc, #288]	; (800913c <vMeasure_Precharge+0x574>)
 800901a:	801a      	strh	r2, [r3, #0]
	    }
	    if (current > (double)MAINBUFFER[DISCHARGE_OVER_CURRENT_TRESHOLD]/10.0)
 800901c:	68b8      	ldr	r0, [r7, #8]
 800901e:	f7f7 fab3 	bl	8000588 <__aeabi_f2d>
 8009022:	4604      	mov	r4, r0
 8009024:	460d      	mov	r5, r1
 8009026:	4b45      	ldr	r3, [pc, #276]	; (800913c <vMeasure_Precharge+0x574>)
 8009028:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800902c:	4618      	mov	r0, r3
 800902e:	f7f7 fa89 	bl	8000544 <__aeabi_ui2d>
 8009032:	f04f 0200 	mov.w	r2, #0
 8009036:	4b45      	ldr	r3, [pc, #276]	; (800914c <vMeasure_Precharge+0x584>)
 8009038:	f7f7 fc28 	bl	800088c <__aeabi_ddiv>
 800903c:	4602      	mov	r2, r0
 800903e:	460b      	mov	r3, r1
 8009040:	4620      	mov	r0, r4
 8009042:	4629      	mov	r1, r5
 8009044:	f7f7 fd88 	bl	8000b58 <__aeabi_dcmpgt>
 8009048:	4603      	mov	r3, r0
 800904a:	2b00      	cmp	r3, #0
 800904c:	d01a      	beq.n	8009084 <vMeasure_Precharge+0x4bc>
	    {
	    	if(DischargeOverCurrenttick==0) DischargeOverCurrenttick=xTaskGetTickCount();
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d103      	bne.n	800905c <vMeasure_Precharge+0x494>
 8009054:	f00e fc02 	bl	801785c <xTaskGetTickCount>
 8009058:	6178      	str	r0, [r7, #20]
 800905a:	e01c      	b.n	8009096 <vMeasure_Precharge+0x4ce>
			else if(xTaskGetTickCount()-DischargeOverCurrenttick >= MAINBUFFER[OVER_CURRENT_ERROR_DELAY]){
 800905c:	f00e fbfe 	bl	801785c <xTaskGetTickCount>
 8009060:	4602      	mov	r2, r0
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	1ad3      	subs	r3, r2, r3
 8009066:	4a35      	ldr	r2, [pc, #212]	; (800913c <vMeasure_Precharge+0x574>)
 8009068:	f8b2 204c 	ldrh.w	r2, [r2, #76]	; 0x4c
 800906c:	4293      	cmp	r3, r2
 800906e:	d312      	bcc.n	8009096 <vMeasure_Precharge+0x4ce>
		    	MAINBUFFER[FAULTS] |= 1 << 3;
 8009070:	4b32      	ldr	r3, [pc, #200]	; (800913c <vMeasure_Precharge+0x574>)
 8009072:	881b      	ldrh	r3, [r3, #0]
 8009074:	f043 0308 	orr.w	r3, r3, #8
 8009078:	b29a      	uxth	r2, r3
 800907a:	4b30      	ldr	r3, [pc, #192]	; (800913c <vMeasure_Precharge+0x574>)
 800907c:	801a      	strh	r2, [r3, #0]
				faultLatch();
 800907e:	f000 fe9d 	bl	8009dbc <faultLatch>
 8009082:	e008      	b.n	8009096 <vMeasure_Precharge+0x4ce>
			}

	    }else
	    {
	    	DischargeOverCurrenttick = 0;
 8009084:	2300      	movs	r3, #0
 8009086:	617b      	str	r3, [r7, #20]
	    	MAINBUFFER[FAULTS] &= ~(1 << 3);
 8009088:	4b2c      	ldr	r3, [pc, #176]	; (800913c <vMeasure_Precharge+0x574>)
 800908a:	881b      	ldrh	r3, [r3, #0]
 800908c:	f023 0308 	bic.w	r3, r3, #8
 8009090:	b29a      	uxth	r2, r3
 8009092:	4b2a      	ldr	r3, [pc, #168]	; (800913c <vMeasure_Precharge+0x574>)
 8009094:	801a      	strh	r2, [r3, #0]
	    }

		if (current < ((double)(signed short int)MAINBUFFER[CHARGE_OVER_CURRENT_TRESHOLD])/10.0)
 8009096:	68b8      	ldr	r0, [r7, #8]
 8009098:	f7f7 fa76 	bl	8000588 <__aeabi_f2d>
 800909c:	4604      	mov	r4, r0
 800909e:	460d      	mov	r5, r1
 80090a0:	4b26      	ldr	r3, [pc, #152]	; (800913c <vMeasure_Precharge+0x574>)
 80090a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80090a6:	b21b      	sxth	r3, r3
 80090a8:	4618      	mov	r0, r3
 80090aa:	f7f7 fa5b 	bl	8000564 <__aeabi_i2d>
 80090ae:	f04f 0200 	mov.w	r2, #0
 80090b2:	4b26      	ldr	r3, [pc, #152]	; (800914c <vMeasure_Precharge+0x584>)
 80090b4:	f7f7 fbea 	bl	800088c <__aeabi_ddiv>
 80090b8:	4602      	mov	r2, r0
 80090ba:	460b      	mov	r3, r1
 80090bc:	4620      	mov	r0, r4
 80090be:	4629      	mov	r1, r5
 80090c0:	f7f7 fd2c 	bl	8000b1c <__aeabi_dcmplt>
 80090c4:	4603      	mov	r3, r0
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d01a      	beq.n	8009100 <vMeasure_Precharge+0x538>
		{
	    	if(ChargeOverCurrenttick==0) ChargeOverCurrenttick=xTaskGetTickCount();
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d103      	bne.n	80090d8 <vMeasure_Precharge+0x510>
 80090d0:	f00e fbc4 	bl	801785c <xTaskGetTickCount>
 80090d4:	6138      	str	r0, [r7, #16]
 80090d6:	e01c      	b.n	8009112 <vMeasure_Precharge+0x54a>
			else if(xTaskGetTickCount()-ChargeOverCurrenttick >= MAINBUFFER[OVER_CURRENT_ERROR_DELAY]){
 80090d8:	f00e fbc0 	bl	801785c <xTaskGetTickCount>
 80090dc:	4602      	mov	r2, r0
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	1ad3      	subs	r3, r2, r3
 80090e2:	4a16      	ldr	r2, [pc, #88]	; (800913c <vMeasure_Precharge+0x574>)
 80090e4:	f8b2 204c 	ldrh.w	r2, [r2, #76]	; 0x4c
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d312      	bcc.n	8009112 <vMeasure_Precharge+0x54a>
				MAINBUFFER[FAULTS] |= 1 << 4;
 80090ec:	4b13      	ldr	r3, [pc, #76]	; (800913c <vMeasure_Precharge+0x574>)
 80090ee:	881b      	ldrh	r3, [r3, #0]
 80090f0:	f043 0310 	orr.w	r3, r3, #16
 80090f4:	b29a      	uxth	r2, r3
 80090f6:	4b11      	ldr	r3, [pc, #68]	; (800913c <vMeasure_Precharge+0x574>)
 80090f8:	801a      	strh	r2, [r3, #0]
				faultLatch();
 80090fa:	f000 fe5f 	bl	8009dbc <faultLatch>
 80090fe:	e008      	b.n	8009112 <vMeasure_Precharge+0x54a>
			}

		}else
		{
			ChargeOverCurrenttick = 0;
 8009100:	2300      	movs	r3, #0
 8009102:	613b      	str	r3, [r7, #16]
			MAINBUFFER[FAULTS] &= ~(1 << 4);
 8009104:	4b0d      	ldr	r3, [pc, #52]	; (800913c <vMeasure_Precharge+0x574>)
 8009106:	881b      	ldrh	r3, [r3, #0]
 8009108:	f023 0310 	bic.w	r3, r3, #16
 800910c:	b29a      	uxth	r2, r3
 800910e:	4b0b      	ldr	r3, [pc, #44]	; (800913c <vMeasure_Precharge+0x574>)
 8009110:	801a      	strh	r2, [r3, #0]
		}


		faultLatch();
 8009112:	f000 fe53 	bl	8009dbc <faultLatch>
		vTaskDelay(5);
 8009116:	2005      	movs	r0, #5
 8009118:	f00e fa10 	bl	801753c <vTaskDelay>
	{
 800911c:	e56a      	b.n	8008bf4 <vMeasure_Precharge+0x2c>
 800911e:	bf00      	nop
 8009120:	e924f228 	.word	0xe924f228
 8009124:	3fe9c99a 	.word	0x3fe9c99a
 8009128:	1a75cd0c 	.word	0x1a75cd0c
 800912c:	409a0d49 	.word	0x409a0d49
 8009130:	8d2dfb66 	.word	0x8d2dfb66
 8009134:	4008d4a1 	.word	0x4008d4a1
 8009138:	200018ec 	.word	0x200018ec
 800913c:	200024b8 	.word	0x200024b8
 8009140:	2000256c 	.word	0x2000256c
 8009144:	43ce8000 	.word	0x43ce8000
 8009148:	42200000 	.word	0x42200000
 800914c:	40240000 	.word	0x40240000

08009150 <vSoCTASK>:

	}

}

static void vSoCTASK(void *parameter) {
 8009150:	b5b0      	push	{r4, r5, r7, lr}
 8009152:	b084      	sub	sp, #16
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]

	float SoC = 0;
 8009158:	f04f 0300 	mov.w	r3, #0
 800915c:	60fb      	str	r3, [r7, #12]
	signed short int current;
	signed short int temperature;

	BatterySOCEstimationV2_initialize();
 800915e:	f00d fc23 	bl	80169a8 <BatterySOCEstimationV2_initialize>

	Get_ADC_Data();
 8009162:	f000 fcd7 	bl	8009b14 <Get_ADC_Data>

	rtU.OCV = (((float) adc_data[0] - 56.15) / 5.083)/total_ic*16.0; //OCV için araç açıldığı anda alınan voltaj değeri gerekli
 8009166:	4b54      	ldr	r3, [pc, #336]	; (80092b8 <vSoCTASK+0x168>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	ee07 3a90 	vmov	s15, r3
 800916e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009172:	ee17 0a90 	vmov	r0, s15
 8009176:	f7f7 fa07 	bl	8000588 <__aeabi_f2d>
 800917a:	a349      	add	r3, pc, #292	; (adr r3, 80092a0 <vSoCTASK+0x150>)
 800917c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009180:	f7f7 f8a2 	bl	80002c8 <__aeabi_dsub>
 8009184:	4602      	mov	r2, r0
 8009186:	460b      	mov	r3, r1
 8009188:	4610      	mov	r0, r2
 800918a:	4619      	mov	r1, r3
 800918c:	a346      	add	r3, pc, #280	; (adr r3, 80092a8 <vSoCTASK+0x158>)
 800918e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009192:	f7f7 fb7b 	bl	800088c <__aeabi_ddiv>
 8009196:	4602      	mov	r2, r0
 8009198:	460b      	mov	r3, r1
 800919a:	4610      	mov	r0, r2
 800919c:	4619      	mov	r1, r3
 800919e:	f04f 0200 	mov.w	r2, #0
 80091a2:	4b46      	ldr	r3, [pc, #280]	; (80092bc <vSoCTASK+0x16c>)
 80091a4:	f7f7 fb72 	bl	800088c <__aeabi_ddiv>
 80091a8:	4602      	mov	r2, r0
 80091aa:	460b      	mov	r3, r1
 80091ac:	4610      	mov	r0, r2
 80091ae:	4619      	mov	r1, r3
 80091b0:	f04f 0200 	mov.w	r2, #0
 80091b4:	4b42      	ldr	r3, [pc, #264]	; (80092c0 <vSoCTASK+0x170>)
 80091b6:	f7f7 fa3f 	bl	8000638 <__aeabi_dmul>
 80091ba:	4602      	mov	r2, r0
 80091bc:	460b      	mov	r3, r1
 80091be:	4941      	ldr	r1, [pc, #260]	; (80092c4 <vSoCTASK+0x174>)
 80091c0:	e9c1 2306 	strd	r2, r3, [r1, #24]


	for(;;)
	{
		current = (signed short int) MAINBUFFER[PACK_CURRENT];
 80091c4:	4b40      	ldr	r3, [pc, #256]	; (80092c8 <vSoCTASK+0x178>)
 80091c6:	8a1b      	ldrh	r3, [r3, #16]
 80091c8:	817b      	strh	r3, [r7, #10]
		temperature = (signed short int) MAINBUFFER[PACK_AVG_CELL_TEMP];
 80091ca:	4b3f      	ldr	r3, [pc, #252]	; (80092c8 <vSoCTASK+0x178>)
 80091cc:	8bdb      	ldrh	r3, [r3, #30]
 80091ce:	813b      	strh	r3, [r7, #8]

		//SoC Section
	    rtU.current = -1*((double)current)/10;
 80091d0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80091d4:	4618      	mov	r0, r3
 80091d6:	f7f7 f9c5 	bl	8000564 <__aeabi_i2d>
 80091da:	4602      	mov	r2, r0
 80091dc:	460b      	mov	r3, r1
 80091de:	4614      	mov	r4, r2
 80091e0:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80091e4:	f04f 0200 	mov.w	r2, #0
 80091e8:	4b38      	ldr	r3, [pc, #224]	; (80092cc <vSoCTASK+0x17c>)
 80091ea:	4620      	mov	r0, r4
 80091ec:	4629      	mov	r1, r5
 80091ee:	f7f7 fb4d 	bl	800088c <__aeabi_ddiv>
 80091f2:	4602      	mov	r2, r0
 80091f4:	460b      	mov	r3, r1
 80091f6:	4933      	ldr	r1, [pc, #204]	; (80092c4 <vSoCTASK+0x174>)
 80091f8:	e9c1 2300 	strd	r2, r3, [r1]
	    rtU.TerminalVoltage = ((double)MAINBUFFER[PACK_AVG_CELL_VOLTAGE])/100;
 80091fc:	4b32      	ldr	r3, [pc, #200]	; (80092c8 <vSoCTASK+0x178>)
 80091fe:	8b9b      	ldrh	r3, [r3, #28]
 8009200:	4618      	mov	r0, r3
 8009202:	f7f7 f99f 	bl	8000544 <__aeabi_ui2d>
 8009206:	f04f 0200 	mov.w	r2, #0
 800920a:	4b31      	ldr	r3, [pc, #196]	; (80092d0 <vSoCTASK+0x180>)
 800920c:	f7f7 fb3e 	bl	800088c <__aeabi_ddiv>
 8009210:	4602      	mov	r2, r0
 8009212:	460b      	mov	r3, r1
 8009214:	492b      	ldr	r1, [pc, #172]	; (80092c4 <vSoCTASK+0x174>)
 8009216:	e9c1 2302 	strd	r2, r3, [r1, #8]
	    rtU.Temperature = ((double)temperature)/100;
 800921a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800921e:	4618      	mov	r0, r3
 8009220:	f7f7 f9a0 	bl	8000564 <__aeabi_i2d>
 8009224:	f04f 0200 	mov.w	r2, #0
 8009228:	4b29      	ldr	r3, [pc, #164]	; (80092d0 <vSoCTASK+0x180>)
 800922a:	f7f7 fb2f 	bl	800088c <__aeabi_ddiv>
 800922e:	4602      	mov	r2, r0
 8009230:	460b      	mov	r3, r1
 8009232:	4924      	ldr	r1, [pc, #144]	; (80092c4 <vSoCTASK+0x174>)
 8009234:	e9c1 2304 	strd	r2, r3, [r1, #16]
	    BatterySOCEstimationV2_step();
 8009238:	f00c fe32 	bl	8015ea0 <BatterySOCEstimationV2_step>
	    SoC = rtY.SoC;
 800923c:	4b25      	ldr	r3, [pc, #148]	; (80092d4 <vSoCTASK+0x184>)
 800923e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009242:	4610      	mov	r0, r2
 8009244:	4619      	mov	r1, r3
 8009246:	f7f7 fcef 	bl	8000c28 <__aeabi_d2f>
 800924a:	4603      	mov	r3, r0
 800924c:	60fb      	str	r3, [r7, #12]

	    MAINBUFFER[OPEN_CIRCUIT_VOLTAGE] = (uint16_t)(rtU.OCV*100.0);
 800924e:	4b1d      	ldr	r3, [pc, #116]	; (80092c4 <vSoCTASK+0x174>)
 8009250:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8009254:	f04f 0200 	mov.w	r2, #0
 8009258:	4b1d      	ldr	r3, [pc, #116]	; (80092d0 <vSoCTASK+0x180>)
 800925a:	f7f7 f9ed 	bl	8000638 <__aeabi_dmul>
 800925e:	4602      	mov	r2, r0
 8009260:	460b      	mov	r3, r1
 8009262:	4610      	mov	r0, r2
 8009264:	4619      	mov	r1, r3
 8009266:	f7f7 fcbf 	bl	8000be8 <__aeabi_d2uiz>
 800926a:	4603      	mov	r3, r0
 800926c:	b29a      	uxth	r2, r3
 800926e:	4b16      	ldr	r3, [pc, #88]	; (80092c8 <vSoCTASK+0x178>)
 8009270:	849a      	strh	r2, [r3, #36]	; 0x24
	    MAINBUFFER[ESTIMATED_SoC] = (uint16_t) (SoC*10000.0);
 8009272:	68f8      	ldr	r0, [r7, #12]
 8009274:	f7f7 f988 	bl	8000588 <__aeabi_f2d>
 8009278:	a30d      	add	r3, pc, #52	; (adr r3, 80092b0 <vSoCTASK+0x160>)
 800927a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800927e:	f7f7 f9db 	bl	8000638 <__aeabi_dmul>
 8009282:	4602      	mov	r2, r0
 8009284:	460b      	mov	r3, r1
 8009286:	4610      	mov	r0, r2
 8009288:	4619      	mov	r1, r3
 800928a:	f7f7 fcad 	bl	8000be8 <__aeabi_d2uiz>
 800928e:	4603      	mov	r3, r0
 8009290:	b29a      	uxth	r2, r3
 8009292:	4b0d      	ldr	r3, [pc, #52]	; (80092c8 <vSoCTASK+0x178>)
 8009294:	845a      	strh	r2, [r3, #34]	; 0x22


	    vTaskDelay(50);
 8009296:	2032      	movs	r0, #50	; 0x32
 8009298:	f00e f950 	bl	801753c <vTaskDelay>
		current = (signed short int) MAINBUFFER[PACK_CURRENT];
 800929c:	e792      	b.n	80091c4 <vSoCTASK+0x74>
 800929e:	bf00      	nop
 80092a0:	33333333 	.word	0x33333333
 80092a4:	404c1333 	.word	0x404c1333
 80092a8:	f3b645a2 	.word	0xf3b645a2
 80092ac:	401454fd 	.word	0x401454fd
 80092b0:	00000000 	.word	0x00000000
 80092b4:	40c38800 	.word	0x40c38800
 80092b8:	200018ec 	.word	0x200018ec
 80092bc:	40180000 	.word	0x40180000
 80092c0:	40300000 	.word	0x40300000
 80092c4:	200027a0 	.word	0x200027a0
 80092c8:	200024b8 	.word	0x200024b8
 80092cc:	40240000 	.word	0x40240000
 80092d0:	40590000 	.word	0x40590000
 80092d4:	200027c0 	.word	0x200027c0

080092d8 <vChargeControl>:
	}
}

static void vChargeControl(void *parameter) {
 80092d8:	b5b0      	push	{r4, r5, r7, lr}
 80092da:	b088      	sub	sp, #32
 80092dc:	af02      	add	r7, sp, #8
 80092de:	6078      	str	r0, [r7, #4]

	CHARG_STATE CHARGER = NO_CHARGER;
 80092e0:	2301      	movs	r3, #1
 80092e2:	75fb      	strb	r3, [r7, #23]

	uint8_t TXCharger[8];
    uint8_t BalanceEndflag = 1;
 80092e4:	2301      	movs	r3, #1
 80092e6:	75bb      	strb	r3, [r7, #22]

	for (;;)
	{
		//MAINBUFFER LOADING
		MAINBUFFER[CHARGING_STATE] = CHARGER;
 80092e8:	7dfb      	ldrb	r3, [r7, #23]
 80092ea:	b29a      	uxth	r2, r3
 80092ec:	4b87      	ldr	r3, [pc, #540]	; (800950c <vChargeControl+0x234>)
 80092ee:	809a      	strh	r2, [r3, #4]

		vTaskDelay(500);
 80092f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80092f4:	f00e f922 	bl	801753c <vTaskDelay>

		//IF WE COMMUNICATE WITH VCU, THERE IS NO NEED FOR THIS TASK
		if(VCUflag == 1)
 80092f8:	4b85      	ldr	r3, [pc, #532]	; (8009510 <vChargeControl+0x238>)
 80092fa:	781b      	ldrb	r3, [r3, #0]
 80092fc:	2b01      	cmp	r3, #1
 80092fe:	d107      	bne.n	8009310 <vChargeControl+0x38>
		{
			vTaskDelete(NULL);
 8009300:	2000      	movs	r0, #0
 8009302:	f00e f887 	bl	8017414 <vTaskDelete>
			vTaskDelay(portMAX_DELAY);
 8009306:	f04f 30ff 	mov.w	r0, #4294967295
 800930a:	f00e f917 	bl	801753c <vTaskDelay>
 800930e:	e7eb      	b.n	80092e8 <vChargeControl+0x10>
		}

		//CHECKING FOR ARE WE COMMUNICATING WITH CHARGER
		else if (VCUflag == 0 && Chargerflag == 0)
 8009310:	4b7f      	ldr	r3, [pc, #508]	; (8009510 <vChargeControl+0x238>)
 8009312:	781b      	ldrb	r3, [r3, #0]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d143      	bne.n	80093a0 <vChargeControl+0xc8>
 8009318:	4b7e      	ldr	r3, [pc, #504]	; (8009514 <vChargeControl+0x23c>)
 800931a:	781b      	ldrb	r3, [r3, #0]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d13f      	bne.n	80093a0 <vChargeControl+0xc8>
		{
			//baud rate değiştir
			HAL_CAN_Stop(&hcan1);
 8009320:	487d      	ldr	r0, [pc, #500]	; (8009518 <vChargeControl+0x240>)
 8009322:	f002 f995 	bl	800b650 <HAL_CAN_Stop>
			HAL_CAN_DeInit(&hcan1);
 8009326:	487c      	ldr	r0, [pc, #496]	; (8009518 <vChargeControl+0x240>)
 8009328:	f002 f84b 	bl	800b3c2 <HAL_CAN_DeInit>
		    hcan1.Init.Prescaler = 24;
 800932c:	4b7a      	ldr	r3, [pc, #488]	; (8009518 <vChargeControl+0x240>)
 800932e:	2218      	movs	r2, #24
 8009330:	605a      	str	r2, [r3, #4]
		    hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 8009332:	4b79      	ldr	r3, [pc, #484]	; (8009518 <vChargeControl+0x240>)
 8009334:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009338:	611a      	str	r2, [r3, #16]
		    hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800933a:	4b77      	ldr	r3, [pc, #476]	; (8009518 <vChargeControl+0x240>)
 800933c:	2200      	movs	r2, #0
 800933e:	615a      	str	r2, [r3, #20]
			HAL_CAN_Init(&hcan1);
 8009340:	4875      	ldr	r0, [pc, #468]	; (8009518 <vChargeControl+0x240>)
 8009342:	f001 ff43 	bl	800b1cc <HAL_CAN_Init>
			HAL_CAN_Start(&hcan1);
 8009346:	4874      	ldr	r0, [pc, #464]	; (8009518 <vChargeControl+0x240>)
 8009348:	f002 f93e 	bl	800b5c8 <HAL_CAN_Start>
			HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800934c:	2102      	movs	r1, #2
 800934e:	4872      	ldr	r0, [pc, #456]	; (8009518 <vChargeControl+0x240>)
 8009350:	f002 fbb4 	bl	800babc <HAL_CAN_ActivateNotification>

			ulTaskNotifyTake(pdFALSE,1500);
 8009354:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8009358:	2100      	movs	r1, #0
 800935a:	2000      	movs	r0, #0
 800935c:	f00e fe98 	bl	8018090 <ulTaskGenericNotifyTake>

			if(Chargerflag == 0)
 8009360:	4b6c      	ldr	r3, [pc, #432]	; (8009514 <vChargeControl+0x23c>)
 8009362:	781b      	ldrb	r3, [r3, #0]
 8009364:	2b00      	cmp	r3, #0
 8009366:	f040 818a 	bne.w	800967e <vChargeControl+0x3a6>
			{
				HAL_CAN_Stop(&hcan1);
 800936a:	486b      	ldr	r0, [pc, #428]	; (8009518 <vChargeControl+0x240>)
 800936c:	f002 f970 	bl	800b650 <HAL_CAN_Stop>
				HAL_CAN_DeInit(&hcan1);
 8009370:	4869      	ldr	r0, [pc, #420]	; (8009518 <vChargeControl+0x240>)
 8009372:	f002 f826 	bl	800b3c2 <HAL_CAN_DeInit>
			    hcan1.Init.Prescaler = 12; //6;
 8009376:	4b68      	ldr	r3, [pc, #416]	; (8009518 <vChargeControl+0x240>)
 8009378:	220c      	movs	r2, #12
 800937a:	605a      	str	r2, [r3, #4]
			    hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 800937c:	4b66      	ldr	r3, [pc, #408]	; (8009518 <vChargeControl+0x240>)
 800937e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009382:	611a      	str	r2, [r3, #16]
			    hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8009384:	4b64      	ldr	r3, [pc, #400]	; (8009518 <vChargeControl+0x240>)
 8009386:	2200      	movs	r2, #0
 8009388:	615a      	str	r2, [r3, #20]
				HAL_CAN_Init(&hcan1);
 800938a:	4863      	ldr	r0, [pc, #396]	; (8009518 <vChargeControl+0x240>)
 800938c:	f001 ff1e 	bl	800b1cc <HAL_CAN_Init>
				HAL_CAN_Start(&hcan1);
 8009390:	4861      	ldr	r0, [pc, #388]	; (8009518 <vChargeControl+0x240>)
 8009392:	f002 f919 	bl	800b5c8 <HAL_CAN_Start>
				HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8009396:	2102      	movs	r1, #2
 8009398:	485f      	ldr	r0, [pc, #380]	; (8009518 <vChargeControl+0x240>)
 800939a:	f002 fb8f 	bl	800babc <HAL_CAN_ActivateNotification>
			if(Chargerflag == 0)
 800939e:	e16e      	b.n	800967e <vChargeControl+0x3a6>
			}


		}
		//IF WE COMMUNICATE WITH CHARGER GET IN
		else if(Chargerflag == 1)
 80093a0:	4b5c      	ldr	r3, [pc, #368]	; (8009514 <vChargeControl+0x23c>)
 80093a2:	781b      	ldrb	r3, [r3, #0]
 80093a4:	2b01      	cmp	r3, #1
 80093a6:	d19f      	bne.n	80092e8 <vChargeControl+0x10>
		{
			if(IsSCActive())
 80093a8:	f000 fd40 	bl	8009e2c <IsSCActive>
 80093ac:	4603      	mov	r3, r0
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d004      	beq.n	80093bc <vChargeControl+0xe4>
			{
				if(CHARGER == NO_CHARGER) CHARGER = CHARGING;
 80093b2:	7dfb      	ldrb	r3, [r7, #23]
 80093b4:	2b01      	cmp	r3, #1
 80093b6:	d101      	bne.n	80093bc <vChargeControl+0xe4>
 80093b8:	2302      	movs	r3, #2
 80093ba:	75fb      	strb	r3, [r7, #23]
			}

			switch(CHARGER)
 80093bc:	7dfb      	ldrb	r3, [r7, #23]
 80093be:	2b02      	cmp	r3, #2
 80093c0:	d003      	beq.n	80093ca <vChargeControl+0xf2>
 80093c2:	2b03      	cmp	r3, #3
 80093c4:	f000 809c 	beq.w	8009500 <vChargeControl+0x228>
					BalanceEndflag = 1;

					break;
				}
				default:
				    break;
 80093c8:	e159      	b.n	800967e <vChargeControl+0x3a6>
					TxHeader.IDE = CAN_ID_EXT;
 80093ca:	4b54      	ldr	r3, [pc, #336]	; (800951c <vChargeControl+0x244>)
 80093cc:	2204      	movs	r2, #4
 80093ce:	609a      	str	r2, [r3, #8]
					TxHeader.ExtId = 0x1806E5F4;
 80093d0:	4b52      	ldr	r3, [pc, #328]	; (800951c <vChargeControl+0x244>)
 80093d2:	4a53      	ldr	r2, [pc, #332]	; (8009520 <vChargeControl+0x248>)
 80093d4:	605a      	str	r2, [r3, #4]
					TxHeader.DLC = 8;
 80093d6:	4b51      	ldr	r3, [pc, #324]	; (800951c <vChargeControl+0x244>)
 80093d8:	2208      	movs	r2, #8
 80093da:	611a      	str	r2, [r3, #16]
					TXCharger[0]= (uint8_t)((MAINBUFFER[CHARGER_SET_VOLTAGE]/10) >> 8);
 80093dc:	4b4b      	ldr	r3, [pc, #300]	; (800950c <vChargeControl+0x234>)
 80093de:	88db      	ldrh	r3, [r3, #6]
 80093e0:	4a50      	ldr	r2, [pc, #320]	; (8009524 <vChargeControl+0x24c>)
 80093e2:	fba2 2303 	umull	r2, r3, r2, r3
 80093e6:	08db      	lsrs	r3, r3, #3
 80093e8:	b29b      	uxth	r3, r3
 80093ea:	0a1b      	lsrs	r3, r3, #8
 80093ec:	b29b      	uxth	r3, r3
 80093ee:	b2db      	uxtb	r3, r3
 80093f0:	733b      	strb	r3, [r7, #12]
					TXCharger[1]= (uint8_t)(MAINBUFFER[CHARGER_SET_VOLTAGE]/10) ;
 80093f2:	4b46      	ldr	r3, [pc, #280]	; (800950c <vChargeControl+0x234>)
 80093f4:	88db      	ldrh	r3, [r3, #6]
 80093f6:	4a4b      	ldr	r2, [pc, #300]	; (8009524 <vChargeControl+0x24c>)
 80093f8:	fba2 2303 	umull	r2, r3, r2, r3
 80093fc:	08db      	lsrs	r3, r3, #3
 80093fe:	b29b      	uxth	r3, r3
 8009400:	b2db      	uxtb	r3, r3
 8009402:	737b      	strb	r3, [r7, #13]
					TXCharger[2]= (uint8_t) (MAINBUFFER[CHARGER_SET_CURRENT] >> 8);
 8009404:	4b41      	ldr	r3, [pc, #260]	; (800950c <vChargeControl+0x234>)
 8009406:	891b      	ldrh	r3, [r3, #8]
 8009408:	0a1b      	lsrs	r3, r3, #8
 800940a:	b29b      	uxth	r3, r3
 800940c:	b2db      	uxtb	r3, r3
 800940e:	73bb      	strb	r3, [r7, #14]
					TXCharger[3]= (uint8_t) MAINBUFFER[CHARGER_SET_CURRENT] ;
 8009410:	4b3e      	ldr	r3, [pc, #248]	; (800950c <vChargeControl+0x234>)
 8009412:	891b      	ldrh	r3, [r3, #8]
 8009414:	b2db      	uxtb	r3, r3
 8009416:	73fb      	strb	r3, [r7, #15]
					TXCharger[4]= 0;
 8009418:	2300      	movs	r3, #0
 800941a:	743b      	strb	r3, [r7, #16]
					TXCharger[5]= 0;
 800941c:	2300      	movs	r3, #0
 800941e:	747b      	strb	r3, [r7, #17]
					TXCharger[6]= 0;
 8009420:	2300      	movs	r3, #0
 8009422:	74bb      	strb	r3, [r7, #18]
					TXCharger[7]= 0;
 8009424:	2300      	movs	r3, #0
 8009426:	74fb      	strb	r3, [r7, #19]
					HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TXCharger, &TxMailbox);
 8009428:	f107 020c 	add.w	r2, r7, #12
 800942c:	4b3e      	ldr	r3, [pc, #248]	; (8009528 <vChargeControl+0x250>)
 800942e:	493b      	ldr	r1, [pc, #236]	; (800951c <vChargeControl+0x244>)
 8009430:	4839      	ldr	r0, [pc, #228]	; (8009518 <vChargeControl+0x240>)
 8009432:	f002 f956 	bl	800b6e2 <HAL_CAN_AddTxMessage>
					MAINBUFFER[CHARGER_ACTUAL_VOLTAGE] = MAINBUFFER[PACK_VOLTAGE];
 8009436:	4b35      	ldr	r3, [pc, #212]	; (800950c <vChargeControl+0x234>)
 8009438:	89da      	ldrh	r2, [r3, #14]
 800943a:	4b34      	ldr	r3, [pc, #208]	; (800950c <vChargeControl+0x234>)
 800943c:	815a      	strh	r2, [r3, #10]
					MAINBUFFER[CHARGER_ACTUAL_CURRENT] = MAINBUFFER[PACK_CURRENT];
 800943e:	4b33      	ldr	r3, [pc, #204]	; (800950c <vChargeControl+0x234>)
 8009440:	8a1a      	ldrh	r2, [r3, #16]
 8009442:	4b32      	ldr	r3, [pc, #200]	; (800950c <vChargeControl+0x234>)
 8009444:	819a      	strh	r2, [r3, #12]
					if(RxData[4] != 0)
 8009446:	4b39      	ldr	r3, [pc, #228]	; (800952c <vChargeControl+0x254>)
 8009448:	791b      	ldrb	r3, [r3, #4]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d005      	beq.n	800945a <vChargeControl+0x182>
						HAL_GPIO_WritePin(ERROR_OUT_GPIO_Port, ERROR_OUT_Pin, 0);
 800944e:	2200      	movs	r2, #0
 8009450:	2101      	movs	r1, #1
 8009452:	4837      	ldr	r0, [pc, #220]	; (8009530 <vChargeControl+0x258>)
 8009454:	f003 fcac 	bl	800cdb0 <HAL_GPIO_WritePin>
 8009458:	e004      	b.n	8009464 <vChargeControl+0x18c>
					else HAL_GPIO_WritePin(ERROR_OUT_GPIO_Port, ERROR_OUT_Pin, 1);
 800945a:	2201      	movs	r2, #1
 800945c:	2101      	movs	r1, #1
 800945e:	4834      	ldr	r0, [pc, #208]	; (8009530 <vChargeControl+0x258>)
 8009460:	f003 fca6 	bl	800cdb0 <HAL_GPIO_WritePin>
					if((MAINBUFFER[PACK_VOLTAGE] >= MAINBUFFER[CHARGER_SET_VOLTAGE]-100)
 8009464:	4b29      	ldr	r3, [pc, #164]	; (800950c <vChargeControl+0x234>)
 8009466:	89db      	ldrh	r3, [r3, #14]
 8009468:	461a      	mov	r2, r3
 800946a:	4b28      	ldr	r3, [pc, #160]	; (800950c <vChargeControl+0x234>)
 800946c:	88db      	ldrh	r3, [r3, #6]
 800946e:	3b64      	subs	r3, #100	; 0x64
 8009470:	429a      	cmp	r2, r3
 8009472:	f2c0 8103 	blt.w	800967c <vChargeControl+0x3a4>
						&& ((signed short int)MAINBUFFER[PACK_CURRENT] >= -1))
 8009476:	4b25      	ldr	r3, [pc, #148]	; (800950c <vChargeControl+0x234>)
 8009478:	8a1b      	ldrh	r3, [r3, #16]
 800947a:	b21b      	sxth	r3, r3
 800947c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009480:	f2c0 80fc 	blt.w	800967c <vChargeControl+0x3a4>
						TxHeader.IDE = CAN_ID_EXT;
 8009484:	4b25      	ldr	r3, [pc, #148]	; (800951c <vChargeControl+0x244>)
 8009486:	2204      	movs	r2, #4
 8009488:	609a      	str	r2, [r3, #8]
						TxHeader.ExtId = 0x1806E5F4;
 800948a:	4b24      	ldr	r3, [pc, #144]	; (800951c <vChargeControl+0x244>)
 800948c:	4a24      	ldr	r2, [pc, #144]	; (8009520 <vChargeControl+0x248>)
 800948e:	605a      	str	r2, [r3, #4]
						TxHeader.DLC = 8;
 8009490:	4b22      	ldr	r3, [pc, #136]	; (800951c <vChargeControl+0x244>)
 8009492:	2208      	movs	r2, #8
 8009494:	611a      	str	r2, [r3, #16]
						TXCharger[0]= (uint8_t)((MAINBUFFER[CHARGER_SET_VOLTAGE]/10) >> 8);
 8009496:	4b1d      	ldr	r3, [pc, #116]	; (800950c <vChargeControl+0x234>)
 8009498:	88db      	ldrh	r3, [r3, #6]
 800949a:	4a22      	ldr	r2, [pc, #136]	; (8009524 <vChargeControl+0x24c>)
 800949c:	fba2 2303 	umull	r2, r3, r2, r3
 80094a0:	08db      	lsrs	r3, r3, #3
 80094a2:	b29b      	uxth	r3, r3
 80094a4:	0a1b      	lsrs	r3, r3, #8
 80094a6:	b29b      	uxth	r3, r3
 80094a8:	b2db      	uxtb	r3, r3
 80094aa:	733b      	strb	r3, [r7, #12]
						TXCharger[1]= (uint8_t)(MAINBUFFER[CHARGER_SET_VOLTAGE]/10) ;
 80094ac:	4b17      	ldr	r3, [pc, #92]	; (800950c <vChargeControl+0x234>)
 80094ae:	88db      	ldrh	r3, [r3, #6]
 80094b0:	4a1c      	ldr	r2, [pc, #112]	; (8009524 <vChargeControl+0x24c>)
 80094b2:	fba2 2303 	umull	r2, r3, r2, r3
 80094b6:	08db      	lsrs	r3, r3, #3
 80094b8:	b29b      	uxth	r3, r3
 80094ba:	b2db      	uxtb	r3, r3
 80094bc:	737b      	strb	r3, [r7, #13]
						TXCharger[2]= (uint8_t) (MAINBUFFER[CHARGER_SET_CURRENT] >> 8);
 80094be:	4b13      	ldr	r3, [pc, #76]	; (800950c <vChargeControl+0x234>)
 80094c0:	891b      	ldrh	r3, [r3, #8]
 80094c2:	0a1b      	lsrs	r3, r3, #8
 80094c4:	b29b      	uxth	r3, r3
 80094c6:	b2db      	uxtb	r3, r3
 80094c8:	73bb      	strb	r3, [r7, #14]
						TXCharger[3]= (uint8_t) MAINBUFFER[CHARGER_SET_CURRENT] ;
 80094ca:	4b10      	ldr	r3, [pc, #64]	; (800950c <vChargeControl+0x234>)
 80094cc:	891b      	ldrh	r3, [r3, #8]
 80094ce:	b2db      	uxtb	r3, r3
 80094d0:	73fb      	strb	r3, [r7, #15]
						TXCharger[4]= 1;
 80094d2:	2301      	movs	r3, #1
 80094d4:	743b      	strb	r3, [r7, #16]
						TXCharger[5]= 0;
 80094d6:	2300      	movs	r3, #0
 80094d8:	747b      	strb	r3, [r7, #17]
						TXCharger[6]= 0;
 80094da:	2300      	movs	r3, #0
 80094dc:	74bb      	strb	r3, [r7, #18]
						TXCharger[7]= 0;
 80094de:	2300      	movs	r3, #0
 80094e0:	74fb      	strb	r3, [r7, #19]
						HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TXCharger, &TxMailbox);
 80094e2:	f107 020c 	add.w	r2, r7, #12
 80094e6:	4b10      	ldr	r3, [pc, #64]	; (8009528 <vChargeControl+0x250>)
 80094e8:	490c      	ldr	r1, [pc, #48]	; (800951c <vChargeControl+0x244>)
 80094ea:	480b      	ldr	r0, [pc, #44]	; (8009518 <vChargeControl+0x240>)
 80094ec:	f002 f8f9 	bl	800b6e2 <HAL_CAN_AddTxMessage>
						HAL_GPIO_WritePin(AIR__OUT_GPIO_Port, AIR__OUT_Pin, 0);
 80094f0:	2200      	movs	r2, #0
 80094f2:	2102      	movs	r1, #2
 80094f4:	480e      	ldr	r0, [pc, #56]	; (8009530 <vChargeControl+0x258>)
 80094f6:	f003 fc5b 	bl	800cdb0 <HAL_GPIO_WritePin>
						CHARGER = BALANCING;
 80094fa:	2303      	movs	r3, #3
 80094fc:	75fb      	strb	r3, [r7, #23]
					break;
 80094fe:	e0bd      	b.n	800967c <vChargeControl+0x3a4>
					for (uint8_t icCounter = 0; icCounter < total_ic; icCounter++) {
 8009500:	2300      	movs	r3, #0
 8009502:	757b      	strb	r3, [r7, #21]
 8009504:	e09b      	b.n	800963e <vChargeControl+0x366>
						for (uint8_t cellCounter = 0; cellCounter < 16; cellCounter++) {
 8009506:	2300      	movs	r3, #0
 8009508:	753b      	strb	r3, [r7, #20]
 800950a:	e091      	b.n	8009630 <vChargeControl+0x358>
 800950c:	200024b8 	.word	0x200024b8
 8009510:	2000254d 	.word	0x2000254d
 8009514:	2000254e 	.word	0x2000254e
 8009518:	200003f8 	.word	0x200003f8
 800951c:	20002508 	.word	0x20002508
 8009520:	1806e5f4 	.word	0x1806e5f4
 8009524:	cccccccd 	.word	0xcccccccd
 8009528:	20002544 	.word	0x20002544
 800952c:	2000253c 	.word	0x2000253c
 8009530:	40020400 	.word	0x40020400
							if((float)(MAINBUFFER[PACK_MAX_CELL_VOLTAGE]/100.0)-ic[icCounter].mesured_cell_voltages[cellCounter]
 8009534:	4b52      	ldr	r3, [pc, #328]	; (8009680 <vChargeControl+0x3a8>)
 8009536:	8a5b      	ldrh	r3, [r3, #18]
 8009538:	4618      	mov	r0, r3
 800953a:	f7f7 f813 	bl	8000564 <__aeabi_i2d>
 800953e:	f04f 0200 	mov.w	r2, #0
 8009542:	4b50      	ldr	r3, [pc, #320]	; (8009684 <vChargeControl+0x3ac>)
 8009544:	f7f7 f9a2 	bl	800088c <__aeabi_ddiv>
 8009548:	4602      	mov	r2, r0
 800954a:	460b      	mov	r3, r1
 800954c:	4610      	mov	r0, r2
 800954e:	4619      	mov	r1, r3
 8009550:	f7f7 fb6a 	bl	8000c28 <__aeabi_d2f>
 8009554:	ee07 0a10 	vmov	s14, r0
 8009558:	7d7a      	ldrb	r2, [r7, #21]
 800955a:	7d3b      	ldrb	r3, [r7, #20]
 800955c:	494a      	ldr	r1, [pc, #296]	; (8009688 <vChargeControl+0x3b0>)
 800955e:	20ca      	movs	r0, #202	; 0xca
 8009560:	fb00 f202 	mul.w	r2, r0, r2
 8009564:	4413      	add	r3, r2
 8009566:	33b8      	adds	r3, #184	; 0xb8
 8009568:	009b      	lsls	r3, r3, #2
 800956a:	440b      	add	r3, r1
 800956c:	edd3 7a00 	vldr	s15, [r3]
 8009570:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009574:	ee17 0a90 	vmov	r0, s15
 8009578:	f7f7 f806 	bl	8000588 <__aeabi_f2d>
 800957c:	4604      	mov	r4, r0
 800957e:	460d      	mov	r5, r1
								> (float)MAINBUFFER[ALLOWED_DISBALANCE]/1000.0){
 8009580:	4b3f      	ldr	r3, [pc, #252]	; (8009680 <vChargeControl+0x3a8>)
 8009582:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8009584:	ee07 3a90 	vmov	s15, r3
 8009588:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800958c:	ee17 0a90 	vmov	r0, s15
 8009590:	f7f6 fffa 	bl	8000588 <__aeabi_f2d>
 8009594:	f04f 0200 	mov.w	r2, #0
 8009598:	4b3c      	ldr	r3, [pc, #240]	; (800968c <vChargeControl+0x3b4>)
 800959a:	f7f7 f977 	bl	800088c <__aeabi_ddiv>
 800959e:	4602      	mov	r2, r0
 80095a0:	460b      	mov	r3, r1
							if((float)(MAINBUFFER[PACK_MAX_CELL_VOLTAGE]/100.0)-ic[icCounter].mesured_cell_voltages[cellCounter]
 80095a2:	4620      	mov	r0, r4
 80095a4:	4629      	mov	r1, r5
 80095a6:	f7f7 fad7 	bl	8000b58 <__aeabi_dcmpgt>
 80095aa:	4603      	mov	r3, r0
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d01e      	beq.n	80095ee <vChargeControl+0x316>
								ic[icCounter].tx_cfgb.dcc |= 1 << cellCounter ;
 80095b0:	7d7b      	ldrb	r3, [r7, #21]
 80095b2:	4a35      	ldr	r2, [pc, #212]	; (8009688 <vChargeControl+0x3b0>)
 80095b4:	f44f 714a 	mov.w	r1, #808	; 0x328
 80095b8:	fb01 f303 	mul.w	r3, r1, r3
 80095bc:	4413      	add	r3, r2
 80095be:	3312      	adds	r3, #18
 80095c0:	881b      	ldrh	r3, [r3, #0]
 80095c2:	b21a      	sxth	r2, r3
 80095c4:	7d3b      	ldrb	r3, [r7, #20]
 80095c6:	2101      	movs	r1, #1
 80095c8:	fa01 f303 	lsl.w	r3, r1, r3
 80095cc:	b21b      	sxth	r3, r3
 80095ce:	4313      	orrs	r3, r2
 80095d0:	b21a      	sxth	r2, r3
 80095d2:	7d7b      	ldrb	r3, [r7, #21]
 80095d4:	b290      	uxth	r0, r2
 80095d6:	4a2c      	ldr	r2, [pc, #176]	; (8009688 <vChargeControl+0x3b0>)
 80095d8:	f44f 714a 	mov.w	r1, #808	; 0x328
 80095dc:	fb01 f303 	mul.w	r3, r1, r3
 80095e0:	4413      	add	r3, r2
 80095e2:	3312      	adds	r3, #18
 80095e4:	4602      	mov	r2, r0
 80095e6:	801a      	strh	r2, [r3, #0]
								BalanceEndflag = 0;
 80095e8:	2300      	movs	r3, #0
 80095ea:	75bb      	strb	r3, [r7, #22]
 80095ec:	e01d      	b.n	800962a <vChargeControl+0x352>
							}else ic[icCounter].tx_cfgb.dcc &= ~(1 << cellCounter);
 80095ee:	7d7b      	ldrb	r3, [r7, #21]
 80095f0:	4a25      	ldr	r2, [pc, #148]	; (8009688 <vChargeControl+0x3b0>)
 80095f2:	f44f 714a 	mov.w	r1, #808	; 0x328
 80095f6:	fb01 f303 	mul.w	r3, r1, r3
 80095fa:	4413      	add	r3, r2
 80095fc:	3312      	adds	r3, #18
 80095fe:	881b      	ldrh	r3, [r3, #0]
 8009600:	b21a      	sxth	r2, r3
 8009602:	7d3b      	ldrb	r3, [r7, #20]
 8009604:	2101      	movs	r1, #1
 8009606:	fa01 f303 	lsl.w	r3, r1, r3
 800960a:	b21b      	sxth	r3, r3
 800960c:	43db      	mvns	r3, r3
 800960e:	b21b      	sxth	r3, r3
 8009610:	4013      	ands	r3, r2
 8009612:	b21a      	sxth	r2, r3
 8009614:	7d7b      	ldrb	r3, [r7, #21]
 8009616:	b290      	uxth	r0, r2
 8009618:	4a1b      	ldr	r2, [pc, #108]	; (8009688 <vChargeControl+0x3b0>)
 800961a:	f44f 714a 	mov.w	r1, #808	; 0x328
 800961e:	fb01 f303 	mul.w	r3, r1, r3
 8009622:	4413      	add	r3, r2
 8009624:	3312      	adds	r3, #18
 8009626:	4602      	mov	r2, r0
 8009628:	801a      	strh	r2, [r3, #0]
						for (uint8_t cellCounter = 0; cellCounter < 16; cellCounter++) {
 800962a:	7d3b      	ldrb	r3, [r7, #20]
 800962c:	3301      	adds	r3, #1
 800962e:	753b      	strb	r3, [r7, #20]
 8009630:	7d3b      	ldrb	r3, [r7, #20]
 8009632:	2b0f      	cmp	r3, #15
 8009634:	f67f af7e 	bls.w	8009534 <vChargeControl+0x25c>
					for (uint8_t icCounter = 0; icCounter < total_ic; icCounter++) {
 8009638:	7d7b      	ldrb	r3, [r7, #21]
 800963a:	3301      	adds	r3, #1
 800963c:	757b      	strb	r3, [r7, #21]
 800963e:	7d7b      	ldrb	r3, [r7, #21]
 8009640:	2b05      	cmp	r3, #5
 8009642:	f67f af60 	bls.w	8009506 <vChargeControl+0x22e>
					adBmsWakeupIc(total_ic);
 8009646:	2006      	movs	r0, #6
 8009648:	f7f7 feda 	bl	8001400 <adBmsWakeupIc>
					adBmsWriteData(total_ic, &ic[0], WRCFGA, Config, A);
 800964c:	2301      	movs	r3, #1
 800964e:	9300      	str	r3, [sp, #0]
 8009650:	2308      	movs	r3, #8
 8009652:	4a0f      	ldr	r2, [pc, #60]	; (8009690 <vChargeControl+0x3b8>)
 8009654:	490c      	ldr	r1, [pc, #48]	; (8009688 <vChargeControl+0x3b0>)
 8009656:	2006      	movs	r0, #6
 8009658:	f7f8 fc28 	bl	8001eac <adBmsWriteData>
					adBmsWriteData(total_ic, &ic[0], WRCFGB, Config, B);
 800965c:	2302      	movs	r3, #2
 800965e:	9300      	str	r3, [sp, #0]
 8009660:	2308      	movs	r3, #8
 8009662:	4a0c      	ldr	r2, [pc, #48]	; (8009694 <vChargeControl+0x3bc>)
 8009664:	4908      	ldr	r1, [pc, #32]	; (8009688 <vChargeControl+0x3b0>)
 8009666:	2006      	movs	r0, #6
 8009668:	f7f8 fc20 	bl	8001eac <adBmsWriteData>
					if(BalanceEndflag == 1)
 800966c:	7dbb      	ldrb	r3, [r7, #22]
 800966e:	2b01      	cmp	r3, #1
 8009670:	d101      	bne.n	8009676 <vChargeControl+0x39e>
						CHARGER = CHARGING_COMPLETED;
 8009672:	2304      	movs	r3, #4
 8009674:	75fb      	strb	r3, [r7, #23]
					BalanceEndflag = 1;
 8009676:	2301      	movs	r3, #1
 8009678:	75bb      	strb	r3, [r7, #22]
					break;
 800967a:	e000      	b.n	800967e <vChargeControl+0x3a6>
					break;
 800967c:	bf00      	nop
		MAINBUFFER[CHARGING_STATE] = CHARGER;
 800967e:	e633      	b.n	80092e8 <vChargeControl+0x10>
 8009680:	200024b8 	.word	0x200024b8
 8009684:	40590000 	.word	0x40590000
 8009688:	200005f8 	.word	0x200005f8
 800968c:	408f4000 	.word	0x408f4000
 8009690:	20000004 	.word	0x20000004
 8009694:	20000008 	.word	0x20000008

08009698 <vVCUcom>:


	}
}

static void vVCUcom(void *parameter) {
 8009698:	b580      	push	{r7, lr}
 800969a:	b084      	sub	sp, #16
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
	union  CAN_Union {
		uint8_t sendBuffer8bit[8];
	    uint16_t sendBuffer16bit[4];
	}canSend;

	ulTaskNotifyTake(pdFALSE,portMAX_DELAY);
 80096a0:	f04f 32ff 	mov.w	r2, #4294967295
 80096a4:	2100      	movs	r1, #0
 80096a6:	2000      	movs	r0, #0
 80096a8:	f00e fcf2 	bl	8018090 <ulTaskGenericNotifyTake>


	for (;;)
	{
		if(RxHeader.StdId == VCU_ID)
 80096ac:	4b3f      	ldr	r3, [pc, #252]	; (80097ac <vVCUcom+0x114>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	2b60      	cmp	r3, #96	; 0x60
 80096b2:	d10b      	bne.n	80096cc <vVCUcom+0x34>
		{
			if(RxData[0] == RaceMode || RxData[0]== NormalMode){
 80096b4:	4b3e      	ldr	r3, [pc, #248]	; (80097b0 <vVCUcom+0x118>)
 80096b6:	781b      	ldrb	r3, [r3, #0]
 80096b8:	2b01      	cmp	r3, #1
 80096ba:	d003      	beq.n	80096c4 <vVCUcom+0x2c>
 80096bc:	4b3c      	ldr	r3, [pc, #240]	; (80097b0 <vVCUcom+0x118>)
 80096be:	781b      	ldrb	r3, [r3, #0]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d103      	bne.n	80096cc <vVCUcom+0x34>
				VehicleMode = RxData[0];
 80096c4:	4b3a      	ldr	r3, [pc, #232]	; (80097b0 <vVCUcom+0x118>)
 80096c6:	781a      	ldrb	r2, [r3, #0]
 80096c8:	4b3a      	ldr	r3, [pc, #232]	; (80097b4 <vVCUcom+0x11c>)
 80096ca:	701a      	strb	r2, [r3, #0]
			}
		}

		TxHeader.IDE = CAN_ID_STD;
 80096cc:	4b3a      	ldr	r3, [pc, #232]	; (80097b8 <vVCUcom+0x120>)
 80096ce:	2200      	movs	r2, #0
 80096d0:	609a      	str	r2, [r3, #8]
		TxHeader.StdId = BMS_CAN_ID_VOLTAGES;
 80096d2:	4b39      	ldr	r3, [pc, #228]	; (80097b8 <vVCUcom+0x120>)
 80096d4:	2261      	movs	r2, #97	; 0x61
 80096d6:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 80096d8:	4b37      	ldr	r3, [pc, #220]	; (80097b8 <vVCUcom+0x120>)
 80096da:	2208      	movs	r2, #8
 80096dc:	611a      	str	r2, [r3, #16]
		canSend.sendBuffer16bit[0] = MAINBUFFER[PACK_MAX_CELL_VOLTAGE];
 80096de:	4b37      	ldr	r3, [pc, #220]	; (80097bc <vVCUcom+0x124>)
 80096e0:	8a5b      	ldrh	r3, [r3, #18]
 80096e2:	813b      	strh	r3, [r7, #8]
		canSend.sendBuffer16bit[1] = MAINBUFFER[PACK_MIN_CELL_VOLTAGE];
 80096e4:	4b35      	ldr	r3, [pc, #212]	; (80097bc <vVCUcom+0x124>)
 80096e6:	8a9b      	ldrh	r3, [r3, #20]
 80096e8:	817b      	strh	r3, [r7, #10]
		canSend.sendBuffer16bit[2] = MAINBUFFER[PACK_AVG_CELL_VOLTAGE];
 80096ea:	4b34      	ldr	r3, [pc, #208]	; (80097bc <vVCUcom+0x124>)
 80096ec:	8b9b      	ldrh	r3, [r3, #28]
 80096ee:	81bb      	strh	r3, [r7, #12]
		canSend.sendBuffer16bit[3] = MAINBUFFER[PACK_TOTAL_CELL_VOLTAGE];
 80096f0:	4b32      	ldr	r3, [pc, #200]	; (80097bc <vVCUcom+0x124>)
 80096f2:	8adb      	ldrh	r3, [r3, #22]
 80096f4:	81fb      	strh	r3, [r7, #14]
		HAL_CAN_AddTxMessage(&hcan1, &TxHeader, canSend.sendBuffer8bit, &TxMailbox);
 80096f6:	f107 0208 	add.w	r2, r7, #8
 80096fa:	4b31      	ldr	r3, [pc, #196]	; (80097c0 <vVCUcom+0x128>)
 80096fc:	492e      	ldr	r1, [pc, #184]	; (80097b8 <vVCUcom+0x120>)
 80096fe:	4831      	ldr	r0, [pc, #196]	; (80097c4 <vVCUcom+0x12c>)
 8009700:	f001 ffef 	bl	800b6e2 <HAL_CAN_AddTxMessage>

		vTaskDelay(1);
 8009704:	2001      	movs	r0, #1
 8009706:	f00d ff19 	bl	801753c <vTaskDelay>

		TxHeader.StdId = BMS_CAN_ID_FAULTSandMODE;
 800970a:	4b2b      	ldr	r3, [pc, #172]	; (80097b8 <vVCUcom+0x120>)
 800970c:	2262      	movs	r2, #98	; 0x62
 800970e:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 3;
 8009710:	4b29      	ldr	r3, [pc, #164]	; (80097b8 <vVCUcom+0x120>)
 8009712:	2203      	movs	r2, #3
 8009714:	611a      	str	r2, [r3, #16]
		canSend.sendBuffer16bit[0] = MAINBUFFER[FAULTS];
 8009716:	4b29      	ldr	r3, [pc, #164]	; (80097bc <vVCUcom+0x124>)
 8009718:	881b      	ldrh	r3, [r3, #0]
 800971a:	813b      	strh	r3, [r7, #8]
		canSend.sendBuffer16bit[1] = VehicleMode;
 800971c:	4b25      	ldr	r3, [pc, #148]	; (80097b4 <vVCUcom+0x11c>)
 800971e:	781b      	ldrb	r3, [r3, #0]
 8009720:	b29b      	uxth	r3, r3
 8009722:	817b      	strh	r3, [r7, #10]
		HAL_CAN_AddTxMessage(&hcan1, &TxHeader, canSend.sendBuffer8bit, &TxMailbox);
 8009724:	f107 0208 	add.w	r2, r7, #8
 8009728:	4b25      	ldr	r3, [pc, #148]	; (80097c0 <vVCUcom+0x128>)
 800972a:	4923      	ldr	r1, [pc, #140]	; (80097b8 <vVCUcom+0x120>)
 800972c:	4825      	ldr	r0, [pc, #148]	; (80097c4 <vVCUcom+0x12c>)
 800972e:	f001 ffd8 	bl	800b6e2 <HAL_CAN_AddTxMessage>

		vTaskDelay(1);
 8009732:	2001      	movs	r0, #1
 8009734:	f00d ff02 	bl	801753c <vTaskDelay>

		TxHeader.StdId = BMS_CAN_ID_TEMPS;
 8009738:	4b1f      	ldr	r3, [pc, #124]	; (80097b8 <vVCUcom+0x120>)
 800973a:	2263      	movs	r2, #99	; 0x63
 800973c:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 800973e:	4b1e      	ldr	r3, [pc, #120]	; (80097b8 <vVCUcom+0x120>)
 8009740:	2208      	movs	r2, #8
 8009742:	611a      	str	r2, [r3, #16]
		canSend.sendBuffer16bit[0] = MAINBUFFER[PACK_MAX_CELL_TEMP];
 8009744:	4b1d      	ldr	r3, [pc, #116]	; (80097bc <vVCUcom+0x124>)
 8009746:	8b1b      	ldrh	r3, [r3, #24]
 8009748:	813b      	strh	r3, [r7, #8]
		canSend.sendBuffer16bit[1] = MAINBUFFER[PACK_MIN_CELL_TEMP];
 800974a:	4b1c      	ldr	r3, [pc, #112]	; (80097bc <vVCUcom+0x124>)
 800974c:	8b5b      	ldrh	r3, [r3, #26]
 800974e:	817b      	strh	r3, [r7, #10]
		canSend.sendBuffer16bit[2] = MAINBUFFER[PACK_AVG_CELL_TEMP];
 8009750:	4b1a      	ldr	r3, [pc, #104]	; (80097bc <vVCUcom+0x124>)
 8009752:	8bdb      	ldrh	r3, [r3, #30]
 8009754:	81bb      	strh	r3, [r7, #12]
		canSend.sendBuffer16bit[3] = MAINBUFFER[PACK_MAX_SLAVE_TEMP];
 8009756:	4b19      	ldr	r3, [pc, #100]	; (80097bc <vVCUcom+0x124>)
 8009758:	8c1b      	ldrh	r3, [r3, #32]
 800975a:	81fb      	strh	r3, [r7, #14]
		HAL_CAN_AddTxMessage(&hcan1, &TxHeader, canSend.sendBuffer8bit, &TxMailbox);
 800975c:	f107 0208 	add.w	r2, r7, #8
 8009760:	4b17      	ldr	r3, [pc, #92]	; (80097c0 <vVCUcom+0x128>)
 8009762:	4915      	ldr	r1, [pc, #84]	; (80097b8 <vVCUcom+0x120>)
 8009764:	4817      	ldr	r0, [pc, #92]	; (80097c4 <vVCUcom+0x12c>)
 8009766:	f001 ffbc 	bl	800b6e2 <HAL_CAN_AddTxMessage>

		vTaskDelay(1);
 800976a:	2001      	movs	r0, #1
 800976c:	f00d fee6 	bl	801753c <vTaskDelay>


		TxHeader.StdId = BMS_CAN_ID_PACKandSoC;
 8009770:	4b11      	ldr	r3, [pc, #68]	; (80097b8 <vVCUcom+0x120>)
 8009772:	2264      	movs	r2, #100	; 0x64
 8009774:	601a      	str	r2, [r3, #0]
		TxHeader.DLC = 8;
 8009776:	4b10      	ldr	r3, [pc, #64]	; (80097b8 <vVCUcom+0x120>)
 8009778:	2208      	movs	r2, #8
 800977a:	611a      	str	r2, [r3, #16]
		canSend.sendBuffer16bit[0] = MAINBUFFER[PACK_CURRENT];
 800977c:	4b0f      	ldr	r3, [pc, #60]	; (80097bc <vVCUcom+0x124>)
 800977e:	8a1b      	ldrh	r3, [r3, #16]
 8009780:	813b      	strh	r3, [r7, #8]
		canSend.sendBuffer16bit[1] = MAINBUFFER[PACK_VOLTAGE];
 8009782:	4b0e      	ldr	r3, [pc, #56]	; (80097bc <vVCUcom+0x124>)
 8009784:	89db      	ldrh	r3, [r3, #14]
 8009786:	817b      	strh	r3, [r7, #10]
		canSend.sendBuffer16bit[2] = MAINBUFFER[ESTIMATED_SoC];
 8009788:	4b0c      	ldr	r3, [pc, #48]	; (80097bc <vVCUcom+0x124>)
 800978a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800978c:	81bb      	strh	r3, [r7, #12]
		canSend.sendBuffer16bit[3] = MAINBUFFER[OPEN_CIRCUIT_VOLTAGE];
 800978e:	4b0b      	ldr	r3, [pc, #44]	; (80097bc <vVCUcom+0x124>)
 8009790:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009792:	81fb      	strh	r3, [r7, #14]
		HAL_CAN_AddTxMessage(&hcan1, &TxHeader, canSend.sendBuffer8bit, &TxMailbox);
 8009794:	f107 0208 	add.w	r2, r7, #8
 8009798:	4b09      	ldr	r3, [pc, #36]	; (80097c0 <vVCUcom+0x128>)
 800979a:	4907      	ldr	r1, [pc, #28]	; (80097b8 <vVCUcom+0x120>)
 800979c:	4809      	ldr	r0, [pc, #36]	; (80097c4 <vVCUcom+0x12c>)
 800979e:	f001 ffa0 	bl	800b6e2 <HAL_CAN_AddTxMessage>


		vTaskDelay(5);
 80097a2:	2005      	movs	r0, #5
 80097a4:	f00d feca 	bl	801753c <vTaskDelay>
		if(RxHeader.StdId == VCU_ID)
 80097a8:	e780      	b.n	80096ac <vVCUcom+0x14>
 80097aa:	bf00      	nop
 80097ac:	20002520 	.word	0x20002520
 80097b0:	2000253c 	.word	0x2000253c
 80097b4:	2000254f 	.word	0x2000254f
 80097b8:	20002508 	.word	0x20002508
 80097bc:	200024b8 	.word	0x200024b8
 80097c0:	20002544 	.word	0x20002544
 80097c4:	200003f8 	.word	0x200003f8

080097c8 <vUSBTASK>:

	}
}

static void vUSBTASK(void *parameter) {
 80097c8:	b590      	push	{r4, r7, lr}
 80097ca:	b0b9      	sub	sp, #228	; 0xe4
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]

	for (;;)
	{
		ulTaskNotifyTake(pdFALSE,portMAX_DELAY);
 80097d0:	f04f 32ff 	mov.w	r2, #4294967295
 80097d4:	2100      	movs	r1, #0
 80097d6:	2000      	movs	r0, #0
 80097d8:	f00e fc5a 	bl	8018090 <ulTaskGenericNotifyTake>

		switch (usblen){
 80097dc:	4ba4      	ldr	r3, [pc, #656]	; (8009a70 <vUSBTASK+0x2a8>)
 80097de:	781b      	ldrb	r3, [r3, #0]
 80097e0:	2b03      	cmp	r3, #3
 80097e2:	f000 8114 	beq.w	8009a0e <vUSBTASK+0x246>
 80097e6:	2b03      	cmp	r3, #3
 80097e8:	f300 813d 	bgt.w	8009a66 <vUSBTASK+0x29e>
 80097ec:	2b01      	cmp	r3, #1
 80097ee:	d003      	beq.n	80097f8 <vUSBTASK+0x30>
 80097f0:	2b02      	cmp	r3, #2
 80097f2:	f000 80fa 	beq.w	80099ea <vUSBTASK+0x222>
			USBTransmit2bytes( MAINBUFFER[*usbbuf] , *usbbuf);
			//CDC_Transmit_FS((uint8_t*) &MAINBUFFER[*usbbuf], 2);
			break;

		default:
			break;
 80097f6:	e136      	b.n	8009a66 <vUSBTASK+0x29e>
			if (*usbbuf == 41){ //ALL VOLTAGES WILL BE SENT
 80097f8:	4b9e      	ldr	r3, [pc, #632]	; (8009a74 <vUSBTASK+0x2ac>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	781b      	ldrb	r3, [r3, #0]
 80097fe:	2b29      	cmp	r3, #41	; 0x29
 8009800:	d154      	bne.n	80098ac <vUSBTASK+0xe4>
				for (uint8_t icCounter = 0; icCounter < total_ic; icCounter++) {
 8009802:	2300      	movs	r3, #0
 8009804:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8009808:	e039      	b.n	800987e <vUSBTASK+0xb6>
					for (uint8_t cell = 0; cell < 16; cell++) {
 800980a:	2300      	movs	r3, #0
 800980c:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
 8009810:	e02c      	b.n	800986c <vUSBTASK+0xa4>
						data.twobytes[((icCounter*16)+(cell))] = (uint16_t)(ic[icCounter].mesured_cell_voltages[cell]*100.0) ;
 8009812:	f897 20df 	ldrb.w	r2, [r7, #223]	; 0xdf
 8009816:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 800981a:	4997      	ldr	r1, [pc, #604]	; (8009a78 <vUSBTASK+0x2b0>)
 800981c:	20ca      	movs	r0, #202	; 0xca
 800981e:	fb00 f202 	mul.w	r2, r0, r2
 8009822:	4413      	add	r3, r2
 8009824:	33b8      	adds	r3, #184	; 0xb8
 8009826:	009b      	lsls	r3, r3, #2
 8009828:	440b      	add	r3, r1
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	4618      	mov	r0, r3
 800982e:	f7f6 feab 	bl	8000588 <__aeabi_f2d>
 8009832:	f04f 0200 	mov.w	r2, #0
 8009836:	4b91      	ldr	r3, [pc, #580]	; (8009a7c <vUSBTASK+0x2b4>)
 8009838:	f7f6 fefe 	bl	8000638 <__aeabi_dmul>
 800983c:	4602      	mov	r2, r0
 800983e:	460b      	mov	r3, r1
 8009840:	4610      	mov	r0, r2
 8009842:	4619      	mov	r1, r3
 8009844:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8009848:	011a      	lsls	r2, r3, #4
 800984a:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 800984e:	18d4      	adds	r4, r2, r3
 8009850:	f7f7 f9ca 	bl	8000be8 <__aeabi_d2uiz>
 8009854:	4603      	mov	r3, r0
 8009856:	b29a      	uxth	r2, r3
 8009858:	0063      	lsls	r3, r4, #1
 800985a:	33e0      	adds	r3, #224	; 0xe0
 800985c:	443b      	add	r3, r7
 800985e:	f823 2cd8 	strh.w	r2, [r3, #-216]
					for (uint8_t cell = 0; cell < 16; cell++) {
 8009862:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8009866:	3301      	adds	r3, #1
 8009868:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
 800986c:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8009870:	2b0f      	cmp	r3, #15
 8009872:	d9ce      	bls.n	8009812 <vUSBTASK+0x4a>
				for (uint8_t icCounter = 0; icCounter < total_ic; icCounter++) {
 8009874:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8009878:	3301      	adds	r3, #1
 800987a:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 800987e:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8009882:	2b05      	cmp	r3, #5
 8009884:	d9c1      	bls.n	800980a <vUSBTASK+0x42>
				data.onebytes[192] = 41;
 8009886:	2329      	movs	r3, #41	; 0x29
 8009888:	f887 30c8 	strb.w	r3, [r7, #200]	; 0xc8
				data.onebytes[193] = calculateCRC8(data.twobytes, 193);
 800988c:	f107 0308 	add.w	r3, r7, #8
 8009890:	21c1      	movs	r1, #193	; 0xc1
 8009892:	4618      	mov	r0, r3
 8009894:	f000 f9a2 	bl	8009bdc <calculateCRC8>
 8009898:	4603      	mov	r3, r0
 800989a:	f887 30c9 	strb.w	r3, [r7, #201]	; 0xc9
				CDC_Transmit_FS(data.onebytes,194);
 800989e:	f107 0308 	add.w	r3, r7, #8
 80098a2:	21c2      	movs	r1, #194	; 0xc2
 80098a4:	4618      	mov	r0, r3
 80098a6:	f00f fd49 	bl	801933c <CDC_Transmit_FS>
		    break;
 80098aa:	e0df      	b.n	8009a6c <vUSBTASK+0x2a4>
			else if (*usbbuf == 42){ //ALL TEMPS WILL BE SENT
 80098ac:	4b71      	ldr	r3, [pc, #452]	; (8009a74 <vUSBTASK+0x2ac>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	781b      	ldrb	r3, [r3, #0]
 80098b2:	2b2a      	cmp	r3, #42	; 0x2a
 80098b4:	d154      	bne.n	8009960 <vUSBTASK+0x198>
				for (uint8_t icCounter = 0; icCounter < total_ic; icCounter++) {
 80098b6:	2300      	movs	r3, #0
 80098b8:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd
 80098bc:	e039      	b.n	8009932 <vUSBTASK+0x16a>
					for (uint8_t cell = 0; cell < 16; cell++) {
 80098be:	2300      	movs	r3, #0
 80098c0:	f887 30dc 	strb.w	r3, [r7, #220]	; 0xdc
 80098c4:	e02c      	b.n	8009920 <vUSBTASK+0x158>
						data.twobytes[((icCounter*16)+(cell))] = (uint16_t)(ic[icCounter].mesured_cell_temps[cell]*100.0) ;
 80098c6:	f897 20dd 	ldrb.w	r2, [r7, #221]	; 0xdd
 80098ca:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 80098ce:	496a      	ldr	r1, [pc, #424]	; (8009a78 <vUSBTASK+0x2b0>)
 80098d0:	20ca      	movs	r0, #202	; 0xca
 80098d2:	fb00 f202 	mul.w	r2, r0, r2
 80098d6:	4413      	add	r3, r2
 80098d8:	33a8      	adds	r3, #168	; 0xa8
 80098da:	009b      	lsls	r3, r3, #2
 80098dc:	440b      	add	r3, r1
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	4618      	mov	r0, r3
 80098e2:	f7f6 fe51 	bl	8000588 <__aeabi_f2d>
 80098e6:	f04f 0200 	mov.w	r2, #0
 80098ea:	4b64      	ldr	r3, [pc, #400]	; (8009a7c <vUSBTASK+0x2b4>)
 80098ec:	f7f6 fea4 	bl	8000638 <__aeabi_dmul>
 80098f0:	4602      	mov	r2, r0
 80098f2:	460b      	mov	r3, r1
 80098f4:	4610      	mov	r0, r2
 80098f6:	4619      	mov	r1, r3
 80098f8:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 80098fc:	011a      	lsls	r2, r3, #4
 80098fe:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 8009902:	18d4      	adds	r4, r2, r3
 8009904:	f7f7 f970 	bl	8000be8 <__aeabi_d2uiz>
 8009908:	4603      	mov	r3, r0
 800990a:	b29a      	uxth	r2, r3
 800990c:	0063      	lsls	r3, r4, #1
 800990e:	33e0      	adds	r3, #224	; 0xe0
 8009910:	443b      	add	r3, r7
 8009912:	f823 2cd8 	strh.w	r2, [r3, #-216]
					for (uint8_t cell = 0; cell < 16; cell++) {
 8009916:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 800991a:	3301      	adds	r3, #1
 800991c:	f887 30dc 	strb.w	r3, [r7, #220]	; 0xdc
 8009920:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 8009924:	2b0f      	cmp	r3, #15
 8009926:	d9ce      	bls.n	80098c6 <vUSBTASK+0xfe>
				for (uint8_t icCounter = 0; icCounter < total_ic; icCounter++) {
 8009928:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 800992c:	3301      	adds	r3, #1
 800992e:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd
 8009932:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8009936:	2b05      	cmp	r3, #5
 8009938:	d9c1      	bls.n	80098be <vUSBTASK+0xf6>
				data.onebytes[192] = 42;
 800993a:	232a      	movs	r3, #42	; 0x2a
 800993c:	f887 30c8 	strb.w	r3, [r7, #200]	; 0xc8
				data.onebytes[193] = calculateCRC8(data.twobytes, 193);
 8009940:	f107 0308 	add.w	r3, r7, #8
 8009944:	21c1      	movs	r1, #193	; 0xc1
 8009946:	4618      	mov	r0, r3
 8009948:	f000 f948 	bl	8009bdc <calculateCRC8>
 800994c:	4603      	mov	r3, r0
 800994e:	f887 30c9 	strb.w	r3, [r7, #201]	; 0xc9
				CDC_Transmit_FS(data.onebytes,194);
 8009952:	f107 0308 	add.w	r3, r7, #8
 8009956:	21c2      	movs	r1, #194	; 0xc2
 8009958:	4618      	mov	r0, r3
 800995a:	f00f fcef 	bl	801933c <CDC_Transmit_FS>
		    break;
 800995e:	e085      	b.n	8009a6c <vUSBTASK+0x2a4>
			else if (*usbbuf == 43){ // BALANCE STATUS OF ALL CELL WILL BE SENT
 8009960:	4b44      	ldr	r3, [pc, #272]	; (8009a74 <vUSBTASK+0x2ac>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	781b      	ldrb	r3, [r3, #0]
 8009966:	2b2b      	cmp	r3, #43	; 0x2b
 8009968:	d130      	bne.n	80099cc <vUSBTASK+0x204>
				for (uint8_t icCounter = 0; icCounter < total_ic; icCounter++) {
 800996a:	2300      	movs	r3, #0
 800996c:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
 8009970:	e015      	b.n	800999e <vUSBTASK+0x1d6>
					data.twobytes[icCounter] = ic[icCounter].tx_cfgb.dcc ;
 8009972:	f897 20db 	ldrb.w	r2, [r7, #219]	; 0xdb
 8009976:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800997a:	493f      	ldr	r1, [pc, #252]	; (8009a78 <vUSBTASK+0x2b0>)
 800997c:	f44f 704a 	mov.w	r0, #808	; 0x328
 8009980:	fb00 f202 	mul.w	r2, r0, r2
 8009984:	440a      	add	r2, r1
 8009986:	3212      	adds	r2, #18
 8009988:	8812      	ldrh	r2, [r2, #0]
 800998a:	005b      	lsls	r3, r3, #1
 800998c:	33e0      	adds	r3, #224	; 0xe0
 800998e:	443b      	add	r3, r7
 8009990:	f823 2c14 	strh.w	r2, [r3, #-20]
				for (uint8_t icCounter = 0; icCounter < total_ic; icCounter++) {
 8009994:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8009998:	3301      	adds	r3, #1
 800999a:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
 800999e:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80099a2:	2b05      	cmp	r3, #5
 80099a4:	d9e5      	bls.n	8009972 <vUSBTASK+0x1aa>
				data.onebytes[12] = 43;
 80099a6:	232b      	movs	r3, #43	; 0x2b
 80099a8:	f887 30d8 	strb.w	r3, [r7, #216]	; 0xd8
				data.onebytes[13] = calculateCRC8(data.twobytes, 13);
 80099ac:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80099b0:	210d      	movs	r1, #13
 80099b2:	4618      	mov	r0, r3
 80099b4:	f000 f912 	bl	8009bdc <calculateCRC8>
 80099b8:	4603      	mov	r3, r0
 80099ba:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9
				CDC_Transmit_FS(data.onebytes, 14);
 80099be:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80099c2:	210e      	movs	r1, #14
 80099c4:	4618      	mov	r0, r3
 80099c6:	f00f fcb9 	bl	801933c <CDC_Transmit_FS>
		    break;
 80099ca:	e04f      	b.n	8009a6c <vUSBTASK+0x2a4>
				USBTransmit2bytes(MAINBUFFER[*usbbuf] , *usbbuf);
 80099cc:	4b29      	ldr	r3, [pc, #164]	; (8009a74 <vUSBTASK+0x2ac>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	781b      	ldrb	r3, [r3, #0]
 80099d2:	461a      	mov	r2, r3
 80099d4:	4b2a      	ldr	r3, [pc, #168]	; (8009a80 <vUSBTASK+0x2b8>)
 80099d6:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80099da:	4b26      	ldr	r3, [pc, #152]	; (8009a74 <vUSBTASK+0x2ac>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	781b      	ldrb	r3, [r3, #0]
 80099e0:	4619      	mov	r1, r3
 80099e2:	4610      	mov	r0, r2
 80099e4:	f000 f8dc 	bl	8009ba0 <USBTransmit2bytes>
		    break;
 80099e8:	e040      	b.n	8009a6c <vUSBTASK+0x2a4>
			if (*usbbuf == 0x17 && *(usbbuf+1)==0x71)
 80099ea:	4b22      	ldr	r3, [pc, #136]	; (8009a74 <vUSBTASK+0x2ac>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	781b      	ldrb	r3, [r3, #0]
 80099f0:	2b17      	cmp	r3, #23
 80099f2:	d13a      	bne.n	8009a6a <vUSBTASK+0x2a2>
 80099f4:	4b1f      	ldr	r3, [pc, #124]	; (8009a74 <vUSBTASK+0x2ac>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	3301      	adds	r3, #1
 80099fa:	781b      	ldrb	r3, [r3, #0]
 80099fc:	2b71      	cmp	r3, #113	; 0x71
 80099fe:	d134      	bne.n	8009a6a <vUSBTASK+0x2a2>
			  CDC_Transmit_FS((uint8_t*) usbbuf, 2);
 8009a00:	4b1c      	ldr	r3, [pc, #112]	; (8009a74 <vUSBTASK+0x2ac>)
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	2102      	movs	r1, #2
 8009a06:	4618      	mov	r0, r3
 8009a08:	f00f fc98 	bl	801933c <CDC_Transmit_FS>
			break;
 8009a0c:	e02d      	b.n	8009a6a <vUSBTASK+0x2a2>
			MAINBUFFER[*usbbuf] = (*(usbbuf+2)<<8 | *(usbbuf+1));
 8009a0e:	4b19      	ldr	r3, [pc, #100]	; (8009a74 <vUSBTASK+0x2ac>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	3302      	adds	r3, #2
 8009a14:	781b      	ldrb	r3, [r3, #0]
 8009a16:	021b      	lsls	r3, r3, #8
 8009a18:	b21a      	sxth	r2, r3
 8009a1a:	4b16      	ldr	r3, [pc, #88]	; (8009a74 <vUSBTASK+0x2ac>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	3301      	adds	r3, #1
 8009a20:	781b      	ldrb	r3, [r3, #0]
 8009a22:	b21b      	sxth	r3, r3
 8009a24:	4313      	orrs	r3, r2
 8009a26:	b219      	sxth	r1, r3
 8009a28:	4b12      	ldr	r3, [pc, #72]	; (8009a74 <vUSBTASK+0x2ac>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	781b      	ldrb	r3, [r3, #0]
 8009a2e:	461a      	mov	r2, r3
 8009a30:	b289      	uxth	r1, r1
 8009a32:	4b13      	ldr	r3, [pc, #76]	; (8009a80 <vUSBTASK+0x2b8>)
 8009a34:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			EEPROM_SetConfigs((uint8_t *)MAINBUFFER, sizeof(MAINBUFFER));
 8009a38:	2150      	movs	r1, #80	; 0x50
 8009a3a:	4811      	ldr	r0, [pc, #68]	; (8009a80 <vUSBTASK+0x2b8>)
 8009a3c:	f7f9 f8ce 	bl	8002bdc <EEPROM_SetConfigs>
			EEPROM_GetConfigs((uint8_t *)MAINBUFFER, sizeof(MAINBUFFER));
 8009a40:	2150      	movs	r1, #80	; 0x50
 8009a42:	480f      	ldr	r0, [pc, #60]	; (8009a80 <vUSBTASK+0x2b8>)
 8009a44:	f7f9 f8ba 	bl	8002bbc <EEPROM_GetConfigs>
			USBTransmit2bytes( MAINBUFFER[*usbbuf] , *usbbuf);
 8009a48:	4b0a      	ldr	r3, [pc, #40]	; (8009a74 <vUSBTASK+0x2ac>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	781b      	ldrb	r3, [r3, #0]
 8009a4e:	461a      	mov	r2, r3
 8009a50:	4b0b      	ldr	r3, [pc, #44]	; (8009a80 <vUSBTASK+0x2b8>)
 8009a52:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8009a56:	4b07      	ldr	r3, [pc, #28]	; (8009a74 <vUSBTASK+0x2ac>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	781b      	ldrb	r3, [r3, #0]
 8009a5c:	4619      	mov	r1, r3
 8009a5e:	4610      	mov	r0, r2
 8009a60:	f000 f89e 	bl	8009ba0 <USBTransmit2bytes>
			break;
 8009a64:	e002      	b.n	8009a6c <vUSBTASK+0x2a4>
			break;
 8009a66:	bf00      	nop
 8009a68:	e6b2      	b.n	80097d0 <vUSBTASK+0x8>
			break;
 8009a6a:	bf00      	nop
		ulTaskNotifyTake(pdFALSE,portMAX_DELAY);
 8009a6c:	e6b0      	b.n	80097d0 <vUSBTASK+0x8>
 8009a6e:	bf00      	nop
 8009a70:	2000254c 	.word	0x2000254c
 8009a74:	20002548 	.word	0x20002548
 8009a78:	200005f8 	.word	0x200005f8
 8009a7c:	40590000 	.word	0x40590000
 8009a80:	200024b8 	.word	0x200024b8

08009a84 <HAL_ADC_ConvCpltCallback>:
	}

}

void HAL_ADC_ConvCpltCallback (ADC_HandleTypeDef *hadc)
{
 8009a84:	b480      	push	{r7}
 8009a86:	b083      	sub	sp, #12
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
	analogAveragingBuffer[convCount][0] = adc_buffer[0];
 8009a8c:	4b1e      	ldr	r3, [pc, #120]	; (8009b08 <HAL_ADC_ConvCpltCallback+0x84>)
 8009a8e:	881b      	ldrh	r3, [r3, #0]
 8009a90:	4619      	mov	r1, r3
 8009a92:	4b1e      	ldr	r3, [pc, #120]	; (8009b0c <HAL_ADC_ConvCpltCallback+0x88>)
 8009a94:	8818      	ldrh	r0, [r3, #0]
 8009a96:	4a1e      	ldr	r2, [pc, #120]	; (8009b10 <HAL_ADC_ConvCpltCallback+0x8c>)
 8009a98:	460b      	mov	r3, r1
 8009a9a:	005b      	lsls	r3, r3, #1
 8009a9c:	440b      	add	r3, r1
 8009a9e:	005b      	lsls	r3, r3, #1
 8009aa0:	4413      	add	r3, r2
 8009aa2:	4602      	mov	r2, r0
 8009aa4:	801a      	strh	r2, [r3, #0]
	analogAveragingBuffer[convCount][1] = adc_buffer[1];
 8009aa6:	4b18      	ldr	r3, [pc, #96]	; (8009b08 <HAL_ADC_ConvCpltCallback+0x84>)
 8009aa8:	881b      	ldrh	r3, [r3, #0]
 8009aaa:	4619      	mov	r1, r3
 8009aac:	4b17      	ldr	r3, [pc, #92]	; (8009b0c <HAL_ADC_ConvCpltCallback+0x88>)
 8009aae:	8858      	ldrh	r0, [r3, #2]
 8009ab0:	4a17      	ldr	r2, [pc, #92]	; (8009b10 <HAL_ADC_ConvCpltCallback+0x8c>)
 8009ab2:	460b      	mov	r3, r1
 8009ab4:	005b      	lsls	r3, r3, #1
 8009ab6:	440b      	add	r3, r1
 8009ab8:	005b      	lsls	r3, r3, #1
 8009aba:	4413      	add	r3, r2
 8009abc:	3302      	adds	r3, #2
 8009abe:	4602      	mov	r2, r0
 8009ac0:	801a      	strh	r2, [r3, #0]
	analogAveragingBuffer[convCount][2] = adc_buffer[2];
 8009ac2:	4b11      	ldr	r3, [pc, #68]	; (8009b08 <HAL_ADC_ConvCpltCallback+0x84>)
 8009ac4:	881b      	ldrh	r3, [r3, #0]
 8009ac6:	4619      	mov	r1, r3
 8009ac8:	4b10      	ldr	r3, [pc, #64]	; (8009b0c <HAL_ADC_ConvCpltCallback+0x88>)
 8009aca:	8898      	ldrh	r0, [r3, #4]
 8009acc:	4a10      	ldr	r2, [pc, #64]	; (8009b10 <HAL_ADC_ConvCpltCallback+0x8c>)
 8009ace:	460b      	mov	r3, r1
 8009ad0:	005b      	lsls	r3, r3, #1
 8009ad2:	440b      	add	r3, r1
 8009ad4:	005b      	lsls	r3, r3, #1
 8009ad6:	4413      	add	r3, r2
 8009ad8:	3304      	adds	r3, #4
 8009ada:	4602      	mov	r2, r0
 8009adc:	801a      	strh	r2, [r3, #0]

	convCount++;
 8009ade:	4b0a      	ldr	r3, [pc, #40]	; (8009b08 <HAL_ADC_ConvCpltCallback+0x84>)
 8009ae0:	881b      	ldrh	r3, [r3, #0]
 8009ae2:	3301      	adds	r3, #1
 8009ae4:	b29a      	uxth	r2, r3
 8009ae6:	4b08      	ldr	r3, [pc, #32]	; (8009b08 <HAL_ADC_ConvCpltCallback+0x84>)
 8009ae8:	801a      	strh	r2, [r3, #0]
	if(convCount >= 500) convCount = 0;
 8009aea:	4b07      	ldr	r3, [pc, #28]	; (8009b08 <HAL_ADC_ConvCpltCallback+0x84>)
 8009aec:	881b      	ldrh	r3, [r3, #0]
 8009aee:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009af2:	d302      	bcc.n	8009afa <HAL_ADC_ConvCpltCallback+0x76>
 8009af4:	4b04      	ldr	r3, [pc, #16]	; (8009b08 <HAL_ADC_ConvCpltCallback+0x84>)
 8009af6:	2200      	movs	r2, #0
 8009af8:	801a      	strh	r2, [r3, #0]
//	HAL_ADC_Start_DMA(&hadc1,  adc_buffer, 3);
}
 8009afa:	bf00      	nop
 8009afc:	370c      	adds	r7, #12
 8009afe:	46bd      	mov	sp, r7
 8009b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b04:	4770      	bx	lr
 8009b06:	bf00      	nop
 8009b08:	200018e8 	.word	0x200018e8
 8009b0c:	200018f8 	.word	0x200018f8
 8009b10:	20001900 	.word	0x20001900

08009b14 <Get_ADC_Data>:

void Get_ADC_Data(){
 8009b14:	b490      	push	{r4, r7}
 8009b16:	b082      	sub	sp, #8
 8009b18:	af00      	add	r7, sp, #0

	for(uint8_t ucekadarsay =0; ucekadarsay<3; ucekadarsay++){
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	71fb      	strb	r3, [r7, #7]
 8009b1e:	e030      	b.n	8009b82 <Get_ADC_Data+0x6e>
		adc_data[ucekadarsay]=0;
 8009b20:	79fb      	ldrb	r3, [r7, #7]
 8009b22:	4a1c      	ldr	r2, [pc, #112]	; (8009b94 <Get_ADC_Data+0x80>)
 8009b24:	2100      	movs	r1, #0
 8009b26:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(uint16_t besyuzekadarsay =0; besyuzekadarsay<500; besyuzekadarsay++){
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	80bb      	strh	r3, [r7, #4]
 8009b2e:	e015      	b.n	8009b5c <Get_ADC_Data+0x48>
			adc_data[ucekadarsay] += analogAveragingBuffer[besyuzekadarsay][ucekadarsay];
 8009b30:	79fb      	ldrb	r3, [r7, #7]
 8009b32:	4a18      	ldr	r2, [pc, #96]	; (8009b94 <Get_ADC_Data+0x80>)
 8009b34:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009b38:	88ba      	ldrh	r2, [r7, #4]
 8009b3a:	79f8      	ldrb	r0, [r7, #7]
 8009b3c:	4c16      	ldr	r4, [pc, #88]	; (8009b98 <Get_ADC_Data+0x84>)
 8009b3e:	4613      	mov	r3, r2
 8009b40:	005b      	lsls	r3, r3, #1
 8009b42:	4413      	add	r3, r2
 8009b44:	4403      	add	r3, r0
 8009b46:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 8009b4a:	461a      	mov	r2, r3
 8009b4c:	79fb      	ldrb	r3, [r7, #7]
 8009b4e:	440a      	add	r2, r1
 8009b50:	4910      	ldr	r1, [pc, #64]	; (8009b94 <Get_ADC_Data+0x80>)
 8009b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(uint16_t besyuzekadarsay =0; besyuzekadarsay<500; besyuzekadarsay++){
 8009b56:	88bb      	ldrh	r3, [r7, #4]
 8009b58:	3301      	adds	r3, #1
 8009b5a:	80bb      	strh	r3, [r7, #4]
 8009b5c:	88bb      	ldrh	r3, [r7, #4]
 8009b5e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009b62:	d3e5      	bcc.n	8009b30 <Get_ADC_Data+0x1c>
		}
		adc_data[ucekadarsay]/=500;
 8009b64:	79fb      	ldrb	r3, [r7, #7]
 8009b66:	4a0b      	ldr	r2, [pc, #44]	; (8009b94 <Get_ADC_Data+0x80>)
 8009b68:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009b6c:	79fb      	ldrb	r3, [r7, #7]
 8009b6e:	490b      	ldr	r1, [pc, #44]	; (8009b9c <Get_ADC_Data+0x88>)
 8009b70:	fba1 1202 	umull	r1, r2, r1, r2
 8009b74:	0952      	lsrs	r2, r2, #5
 8009b76:	4907      	ldr	r1, [pc, #28]	; (8009b94 <Get_ADC_Data+0x80>)
 8009b78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(uint8_t ucekadarsay =0; ucekadarsay<3; ucekadarsay++){
 8009b7c:	79fb      	ldrb	r3, [r7, #7]
 8009b7e:	3301      	adds	r3, #1
 8009b80:	71fb      	strb	r3, [r7, #7]
 8009b82:	79fb      	ldrb	r3, [r7, #7]
 8009b84:	2b02      	cmp	r3, #2
 8009b86:	d9cb      	bls.n	8009b20 <Get_ADC_Data+0xc>
	}
}
 8009b88:	bf00      	nop
 8009b8a:	bf00      	nop
 8009b8c:	3708      	adds	r7, #8
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bc90      	pop	{r4, r7}
 8009b92:	4770      	bx	lr
 8009b94:	200018ec 	.word	0x200018ec
 8009b98:	20001900 	.word	0x20001900
 8009b9c:	10624dd3 	.word	0x10624dd3

08009ba0 <USBTransmit2bytes>:

void USBTransmit2bytes( uint16_t TransmittBuffer , uint8_t transmittID){
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b084      	sub	sp, #16
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	460a      	mov	r2, r1
 8009baa:	80fb      	strh	r3, [r7, #6]
 8009bac:	4613      	mov	r3, r2
 8009bae:	717b      	strb	r3, [r7, #5]
	 union transmitt{
	        uint16_t twobytes[2];
	        uint8_t onebytes[4];
	    } transmitt;

	 transmitt.twobytes[0] =  TransmittBuffer ;
 8009bb0:	88fb      	ldrh	r3, [r7, #6]
 8009bb2:	81bb      	strh	r3, [r7, #12]
	 transmitt.onebytes[2] =  transmittID;
 8009bb4:	797b      	ldrb	r3, [r7, #5]
 8009bb6:	73bb      	strb	r3, [r7, #14]
	 transmitt.onebytes[3] =  calculateCRC8(transmitt.onebytes, 3);
 8009bb8:	f107 030c 	add.w	r3, r7, #12
 8009bbc:	2103      	movs	r1, #3
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	f000 f80c 	bl	8009bdc <calculateCRC8>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	73fb      	strb	r3, [r7, #15]


	CDC_Transmit_FS(transmitt.onebytes, 4);
 8009bc8:	f107 030c 	add.w	r3, r7, #12
 8009bcc:	2104      	movs	r1, #4
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f00f fbb4 	bl	801933c <CDC_Transmit_FS>

}
 8009bd4:	bf00      	nop
 8009bd6:	3710      	adds	r7, #16
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd80      	pop	{r7, pc}

08009bdc <calculateCRC8>:

uint8_t calculateCRC8(uint16_t *calculateData, uint8_t length) {
 8009bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009be0:	b097      	sub	sp, #92	; 0x5c
 8009be2:	af00      	add	r7, sp, #0
 8009be4:	63f8      	str	r0, [r7, #60]	; 0x3c
 8009be6:	460b      	mov	r3, r1
 8009be8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009bec:	466b      	mov	r3, sp
 8009bee:	461e      	mov	r6, r3
	 union data{
	        uint16_t twobytes[length/2];
 8009bf0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009bf4:	085b      	lsrs	r3, r3, #1
 8009bf6:	b2db      	uxtb	r3, r3
 8009bf8:	4618      	mov	r0, r3
	 union data{
 8009bfa:	4602      	mov	r2, r0
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	4614      	mov	r4, r2
 8009c00:	461d      	mov	r5, r3
 8009c02:	f04f 0200 	mov.w	r2, #0
 8009c06:	f04f 0300 	mov.w	r3, #0
 8009c0a:	012b      	lsls	r3, r5, #4
 8009c0c:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8009c10:	0122      	lsls	r2, r4, #4
	        uint16_t twobytes[length/2];
 8009c12:	1e43      	subs	r3, r0, #1
	 union data{
 8009c14:	64bb      	str	r3, [r7, #72]	; 0x48
 8009c16:	4602      	mov	r2, r0
 8009c18:	2300      	movs	r3, #0
 8009c1a:	4690      	mov	r8, r2
 8009c1c:	4699      	mov	r9, r3
 8009c1e:	f04f 0200 	mov.w	r2, #0
 8009c22:	f04f 0300 	mov.w	r3, #0
 8009c26:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8009c2a:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8009c2e:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8009c32:	f897 103b 	ldrb.w	r1, [r7, #59]	; 0x3b
 8009c36:	b2cb      	uxtb	r3, r1
 8009c38:	2200      	movs	r2, #0
 8009c3a:	469a      	mov	sl, r3
 8009c3c:	4693      	mov	fp, r2
 8009c3e:	f04f 0200 	mov.w	r2, #0
 8009c42:	f04f 0300 	mov.w	r3, #0
 8009c46:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009c4a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009c4e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
	        uint8_t onebytes[length];
 8009c52:	460b      	mov	r3, r1
 8009c54:	3b01      	subs	r3, #1
	 union data{
 8009c56:	647b      	str	r3, [r7, #68]	; 0x44
 8009c58:	b2cb      	uxtb	r3, r1
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	633b      	str	r3, [r7, #48]	; 0x30
 8009c5e:	637a      	str	r2, [r7, #52]	; 0x34
 8009c60:	f04f 0200 	mov.w	r2, #0
 8009c64:	f04f 0300 	mov.w	r3, #0
 8009c68:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 8009c6c:	464c      	mov	r4, r9
 8009c6e:	00e3      	lsls	r3, r4, #3
 8009c70:	4644      	mov	r4, r8
 8009c72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009c76:	4644      	mov	r4, r8
 8009c78:	00e2      	lsls	r2, r4, #3
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	005a      	lsls	r2, r3, #1
 8009c7e:	460b      	mov	r3, r1
 8009c80:	4293      	cmp	r3, r2
 8009c82:	bf38      	it	cc
 8009c84:	4613      	movcc	r3, r2
 8009c86:	2200      	movs	r2, #0
 8009c88:	62bb      	str	r3, [r7, #40]	; 0x28
 8009c8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009c8c:	f04f 0200 	mov.w	r2, #0
 8009c90:	f04f 0300 	mov.w	r3, #0
 8009c94:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8009c98:	464c      	mov	r4, r9
 8009c9a:	00e3      	lsls	r3, r4, #3
 8009c9c:	4644      	mov	r4, r8
 8009c9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009ca2:	4644      	mov	r4, r8
 8009ca4:	00e2      	lsls	r2, r4, #3
 8009ca6:	f112 040f 	adds.w	r4, r2, #15
 8009caa:	623c      	str	r4, [r7, #32]
 8009cac:	f143 0300 	adc.w	r3, r3, #0
 8009cb0:	627b      	str	r3, [r7, #36]	; 0x24
 8009cb2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8009cb6:	4623      	mov	r3, r4
 8009cb8:	f023 030f 	bic.w	r3, r3, #15
 8009cbc:	60bb      	str	r3, [r7, #8]
 8009cbe:	462b      	mov	r3, r5
 8009cc0:	60fb      	str	r3, [r7, #12]
	    } data;
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	005b      	lsls	r3, r3, #1
 8009cc6:	460a      	mov	r2, r1
 8009cc8:	4293      	cmp	r3, r2
 8009cca:	bf38      	it	cc
 8009ccc:	4613      	movcc	r3, r2
 8009cce:	2200      	movs	r2, #0
 8009cd0:	61bb      	str	r3, [r7, #24]
 8009cd2:	61fa      	str	r2, [r7, #28]
 8009cd4:	f04f 0200 	mov.w	r2, #0
 8009cd8:	f04f 0300 	mov.w	r3, #0
 8009cdc:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8009ce0:	464c      	mov	r4, r9
 8009ce2:	00e3      	lsls	r3, r4, #3
 8009ce4:	4644      	mov	r4, r8
 8009ce6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009cea:	4644      	mov	r4, r8
 8009cec:	00e2      	lsls	r2, r4, #3
 8009cee:	f112 040f 	adds.w	r4, r2, #15
 8009cf2:	613c      	str	r4, [r7, #16]
 8009cf4:	f143 0300 	adc.w	r3, r3, #0
 8009cf8:	617b      	str	r3, [r7, #20]
 8009cfa:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8009cfe:	4623      	mov	r3, r4
 8009d00:	f023 030f 	bic.w	r3, r3, #15
 8009d04:	603b      	str	r3, [r7, #0]
 8009d06:	462b      	mov	r3, r5
 8009d08:	607b      	str	r3, [r7, #4]
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	005b      	lsls	r3, r3, #1
 8009d0e:	460a      	mov	r2, r1
 8009d10:	4293      	cmp	r3, r2
 8009d12:	bf38      	it	cc
 8009d14:	4613      	movcc	r3, r2
 8009d16:	3301      	adds	r3, #1
 8009d18:	f023 0301 	bic.w	r3, r3, #1
 8009d1c:	3307      	adds	r3, #7
 8009d1e:	08db      	lsrs	r3, r3, #3
 8009d20:	00db      	lsls	r3, r3, #3
 8009d22:	ebad 0d03 	sub.w	sp, sp, r3
 8009d26:	466b      	mov	r3, sp
 8009d28:	3301      	adds	r3, #1
 8009d2a:	085b      	lsrs	r3, r3, #1
 8009d2c:	005b      	lsls	r3, r3, #1
 8009d2e:	643b      	str	r3, [r7, #64]	; 0x40

	memcpy(data.twobytes , calculateData ,length );
 8009d30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d32:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8009d36:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f011 fdf2 	bl	801b922 <memcpy>
    uint8_t crc = 0x00;  // CRC başlangıç değeri
 8009d3e:	2300      	movs	r3, #0
 8009d40:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    for (size_t i = 0; i < length; i++) {
 8009d44:	2300      	movs	r3, #0
 8009d46:	653b      	str	r3, [r7, #80]	; 0x50
 8009d48:	e02b      	b.n	8009da2 <calculateCRC8+0x1c6>
        crc ^= data.onebytes[i];  // Veri baytını CRC ile XOR yap
 8009d4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009d4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d4e:	4413      	add	r3, r2
 8009d50:	781a      	ldrb	r2, [r3, #0]
 8009d52:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009d56:	4053      	eors	r3, r2
 8009d58:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        for (uint8_t j = 0; j < 8; j++) {  // Her bir bit için döngü
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8009d62:	e017      	b.n	8009d94 <calculateCRC8+0x1b8>
            if (crc & 0x80) {  // Eğer en yüksek bit 1 ise
 8009d64:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	da09      	bge.n	8009d80 <calculateCRC8+0x1a4>
                crc = (crc << 1) ^ 0x07;  // CRC'yi sola kaydır ve polinom ile XOR yap
 8009d6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009d70:	005b      	lsls	r3, r3, #1
 8009d72:	b25b      	sxtb	r3, r3
 8009d74:	f083 0307 	eor.w	r3, r3, #7
 8009d78:	b25b      	sxtb	r3, r3
 8009d7a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8009d7e:	e004      	b.n	8009d8a <calculateCRC8+0x1ae>
            } else {
                crc <<= 1;  // Sadece sola kaydır
 8009d80:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009d84:	005b      	lsls	r3, r3, #1
 8009d86:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        for (uint8_t j = 0; j < 8; j++) {  // Her bir bit için döngü
 8009d8a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009d8e:	3301      	adds	r3, #1
 8009d90:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8009d94:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009d98:	2b07      	cmp	r3, #7
 8009d9a:	d9e3      	bls.n	8009d64 <calculateCRC8+0x188>
    for (size_t i = 0; i < length; i++) {
 8009d9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d9e:	3301      	adds	r3, #1
 8009da0:	653b      	str	r3, [r7, #80]	; 0x50
 8009da2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009da6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009da8:	429a      	cmp	r2, r3
 8009daa:	d3ce      	bcc.n	8009d4a <calculateCRC8+0x16e>
            }
        }
    }
    return crc;  // Hesaplanan CRC8 değerini döndür
 8009dac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009db0:	46b5      	mov	sp, r6
}
 8009db2:	4618      	mov	r0, r3
 8009db4:	375c      	adds	r7, #92	; 0x5c
 8009db6:	46bd      	mov	sp, r7
 8009db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009dbc <faultLatch>:


void faultLatch() {
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	af00      	add	r7, sp, #0

	if(VehicleMode != RaceMode)
 8009dc0:	4b17      	ldr	r3, [pc, #92]	; (8009e20 <faultLatch+0x64>)
 8009dc2:	781b      	ldrb	r3, [r3, #0]
 8009dc4:	2b01      	cmp	r3, #1
 8009dc6:	d01d      	beq.n	8009e04 <faultLatch+0x48>
	{
		//OPEN WIRE FAULT
			if (MAINBUFFER[FAULTS]!=0 ) {
 8009dc8:	4b16      	ldr	r3, [pc, #88]	; (8009e24 <faultLatch+0x68>)
 8009dca:	881b      	ldrh	r3, [r3, #0]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d00c      	beq.n	8009dea <faultLatch+0x2e>
				HAL_GPIO_WritePin(ERROR_OUT_GPIO_Port, ERROR_OUT_Pin, 0);
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	2101      	movs	r1, #1
 8009dd4:	4814      	ldr	r0, [pc, #80]	; (8009e28 <faultLatch+0x6c>)
 8009dd6:	f002 ffeb 	bl	800cdb0 <HAL_GPIO_WritePin>
				MAINBUFFER[OUTPUTS] |= 1 << 2;
 8009dda:	4b12      	ldr	r3, [pc, #72]	; (8009e24 <faultLatch+0x68>)
 8009ddc:	885b      	ldrh	r3, [r3, #2]
 8009dde:	f043 0304 	orr.w	r3, r3, #4
 8009de2:	b29a      	uxth	r2, r3
 8009de4:	4b0f      	ldr	r3, [pc, #60]	; (8009e24 <faultLatch+0x68>)
 8009de6:	805a      	strh	r2, [r3, #2]
	else {
		HAL_GPIO_WritePin(ERROR_OUT_GPIO_Port, ERROR_OUT_Pin, 1);
		MAINBUFFER[OUTPUTS] &= ~(1 << 2);
	}

}
 8009de8:	e018      	b.n	8009e1c <faultLatch+0x60>
				HAL_GPIO_WritePin(ERROR_OUT_GPIO_Port, ERROR_OUT_Pin, 1);
 8009dea:	2201      	movs	r2, #1
 8009dec:	2101      	movs	r1, #1
 8009dee:	480e      	ldr	r0, [pc, #56]	; (8009e28 <faultLatch+0x6c>)
 8009df0:	f002 ffde 	bl	800cdb0 <HAL_GPIO_WritePin>
				MAINBUFFER[OUTPUTS] &= ~(1 << 2);
 8009df4:	4b0b      	ldr	r3, [pc, #44]	; (8009e24 <faultLatch+0x68>)
 8009df6:	885b      	ldrh	r3, [r3, #2]
 8009df8:	f023 0304 	bic.w	r3, r3, #4
 8009dfc:	b29a      	uxth	r2, r3
 8009dfe:	4b09      	ldr	r3, [pc, #36]	; (8009e24 <faultLatch+0x68>)
 8009e00:	805a      	strh	r2, [r3, #2]
}
 8009e02:	e00b      	b.n	8009e1c <faultLatch+0x60>
		HAL_GPIO_WritePin(ERROR_OUT_GPIO_Port, ERROR_OUT_Pin, 1);
 8009e04:	2201      	movs	r2, #1
 8009e06:	2101      	movs	r1, #1
 8009e08:	4807      	ldr	r0, [pc, #28]	; (8009e28 <faultLatch+0x6c>)
 8009e0a:	f002 ffd1 	bl	800cdb0 <HAL_GPIO_WritePin>
		MAINBUFFER[OUTPUTS] &= ~(1 << 2);
 8009e0e:	4b05      	ldr	r3, [pc, #20]	; (8009e24 <faultLatch+0x68>)
 8009e10:	885b      	ldrh	r3, [r3, #2]
 8009e12:	f023 0304 	bic.w	r3, r3, #4
 8009e16:	b29a      	uxth	r2, r3
 8009e18:	4b02      	ldr	r3, [pc, #8]	; (8009e24 <faultLatch+0x68>)
 8009e1a:	805a      	strh	r2, [r3, #2]
}
 8009e1c:	bf00      	nop
 8009e1e:	bd80      	pop	{r7, pc}
 8009e20:	2000254f 	.word	0x2000254f
 8009e24:	200024b8 	.word	0x200024b8
 8009e28:	40020400 	.word	0x40020400

08009e2c <IsSCActive>:


uint8_t IsSCActive()
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(SC_END_GPIO_Port, SC_END_Pin);
 8009e30:	2110      	movs	r1, #16
 8009e32:	4803      	ldr	r0, [pc, #12]	; (8009e40 <IsSCActive+0x14>)
 8009e34:	f002 ffa4 	bl	800cd80 <HAL_GPIO_ReadPin>
 8009e38:	4603      	mov	r3, r0
}
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	bd80      	pop	{r7, pc}
 8009e3e:	bf00      	nop
 8009e40:	40020800 	.word	0x40020800

08009e44 <USB_Handler>:

void USB_Handler(uint8_t *Buf, uint8_t Len) {
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b084      	sub	sp, #16
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
 8009e4c:	460b      	mov	r3, r1
 8009e4e:	70fb      	strb	r3, [r7, #3]

	BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 8009e50:	2300      	movs	r3, #0
 8009e52:	60fb      	str	r3, [r7, #12]

	usbbuf = Buf;
 8009e54:	4a0e      	ldr	r2, [pc, #56]	; (8009e90 <USB_Handler+0x4c>)
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6013      	str	r3, [r2, #0]
	usblen = Len;
 8009e5a:	4a0e      	ldr	r2, [pc, #56]	; (8009e94 <USB_Handler+0x50>)
 8009e5c:	78fb      	ldrb	r3, [r7, #3]
 8009e5e:	7013      	strb	r3, [r2, #0]
	vTaskNotifyGiveFromISR(USBTASK,&pxHigherPriorityTaskWoken);
 8009e60:	4b0d      	ldr	r3, [pc, #52]	; (8009e98 <USB_Handler+0x54>)
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f107 020c 	add.w	r2, r7, #12
 8009e68:	2100      	movs	r1, #0
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f00e f978 	bl	8018160 <vTaskGenericNotifyGiveFromISR>
	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d007      	beq.n	8009e86 <USB_Handler+0x42>
 8009e76:	4b09      	ldr	r3, [pc, #36]	; (8009e9c <USB_Handler+0x58>)
 8009e78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e7c:	601a      	str	r2, [r3, #0]
 8009e7e:	f3bf 8f4f 	dsb	sy
 8009e82:	f3bf 8f6f 	isb	sy

}
 8009e86:	bf00      	nop
 8009e88:	3710      	adds	r7, #16
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}
 8009e8e:	bf00      	nop
 8009e90:	20002548 	.word	0x20002548
 8009e94:	2000254c 	.word	0x2000254c
 8009e98:	20002564 	.word	0x20002564
 8009e9c:	e000ed04 	.word	0xe000ed04

08009ea0 <_write>:


int _write(int fd, char *ptr, int len) {
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b084      	sub	sp, #16
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	60f8      	str	r0, [r7, #12]
 8009ea8:	60b9      	str	r1, [r7, #8]
 8009eaa:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	b29a      	uxth	r2, r3
 8009eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8009eb4:	68b9      	ldr	r1, [r7, #8]
 8009eb6:	4804      	ldr	r0, [pc, #16]	; (8009ec8 <_write+0x28>)
 8009eb8:	f007 fd55 	bl	8011966 <HAL_UART_Transmit>
	return len;
 8009ebc:	687b      	ldr	r3, [r7, #4]
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	3710      	adds	r7, #16
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}
 8009ec6:	bf00      	nop
 8009ec8:	200005b4 	.word	0x200005b4

08009ecc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b082      	sub	sp, #8
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	4a04      	ldr	r2, [pc, #16]	; (8009eec <HAL_TIM_PeriodElapsedCallback+0x20>)
 8009eda:	4293      	cmp	r3, r2
 8009edc:	d101      	bne.n	8009ee2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8009ede:	f000 fbf5 	bl	800a6cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8009ee2:	bf00      	nop
 8009ee4:	3708      	adds	r7, #8
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}
 8009eea:	bf00      	nop
 8009eec:	40001000 	.word	0x40001000

08009ef0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009ef0:	b480      	push	{r7}
 8009ef2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8009ef4:	b672      	cpsid	i
}
 8009ef6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8009ef8:	e7fe      	b.n	8009ef8 <Error_Handler+0x8>
	...

08009efc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009efc:	b480      	push	{r7}
 8009efe:	b085      	sub	sp, #20
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f003 0307 	and.w	r3, r3, #7
 8009f0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009f0c:	4b0c      	ldr	r3, [pc, #48]	; (8009f40 <__NVIC_SetPriorityGrouping+0x44>)
 8009f0e:	68db      	ldr	r3, [r3, #12]
 8009f10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009f12:	68ba      	ldr	r2, [r7, #8]
 8009f14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009f18:	4013      	ands	r3, r2
 8009f1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009f24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009f2e:	4a04      	ldr	r2, [pc, #16]	; (8009f40 <__NVIC_SetPriorityGrouping+0x44>)
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	60d3      	str	r3, [r2, #12]
}
 8009f34:	bf00      	nop
 8009f36:	3714      	adds	r7, #20
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3e:	4770      	bx	lr
 8009f40:	e000ed00 	.word	0xe000ed00

08009f44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b082      	sub	sp, #8
 8009f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	607b      	str	r3, [r7, #4]
 8009f4e:	4b10      	ldr	r3, [pc, #64]	; (8009f90 <HAL_MspInit+0x4c>)
 8009f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f52:	4a0f      	ldr	r2, [pc, #60]	; (8009f90 <HAL_MspInit+0x4c>)
 8009f54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009f58:	6453      	str	r3, [r2, #68]	; 0x44
 8009f5a:	4b0d      	ldr	r3, [pc, #52]	; (8009f90 <HAL_MspInit+0x4c>)
 8009f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f62:	607b      	str	r3, [r7, #4]
 8009f64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009f66:	2300      	movs	r3, #0
 8009f68:	603b      	str	r3, [r7, #0]
 8009f6a:	4b09      	ldr	r3, [pc, #36]	; (8009f90 <HAL_MspInit+0x4c>)
 8009f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f6e:	4a08      	ldr	r2, [pc, #32]	; (8009f90 <HAL_MspInit+0x4c>)
 8009f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f74:	6413      	str	r3, [r2, #64]	; 0x40
 8009f76:	4b06      	ldr	r3, [pc, #24]	; (8009f90 <HAL_MspInit+0x4c>)
 8009f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009f7e:	603b      	str	r3, [r7, #0]
 8009f80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  NVIC_SetPriorityGrouping(0);
 8009f82:	2000      	movs	r0, #0
 8009f84:	f7ff ffba 	bl	8009efc <__NVIC_SetPriorityGrouping>
  /* USER CODE END MspInit 1 */
}
 8009f88:	bf00      	nop
 8009f8a:	3708      	adds	r7, #8
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}
 8009f90:	40023800 	.word	0x40023800

08009f94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b08a      	sub	sp, #40	; 0x28
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009f9c:	f107 0314 	add.w	r3, r7, #20
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	601a      	str	r2, [r3, #0]
 8009fa4:	605a      	str	r2, [r3, #4]
 8009fa6:	609a      	str	r2, [r3, #8]
 8009fa8:	60da      	str	r2, [r3, #12]
 8009faa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	4a33      	ldr	r2, [pc, #204]	; (800a080 <HAL_ADC_MspInit+0xec>)
 8009fb2:	4293      	cmp	r3, r2
 8009fb4:	d15f      	bne.n	800a076 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	613b      	str	r3, [r7, #16]
 8009fba:	4b32      	ldr	r3, [pc, #200]	; (800a084 <HAL_ADC_MspInit+0xf0>)
 8009fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fbe:	4a31      	ldr	r2, [pc, #196]	; (800a084 <HAL_ADC_MspInit+0xf0>)
 8009fc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009fc4:	6453      	str	r3, [r2, #68]	; 0x44
 8009fc6:	4b2f      	ldr	r3, [pc, #188]	; (800a084 <HAL_ADC_MspInit+0xf0>)
 8009fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fce:	613b      	str	r3, [r7, #16]
 8009fd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	60fb      	str	r3, [r7, #12]
 8009fd6:	4b2b      	ldr	r3, [pc, #172]	; (800a084 <HAL_ADC_MspInit+0xf0>)
 8009fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fda:	4a2a      	ldr	r2, [pc, #168]	; (800a084 <HAL_ADC_MspInit+0xf0>)
 8009fdc:	f043 0301 	orr.w	r3, r3, #1
 8009fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8009fe2:	4b28      	ldr	r3, [pc, #160]	; (800a084 <HAL_ADC_MspInit+0xf0>)
 8009fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fe6:	f003 0301 	and.w	r3, r3, #1
 8009fea:	60fb      	str	r3, [r7, #12]
 8009fec:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = MCU_OCV_BC_Pin|MCU_OCV_AC_Pin|CURRENT_SHUNT_Pin|CURRENT_HALL_Pin;
 8009fee:	231e      	movs	r3, #30
 8009ff0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009ff2:	2303      	movs	r3, #3
 8009ff4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009ffa:	f107 0314 	add.w	r3, r7, #20
 8009ffe:	4619      	mov	r1, r3
 800a000:	4821      	ldr	r0, [pc, #132]	; (800a088 <HAL_ADC_MspInit+0xf4>)
 800a002:	f002 fc35 	bl	800c870 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800a006:	4b21      	ldr	r3, [pc, #132]	; (800a08c <HAL_ADC_MspInit+0xf8>)
 800a008:	4a21      	ldr	r2, [pc, #132]	; (800a090 <HAL_ADC_MspInit+0xfc>)
 800a00a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800a00c:	4b1f      	ldr	r3, [pc, #124]	; (800a08c <HAL_ADC_MspInit+0xf8>)
 800a00e:	2200      	movs	r2, #0
 800a010:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a012:	4b1e      	ldr	r3, [pc, #120]	; (800a08c <HAL_ADC_MspInit+0xf8>)
 800a014:	2200      	movs	r2, #0
 800a016:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800a018:	4b1c      	ldr	r3, [pc, #112]	; (800a08c <HAL_ADC_MspInit+0xf8>)
 800a01a:	2200      	movs	r2, #0
 800a01c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800a01e:	4b1b      	ldr	r3, [pc, #108]	; (800a08c <HAL_ADC_MspInit+0xf8>)
 800a020:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a024:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800a026:	4b19      	ldr	r3, [pc, #100]	; (800a08c <HAL_ADC_MspInit+0xf8>)
 800a028:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a02c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800a02e:	4b17      	ldr	r3, [pc, #92]	; (800a08c <HAL_ADC_MspInit+0xf8>)
 800a030:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800a034:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800a036:	4b15      	ldr	r3, [pc, #84]	; (800a08c <HAL_ADC_MspInit+0xf8>)
 800a038:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a03c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800a03e:	4b13      	ldr	r3, [pc, #76]	; (800a08c <HAL_ADC_MspInit+0xf8>)
 800a040:	2200      	movs	r2, #0
 800a042:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a044:	4b11      	ldr	r3, [pc, #68]	; (800a08c <HAL_ADC_MspInit+0xf8>)
 800a046:	2200      	movs	r2, #0
 800a048:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800a04a:	4810      	ldr	r0, [pc, #64]	; (800a08c <HAL_ADC_MspInit+0xf8>)
 800a04c:	f002 f8a0 	bl	800c190 <HAL_DMA_Init>
 800a050:	4603      	mov	r3, r0
 800a052:	2b00      	cmp	r3, #0
 800a054:	d001      	beq.n	800a05a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800a056:	f7ff ff4b 	bl	8009ef0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	4a0b      	ldr	r2, [pc, #44]	; (800a08c <HAL_ADC_MspInit+0xf8>)
 800a05e:	639a      	str	r2, [r3, #56]	; 0x38
 800a060:	4a0a      	ldr	r2, [pc, #40]	; (800a08c <HAL_ADC_MspInit+0xf8>)
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800a066:	2200      	movs	r2, #0
 800a068:	2100      	movs	r1, #0
 800a06a:	2012      	movs	r0, #18
 800a06c:	f002 f858 	bl	800c120 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800a070:	2012      	movs	r0, #18
 800a072:	f002 f871 	bl	800c158 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800a076:	bf00      	nop
 800a078:	3728      	adds	r7, #40	; 0x28
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}
 800a07e:	bf00      	nop
 800a080:	40012000 	.word	0x40012000
 800a084:	40023800 	.word	0x40023800
 800a088:	40020000 	.word	0x40020000
 800a08c:	20000398 	.word	0x20000398
 800a090:	40026410 	.word	0x40026410

0800a094 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b08a      	sub	sp, #40	; 0x28
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a09c:	f107 0314 	add.w	r3, r7, #20
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	601a      	str	r2, [r3, #0]
 800a0a4:	605a      	str	r2, [r3, #4]
 800a0a6:	609a      	str	r2, [r3, #8]
 800a0a8:	60da      	str	r2, [r3, #12]
 800a0aa:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	4a21      	ldr	r2, [pc, #132]	; (800a138 <HAL_CAN_MspInit+0xa4>)
 800a0b2:	4293      	cmp	r3, r2
 800a0b4:	d13c      	bne.n	800a130 <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	613b      	str	r3, [r7, #16]
 800a0ba:	4b20      	ldr	r3, [pc, #128]	; (800a13c <HAL_CAN_MspInit+0xa8>)
 800a0bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0be:	4a1f      	ldr	r2, [pc, #124]	; (800a13c <HAL_CAN_MspInit+0xa8>)
 800a0c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a0c4:	6413      	str	r3, [r2, #64]	; 0x40
 800a0c6:	4b1d      	ldr	r3, [pc, #116]	; (800a13c <HAL_CAN_MspInit+0xa8>)
 800a0c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0ce:	613b      	str	r3, [r7, #16]
 800a0d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	60fb      	str	r3, [r7, #12]
 800a0d6:	4b19      	ldr	r3, [pc, #100]	; (800a13c <HAL_CAN_MspInit+0xa8>)
 800a0d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0da:	4a18      	ldr	r2, [pc, #96]	; (800a13c <HAL_CAN_MspInit+0xa8>)
 800a0dc:	f043 0302 	orr.w	r3, r3, #2
 800a0e0:	6313      	str	r3, [r2, #48]	; 0x30
 800a0e2:	4b16      	ldr	r3, [pc, #88]	; (800a13c <HAL_CAN_MspInit+0xa8>)
 800a0e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0e6:	f003 0302 	and.w	r3, r3, #2
 800a0ea:	60fb      	str	r3, [r7, #12]
 800a0ec:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800a0ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a0f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a0f4:	2302      	movs	r3, #2
 800a0f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a0fc:	2303      	movs	r3, #3
 800a0fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800a100:	2309      	movs	r3, #9
 800a102:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a104:	f107 0314 	add.w	r3, r7, #20
 800a108:	4619      	mov	r1, r3
 800a10a:	480d      	ldr	r0, [pc, #52]	; (800a140 <HAL_CAN_MspInit+0xac>)
 800a10c:	f002 fbb0 	bl	800c870 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 6, 0);
 800a110:	2200      	movs	r2, #0
 800a112:	2106      	movs	r1, #6
 800a114:	2014      	movs	r0, #20
 800a116:	f002 f803 	bl	800c120 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800a11a:	2014      	movs	r0, #20
 800a11c:	f002 f81c 	bl	800c158 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 6, 0);
 800a120:	2200      	movs	r2, #0
 800a122:	2106      	movs	r1, #6
 800a124:	2015      	movs	r0, #21
 800a126:	f001 fffb 	bl	800c120 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800a12a:	2015      	movs	r0, #21
 800a12c:	f002 f814 	bl	800c158 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800a130:	bf00      	nop
 800a132:	3728      	adds	r7, #40	; 0x28
 800a134:	46bd      	mov	sp, r7
 800a136:	bd80      	pop	{r7, pc}
 800a138:	40006400 	.word	0x40006400
 800a13c:	40023800 	.word	0x40023800
 800a140:	40020400 	.word	0x40020400

0800a144 <HAL_CAN_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspDeInit(CAN_HandleTypeDef* hcan)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b082      	sub	sp, #8
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
  if(hcan->Instance==CAN1)
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	4a0b      	ldr	r2, [pc, #44]	; (800a180 <HAL_CAN_MspDeInit+0x3c>)
 800a152:	4293      	cmp	r3, r2
 800a154:	d110      	bne.n	800a178 <HAL_CAN_MspDeInit+0x34>
  {
  /* USER CODE BEGIN CAN1_MspDeInit 0 */

  /* USER CODE END CAN1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CAN1_CLK_DISABLE();
 800a156:	4b0b      	ldr	r3, [pc, #44]	; (800a184 <HAL_CAN_MspDeInit+0x40>)
 800a158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a15a:	4a0a      	ldr	r2, [pc, #40]	; (800a184 <HAL_CAN_MspDeInit+0x40>)
 800a15c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800a160:	6413      	str	r3, [r2, #64]	; 0x40

    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 800a162:	f44f 7140 	mov.w	r1, #768	; 0x300
 800a166:	4808      	ldr	r0, [pc, #32]	; (800a188 <HAL_CAN_MspDeInit+0x44>)
 800a168:	f002 fd16 	bl	800cb98 <HAL_GPIO_DeInit>

    /* CAN1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(CAN1_RX0_IRQn);
 800a16c:	2014      	movs	r0, #20
 800a16e:	f002 f801 	bl	800c174 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(CAN1_RX1_IRQn);
 800a172:	2015      	movs	r0, #21
 800a174:	f001 fffe 	bl	800c174 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN CAN1_MspDeInit 1 */

  /* USER CODE END CAN1_MspDeInit 1 */
  }

}
 800a178:	bf00      	nop
 800a17a:	3708      	adds	r7, #8
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bd80      	pop	{r7, pc}
 800a180:	40006400 	.word	0x40006400
 800a184:	40023800 	.word	0x40023800
 800a188:	40020400 	.word	0x40020400

0800a18c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b08a      	sub	sp, #40	; 0x28
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a194:	f107 0314 	add.w	r3, r7, #20
 800a198:	2200      	movs	r2, #0
 800a19a:	601a      	str	r2, [r3, #0]
 800a19c:	605a      	str	r2, [r3, #4]
 800a19e:	609a      	str	r2, [r3, #8]
 800a1a0:	60da      	str	r2, [r3, #12]
 800a1a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	4a19      	ldr	r2, [pc, #100]	; (800a210 <HAL_I2C_MspInit+0x84>)
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	d12b      	bne.n	800a206 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	613b      	str	r3, [r7, #16]
 800a1b2:	4b18      	ldr	r3, [pc, #96]	; (800a214 <HAL_I2C_MspInit+0x88>)
 800a1b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1b6:	4a17      	ldr	r2, [pc, #92]	; (800a214 <HAL_I2C_MspInit+0x88>)
 800a1b8:	f043 0302 	orr.w	r3, r3, #2
 800a1bc:	6313      	str	r3, [r2, #48]	; 0x30
 800a1be:	4b15      	ldr	r3, [pc, #84]	; (800a214 <HAL_I2C_MspInit+0x88>)
 800a1c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1c2:	f003 0302 	and.w	r3, r3, #2
 800a1c6:	613b      	str	r3, [r7, #16]
 800a1c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800a1ca:	23c0      	movs	r3, #192	; 0xc0
 800a1cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a1ce:	2312      	movs	r3, #18
 800a1d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a1d6:	2303      	movs	r3, #3
 800a1d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800a1da:	2304      	movs	r3, #4
 800a1dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a1de:	f107 0314 	add.w	r3, r7, #20
 800a1e2:	4619      	mov	r1, r3
 800a1e4:	480c      	ldr	r0, [pc, #48]	; (800a218 <HAL_I2C_MspInit+0x8c>)
 800a1e6:	f002 fb43 	bl	800c870 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	60fb      	str	r3, [r7, #12]
 800a1ee:	4b09      	ldr	r3, [pc, #36]	; (800a214 <HAL_I2C_MspInit+0x88>)
 800a1f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1f2:	4a08      	ldr	r2, [pc, #32]	; (800a214 <HAL_I2C_MspInit+0x88>)
 800a1f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a1f8:	6413      	str	r3, [r2, #64]	; 0x40
 800a1fa:	4b06      	ldr	r3, [pc, #24]	; (800a214 <HAL_I2C_MspInit+0x88>)
 800a1fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a202:	60fb      	str	r3, [r7, #12]
 800a204:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800a206:	bf00      	nop
 800a208:	3728      	adds	r7, #40	; 0x28
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}
 800a20e:	bf00      	nop
 800a210:	40005400 	.word	0x40005400
 800a214:	40023800 	.word	0x40023800
 800a218:	40020400 	.word	0x40020400

0800a21c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b08c      	sub	sp, #48	; 0x30
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a224:	f107 031c 	add.w	r3, r7, #28
 800a228:	2200      	movs	r2, #0
 800a22a:	601a      	str	r2, [r3, #0]
 800a22c:	605a      	str	r2, [r3, #4]
 800a22e:	609a      	str	r2, [r3, #8]
 800a230:	60da      	str	r2, [r3, #12]
 800a232:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	4a49      	ldr	r2, [pc, #292]	; (800a360 <HAL_SPI_MspInit+0x144>)
 800a23a:	4293      	cmp	r3, r2
 800a23c:	d12c      	bne.n	800a298 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800a23e:	2300      	movs	r3, #0
 800a240:	61bb      	str	r3, [r7, #24]
 800a242:	4b48      	ldr	r3, [pc, #288]	; (800a364 <HAL_SPI_MspInit+0x148>)
 800a244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a246:	4a47      	ldr	r2, [pc, #284]	; (800a364 <HAL_SPI_MspInit+0x148>)
 800a248:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a24c:	6453      	str	r3, [r2, #68]	; 0x44
 800a24e:	4b45      	ldr	r3, [pc, #276]	; (800a364 <HAL_SPI_MspInit+0x148>)
 800a250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a252:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a256:	61bb      	str	r3, [r7, #24]
 800a258:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a25a:	2300      	movs	r3, #0
 800a25c:	617b      	str	r3, [r7, #20]
 800a25e:	4b41      	ldr	r3, [pc, #260]	; (800a364 <HAL_SPI_MspInit+0x148>)
 800a260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a262:	4a40      	ldr	r2, [pc, #256]	; (800a364 <HAL_SPI_MspInit+0x148>)
 800a264:	f043 0301 	orr.w	r3, r3, #1
 800a268:	6313      	str	r3, [r2, #48]	; 0x30
 800a26a:	4b3e      	ldr	r3, [pc, #248]	; (800a364 <HAL_SPI_MspInit+0x148>)
 800a26c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a26e:	f003 0301 	and.w	r3, r3, #1
 800a272:	617b      	str	r3, [r7, #20]
 800a274:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800a276:	23e0      	movs	r3, #224	; 0xe0
 800a278:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a27a:	2302      	movs	r3, #2
 800a27c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a27e:	2300      	movs	r3, #0
 800a280:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a282:	2303      	movs	r3, #3
 800a284:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800a286:	2305      	movs	r3, #5
 800a288:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a28a:	f107 031c 	add.w	r3, r7, #28
 800a28e:	4619      	mov	r1, r3
 800a290:	4835      	ldr	r0, [pc, #212]	; (800a368 <HAL_SPI_MspInit+0x14c>)
 800a292:	f002 faed 	bl	800c870 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800a296:	e05f      	b.n	800a358 <HAL_SPI_MspInit+0x13c>
  else if(hspi->Instance==SPI2)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	4a33      	ldr	r2, [pc, #204]	; (800a36c <HAL_SPI_MspInit+0x150>)
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	d15a      	bne.n	800a358 <HAL_SPI_MspInit+0x13c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	613b      	str	r3, [r7, #16]
 800a2a6:	4b2f      	ldr	r3, [pc, #188]	; (800a364 <HAL_SPI_MspInit+0x148>)
 800a2a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2aa:	4a2e      	ldr	r2, [pc, #184]	; (800a364 <HAL_SPI_MspInit+0x148>)
 800a2ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a2b0:	6413      	str	r3, [r2, #64]	; 0x40
 800a2b2:	4b2c      	ldr	r3, [pc, #176]	; (800a364 <HAL_SPI_MspInit+0x148>)
 800a2b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a2ba:	613b      	str	r3, [r7, #16]
 800a2bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a2be:	2300      	movs	r3, #0
 800a2c0:	60fb      	str	r3, [r7, #12]
 800a2c2:	4b28      	ldr	r3, [pc, #160]	; (800a364 <HAL_SPI_MspInit+0x148>)
 800a2c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2c6:	4a27      	ldr	r2, [pc, #156]	; (800a364 <HAL_SPI_MspInit+0x148>)
 800a2c8:	f043 0304 	orr.w	r3, r3, #4
 800a2cc:	6313      	str	r3, [r2, #48]	; 0x30
 800a2ce:	4b25      	ldr	r3, [pc, #148]	; (800a364 <HAL_SPI_MspInit+0x148>)
 800a2d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2d2:	f003 0304 	and.w	r3, r3, #4
 800a2d6:	60fb      	str	r3, [r7, #12]
 800a2d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a2da:	2300      	movs	r3, #0
 800a2dc:	60bb      	str	r3, [r7, #8]
 800a2de:	4b21      	ldr	r3, [pc, #132]	; (800a364 <HAL_SPI_MspInit+0x148>)
 800a2e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2e2:	4a20      	ldr	r2, [pc, #128]	; (800a364 <HAL_SPI_MspInit+0x148>)
 800a2e4:	f043 0302 	orr.w	r3, r3, #2
 800a2e8:	6313      	str	r3, [r2, #48]	; 0x30
 800a2ea:	4b1e      	ldr	r3, [pc, #120]	; (800a364 <HAL_SPI_MspInit+0x148>)
 800a2ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2ee:	f003 0302 	and.w	r3, r3, #2
 800a2f2:	60bb      	str	r3, [r7, #8]
 800a2f4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800a2f6:	2302      	movs	r3, #2
 800a2f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a2fa:	2302      	movs	r3, #2
 800a2fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2fe:	2300      	movs	r3, #0
 800a300:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a302:	2303      	movs	r3, #3
 800a304:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 800a306:	2307      	movs	r3, #7
 800a308:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a30a:	f107 031c 	add.w	r3, r7, #28
 800a30e:	4619      	mov	r1, r3
 800a310:	4817      	ldr	r0, [pc, #92]	; (800a370 <HAL_SPI_MspInit+0x154>)
 800a312:	f002 faad 	bl	800c870 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800a316:	2304      	movs	r3, #4
 800a318:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a31a:	2302      	movs	r3, #2
 800a31c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a31e:	2300      	movs	r3, #0
 800a320:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a322:	2303      	movs	r3, #3
 800a324:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800a326:	2305      	movs	r3, #5
 800a328:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a32a:	f107 031c 	add.w	r3, r7, #28
 800a32e:	4619      	mov	r1, r3
 800a330:	480f      	ldr	r0, [pc, #60]	; (800a370 <HAL_SPI_MspInit+0x154>)
 800a332:	f002 fa9d 	bl	800c870 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800a336:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a33a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a33c:	2302      	movs	r3, #2
 800a33e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a340:	2300      	movs	r3, #0
 800a342:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a344:	2303      	movs	r3, #3
 800a346:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800a348:	2305      	movs	r3, #5
 800a34a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a34c:	f107 031c 	add.w	r3, r7, #28
 800a350:	4619      	mov	r1, r3
 800a352:	4808      	ldr	r0, [pc, #32]	; (800a374 <HAL_SPI_MspInit+0x158>)
 800a354:	f002 fa8c 	bl	800c870 <HAL_GPIO_Init>
}
 800a358:	bf00      	nop
 800a35a:	3730      	adds	r7, #48	; 0x30
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bd80      	pop	{r7, pc}
 800a360:	40013000 	.word	0x40013000
 800a364:	40023800 	.word	0x40023800
 800a368:	40020000 	.word	0x40020000
 800a36c:	40003800 	.word	0x40003800
 800a370:	40020800 	.word	0x40020800
 800a374:	40020400 	.word	0x40020400

0800a378 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800a378:	b480      	push	{r7}
 800a37a:	b085      	sub	sp, #20
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	4a15      	ldr	r2, [pc, #84]	; (800a3dc <HAL_TIM_Base_MspInit+0x64>)
 800a386:	4293      	cmp	r3, r2
 800a388:	d10e      	bne.n	800a3a8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800a38a:	2300      	movs	r3, #0
 800a38c:	60fb      	str	r3, [r7, #12]
 800a38e:	4b14      	ldr	r3, [pc, #80]	; (800a3e0 <HAL_TIM_Base_MspInit+0x68>)
 800a390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a392:	4a13      	ldr	r2, [pc, #76]	; (800a3e0 <HAL_TIM_Base_MspInit+0x68>)
 800a394:	f043 0301 	orr.w	r3, r3, #1
 800a398:	6453      	str	r3, [r2, #68]	; 0x44
 800a39a:	4b11      	ldr	r3, [pc, #68]	; (800a3e0 <HAL_TIM_Base_MspInit+0x68>)
 800a39c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a39e:	f003 0301 	and.w	r3, r3, #1
 800a3a2:	60fb      	str	r3, [r7, #12]
 800a3a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800a3a6:	e012      	b.n	800a3ce <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3b0:	d10d      	bne.n	800a3ce <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	60bb      	str	r3, [r7, #8]
 800a3b6:	4b0a      	ldr	r3, [pc, #40]	; (800a3e0 <HAL_TIM_Base_MspInit+0x68>)
 800a3b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3ba:	4a09      	ldr	r2, [pc, #36]	; (800a3e0 <HAL_TIM_Base_MspInit+0x68>)
 800a3bc:	f043 0301 	orr.w	r3, r3, #1
 800a3c0:	6413      	str	r3, [r2, #64]	; 0x40
 800a3c2:	4b07      	ldr	r3, [pc, #28]	; (800a3e0 <HAL_TIM_Base_MspInit+0x68>)
 800a3c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3c6:	f003 0301 	and.w	r3, r3, #1
 800a3ca:	60bb      	str	r3, [r7, #8]
 800a3cc:	68bb      	ldr	r3, [r7, #8]
}
 800a3ce:	bf00      	nop
 800a3d0:	3714      	adds	r7, #20
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d8:	4770      	bx	lr
 800a3da:	bf00      	nop
 800a3dc:	40010000 	.word	0x40010000
 800a3e0:	40023800 	.word	0x40023800

0800a3e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b08a      	sub	sp, #40	; 0x28
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a3ec:	f107 0314 	add.w	r3, r7, #20
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	601a      	str	r2, [r3, #0]
 800a3f4:	605a      	str	r2, [r3, #4]
 800a3f6:	609a      	str	r2, [r3, #8]
 800a3f8:	60da      	str	r2, [r3, #12]
 800a3fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	4a19      	ldr	r2, [pc, #100]	; (800a468 <HAL_UART_MspInit+0x84>)
 800a402:	4293      	cmp	r3, r2
 800a404:	d12c      	bne.n	800a460 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800a406:	2300      	movs	r3, #0
 800a408:	613b      	str	r3, [r7, #16]
 800a40a:	4b18      	ldr	r3, [pc, #96]	; (800a46c <HAL_UART_MspInit+0x88>)
 800a40c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a40e:	4a17      	ldr	r2, [pc, #92]	; (800a46c <HAL_UART_MspInit+0x88>)
 800a410:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a414:	6413      	str	r3, [r2, #64]	; 0x40
 800a416:	4b15      	ldr	r3, [pc, #84]	; (800a46c <HAL_UART_MspInit+0x88>)
 800a418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a41a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a41e:	613b      	str	r3, [r7, #16]
 800a420:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a422:	2300      	movs	r3, #0
 800a424:	60fb      	str	r3, [r7, #12]
 800a426:	4b11      	ldr	r3, [pc, #68]	; (800a46c <HAL_UART_MspInit+0x88>)
 800a428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a42a:	4a10      	ldr	r2, [pc, #64]	; (800a46c <HAL_UART_MspInit+0x88>)
 800a42c:	f043 0304 	orr.w	r3, r3, #4
 800a430:	6313      	str	r3, [r2, #48]	; 0x30
 800a432:	4b0e      	ldr	r3, [pc, #56]	; (800a46c <HAL_UART_MspInit+0x88>)
 800a434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a436:	f003 0304 	and.w	r3, r3, #4
 800a43a:	60fb      	str	r3, [r7, #12]
 800a43c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC5     ------> USART3_RX
    PC10     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 800a43e:	f44f 6384 	mov.w	r3, #1056	; 0x420
 800a442:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a444:	2302      	movs	r3, #2
 800a446:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a448:	2300      	movs	r3, #0
 800a44a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a44c:	2303      	movs	r3, #3
 800a44e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800a450:	2307      	movs	r3, #7
 800a452:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a454:	f107 0314 	add.w	r3, r7, #20
 800a458:	4619      	mov	r1, r3
 800a45a:	4805      	ldr	r0, [pc, #20]	; (800a470 <HAL_UART_MspInit+0x8c>)
 800a45c:	f002 fa08 	bl	800c870 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800a460:	bf00      	nop
 800a462:	3728      	adds	r7, #40	; 0x28
 800a464:	46bd      	mov	sp, r7
 800a466:	bd80      	pop	{r7, pc}
 800a468:	40004800 	.word	0x40004800
 800a46c:	40023800 	.word	0x40023800
 800a470:	40020800 	.word	0x40020800

0800a474 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b08e      	sub	sp, #56	; 0x38
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800a47c:	2300      	movs	r3, #0
 800a47e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800a480:	2300      	movs	r3, #0
 800a482:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800a484:	2300      	movs	r3, #0
 800a486:	60fb      	str	r3, [r7, #12]
 800a488:	4b33      	ldr	r3, [pc, #204]	; (800a558 <HAL_InitTick+0xe4>)
 800a48a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a48c:	4a32      	ldr	r2, [pc, #200]	; (800a558 <HAL_InitTick+0xe4>)
 800a48e:	f043 0310 	orr.w	r3, r3, #16
 800a492:	6413      	str	r3, [r2, #64]	; 0x40
 800a494:	4b30      	ldr	r3, [pc, #192]	; (800a558 <HAL_InitTick+0xe4>)
 800a496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a498:	f003 0310 	and.w	r3, r3, #16
 800a49c:	60fb      	str	r3, [r7, #12]
 800a49e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800a4a0:	f107 0210 	add.w	r2, r7, #16
 800a4a4:	f107 0314 	add.w	r3, r7, #20
 800a4a8:	4611      	mov	r1, r2
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	f005 f83c 	bl	800f528 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800a4b0:	6a3b      	ldr	r3, [r7, #32]
 800a4b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800a4b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d103      	bne.n	800a4c2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800a4ba:	f005 f80d 	bl	800f4d8 <HAL_RCC_GetPCLK1Freq>
 800a4be:	6378      	str	r0, [r7, #52]	; 0x34
 800a4c0:	e004      	b.n	800a4cc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800a4c2:	f005 f809 	bl	800f4d8 <HAL_RCC_GetPCLK1Freq>
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	005b      	lsls	r3, r3, #1
 800a4ca:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800a4cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4ce:	4a23      	ldr	r2, [pc, #140]	; (800a55c <HAL_InitTick+0xe8>)
 800a4d0:	fba2 2303 	umull	r2, r3, r2, r3
 800a4d4:	0c9b      	lsrs	r3, r3, #18
 800a4d6:	3b01      	subs	r3, #1
 800a4d8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800a4da:	4b21      	ldr	r3, [pc, #132]	; (800a560 <HAL_InitTick+0xec>)
 800a4dc:	4a21      	ldr	r2, [pc, #132]	; (800a564 <HAL_InitTick+0xf0>)
 800a4de:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800a4e0:	4b1f      	ldr	r3, [pc, #124]	; (800a560 <HAL_InitTick+0xec>)
 800a4e2:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a4e6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800a4e8:	4a1d      	ldr	r2, [pc, #116]	; (800a560 <HAL_InitTick+0xec>)
 800a4ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ec:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800a4ee:	4b1c      	ldr	r3, [pc, #112]	; (800a560 <HAL_InitTick+0xec>)
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a4f4:	4b1a      	ldr	r3, [pc, #104]	; (800a560 <HAL_InitTick+0xec>)
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a4fa:	4b19      	ldr	r3, [pc, #100]	; (800a560 <HAL_InitTick+0xec>)
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800a500:	4817      	ldr	r0, [pc, #92]	; (800a560 <HAL_InitTick+0xec>)
 800a502:	f006 fd61 	bl	8010fc8 <HAL_TIM_Base_Init>
 800a506:	4603      	mov	r3, r0
 800a508:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800a50c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a510:	2b00      	cmp	r3, #0
 800a512:	d11b      	bne.n	800a54c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800a514:	4812      	ldr	r0, [pc, #72]	; (800a560 <HAL_InitTick+0xec>)
 800a516:	f006 fda7 	bl	8011068 <HAL_TIM_Base_Start_IT>
 800a51a:	4603      	mov	r3, r0
 800a51c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800a520:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a524:	2b00      	cmp	r3, #0
 800a526:	d111      	bne.n	800a54c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800a528:	2036      	movs	r0, #54	; 0x36
 800a52a:	f001 fe15 	bl	800c158 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2b0f      	cmp	r3, #15
 800a532:	d808      	bhi.n	800a546 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800a534:	2200      	movs	r2, #0
 800a536:	6879      	ldr	r1, [r7, #4]
 800a538:	2036      	movs	r0, #54	; 0x36
 800a53a:	f001 fdf1 	bl	800c120 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800a53e:	4a0a      	ldr	r2, [pc, #40]	; (800a568 <HAL_InitTick+0xf4>)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6013      	str	r3, [r2, #0]
 800a544:	e002      	b.n	800a54c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800a546:	2301      	movs	r3, #1
 800a548:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800a54c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800a550:	4618      	mov	r0, r3
 800a552:	3738      	adds	r7, #56	; 0x38
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}
 800a558:	40023800 	.word	0x40023800
 800a55c:	431bde83 	.word	0x431bde83
 800a560:	20002574 	.word	0x20002574
 800a564:	40001000 	.word	0x40001000
 800a568:	20000058 	.word	0x20000058

0800a56c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a56c:	b480      	push	{r7}
 800a56e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800a570:	e7fe      	b.n	800a570 <NMI_Handler+0x4>

0800a572 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a572:	b480      	push	{r7}
 800a574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a576:	e7fe      	b.n	800a576 <HardFault_Handler+0x4>

0800a578 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a578:	b480      	push	{r7}
 800a57a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a57c:	e7fe      	b.n	800a57c <MemManage_Handler+0x4>

0800a57e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a57e:	b480      	push	{r7}
 800a580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a582:	e7fe      	b.n	800a582 <BusFault_Handler+0x4>

0800a584 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a584:	b480      	push	{r7}
 800a586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a588:	e7fe      	b.n	800a588 <UsageFault_Handler+0x4>

0800a58a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a58a:	b480      	push	{r7}
 800a58c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a58e:	bf00      	nop
 800a590:	46bd      	mov	sp, r7
 800a592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a596:	4770      	bx	lr

0800a598 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800a59c:	4802      	ldr	r0, [pc, #8]	; (800a5a8 <ADC_IRQHandler+0x10>)
 800a59e:	f000 f91c 	bl	800a7da <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800a5a2:	bf00      	nop
 800a5a4:	bd80      	pop	{r7, pc}
 800a5a6:	bf00      	nop
 800a5a8:	20000350 	.word	0x20000350

0800a5ac <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800a5b0:	4802      	ldr	r0, [pc, #8]	; (800a5bc <CAN1_RX0_IRQHandler+0x10>)
 800a5b2:	f001 faa9 	bl	800bb08 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800a5b6:	bf00      	nop
 800a5b8:	bd80      	pop	{r7, pc}
 800a5ba:	bf00      	nop
 800a5bc:	200003f8 	.word	0x200003f8

0800a5c0 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800a5c4:	4802      	ldr	r0, [pc, #8]	; (800a5d0 <CAN1_RX1_IRQHandler+0x10>)
 800a5c6:	f001 fa9f 	bl	800bb08 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800a5ca:	bf00      	nop
 800a5cc:	bd80      	pop	{r7, pc}
 800a5ce:	bf00      	nop
 800a5d0:	200003f8 	.word	0x200003f8

0800a5d4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800a5d8:	4802      	ldr	r0, [pc, #8]	; (800a5e4 <TIM6_DAC_IRQHandler+0x10>)
 800a5da:	f006 fdb5 	bl	8011148 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800a5de:	bf00      	nop
 800a5e0:	bd80      	pop	{r7, pc}
 800a5e2:	bf00      	nop
 800a5e4:	20002574 	.word	0x20002574

0800a5e8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800a5ec:	4802      	ldr	r0, [pc, #8]	; (800a5f8 <DMA2_Stream0_IRQHandler+0x10>)
 800a5ee:	f001 fed5 	bl	800c39c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800a5f2:	bf00      	nop
 800a5f4:	bd80      	pop	{r7, pc}
 800a5f6:	bf00      	nop
 800a5f8:	20000398 	.word	0x20000398

0800a5fc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800a600:	4802      	ldr	r0, [pc, #8]	; (800a60c <OTG_FS_IRQHandler+0x10>)
 800a602:	f003 fd05 	bl	800e010 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800a606:	bf00      	nop
 800a608:	bd80      	pop	{r7, pc}
 800a60a:	bf00      	nop
 800a60c:	20012f24 	.word	0x20012f24

0800a610 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800a610:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a648 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800a614:	480d      	ldr	r0, [pc, #52]	; (800a64c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800a616:	490e      	ldr	r1, [pc, #56]	; (800a650 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800a618:	4a0e      	ldr	r2, [pc, #56]	; (800a654 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800a61a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a61c:	e002      	b.n	800a624 <LoopCopyDataInit>

0800a61e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a61e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a620:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a622:	3304      	adds	r3, #4

0800a624 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a624:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a626:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a628:	d3f9      	bcc.n	800a61e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a62a:	4a0b      	ldr	r2, [pc, #44]	; (800a658 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800a62c:	4c0b      	ldr	r4, [pc, #44]	; (800a65c <LoopFillZerobss+0x26>)
  movs r3, #0
 800a62e:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a630:	e001      	b.n	800a636 <LoopFillZerobss>

0800a632 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a632:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a634:	3204      	adds	r2, #4

0800a636 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a636:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a638:	d3fb      	bcc.n	800a632 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800a63a:	f000 f813 	bl	800a664 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a63e:	f011 f949 	bl	801b8d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a642:	f7fc fe0d 	bl	8007260 <main>
  bx  lr    
 800a646:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800a648:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800a64c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800a650:	20000330 	.word	0x20000330
  ldr r2, =_sidata
 800a654:	08025be8 	.word	0x08025be8
  ldr r2, =_sbss
 800a658:	20000330 	.word	0x20000330
  ldr r4, =_ebss
 800a65c:	200137a0 	.word	0x200137a0

0800a660 <CAN1_SCE_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a660:	e7fe      	b.n	800a660 <CAN1_SCE_IRQHandler>
	...

0800a664 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a664:	b480      	push	{r7}
 800a666:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a668:	4b06      	ldr	r3, [pc, #24]	; (800a684 <SystemInit+0x20>)
 800a66a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a66e:	4a05      	ldr	r2, [pc, #20]	; (800a684 <SystemInit+0x20>)
 800a670:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a674:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800a678:	bf00      	nop
 800a67a:	46bd      	mov	sp, r7
 800a67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a680:	4770      	bx	lr
 800a682:	bf00      	nop
 800a684:	e000ed00 	.word	0xe000ed00

0800a688 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800a68c:	4b0e      	ldr	r3, [pc, #56]	; (800a6c8 <HAL_Init+0x40>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	4a0d      	ldr	r2, [pc, #52]	; (800a6c8 <HAL_Init+0x40>)
 800a692:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a696:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800a698:	4b0b      	ldr	r3, [pc, #44]	; (800a6c8 <HAL_Init+0x40>)
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	4a0a      	ldr	r2, [pc, #40]	; (800a6c8 <HAL_Init+0x40>)
 800a69e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a6a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800a6a4:	4b08      	ldr	r3, [pc, #32]	; (800a6c8 <HAL_Init+0x40>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	4a07      	ldr	r2, [pc, #28]	; (800a6c8 <HAL_Init+0x40>)
 800a6aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a6ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a6b0:	2003      	movs	r0, #3
 800a6b2:	f001 fd2a 	bl	800c10a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800a6b6:	200f      	movs	r0, #15
 800a6b8:	f7ff fedc 	bl	800a474 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800a6bc:	f7ff fc42 	bl	8009f44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800a6c0:	2300      	movs	r3, #0
}
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	bd80      	pop	{r7, pc}
 800a6c6:	bf00      	nop
 800a6c8:	40023c00 	.word	0x40023c00

0800a6cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800a6d0:	4b06      	ldr	r3, [pc, #24]	; (800a6ec <HAL_IncTick+0x20>)
 800a6d2:	781b      	ldrb	r3, [r3, #0]
 800a6d4:	461a      	mov	r2, r3
 800a6d6:	4b06      	ldr	r3, [pc, #24]	; (800a6f0 <HAL_IncTick+0x24>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	4413      	add	r3, r2
 800a6dc:	4a04      	ldr	r2, [pc, #16]	; (800a6f0 <HAL_IncTick+0x24>)
 800a6de:	6013      	str	r3, [r2, #0]
}
 800a6e0:	bf00      	nop
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e8:	4770      	bx	lr
 800a6ea:	bf00      	nop
 800a6ec:	2000005c 	.word	0x2000005c
 800a6f0:	200025bc 	.word	0x200025bc

0800a6f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a6f4:	b480      	push	{r7}
 800a6f6:	af00      	add	r7, sp, #0
  return uwTick;
 800a6f8:	4b03      	ldr	r3, [pc, #12]	; (800a708 <HAL_GetTick+0x14>)
 800a6fa:	681b      	ldr	r3, [r3, #0]
}
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	46bd      	mov	sp, r7
 800a700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a704:	4770      	bx	lr
 800a706:	bf00      	nop
 800a708:	200025bc 	.word	0x200025bc

0800a70c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b084      	sub	sp, #16
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a714:	f7ff ffee 	bl	800a6f4 <HAL_GetTick>
 800a718:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a724:	d005      	beq.n	800a732 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800a726:	4b0a      	ldr	r3, [pc, #40]	; (800a750 <HAL_Delay+0x44>)
 800a728:	781b      	ldrb	r3, [r3, #0]
 800a72a:	461a      	mov	r2, r3
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	4413      	add	r3, r2
 800a730:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800a732:	bf00      	nop
 800a734:	f7ff ffde 	bl	800a6f4 <HAL_GetTick>
 800a738:	4602      	mov	r2, r0
 800a73a:	68bb      	ldr	r3, [r7, #8]
 800a73c:	1ad3      	subs	r3, r2, r3
 800a73e:	68fa      	ldr	r2, [r7, #12]
 800a740:	429a      	cmp	r2, r3
 800a742:	d8f7      	bhi.n	800a734 <HAL_Delay+0x28>
  {
  }
}
 800a744:	bf00      	nop
 800a746:	bf00      	nop
 800a748:	3710      	adds	r7, #16
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}
 800a74e:	bf00      	nop
 800a750:	2000005c 	.word	0x2000005c

0800a754 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b084      	sub	sp, #16
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a75c:	2300      	movs	r3, #0
 800a75e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d101      	bne.n	800a76a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800a766:	2301      	movs	r3, #1
 800a768:	e033      	b.n	800a7d2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d109      	bne.n	800a786 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f7ff fc0e 	bl	8009f94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2200      	movs	r2, #0
 800a77c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2200      	movs	r2, #0
 800a782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a78a:	f003 0310 	and.w	r3, r3, #16
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d118      	bne.n	800a7c4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a796:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800a79a:	f023 0302 	bic.w	r3, r3, #2
 800a79e:	f043 0202 	orr.w	r2, r3, #2
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800a7a6:	6878      	ldr	r0, [r7, #4]
 800a7a8:	f000 fb88 	bl	800aebc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7b6:	f023 0303 	bic.w	r3, r3, #3
 800a7ba:	f043 0201 	orr.w	r2, r3, #1
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	641a      	str	r2, [r3, #64]	; 0x40
 800a7c2:	e001      	b.n	800a7c8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800a7c4:	2301      	movs	r3, #1
 800a7c6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800a7d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	3710      	adds	r7, #16
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}

0800a7da <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800a7da:	b580      	push	{r7, lr}
 800a7dc:	b086      	sub	sp, #24
 800a7de:	af00      	add	r7, sp, #0
 800a7e0:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	617b      	str	r3, [r7, #20]
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	685b      	ldr	r3, [r3, #4]
 800a7f8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	f003 0302 	and.w	r3, r3, #2
 800a800:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800a802:	68bb      	ldr	r3, [r7, #8]
 800a804:	f003 0320 	and.w	r3, r3, #32
 800a808:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800a80a:	697b      	ldr	r3, [r7, #20]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d049      	beq.n	800a8a4 <HAL_ADC_IRQHandler+0xca>
 800a810:	693b      	ldr	r3, [r7, #16]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d046      	beq.n	800a8a4 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a81a:	f003 0310 	and.w	r3, r3, #16
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d105      	bne.n	800a82e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a826:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	689b      	ldr	r3, [r3, #8]
 800a834:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d12b      	bne.n	800a894 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a840:	2b00      	cmp	r3, #0
 800a842:	d127      	bne.n	800a894 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a84a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d006      	beq.n	800a860 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	689b      	ldr	r3, [r3, #8]
 800a858:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d119      	bne.n	800a894 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	685a      	ldr	r2, [r3, #4]
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	f022 0220 	bic.w	r2, r2, #32
 800a86e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a874:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a880:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a884:	2b00      	cmp	r3, #0
 800a886:	d105      	bne.n	800a894 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a88c:	f043 0201 	orr.w	r2, r3, #1
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	f7ff f8f5 	bl	8009a84 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	f06f 0212 	mvn.w	r2, #18
 800a8a2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	f003 0304 	and.w	r3, r3, #4
 800a8aa:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800a8ac:	68bb      	ldr	r3, [r7, #8]
 800a8ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8b2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800a8b4:	697b      	ldr	r3, [r7, #20]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d057      	beq.n	800a96a <HAL_ADC_IRQHandler+0x190>
 800a8ba:	693b      	ldr	r3, [r7, #16]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d054      	beq.n	800a96a <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8c4:	f003 0310 	and.w	r3, r3, #16
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d105      	bne.n	800a8d8 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8d0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	689b      	ldr	r3, [r3, #8]
 800a8de:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d139      	bne.n	800a95a <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8ec:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d006      	beq.n	800a902 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	689b      	ldr	r3, [r3, #8]
 800a8fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d12b      	bne.n	800a95a <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	685b      	ldr	r3, [r3, #4]
 800a908:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d124      	bne.n	800a95a <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	689b      	ldr	r3, [r3, #8]
 800a916:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d11d      	bne.n	800a95a <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800a922:	2b00      	cmp	r3, #0
 800a924:	d119      	bne.n	800a95a <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	685a      	ldr	r2, [r3, #4]
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a934:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a93a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d105      	bne.n	800a95a <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a952:	f043 0201 	orr.w	r2, r3, #1
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	f000 fc2c 	bl	800b1b8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	f06f 020c 	mvn.w	r2, #12
 800a968:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	f003 0301 	and.w	r3, r3, #1
 800a970:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800a972:	68bb      	ldr	r3, [r7, #8]
 800a974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a978:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800a97a:	697b      	ldr	r3, [r7, #20]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d017      	beq.n	800a9b0 <HAL_ADC_IRQHandler+0x1d6>
 800a980:	693b      	ldr	r3, [r7, #16]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d014      	beq.n	800a9b0 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f003 0301 	and.w	r3, r3, #1
 800a990:	2b01      	cmp	r3, #1
 800a992:	d10d      	bne.n	800a9b0 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a998:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	f000 f945 	bl	800ac30 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	f06f 0201 	mvn.w	r2, #1
 800a9ae:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	f003 0320 	and.w	r3, r3, #32
 800a9b6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a9be:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800a9c0:	697b      	ldr	r3, [r7, #20]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d015      	beq.n	800a9f2 <HAL_ADC_IRQHandler+0x218>
 800a9c6:	693b      	ldr	r3, [r7, #16]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d012      	beq.n	800a9f2 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9d0:	f043 0202 	orr.w	r2, r3, #2
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	f06f 0220 	mvn.w	r2, #32
 800a9e0:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	f000 f92e 	bl	800ac44 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	f06f 0220 	mvn.w	r2, #32
 800a9f0:	601a      	str	r2, [r3, #0]
  }
}
 800a9f2:	bf00      	nop
 800a9f4:	3718      	adds	r7, #24
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	bd80      	pop	{r7, pc}
	...

0800a9fc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b086      	sub	sp, #24
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	60f8      	str	r0, [r7, #12]
 800aa04:	60b9      	str	r1, [r7, #8]
 800aa06:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800aa08:	2300      	movs	r3, #0
 800aa0a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa12:	2b01      	cmp	r3, #1
 800aa14:	d101      	bne.n	800aa1a <HAL_ADC_Start_DMA+0x1e>
 800aa16:	2302      	movs	r3, #2
 800aa18:	e0e9      	b.n	800abee <HAL_ADC_Start_DMA+0x1f2>
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	2201      	movs	r2, #1
 800aa1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	689b      	ldr	r3, [r3, #8]
 800aa28:	f003 0301 	and.w	r3, r3, #1
 800aa2c:	2b01      	cmp	r3, #1
 800aa2e:	d018      	beq.n	800aa62 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	689a      	ldr	r2, [r3, #8]
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f042 0201 	orr.w	r2, r2, #1
 800aa3e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800aa40:	4b6d      	ldr	r3, [pc, #436]	; (800abf8 <HAL_ADC_Start_DMA+0x1fc>)
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	4a6d      	ldr	r2, [pc, #436]	; (800abfc <HAL_ADC_Start_DMA+0x200>)
 800aa46:	fba2 2303 	umull	r2, r3, r2, r3
 800aa4a:	0c9a      	lsrs	r2, r3, #18
 800aa4c:	4613      	mov	r3, r2
 800aa4e:	005b      	lsls	r3, r3, #1
 800aa50:	4413      	add	r3, r2
 800aa52:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800aa54:	e002      	b.n	800aa5c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800aa56:	693b      	ldr	r3, [r7, #16]
 800aa58:	3b01      	subs	r3, #1
 800aa5a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800aa5c:	693b      	ldr	r3, [r7, #16]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d1f9      	bne.n	800aa56 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	689b      	ldr	r3, [r3, #8]
 800aa68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa70:	d107      	bne.n	800aa82 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	689a      	ldr	r2, [r3, #8]
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800aa80:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	689b      	ldr	r3, [r3, #8]
 800aa88:	f003 0301 	and.w	r3, r3, #1
 800aa8c:	2b01      	cmp	r3, #1
 800aa8e:	f040 80a1 	bne.w	800abd4 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa96:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800aa9a:	f023 0301 	bic.w	r3, r3, #1
 800aa9e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	685b      	ldr	r3, [r3, #4]
 800aaac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d007      	beq.n	800aac4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aab8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800aabc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aac8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800aacc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aad0:	d106      	bne.n	800aae0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aad6:	f023 0206 	bic.w	r2, r3, #6
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	645a      	str	r2, [r3, #68]	; 0x44
 800aade:	e002      	b.n	800aae6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	2200      	movs	r2, #0
 800aae4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	2200      	movs	r2, #0
 800aaea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800aaee:	4b44      	ldr	r3, [pc, #272]	; (800ac00 <HAL_ADC_Start_DMA+0x204>)
 800aaf0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaf6:	4a43      	ldr	r2, [pc, #268]	; (800ac04 <HAL_ADC_Start_DMA+0x208>)
 800aaf8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aafe:	4a42      	ldr	r2, [pc, #264]	; (800ac08 <HAL_ADC_Start_DMA+0x20c>)
 800ab00:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab06:	4a41      	ldr	r2, [pc, #260]	; (800ac0c <HAL_ADC_Start_DMA+0x210>)
 800ab08:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800ab12:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	685a      	ldr	r2, [r3, #4]
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800ab22:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	689a      	ldr	r2, [r3, #8]
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ab32:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	334c      	adds	r3, #76	; 0x4c
 800ab3e:	4619      	mov	r1, r3
 800ab40:	68ba      	ldr	r2, [r7, #8]
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	f001 fbd2 	bl	800c2ec <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800ab48:	697b      	ldr	r3, [r7, #20]
 800ab4a:	685b      	ldr	r3, [r3, #4]
 800ab4c:	f003 031f 	and.w	r3, r3, #31
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d12a      	bne.n	800abaa <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	4a2d      	ldr	r2, [pc, #180]	; (800ac10 <HAL_ADC_Start_DMA+0x214>)
 800ab5a:	4293      	cmp	r3, r2
 800ab5c:	d015      	beq.n	800ab8a <HAL_ADC_Start_DMA+0x18e>
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	4a2c      	ldr	r2, [pc, #176]	; (800ac14 <HAL_ADC_Start_DMA+0x218>)
 800ab64:	4293      	cmp	r3, r2
 800ab66:	d105      	bne.n	800ab74 <HAL_ADC_Start_DMA+0x178>
 800ab68:	4b25      	ldr	r3, [pc, #148]	; (800ac00 <HAL_ADC_Start_DMA+0x204>)
 800ab6a:	685b      	ldr	r3, [r3, #4]
 800ab6c:	f003 031f 	and.w	r3, r3, #31
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d00a      	beq.n	800ab8a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	4a27      	ldr	r2, [pc, #156]	; (800ac18 <HAL_ADC_Start_DMA+0x21c>)
 800ab7a:	4293      	cmp	r3, r2
 800ab7c:	d136      	bne.n	800abec <HAL_ADC_Start_DMA+0x1f0>
 800ab7e:	4b20      	ldr	r3, [pc, #128]	; (800ac00 <HAL_ADC_Start_DMA+0x204>)
 800ab80:	685b      	ldr	r3, [r3, #4]
 800ab82:	f003 0310 	and.w	r3, r3, #16
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d130      	bne.n	800abec <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	689b      	ldr	r3, [r3, #8]
 800ab90:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d129      	bne.n	800abec <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	689a      	ldr	r2, [r3, #8]
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800aba6:	609a      	str	r2, [r3, #8]
 800aba8:	e020      	b.n	800abec <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	4a18      	ldr	r2, [pc, #96]	; (800ac10 <HAL_ADC_Start_DMA+0x214>)
 800abb0:	4293      	cmp	r3, r2
 800abb2:	d11b      	bne.n	800abec <HAL_ADC_Start_DMA+0x1f0>
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	689b      	ldr	r3, [r3, #8]
 800abba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d114      	bne.n	800abec <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	689a      	ldr	r2, [r3, #8]
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800abd0:	609a      	str	r2, [r3, #8]
 800abd2:	e00b      	b.n	800abec <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abd8:	f043 0210 	orr.w	r2, r3, #16
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abe4:	f043 0201 	orr.w	r2, r3, #1
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800abec:	2300      	movs	r3, #0
}
 800abee:	4618      	mov	r0, r3
 800abf0:	3718      	adds	r7, #24
 800abf2:	46bd      	mov	sp, r7
 800abf4:	bd80      	pop	{r7, pc}
 800abf6:	bf00      	nop
 800abf8:	20000054 	.word	0x20000054
 800abfc:	431bde83 	.word	0x431bde83
 800ac00:	40012300 	.word	0x40012300
 800ac04:	0800b0b5 	.word	0x0800b0b5
 800ac08:	0800b16f 	.word	0x0800b16f
 800ac0c:	0800b18b 	.word	0x0800b18b
 800ac10:	40012000 	.word	0x40012000
 800ac14:	40012100 	.word	0x40012100
 800ac18:	40012200 	.word	0x40012200

0800ac1c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800ac1c:	b480      	push	{r7}
 800ac1e:	b083      	sub	sp, #12
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800ac24:	bf00      	nop
 800ac26:	370c      	adds	r7, #12
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2e:	4770      	bx	lr

0800ac30 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800ac30:	b480      	push	{r7}
 800ac32:	b083      	sub	sp, #12
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800ac38:	bf00      	nop
 800ac3a:	370c      	adds	r7, #12
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac42:	4770      	bx	lr

0800ac44 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800ac44:	b480      	push	{r7}
 800ac46:	b083      	sub	sp, #12
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800ac4c:	bf00      	nop
 800ac4e:	370c      	adds	r7, #12
 800ac50:	46bd      	mov	sp, r7
 800ac52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac56:	4770      	bx	lr

0800ac58 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800ac58:	b480      	push	{r7}
 800ac5a:	b085      	sub	sp, #20
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
 800ac60:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800ac62:	2300      	movs	r3, #0
 800ac64:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac6c:	2b01      	cmp	r3, #1
 800ac6e:	d101      	bne.n	800ac74 <HAL_ADC_ConfigChannel+0x1c>
 800ac70:	2302      	movs	r3, #2
 800ac72:	e113      	b.n	800ae9c <HAL_ADC_ConfigChannel+0x244>
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2201      	movs	r2, #1
 800ac78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	2b09      	cmp	r3, #9
 800ac82:	d925      	bls.n	800acd0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	68d9      	ldr	r1, [r3, #12]
 800ac8a:	683b      	ldr	r3, [r7, #0]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	b29b      	uxth	r3, r3
 800ac90:	461a      	mov	r2, r3
 800ac92:	4613      	mov	r3, r2
 800ac94:	005b      	lsls	r3, r3, #1
 800ac96:	4413      	add	r3, r2
 800ac98:	3b1e      	subs	r3, #30
 800ac9a:	2207      	movs	r2, #7
 800ac9c:	fa02 f303 	lsl.w	r3, r2, r3
 800aca0:	43da      	mvns	r2, r3
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	400a      	ands	r2, r1
 800aca8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	68d9      	ldr	r1, [r3, #12]
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	689a      	ldr	r2, [r3, #8]
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	b29b      	uxth	r3, r3
 800acba:	4618      	mov	r0, r3
 800acbc:	4603      	mov	r3, r0
 800acbe:	005b      	lsls	r3, r3, #1
 800acc0:	4403      	add	r3, r0
 800acc2:	3b1e      	subs	r3, #30
 800acc4:	409a      	lsls	r2, r3
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	430a      	orrs	r2, r1
 800accc:	60da      	str	r2, [r3, #12]
 800acce:	e022      	b.n	800ad16 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	6919      	ldr	r1, [r3, #16]
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	b29b      	uxth	r3, r3
 800acdc:	461a      	mov	r2, r3
 800acde:	4613      	mov	r3, r2
 800ace0:	005b      	lsls	r3, r3, #1
 800ace2:	4413      	add	r3, r2
 800ace4:	2207      	movs	r2, #7
 800ace6:	fa02 f303 	lsl.w	r3, r2, r3
 800acea:	43da      	mvns	r2, r3
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	400a      	ands	r2, r1
 800acf2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	6919      	ldr	r1, [r3, #16]
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	689a      	ldr	r2, [r3, #8]
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	b29b      	uxth	r3, r3
 800ad04:	4618      	mov	r0, r3
 800ad06:	4603      	mov	r3, r0
 800ad08:	005b      	lsls	r3, r3, #1
 800ad0a:	4403      	add	r3, r0
 800ad0c:	409a      	lsls	r2, r3
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	430a      	orrs	r2, r1
 800ad14:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	685b      	ldr	r3, [r3, #4]
 800ad1a:	2b06      	cmp	r3, #6
 800ad1c:	d824      	bhi.n	800ad68 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	685a      	ldr	r2, [r3, #4]
 800ad28:	4613      	mov	r3, r2
 800ad2a:	009b      	lsls	r3, r3, #2
 800ad2c:	4413      	add	r3, r2
 800ad2e:	3b05      	subs	r3, #5
 800ad30:	221f      	movs	r2, #31
 800ad32:	fa02 f303 	lsl.w	r3, r2, r3
 800ad36:	43da      	mvns	r2, r3
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	400a      	ands	r2, r1
 800ad3e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	b29b      	uxth	r3, r3
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	685a      	ldr	r2, [r3, #4]
 800ad52:	4613      	mov	r3, r2
 800ad54:	009b      	lsls	r3, r3, #2
 800ad56:	4413      	add	r3, r2
 800ad58:	3b05      	subs	r3, #5
 800ad5a:	fa00 f203 	lsl.w	r2, r0, r3
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	430a      	orrs	r2, r1
 800ad64:	635a      	str	r2, [r3, #52]	; 0x34
 800ad66:	e04c      	b.n	800ae02 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	685b      	ldr	r3, [r3, #4]
 800ad6c:	2b0c      	cmp	r3, #12
 800ad6e:	d824      	bhi.n	800adba <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	685a      	ldr	r2, [r3, #4]
 800ad7a:	4613      	mov	r3, r2
 800ad7c:	009b      	lsls	r3, r3, #2
 800ad7e:	4413      	add	r3, r2
 800ad80:	3b23      	subs	r3, #35	; 0x23
 800ad82:	221f      	movs	r2, #31
 800ad84:	fa02 f303 	lsl.w	r3, r2, r3
 800ad88:	43da      	mvns	r2, r3
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	400a      	ands	r2, r1
 800ad90:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	b29b      	uxth	r3, r3
 800ad9e:	4618      	mov	r0, r3
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	685a      	ldr	r2, [r3, #4]
 800ada4:	4613      	mov	r3, r2
 800ada6:	009b      	lsls	r3, r3, #2
 800ada8:	4413      	add	r3, r2
 800adaa:	3b23      	subs	r3, #35	; 0x23
 800adac:	fa00 f203 	lsl.w	r2, r0, r3
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	430a      	orrs	r2, r1
 800adb6:	631a      	str	r2, [r3, #48]	; 0x30
 800adb8:	e023      	b.n	800ae02 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	685a      	ldr	r2, [r3, #4]
 800adc4:	4613      	mov	r3, r2
 800adc6:	009b      	lsls	r3, r3, #2
 800adc8:	4413      	add	r3, r2
 800adca:	3b41      	subs	r3, #65	; 0x41
 800adcc:	221f      	movs	r2, #31
 800adce:	fa02 f303 	lsl.w	r3, r2, r3
 800add2:	43da      	mvns	r2, r3
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	400a      	ands	r2, r1
 800adda:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800ade2:	683b      	ldr	r3, [r7, #0]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	b29b      	uxth	r3, r3
 800ade8:	4618      	mov	r0, r3
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	685a      	ldr	r2, [r3, #4]
 800adee:	4613      	mov	r3, r2
 800adf0:	009b      	lsls	r3, r3, #2
 800adf2:	4413      	add	r3, r2
 800adf4:	3b41      	subs	r3, #65	; 0x41
 800adf6:	fa00 f203 	lsl.w	r2, r0, r3
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	430a      	orrs	r2, r1
 800ae00:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800ae02:	4b29      	ldr	r3, [pc, #164]	; (800aea8 <HAL_ADC_ConfigChannel+0x250>)
 800ae04:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	4a28      	ldr	r2, [pc, #160]	; (800aeac <HAL_ADC_ConfigChannel+0x254>)
 800ae0c:	4293      	cmp	r3, r2
 800ae0e:	d10f      	bne.n	800ae30 <HAL_ADC_ConfigChannel+0x1d8>
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	2b12      	cmp	r3, #18
 800ae16:	d10b      	bne.n	800ae30 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	685b      	ldr	r3, [r3, #4]
 800ae1c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	685b      	ldr	r3, [r3, #4]
 800ae28:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	4a1d      	ldr	r2, [pc, #116]	; (800aeac <HAL_ADC_ConfigChannel+0x254>)
 800ae36:	4293      	cmp	r3, r2
 800ae38:	d12b      	bne.n	800ae92 <HAL_ADC_ConfigChannel+0x23a>
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	4a1c      	ldr	r2, [pc, #112]	; (800aeb0 <HAL_ADC_ConfigChannel+0x258>)
 800ae40:	4293      	cmp	r3, r2
 800ae42:	d003      	beq.n	800ae4c <HAL_ADC_ConfigChannel+0x1f4>
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	2b11      	cmp	r3, #17
 800ae4a:	d122      	bne.n	800ae92 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	685b      	ldr	r3, [r3, #4]
 800ae50:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	685b      	ldr	r3, [r3, #4]
 800ae5c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	4a11      	ldr	r2, [pc, #68]	; (800aeb0 <HAL_ADC_ConfigChannel+0x258>)
 800ae6a:	4293      	cmp	r3, r2
 800ae6c:	d111      	bne.n	800ae92 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800ae6e:	4b11      	ldr	r3, [pc, #68]	; (800aeb4 <HAL_ADC_ConfigChannel+0x25c>)
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	4a11      	ldr	r2, [pc, #68]	; (800aeb8 <HAL_ADC_ConfigChannel+0x260>)
 800ae74:	fba2 2303 	umull	r2, r3, r2, r3
 800ae78:	0c9a      	lsrs	r2, r3, #18
 800ae7a:	4613      	mov	r3, r2
 800ae7c:	009b      	lsls	r3, r3, #2
 800ae7e:	4413      	add	r3, r2
 800ae80:	005b      	lsls	r3, r3, #1
 800ae82:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800ae84:	e002      	b.n	800ae8c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800ae86:	68bb      	ldr	r3, [r7, #8]
 800ae88:	3b01      	subs	r3, #1
 800ae8a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800ae8c:	68bb      	ldr	r3, [r7, #8]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d1f9      	bne.n	800ae86 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2200      	movs	r2, #0
 800ae96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800ae9a:	2300      	movs	r3, #0
}
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	3714      	adds	r7, #20
 800aea0:	46bd      	mov	sp, r7
 800aea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea6:	4770      	bx	lr
 800aea8:	40012300 	.word	0x40012300
 800aeac:	40012000 	.word	0x40012000
 800aeb0:	10000012 	.word	0x10000012
 800aeb4:	20000054 	.word	0x20000054
 800aeb8:	431bde83 	.word	0x431bde83

0800aebc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800aebc:	b480      	push	{r7}
 800aebe:	b085      	sub	sp, #20
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800aec4:	4b79      	ldr	r3, [pc, #484]	; (800b0ac <ADC_Init+0x1f0>)
 800aec6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	685b      	ldr	r3, [r3, #4]
 800aecc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	685a      	ldr	r2, [r3, #4]
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	685b      	ldr	r3, [r3, #4]
 800aedc:	431a      	orrs	r2, r3
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	685a      	ldr	r2, [r3, #4]
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800aef0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	6859      	ldr	r1, [r3, #4]
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	691b      	ldr	r3, [r3, #16]
 800aefc:	021a      	lsls	r2, r3, #8
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	430a      	orrs	r2, r1
 800af04:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	685a      	ldr	r2, [r3, #4]
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800af14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	6859      	ldr	r1, [r3, #4]
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	689a      	ldr	r2, [r3, #8]
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	430a      	orrs	r2, r1
 800af26:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	689a      	ldr	r2, [r3, #8]
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800af36:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	6899      	ldr	r1, [r3, #8]
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	68da      	ldr	r2, [r3, #12]
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	430a      	orrs	r2, r1
 800af48:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af4e:	4a58      	ldr	r2, [pc, #352]	; (800b0b0 <ADC_Init+0x1f4>)
 800af50:	4293      	cmp	r3, r2
 800af52:	d022      	beq.n	800af9a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	689a      	ldr	r2, [r3, #8]
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800af62:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	6899      	ldr	r1, [r3, #8]
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	430a      	orrs	r2, r1
 800af74:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	689a      	ldr	r2, [r3, #8]
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800af84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	6899      	ldr	r1, [r3, #8]
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	430a      	orrs	r2, r1
 800af96:	609a      	str	r2, [r3, #8]
 800af98:	e00f      	b.n	800afba <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	689a      	ldr	r2, [r3, #8]
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800afa8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	689a      	ldr	r2, [r3, #8]
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800afb8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	689a      	ldr	r2, [r3, #8]
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	f022 0202 	bic.w	r2, r2, #2
 800afc8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	6899      	ldr	r1, [r3, #8]
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	7e1b      	ldrb	r3, [r3, #24]
 800afd4:	005a      	lsls	r2, r3, #1
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	430a      	orrs	r2, r1
 800afdc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d01b      	beq.n	800b020 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	685a      	ldr	r2, [r3, #4]
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aff6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	685a      	ldr	r2, [r3, #4]
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800b006:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	6859      	ldr	r1, [r3, #4]
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b012:	3b01      	subs	r3, #1
 800b014:	035a      	lsls	r2, r3, #13
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	430a      	orrs	r2, r1
 800b01c:	605a      	str	r2, [r3, #4]
 800b01e:	e007      	b.n	800b030 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	685a      	ldr	r2, [r3, #4]
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b02e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800b03e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	69db      	ldr	r3, [r3, #28]
 800b04a:	3b01      	subs	r3, #1
 800b04c:	051a      	lsls	r2, r3, #20
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	430a      	orrs	r2, r1
 800b054:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	689a      	ldr	r2, [r3, #8]
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800b064:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	6899      	ldr	r1, [r3, #8]
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b072:	025a      	lsls	r2, r3, #9
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	430a      	orrs	r2, r1
 800b07a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	689a      	ldr	r2, [r3, #8]
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b08a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	6899      	ldr	r1, [r3, #8]
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	695b      	ldr	r3, [r3, #20]
 800b096:	029a      	lsls	r2, r3, #10
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	430a      	orrs	r2, r1
 800b09e:	609a      	str	r2, [r3, #8]
}
 800b0a0:	bf00      	nop
 800b0a2:	3714      	adds	r7, #20
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0aa:	4770      	bx	lr
 800b0ac:	40012300 	.word	0x40012300
 800b0b0:	0f000001 	.word	0x0f000001

0800b0b4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b084      	sub	sp, #16
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0c0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0c6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d13c      	bne.n	800b148 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0d2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	689b      	ldr	r3, [r3, #8]
 800b0e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d12b      	bne.n	800b140 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d127      	bne.n	800b140 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0f6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d006      	beq.n	800b10c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	689b      	ldr	r3, [r3, #8]
 800b104:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d119      	bne.n	800b140 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	685a      	ldr	r2, [r3, #4]
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	f022 0220 	bic.w	r2, r2, #32
 800b11a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b120:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b12c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b130:	2b00      	cmp	r3, #0
 800b132:	d105      	bne.n	800b140 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b138:	f043 0201 	orr.w	r2, r3, #1
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800b140:	68f8      	ldr	r0, [r7, #12]
 800b142:	f7fe fc9f 	bl	8009a84 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800b146:	e00e      	b.n	800b166 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b14c:	f003 0310 	and.w	r3, r3, #16
 800b150:	2b00      	cmp	r3, #0
 800b152:	d003      	beq.n	800b15c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800b154:	68f8      	ldr	r0, [r7, #12]
 800b156:	f7ff fd75 	bl	800ac44 <HAL_ADC_ErrorCallback>
}
 800b15a:	e004      	b.n	800b166 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b162:	6878      	ldr	r0, [r7, #4]
 800b164:	4798      	blx	r3
}
 800b166:	bf00      	nop
 800b168:	3710      	adds	r7, #16
 800b16a:	46bd      	mov	sp, r7
 800b16c:	bd80      	pop	{r7, pc}

0800b16e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800b16e:	b580      	push	{r7, lr}
 800b170:	b084      	sub	sp, #16
 800b172:	af00      	add	r7, sp, #0
 800b174:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b17a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800b17c:	68f8      	ldr	r0, [r7, #12]
 800b17e:	f7ff fd4d 	bl	800ac1c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800b182:	bf00      	nop
 800b184:	3710      	adds	r7, #16
 800b186:	46bd      	mov	sp, r7
 800b188:	bd80      	pop	{r7, pc}

0800b18a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800b18a:	b580      	push	{r7, lr}
 800b18c:	b084      	sub	sp, #16
 800b18e:	af00      	add	r7, sp, #0
 800b190:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b196:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	2240      	movs	r2, #64	; 0x40
 800b19c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1a2:	f043 0204 	orr.w	r2, r3, #4
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800b1aa:	68f8      	ldr	r0, [r7, #12]
 800b1ac:	f7ff fd4a 	bl	800ac44 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800b1b0:	bf00      	nop
 800b1b2:	3710      	adds	r7, #16
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	bd80      	pop	{r7, pc}

0800b1b8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800b1b8:	b480      	push	{r7}
 800b1ba:	b083      	sub	sp, #12
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800b1c0:	bf00      	nop
 800b1c2:	370c      	adds	r7, #12
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ca:	4770      	bx	lr

0800b1cc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b084      	sub	sp, #16
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d101      	bne.n	800b1de <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800b1da:	2301      	movs	r3, #1
 800b1dc:	e0ed      	b.n	800b3ba <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b1e4:	b2db      	uxtb	r3, r3
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d102      	bne.n	800b1f0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800b1ea:	6878      	ldr	r0, [r7, #4]
 800b1ec:	f7fe ff52 	bl	800a094 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	681a      	ldr	r2, [r3, #0]
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	f042 0201 	orr.w	r2, r2, #1
 800b1fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b200:	f7ff fa78 	bl	800a6f4 <HAL_GetTick>
 800b204:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800b206:	e012      	b.n	800b22e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800b208:	f7ff fa74 	bl	800a6f4 <HAL_GetTick>
 800b20c:	4602      	mov	r2, r0
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	1ad3      	subs	r3, r2, r3
 800b212:	2b0a      	cmp	r3, #10
 800b214:	d90b      	bls.n	800b22e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b21a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	2205      	movs	r2, #5
 800b226:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800b22a:	2301      	movs	r3, #1
 800b22c:	e0c5      	b.n	800b3ba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	685b      	ldr	r3, [r3, #4]
 800b234:	f003 0301 	and.w	r3, r3, #1
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d0e5      	beq.n	800b208 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	681a      	ldr	r2, [r3, #0]
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	f022 0202 	bic.w	r2, r2, #2
 800b24a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b24c:	f7ff fa52 	bl	800a6f4 <HAL_GetTick>
 800b250:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800b252:	e012      	b.n	800b27a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800b254:	f7ff fa4e 	bl	800a6f4 <HAL_GetTick>
 800b258:	4602      	mov	r2, r0
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	1ad3      	subs	r3, r2, r3
 800b25e:	2b0a      	cmp	r3, #10
 800b260:	d90b      	bls.n	800b27a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b266:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	2205      	movs	r2, #5
 800b272:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800b276:	2301      	movs	r3, #1
 800b278:	e09f      	b.n	800b3ba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	685b      	ldr	r3, [r3, #4]
 800b280:	f003 0302 	and.w	r3, r3, #2
 800b284:	2b00      	cmp	r3, #0
 800b286:	d1e5      	bne.n	800b254 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	7e1b      	ldrb	r3, [r3, #24]
 800b28c:	2b01      	cmp	r3, #1
 800b28e:	d108      	bne.n	800b2a2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	681a      	ldr	r2, [r3, #0]
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b29e:	601a      	str	r2, [r3, #0]
 800b2a0:	e007      	b.n	800b2b2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	681a      	ldr	r2, [r3, #0]
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b2b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	7e5b      	ldrb	r3, [r3, #25]
 800b2b6:	2b01      	cmp	r3, #1
 800b2b8:	d108      	bne.n	800b2cc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	681a      	ldr	r2, [r3, #0]
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b2c8:	601a      	str	r2, [r3, #0]
 800b2ca:	e007      	b.n	800b2dc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	681a      	ldr	r2, [r3, #0]
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b2da:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	7e9b      	ldrb	r3, [r3, #26]
 800b2e0:	2b01      	cmp	r3, #1
 800b2e2:	d108      	bne.n	800b2f6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	681a      	ldr	r2, [r3, #0]
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	f042 0220 	orr.w	r2, r2, #32
 800b2f2:	601a      	str	r2, [r3, #0]
 800b2f4:	e007      	b.n	800b306 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	681a      	ldr	r2, [r3, #0]
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	f022 0220 	bic.w	r2, r2, #32
 800b304:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	7edb      	ldrb	r3, [r3, #27]
 800b30a:	2b01      	cmp	r3, #1
 800b30c:	d108      	bne.n	800b320 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	681a      	ldr	r2, [r3, #0]
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	f022 0210 	bic.w	r2, r2, #16
 800b31c:	601a      	str	r2, [r3, #0]
 800b31e:	e007      	b.n	800b330 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	681a      	ldr	r2, [r3, #0]
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	f042 0210 	orr.w	r2, r2, #16
 800b32e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	7f1b      	ldrb	r3, [r3, #28]
 800b334:	2b01      	cmp	r3, #1
 800b336:	d108      	bne.n	800b34a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	681a      	ldr	r2, [r3, #0]
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	f042 0208 	orr.w	r2, r2, #8
 800b346:	601a      	str	r2, [r3, #0]
 800b348:	e007      	b.n	800b35a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	681a      	ldr	r2, [r3, #0]
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	f022 0208 	bic.w	r2, r2, #8
 800b358:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	7f5b      	ldrb	r3, [r3, #29]
 800b35e:	2b01      	cmp	r3, #1
 800b360:	d108      	bne.n	800b374 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	681a      	ldr	r2, [r3, #0]
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	f042 0204 	orr.w	r2, r2, #4
 800b370:	601a      	str	r2, [r3, #0]
 800b372:	e007      	b.n	800b384 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	681a      	ldr	r2, [r3, #0]
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	f022 0204 	bic.w	r2, r2, #4
 800b382:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	689a      	ldr	r2, [r3, #8]
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	68db      	ldr	r3, [r3, #12]
 800b38c:	431a      	orrs	r2, r3
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	691b      	ldr	r3, [r3, #16]
 800b392:	431a      	orrs	r2, r3
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	695b      	ldr	r3, [r3, #20]
 800b398:	ea42 0103 	orr.w	r1, r2, r3
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	685b      	ldr	r3, [r3, #4]
 800b3a0:	1e5a      	subs	r2, r3, #1
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	430a      	orrs	r2, r1
 800b3a8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2201      	movs	r2, #1
 800b3b4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800b3b8:	2300      	movs	r3, #0
}
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	3710      	adds	r7, #16
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bd80      	pop	{r7, pc}

0800b3c2 <HAL_CAN_DeInit>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeInit(CAN_HandleTypeDef *hcan)
{
 800b3c2:	b580      	push	{r7, lr}
 800b3c4:	b082      	sub	sp, #8
 800b3c6:	af00      	add	r7, sp, #0
 800b3c8:	6078      	str	r0, [r7, #4]
  /* Check CAN handle */
  if (hcan == NULL)
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d101      	bne.n	800b3d4 <HAL_CAN_DeInit+0x12>
  {
    return HAL_ERROR;
 800b3d0:	2301      	movs	r3, #1
 800b3d2:	e015      	b.n	800b400 <HAL_CAN_DeInit+0x3e>

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));

  /* Stop the CAN module */
  (void)HAL_CAN_Stop(hcan);
 800b3d4:	6878      	ldr	r0, [r7, #4]
 800b3d6:	f000 f93b 	bl	800b650 <HAL_CAN_Stop>
  /* DeInit the low level hardware: CLOCK, NVIC */
  hcan->MspDeInitCallback(hcan);

#else
  /* DeInit the low level hardware: CLOCK, NVIC */
  HAL_CAN_MspDeInit(hcan);
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	f7fe feb2 	bl	800a144 <HAL_CAN_MspDeInit>
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Reset the CAN peripheral */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_RESET);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	681a      	ldr	r2, [r3, #0]
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b3ee:	601a      	str	r2, [r3, #0]

  /* Reset the CAN ErrorCode */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change CAN state */
  hcan->State = HAL_CAN_STATE_RESET;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800b3fe:	2300      	movs	r3, #0
}
 800b400:	4618      	mov	r0, r3
 800b402:	3708      	adds	r7, #8
 800b404:	46bd      	mov	sp, r7
 800b406:	bd80      	pop	{r7, pc}

0800b408 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800b408:	b480      	push	{r7}
 800b40a:	b087      	sub	sp, #28
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
 800b410:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b41e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800b420:	7cfb      	ldrb	r3, [r7, #19]
 800b422:	2b01      	cmp	r3, #1
 800b424:	d003      	beq.n	800b42e <HAL_CAN_ConfigFilter+0x26>
 800b426:	7cfb      	ldrb	r3, [r7, #19]
 800b428:	2b02      	cmp	r3, #2
 800b42a:	f040 80be 	bne.w	800b5aa <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800b42e:	4b65      	ldr	r3, [pc, #404]	; (800b5c4 <HAL_CAN_ConfigFilter+0x1bc>)
 800b430:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800b432:	697b      	ldr	r3, [r7, #20]
 800b434:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b438:	f043 0201 	orr.w	r2, r3, #1
 800b43c:	697b      	ldr	r3, [r7, #20]
 800b43e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800b442:	697b      	ldr	r3, [r7, #20]
 800b444:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b448:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800b44c:	697b      	ldr	r3, [r7, #20]
 800b44e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800b452:	697b      	ldr	r3, [r7, #20]
 800b454:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b45c:	021b      	lsls	r3, r3, #8
 800b45e:	431a      	orrs	r2, r3
 800b460:	697b      	ldr	r3, [r7, #20]
 800b462:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	695b      	ldr	r3, [r3, #20]
 800b46a:	f003 031f 	and.w	r3, r3, #31
 800b46e:	2201      	movs	r2, #1
 800b470:	fa02 f303 	lsl.w	r3, r2, r3
 800b474:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800b476:	697b      	ldr	r3, [r7, #20]
 800b478:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	43db      	mvns	r3, r3
 800b480:	401a      	ands	r2, r3
 800b482:	697b      	ldr	r3, [r7, #20]
 800b484:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	69db      	ldr	r3, [r3, #28]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d123      	bne.n	800b4d8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800b490:	697b      	ldr	r3, [r7, #20]
 800b492:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	43db      	mvns	r3, r3
 800b49a:	401a      	ands	r2, r3
 800b49c:	697b      	ldr	r3, [r7, #20]
 800b49e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	68db      	ldr	r3, [r3, #12]
 800b4a6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	685b      	ldr	r3, [r3, #4]
 800b4ac:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800b4ae:	683a      	ldr	r2, [r7, #0]
 800b4b0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800b4b2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800b4b4:	697b      	ldr	r3, [r7, #20]
 800b4b6:	3248      	adds	r2, #72	; 0x48
 800b4b8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800b4bc:	683b      	ldr	r3, [r7, #0]
 800b4be:	689b      	ldr	r3, [r3, #8]
 800b4c0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800b4cc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800b4ce:	6979      	ldr	r1, [r7, #20]
 800b4d0:	3348      	adds	r3, #72	; 0x48
 800b4d2:	00db      	lsls	r3, r3, #3
 800b4d4:	440b      	add	r3, r1
 800b4d6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	69db      	ldr	r3, [r3, #28]
 800b4dc:	2b01      	cmp	r3, #1
 800b4de:	d122      	bne.n	800b526 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800b4e0:	697b      	ldr	r3, [r7, #20]
 800b4e2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	431a      	orrs	r2, r3
 800b4ea:	697b      	ldr	r3, [r7, #20]
 800b4ec:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	685b      	ldr	r3, [r3, #4]
 800b4fa:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800b4fc:	683a      	ldr	r2, [r7, #0]
 800b4fe:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800b500:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800b502:	697b      	ldr	r3, [r7, #20]
 800b504:	3248      	adds	r2, #72	; 0x48
 800b506:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	689b      	ldr	r3, [r3, #8]
 800b50e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800b510:	683b      	ldr	r3, [r7, #0]
 800b512:	68db      	ldr	r3, [r3, #12]
 800b514:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800b51a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800b51c:	6979      	ldr	r1, [r7, #20]
 800b51e:	3348      	adds	r3, #72	; 0x48
 800b520:	00db      	lsls	r3, r3, #3
 800b522:	440b      	add	r3, r1
 800b524:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	699b      	ldr	r3, [r3, #24]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d109      	bne.n	800b542 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800b52e:	697b      	ldr	r3, [r7, #20]
 800b530:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	43db      	mvns	r3, r3
 800b538:	401a      	ands	r2, r3
 800b53a:	697b      	ldr	r3, [r7, #20]
 800b53c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800b540:	e007      	b.n	800b552 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800b542:	697b      	ldr	r3, [r7, #20]
 800b544:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	431a      	orrs	r2, r3
 800b54c:	697b      	ldr	r3, [r7, #20]
 800b54e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	691b      	ldr	r3, [r3, #16]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d109      	bne.n	800b56e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800b55a:	697b      	ldr	r3, [r7, #20]
 800b55c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	43db      	mvns	r3, r3
 800b564:	401a      	ands	r2, r3
 800b566:	697b      	ldr	r3, [r7, #20]
 800b568:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800b56c:	e007      	b.n	800b57e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800b56e:	697b      	ldr	r3, [r7, #20]
 800b570:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	431a      	orrs	r2, r3
 800b578:	697b      	ldr	r3, [r7, #20]
 800b57a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800b57e:	683b      	ldr	r3, [r7, #0]
 800b580:	6a1b      	ldr	r3, [r3, #32]
 800b582:	2b01      	cmp	r3, #1
 800b584:	d107      	bne.n	800b596 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800b586:	697b      	ldr	r3, [r7, #20]
 800b588:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	431a      	orrs	r2, r3
 800b590:	697b      	ldr	r3, [r7, #20]
 800b592:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800b596:	697b      	ldr	r3, [r7, #20]
 800b598:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b59c:	f023 0201 	bic.w	r2, r3, #1
 800b5a0:	697b      	ldr	r3, [r7, #20]
 800b5a2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	e006      	b.n	800b5b8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5ae:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800b5b6:	2301      	movs	r3, #1
  }
}
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	371c      	adds	r7, #28
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c2:	4770      	bx	lr
 800b5c4:	40006400 	.word	0x40006400

0800b5c8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b084      	sub	sp, #16
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b5d6:	b2db      	uxtb	r3, r3
 800b5d8:	2b01      	cmp	r3, #1
 800b5da:	d12e      	bne.n	800b63a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2202      	movs	r2, #2
 800b5e0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	681a      	ldr	r2, [r3, #0]
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	f022 0201 	bic.w	r2, r2, #1
 800b5f2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b5f4:	f7ff f87e 	bl	800a6f4 <HAL_GetTick>
 800b5f8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800b5fa:	e012      	b.n	800b622 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800b5fc:	f7ff f87a 	bl	800a6f4 <HAL_GetTick>
 800b600:	4602      	mov	r2, r0
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	1ad3      	subs	r3, r2, r3
 800b606:	2b0a      	cmp	r3, #10
 800b608:	d90b      	bls.n	800b622 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b60e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2205      	movs	r2, #5
 800b61a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800b61e:	2301      	movs	r3, #1
 800b620:	e012      	b.n	800b648 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	685b      	ldr	r3, [r3, #4]
 800b628:	f003 0301 	and.w	r3, r3, #1
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d1e5      	bne.n	800b5fc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2200      	movs	r2, #0
 800b634:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800b636:	2300      	movs	r3, #0
 800b638:	e006      	b.n	800b648 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b63e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800b646:	2301      	movs	r3, #1
  }
}
 800b648:	4618      	mov	r0, r3
 800b64a:	3710      	adds	r7, #16
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd80      	pop	{r7, pc}

0800b650 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b084      	sub	sp, #16
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b65e:	b2db      	uxtb	r3, r3
 800b660:	2b02      	cmp	r3, #2
 800b662:	d133      	bne.n	800b6cc <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	681a      	ldr	r2, [r3, #0]
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	f042 0201 	orr.w	r2, r2, #1
 800b672:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b674:	f7ff f83e 	bl	800a6f4 <HAL_GetTick>
 800b678:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800b67a:	e012      	b.n	800b6a2 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800b67c:	f7ff f83a 	bl	800a6f4 <HAL_GetTick>
 800b680:	4602      	mov	r2, r0
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	1ad3      	subs	r3, r2, r3
 800b686:	2b0a      	cmp	r3, #10
 800b688:	d90b      	bls.n	800b6a2 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b68e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	2205      	movs	r2, #5
 800b69a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800b69e:	2301      	movs	r3, #1
 800b6a0:	e01b      	b.n	800b6da <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	685b      	ldr	r3, [r3, #4]
 800b6a8:	f003 0301 	and.w	r3, r3, #1
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d0e5      	beq.n	800b67c <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	681a      	ldr	r2, [r3, #0]
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	f022 0202 	bic.w	r2, r2, #2
 800b6be:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	2201      	movs	r2, #1
 800b6c4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	e006      	b.n	800b6da <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6d0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800b6d8:	2301      	movs	r3, #1
  }
}
 800b6da:	4618      	mov	r0, r3
 800b6dc:	3710      	adds	r7, #16
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	bd80      	pop	{r7, pc}

0800b6e2 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800b6e2:	b480      	push	{r7}
 800b6e4:	b089      	sub	sp, #36	; 0x24
 800b6e6:	af00      	add	r7, sp, #0
 800b6e8:	60f8      	str	r0, [r7, #12]
 800b6ea:	60b9      	str	r1, [r7, #8]
 800b6ec:	607a      	str	r2, [r7, #4]
 800b6ee:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b6f6:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	689b      	ldr	r3, [r3, #8]
 800b6fe:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800b700:	7ffb      	ldrb	r3, [r7, #31]
 800b702:	2b01      	cmp	r3, #1
 800b704:	d003      	beq.n	800b70e <HAL_CAN_AddTxMessage+0x2c>
 800b706:	7ffb      	ldrb	r3, [r7, #31]
 800b708:	2b02      	cmp	r3, #2
 800b70a:	f040 80b8 	bne.w	800b87e <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800b70e:	69bb      	ldr	r3, [r7, #24]
 800b710:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b714:	2b00      	cmp	r3, #0
 800b716:	d10a      	bne.n	800b72e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800b718:	69bb      	ldr	r3, [r7, #24]
 800b71a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d105      	bne.n	800b72e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800b722:	69bb      	ldr	r3, [r7, #24]
 800b724:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800b728:	2b00      	cmp	r3, #0
 800b72a:	f000 80a0 	beq.w	800b86e <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800b72e:	69bb      	ldr	r3, [r7, #24]
 800b730:	0e1b      	lsrs	r3, r3, #24
 800b732:	f003 0303 	and.w	r3, r3, #3
 800b736:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800b738:	697b      	ldr	r3, [r7, #20]
 800b73a:	2b02      	cmp	r3, #2
 800b73c:	d907      	bls.n	800b74e <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b742:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800b74a:	2301      	movs	r3, #1
 800b74c:	e09e      	b.n	800b88c <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800b74e:	2201      	movs	r2, #1
 800b750:	697b      	ldr	r3, [r7, #20]
 800b752:	409a      	lsls	r2, r3
 800b754:	683b      	ldr	r3, [r7, #0]
 800b756:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	689b      	ldr	r3, [r3, #8]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d10d      	bne.n	800b77c <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800b760:	68bb      	ldr	r3, [r7, #8]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800b766:	68bb      	ldr	r3, [r7, #8]
 800b768:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800b76a:	68f9      	ldr	r1, [r7, #12]
 800b76c:	6809      	ldr	r1, [r1, #0]
 800b76e:	431a      	orrs	r2, r3
 800b770:	697b      	ldr	r3, [r7, #20]
 800b772:	3318      	adds	r3, #24
 800b774:	011b      	lsls	r3, r3, #4
 800b776:	440b      	add	r3, r1
 800b778:	601a      	str	r2, [r3, #0]
 800b77a:	e00f      	b.n	800b79c <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800b77c:	68bb      	ldr	r3, [r7, #8]
 800b77e:	685b      	ldr	r3, [r3, #4]
 800b780:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800b782:	68bb      	ldr	r3, [r7, #8]
 800b784:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800b786:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800b788:	68bb      	ldr	r3, [r7, #8]
 800b78a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800b78c:	68f9      	ldr	r1, [r7, #12]
 800b78e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800b790:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800b792:	697b      	ldr	r3, [r7, #20]
 800b794:	3318      	adds	r3, #24
 800b796:	011b      	lsls	r3, r3, #4
 800b798:	440b      	add	r3, r1
 800b79a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	6819      	ldr	r1, [r3, #0]
 800b7a0:	68bb      	ldr	r3, [r7, #8]
 800b7a2:	691a      	ldr	r2, [r3, #16]
 800b7a4:	697b      	ldr	r3, [r7, #20]
 800b7a6:	3318      	adds	r3, #24
 800b7a8:	011b      	lsls	r3, r3, #4
 800b7aa:	440b      	add	r3, r1
 800b7ac:	3304      	adds	r3, #4
 800b7ae:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800b7b0:	68bb      	ldr	r3, [r7, #8]
 800b7b2:	7d1b      	ldrb	r3, [r3, #20]
 800b7b4:	2b01      	cmp	r3, #1
 800b7b6:	d111      	bne.n	800b7dc <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	681a      	ldr	r2, [r3, #0]
 800b7bc:	697b      	ldr	r3, [r7, #20]
 800b7be:	3318      	adds	r3, #24
 800b7c0:	011b      	lsls	r3, r3, #4
 800b7c2:	4413      	add	r3, r2
 800b7c4:	3304      	adds	r3, #4
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	68fa      	ldr	r2, [r7, #12]
 800b7ca:	6811      	ldr	r1, [r2, #0]
 800b7cc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b7d0:	697b      	ldr	r3, [r7, #20]
 800b7d2:	3318      	adds	r3, #24
 800b7d4:	011b      	lsls	r3, r3, #4
 800b7d6:	440b      	add	r3, r1
 800b7d8:	3304      	adds	r3, #4
 800b7da:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	3307      	adds	r3, #7
 800b7e0:	781b      	ldrb	r3, [r3, #0]
 800b7e2:	061a      	lsls	r2, r3, #24
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	3306      	adds	r3, #6
 800b7e8:	781b      	ldrb	r3, [r3, #0]
 800b7ea:	041b      	lsls	r3, r3, #16
 800b7ec:	431a      	orrs	r2, r3
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	3305      	adds	r3, #5
 800b7f2:	781b      	ldrb	r3, [r3, #0]
 800b7f4:	021b      	lsls	r3, r3, #8
 800b7f6:	4313      	orrs	r3, r2
 800b7f8:	687a      	ldr	r2, [r7, #4]
 800b7fa:	3204      	adds	r2, #4
 800b7fc:	7812      	ldrb	r2, [r2, #0]
 800b7fe:	4610      	mov	r0, r2
 800b800:	68fa      	ldr	r2, [r7, #12]
 800b802:	6811      	ldr	r1, [r2, #0]
 800b804:	ea43 0200 	orr.w	r2, r3, r0
 800b808:	697b      	ldr	r3, [r7, #20]
 800b80a:	011b      	lsls	r3, r3, #4
 800b80c:	440b      	add	r3, r1
 800b80e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800b812:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	3303      	adds	r3, #3
 800b818:	781b      	ldrb	r3, [r3, #0]
 800b81a:	061a      	lsls	r2, r3, #24
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	3302      	adds	r3, #2
 800b820:	781b      	ldrb	r3, [r3, #0]
 800b822:	041b      	lsls	r3, r3, #16
 800b824:	431a      	orrs	r2, r3
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	3301      	adds	r3, #1
 800b82a:	781b      	ldrb	r3, [r3, #0]
 800b82c:	021b      	lsls	r3, r3, #8
 800b82e:	4313      	orrs	r3, r2
 800b830:	687a      	ldr	r2, [r7, #4]
 800b832:	7812      	ldrb	r2, [r2, #0]
 800b834:	4610      	mov	r0, r2
 800b836:	68fa      	ldr	r2, [r7, #12]
 800b838:	6811      	ldr	r1, [r2, #0]
 800b83a:	ea43 0200 	orr.w	r2, r3, r0
 800b83e:	697b      	ldr	r3, [r7, #20]
 800b840:	011b      	lsls	r3, r3, #4
 800b842:	440b      	add	r3, r1
 800b844:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800b848:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	681a      	ldr	r2, [r3, #0]
 800b84e:	697b      	ldr	r3, [r7, #20]
 800b850:	3318      	adds	r3, #24
 800b852:	011b      	lsls	r3, r3, #4
 800b854:	4413      	add	r3, r2
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	68fa      	ldr	r2, [r7, #12]
 800b85a:	6811      	ldr	r1, [r2, #0]
 800b85c:	f043 0201 	orr.w	r2, r3, #1
 800b860:	697b      	ldr	r3, [r7, #20]
 800b862:	3318      	adds	r3, #24
 800b864:	011b      	lsls	r3, r3, #4
 800b866:	440b      	add	r3, r1
 800b868:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800b86a:	2300      	movs	r3, #0
 800b86c:	e00e      	b.n	800b88c <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b872:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800b87a:	2301      	movs	r3, #1
 800b87c:	e006      	b.n	800b88c <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b882:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800b88a:	2301      	movs	r3, #1
  }
}
 800b88c:	4618      	mov	r0, r3
 800b88e:	3724      	adds	r7, #36	; 0x24
 800b890:	46bd      	mov	sp, r7
 800b892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b896:	4770      	bx	lr

0800b898 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800b898:	b480      	push	{r7}
 800b89a:	b087      	sub	sp, #28
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	60f8      	str	r0, [r7, #12]
 800b8a0:	60b9      	str	r1, [r7, #8]
 800b8a2:	607a      	str	r2, [r7, #4]
 800b8a4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b8ac:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800b8ae:	7dfb      	ldrb	r3, [r7, #23]
 800b8b0:	2b01      	cmp	r3, #1
 800b8b2:	d003      	beq.n	800b8bc <HAL_CAN_GetRxMessage+0x24>
 800b8b4:	7dfb      	ldrb	r3, [r7, #23]
 800b8b6:	2b02      	cmp	r3, #2
 800b8b8:	f040 80f3 	bne.w	800baa2 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800b8bc:	68bb      	ldr	r3, [r7, #8]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d10e      	bne.n	800b8e0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	68db      	ldr	r3, [r3, #12]
 800b8c8:	f003 0303 	and.w	r3, r3, #3
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d116      	bne.n	800b8fe <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8d4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800b8dc:	2301      	movs	r3, #1
 800b8de:	e0e7      	b.n	800bab0 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	691b      	ldr	r3, [r3, #16]
 800b8e6:	f003 0303 	and.w	r3, r3, #3
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d107      	bne.n	800b8fe <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8f2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800b8fa:	2301      	movs	r3, #1
 800b8fc:	e0d8      	b.n	800bab0 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	681a      	ldr	r2, [r3, #0]
 800b902:	68bb      	ldr	r3, [r7, #8]
 800b904:	331b      	adds	r3, #27
 800b906:	011b      	lsls	r3, r3, #4
 800b908:	4413      	add	r3, r2
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	f003 0204 	and.w	r2, r3, #4
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	689b      	ldr	r3, [r3, #8]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d10c      	bne.n	800b936 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	681a      	ldr	r2, [r3, #0]
 800b920:	68bb      	ldr	r3, [r7, #8]
 800b922:	331b      	adds	r3, #27
 800b924:	011b      	lsls	r3, r3, #4
 800b926:	4413      	add	r3, r2
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	0d5b      	lsrs	r3, r3, #21
 800b92c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	601a      	str	r2, [r3, #0]
 800b934:	e00b      	b.n	800b94e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	681a      	ldr	r2, [r3, #0]
 800b93a:	68bb      	ldr	r3, [r7, #8]
 800b93c:	331b      	adds	r3, #27
 800b93e:	011b      	lsls	r3, r3, #4
 800b940:	4413      	add	r3, r2
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	08db      	lsrs	r3, r3, #3
 800b946:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	681a      	ldr	r2, [r3, #0]
 800b952:	68bb      	ldr	r3, [r7, #8]
 800b954:	331b      	adds	r3, #27
 800b956:	011b      	lsls	r3, r3, #4
 800b958:	4413      	add	r3, r2
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	f003 0202 	and.w	r2, r3, #2
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	681a      	ldr	r2, [r3, #0]
 800b968:	68bb      	ldr	r3, [r7, #8]
 800b96a:	331b      	adds	r3, #27
 800b96c:	011b      	lsls	r3, r3, #4
 800b96e:	4413      	add	r3, r2
 800b970:	3304      	adds	r3, #4
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	f003 020f 	and.w	r2, r3, #15
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	681a      	ldr	r2, [r3, #0]
 800b980:	68bb      	ldr	r3, [r7, #8]
 800b982:	331b      	adds	r3, #27
 800b984:	011b      	lsls	r3, r3, #4
 800b986:	4413      	add	r3, r2
 800b988:	3304      	adds	r3, #4
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	0a1b      	lsrs	r3, r3, #8
 800b98e:	b2da      	uxtb	r2, r3
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	681a      	ldr	r2, [r3, #0]
 800b998:	68bb      	ldr	r3, [r7, #8]
 800b99a:	331b      	adds	r3, #27
 800b99c:	011b      	lsls	r3, r3, #4
 800b99e:	4413      	add	r3, r2
 800b9a0:	3304      	adds	r3, #4
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	0c1b      	lsrs	r3, r3, #16
 800b9a6:	b29a      	uxth	r2, r3
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	681a      	ldr	r2, [r3, #0]
 800b9b0:	68bb      	ldr	r3, [r7, #8]
 800b9b2:	011b      	lsls	r3, r3, #4
 800b9b4:	4413      	add	r3, r2
 800b9b6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	b2da      	uxtb	r2, r3
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	681a      	ldr	r2, [r3, #0]
 800b9c6:	68bb      	ldr	r3, [r7, #8]
 800b9c8:	011b      	lsls	r3, r3, #4
 800b9ca:	4413      	add	r3, r2
 800b9cc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	0a1a      	lsrs	r2, r3, #8
 800b9d4:	683b      	ldr	r3, [r7, #0]
 800b9d6:	3301      	adds	r3, #1
 800b9d8:	b2d2      	uxtb	r2, r2
 800b9da:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	681a      	ldr	r2, [r3, #0]
 800b9e0:	68bb      	ldr	r3, [r7, #8]
 800b9e2:	011b      	lsls	r3, r3, #4
 800b9e4:	4413      	add	r3, r2
 800b9e6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	0c1a      	lsrs	r2, r3, #16
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	3302      	adds	r3, #2
 800b9f2:	b2d2      	uxtb	r2, r2
 800b9f4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	681a      	ldr	r2, [r3, #0]
 800b9fa:	68bb      	ldr	r3, [r7, #8]
 800b9fc:	011b      	lsls	r3, r3, #4
 800b9fe:	4413      	add	r3, r2
 800ba00:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	0e1a      	lsrs	r2, r3, #24
 800ba08:	683b      	ldr	r3, [r7, #0]
 800ba0a:	3303      	adds	r3, #3
 800ba0c:	b2d2      	uxtb	r2, r2
 800ba0e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	681a      	ldr	r2, [r3, #0]
 800ba14:	68bb      	ldr	r3, [r7, #8]
 800ba16:	011b      	lsls	r3, r3, #4
 800ba18:	4413      	add	r3, r2
 800ba1a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800ba1e:	681a      	ldr	r2, [r3, #0]
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	3304      	adds	r3, #4
 800ba24:	b2d2      	uxtb	r2, r2
 800ba26:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	681a      	ldr	r2, [r3, #0]
 800ba2c:	68bb      	ldr	r3, [r7, #8]
 800ba2e:	011b      	lsls	r3, r3, #4
 800ba30:	4413      	add	r3, r2
 800ba32:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	0a1a      	lsrs	r2, r3, #8
 800ba3a:	683b      	ldr	r3, [r7, #0]
 800ba3c:	3305      	adds	r3, #5
 800ba3e:	b2d2      	uxtb	r2, r2
 800ba40:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	681a      	ldr	r2, [r3, #0]
 800ba46:	68bb      	ldr	r3, [r7, #8]
 800ba48:	011b      	lsls	r3, r3, #4
 800ba4a:	4413      	add	r3, r2
 800ba4c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	0c1a      	lsrs	r2, r3, #16
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	3306      	adds	r3, #6
 800ba58:	b2d2      	uxtb	r2, r2
 800ba5a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	681a      	ldr	r2, [r3, #0]
 800ba60:	68bb      	ldr	r3, [r7, #8]
 800ba62:	011b      	lsls	r3, r3, #4
 800ba64:	4413      	add	r3, r2
 800ba66:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	0e1a      	lsrs	r2, r3, #24
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	3307      	adds	r3, #7
 800ba72:	b2d2      	uxtb	r2, r2
 800ba74:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800ba76:	68bb      	ldr	r3, [r7, #8]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d108      	bne.n	800ba8e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	68da      	ldr	r2, [r3, #12]
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	f042 0220 	orr.w	r2, r2, #32
 800ba8a:	60da      	str	r2, [r3, #12]
 800ba8c:	e007      	b.n	800ba9e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	691a      	ldr	r2, [r3, #16]
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	f042 0220 	orr.w	r2, r2, #32
 800ba9c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800ba9e:	2300      	movs	r3, #0
 800baa0:	e006      	b.n	800bab0 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baa6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800baae:	2301      	movs	r3, #1
  }
}
 800bab0:	4618      	mov	r0, r3
 800bab2:	371c      	adds	r7, #28
 800bab4:	46bd      	mov	sp, r7
 800bab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baba:	4770      	bx	lr

0800babc <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800babc:	b480      	push	{r7}
 800babe:	b085      	sub	sp, #20
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
 800bac4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bacc:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800bace:	7bfb      	ldrb	r3, [r7, #15]
 800bad0:	2b01      	cmp	r3, #1
 800bad2:	d002      	beq.n	800bada <HAL_CAN_ActivateNotification+0x1e>
 800bad4:	7bfb      	ldrb	r3, [r7, #15]
 800bad6:	2b02      	cmp	r3, #2
 800bad8:	d109      	bne.n	800baee <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	6959      	ldr	r1, [r3, #20]
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	683a      	ldr	r2, [r7, #0]
 800bae6:	430a      	orrs	r2, r1
 800bae8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800baea:	2300      	movs	r3, #0
 800baec:	e006      	b.n	800bafc <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baf2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800bafa:	2301      	movs	r3, #1
  }
}
 800bafc:	4618      	mov	r0, r3
 800bafe:	3714      	adds	r7, #20
 800bb00:	46bd      	mov	sp, r7
 800bb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb06:	4770      	bx	lr

0800bb08 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b08a      	sub	sp, #40	; 0x28
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800bb10:	2300      	movs	r3, #0
 800bb12:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	695b      	ldr	r3, [r3, #20]
 800bb1a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	685b      	ldr	r3, [r3, #4]
 800bb22:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	689b      	ldr	r3, [r3, #8]
 800bb2a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	68db      	ldr	r3, [r3, #12]
 800bb32:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	691b      	ldr	r3, [r3, #16]
 800bb3a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	699b      	ldr	r3, [r3, #24]
 800bb42:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800bb44:	6a3b      	ldr	r3, [r7, #32]
 800bb46:	f003 0301 	and.w	r3, r3, #1
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d07c      	beq.n	800bc48 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800bb4e:	69bb      	ldr	r3, [r7, #24]
 800bb50:	f003 0301 	and.w	r3, r3, #1
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d023      	beq.n	800bba0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	2201      	movs	r2, #1
 800bb5e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800bb60:	69bb      	ldr	r3, [r7, #24]
 800bb62:	f003 0302 	and.w	r3, r3, #2
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d003      	beq.n	800bb72 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800bb6a:	6878      	ldr	r0, [r7, #4]
 800bb6c:	f000 f983 	bl	800be76 <HAL_CAN_TxMailbox0CompleteCallback>
 800bb70:	e016      	b.n	800bba0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800bb72:	69bb      	ldr	r3, [r7, #24]
 800bb74:	f003 0304 	and.w	r3, r3, #4
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d004      	beq.n	800bb86 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800bb7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb7e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800bb82:	627b      	str	r3, [r7, #36]	; 0x24
 800bb84:	e00c      	b.n	800bba0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800bb86:	69bb      	ldr	r3, [r7, #24]
 800bb88:	f003 0308 	and.w	r3, r3, #8
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d004      	beq.n	800bb9a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800bb90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb92:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800bb96:	627b      	str	r3, [r7, #36]	; 0x24
 800bb98:	e002      	b.n	800bba0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800bb9a:	6878      	ldr	r0, [r7, #4]
 800bb9c:	f000 f989 	bl	800beb2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800bba0:	69bb      	ldr	r3, [r7, #24]
 800bba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d024      	beq.n	800bbf4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bbb2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800bbb4:	69bb      	ldr	r3, [r7, #24]
 800bbb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d003      	beq.n	800bbc6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800bbbe:	6878      	ldr	r0, [r7, #4]
 800bbc0:	f000 f963 	bl	800be8a <HAL_CAN_TxMailbox1CompleteCallback>
 800bbc4:	e016      	b.n	800bbf4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800bbc6:	69bb      	ldr	r3, [r7, #24]
 800bbc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d004      	beq.n	800bbda <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800bbd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800bbd6:	627b      	str	r3, [r7, #36]	; 0x24
 800bbd8:	e00c      	b.n	800bbf4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800bbda:	69bb      	ldr	r3, [r7, #24]
 800bbdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d004      	beq.n	800bbee <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800bbe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbe6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bbea:	627b      	str	r3, [r7, #36]	; 0x24
 800bbec:	e002      	b.n	800bbf4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800bbee:	6878      	ldr	r0, [r7, #4]
 800bbf0:	f000 f969 	bl	800bec6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800bbf4:	69bb      	ldr	r3, [r7, #24]
 800bbf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d024      	beq.n	800bc48 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800bc06:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800bc08:	69bb      	ldr	r3, [r7, #24]
 800bc0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d003      	beq.n	800bc1a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800bc12:	6878      	ldr	r0, [r7, #4]
 800bc14:	f000 f943 	bl	800be9e <HAL_CAN_TxMailbox2CompleteCallback>
 800bc18:	e016      	b.n	800bc48 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800bc1a:	69bb      	ldr	r3, [r7, #24]
 800bc1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d004      	beq.n	800bc2e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800bc24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bc2a:	627b      	str	r3, [r7, #36]	; 0x24
 800bc2c:	e00c      	b.n	800bc48 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800bc2e:	69bb      	ldr	r3, [r7, #24]
 800bc30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d004      	beq.n	800bc42 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800bc38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bc3e:	627b      	str	r3, [r7, #36]	; 0x24
 800bc40:	e002      	b.n	800bc48 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800bc42:	6878      	ldr	r0, [r7, #4]
 800bc44:	f000 f949 	bl	800beda <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800bc48:	6a3b      	ldr	r3, [r7, #32]
 800bc4a:	f003 0308 	and.w	r3, r3, #8
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d00c      	beq.n	800bc6c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800bc52:	697b      	ldr	r3, [r7, #20]
 800bc54:	f003 0310 	and.w	r3, r3, #16
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d007      	beq.n	800bc6c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800bc5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bc62:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	2210      	movs	r2, #16
 800bc6a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800bc6c:	6a3b      	ldr	r3, [r7, #32]
 800bc6e:	f003 0304 	and.w	r3, r3, #4
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d00b      	beq.n	800bc8e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800bc76:	697b      	ldr	r3, [r7, #20]
 800bc78:	f003 0308 	and.w	r3, r3, #8
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d006      	beq.n	800bc8e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	2208      	movs	r2, #8
 800bc86:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800bc88:	6878      	ldr	r0, [r7, #4]
 800bc8a:	f000 f930 	bl	800beee <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800bc8e:	6a3b      	ldr	r3, [r7, #32]
 800bc90:	f003 0302 	and.w	r3, r3, #2
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d009      	beq.n	800bcac <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	68db      	ldr	r3, [r3, #12]
 800bc9e:	f003 0303 	and.w	r3, r3, #3
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d002      	beq.n	800bcac <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800bca6:	6878      	ldr	r0, [r7, #4]
 800bca8:	f7fb fef2 	bl	8007a90 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800bcac:	6a3b      	ldr	r3, [r7, #32]
 800bcae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d00c      	beq.n	800bcd0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800bcb6:	693b      	ldr	r3, [r7, #16]
 800bcb8:	f003 0310 	and.w	r3, r3, #16
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d007      	beq.n	800bcd0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800bcc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bcc6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	2210      	movs	r2, #16
 800bcce:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800bcd0:	6a3b      	ldr	r3, [r7, #32]
 800bcd2:	f003 0320 	and.w	r3, r3, #32
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d00b      	beq.n	800bcf2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800bcda:	693b      	ldr	r3, [r7, #16]
 800bcdc:	f003 0308 	and.w	r3, r3, #8
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d006      	beq.n	800bcf2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	2208      	movs	r2, #8
 800bcea:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800bcec:	6878      	ldr	r0, [r7, #4]
 800bcee:	f000 f912 	bl	800bf16 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800bcf2:	6a3b      	ldr	r3, [r7, #32]
 800bcf4:	f003 0310 	and.w	r3, r3, #16
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d009      	beq.n	800bd10 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	691b      	ldr	r3, [r3, #16]
 800bd02:	f003 0303 	and.w	r3, r3, #3
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d002      	beq.n	800bd10 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800bd0a:	6878      	ldr	r0, [r7, #4]
 800bd0c:	f000 f8f9 	bl	800bf02 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800bd10:	6a3b      	ldr	r3, [r7, #32]
 800bd12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d00b      	beq.n	800bd32 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800bd1a:	69fb      	ldr	r3, [r7, #28]
 800bd1c:	f003 0310 	and.w	r3, r3, #16
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d006      	beq.n	800bd32 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	2210      	movs	r2, #16
 800bd2a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800bd2c:	6878      	ldr	r0, [r7, #4]
 800bd2e:	f000 f8fc 	bl	800bf2a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800bd32:	6a3b      	ldr	r3, [r7, #32]
 800bd34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d00b      	beq.n	800bd54 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800bd3c:	69fb      	ldr	r3, [r7, #28]
 800bd3e:	f003 0308 	and.w	r3, r3, #8
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d006      	beq.n	800bd54 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	2208      	movs	r2, #8
 800bd4c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800bd4e:	6878      	ldr	r0, [r7, #4]
 800bd50:	f000 f8f5 	bl	800bf3e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800bd54:	6a3b      	ldr	r3, [r7, #32]
 800bd56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d07b      	beq.n	800be56 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800bd5e:	69fb      	ldr	r3, [r7, #28]
 800bd60:	f003 0304 	and.w	r3, r3, #4
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d072      	beq.n	800be4e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800bd68:	6a3b      	ldr	r3, [r7, #32]
 800bd6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d008      	beq.n	800bd84 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d003      	beq.n	800bd84 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800bd7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd7e:	f043 0301 	orr.w	r3, r3, #1
 800bd82:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800bd84:	6a3b      	ldr	r3, [r7, #32]
 800bd86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d008      	beq.n	800bda0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d003      	beq.n	800bda0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800bd98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd9a:	f043 0302 	orr.w	r3, r3, #2
 800bd9e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800bda0:	6a3b      	ldr	r3, [r7, #32]
 800bda2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d008      	beq.n	800bdbc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d003      	beq.n	800bdbc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800bdb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdb6:	f043 0304 	orr.w	r3, r3, #4
 800bdba:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800bdbc:	6a3b      	ldr	r3, [r7, #32]
 800bdbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d043      	beq.n	800be4e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d03e      	beq.n	800be4e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bdd6:	2b60      	cmp	r3, #96	; 0x60
 800bdd8:	d02b      	beq.n	800be32 <HAL_CAN_IRQHandler+0x32a>
 800bdda:	2b60      	cmp	r3, #96	; 0x60
 800bddc:	d82e      	bhi.n	800be3c <HAL_CAN_IRQHandler+0x334>
 800bdde:	2b50      	cmp	r3, #80	; 0x50
 800bde0:	d022      	beq.n	800be28 <HAL_CAN_IRQHandler+0x320>
 800bde2:	2b50      	cmp	r3, #80	; 0x50
 800bde4:	d82a      	bhi.n	800be3c <HAL_CAN_IRQHandler+0x334>
 800bde6:	2b40      	cmp	r3, #64	; 0x40
 800bde8:	d019      	beq.n	800be1e <HAL_CAN_IRQHandler+0x316>
 800bdea:	2b40      	cmp	r3, #64	; 0x40
 800bdec:	d826      	bhi.n	800be3c <HAL_CAN_IRQHandler+0x334>
 800bdee:	2b30      	cmp	r3, #48	; 0x30
 800bdf0:	d010      	beq.n	800be14 <HAL_CAN_IRQHandler+0x30c>
 800bdf2:	2b30      	cmp	r3, #48	; 0x30
 800bdf4:	d822      	bhi.n	800be3c <HAL_CAN_IRQHandler+0x334>
 800bdf6:	2b10      	cmp	r3, #16
 800bdf8:	d002      	beq.n	800be00 <HAL_CAN_IRQHandler+0x2f8>
 800bdfa:	2b20      	cmp	r3, #32
 800bdfc:	d005      	beq.n	800be0a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800bdfe:	e01d      	b.n	800be3c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800be00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be02:	f043 0308 	orr.w	r3, r3, #8
 800be06:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800be08:	e019      	b.n	800be3e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800be0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be0c:	f043 0310 	orr.w	r3, r3, #16
 800be10:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800be12:	e014      	b.n	800be3e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800be14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be16:	f043 0320 	orr.w	r3, r3, #32
 800be1a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800be1c:	e00f      	b.n	800be3e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800be1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be24:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800be26:	e00a      	b.n	800be3e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800be28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be2e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800be30:	e005      	b.n	800be3e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800be32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800be38:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800be3a:	e000      	b.n	800be3e <HAL_CAN_IRQHandler+0x336>
            break;
 800be3c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	699a      	ldr	r2, [r3, #24]
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800be4c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	2204      	movs	r2, #4
 800be54:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800be56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d008      	beq.n	800be6e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800be60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be62:	431a      	orrs	r2, r3
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800be68:	6878      	ldr	r0, [r7, #4]
 800be6a:	f000 f872 	bl	800bf52 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800be6e:	bf00      	nop
 800be70:	3728      	adds	r7, #40	; 0x28
 800be72:	46bd      	mov	sp, r7
 800be74:	bd80      	pop	{r7, pc}

0800be76 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800be76:	b480      	push	{r7}
 800be78:	b083      	sub	sp, #12
 800be7a:	af00      	add	r7, sp, #0
 800be7c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800be7e:	bf00      	nop
 800be80:	370c      	adds	r7, #12
 800be82:	46bd      	mov	sp, r7
 800be84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be88:	4770      	bx	lr

0800be8a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800be8a:	b480      	push	{r7}
 800be8c:	b083      	sub	sp, #12
 800be8e:	af00      	add	r7, sp, #0
 800be90:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800be92:	bf00      	nop
 800be94:	370c      	adds	r7, #12
 800be96:	46bd      	mov	sp, r7
 800be98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9c:	4770      	bx	lr

0800be9e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800be9e:	b480      	push	{r7}
 800bea0:	b083      	sub	sp, #12
 800bea2:	af00      	add	r7, sp, #0
 800bea4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800bea6:	bf00      	nop
 800bea8:	370c      	adds	r7, #12
 800beaa:	46bd      	mov	sp, r7
 800beac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb0:	4770      	bx	lr

0800beb2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800beb2:	b480      	push	{r7}
 800beb4:	b083      	sub	sp, #12
 800beb6:	af00      	add	r7, sp, #0
 800beb8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800beba:	bf00      	nop
 800bebc:	370c      	adds	r7, #12
 800bebe:	46bd      	mov	sp, r7
 800bec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec4:	4770      	bx	lr

0800bec6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800bec6:	b480      	push	{r7}
 800bec8:	b083      	sub	sp, #12
 800beca:	af00      	add	r7, sp, #0
 800becc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800bece:	bf00      	nop
 800bed0:	370c      	adds	r7, #12
 800bed2:	46bd      	mov	sp, r7
 800bed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed8:	4770      	bx	lr

0800beda <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800beda:	b480      	push	{r7}
 800bedc:	b083      	sub	sp, #12
 800bede:	af00      	add	r7, sp, #0
 800bee0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800bee2:	bf00      	nop
 800bee4:	370c      	adds	r7, #12
 800bee6:	46bd      	mov	sp, r7
 800bee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beec:	4770      	bx	lr

0800beee <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800beee:	b480      	push	{r7}
 800bef0:	b083      	sub	sp, #12
 800bef2:	af00      	add	r7, sp, #0
 800bef4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800bef6:	bf00      	nop
 800bef8:	370c      	adds	r7, #12
 800befa:	46bd      	mov	sp, r7
 800befc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf00:	4770      	bx	lr

0800bf02 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800bf02:	b480      	push	{r7}
 800bf04:	b083      	sub	sp, #12
 800bf06:	af00      	add	r7, sp, #0
 800bf08:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800bf0a:	bf00      	nop
 800bf0c:	370c      	adds	r7, #12
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf14:	4770      	bx	lr

0800bf16 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800bf16:	b480      	push	{r7}
 800bf18:	b083      	sub	sp, #12
 800bf1a:	af00      	add	r7, sp, #0
 800bf1c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800bf1e:	bf00      	nop
 800bf20:	370c      	adds	r7, #12
 800bf22:	46bd      	mov	sp, r7
 800bf24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf28:	4770      	bx	lr

0800bf2a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800bf2a:	b480      	push	{r7}
 800bf2c:	b083      	sub	sp, #12
 800bf2e:	af00      	add	r7, sp, #0
 800bf30:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800bf32:	bf00      	nop
 800bf34:	370c      	adds	r7, #12
 800bf36:	46bd      	mov	sp, r7
 800bf38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3c:	4770      	bx	lr

0800bf3e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800bf3e:	b480      	push	{r7}
 800bf40:	b083      	sub	sp, #12
 800bf42:	af00      	add	r7, sp, #0
 800bf44:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800bf46:	bf00      	nop
 800bf48:	370c      	adds	r7, #12
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf50:	4770      	bx	lr

0800bf52 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800bf52:	b480      	push	{r7}
 800bf54:	b083      	sub	sp, #12
 800bf56:	af00      	add	r7, sp, #0
 800bf58:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800bf5a:	bf00      	nop
 800bf5c:	370c      	adds	r7, #12
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf64:	4770      	bx	lr
	...

0800bf68 <__NVIC_SetPriorityGrouping>:
{
 800bf68:	b480      	push	{r7}
 800bf6a:	b085      	sub	sp, #20
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	f003 0307 	and.w	r3, r3, #7
 800bf76:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800bf78:	4b0c      	ldr	r3, [pc, #48]	; (800bfac <__NVIC_SetPriorityGrouping+0x44>)
 800bf7a:	68db      	ldr	r3, [r3, #12]
 800bf7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800bf7e:	68ba      	ldr	r2, [r7, #8]
 800bf80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800bf84:	4013      	ands	r3, r2
 800bf86:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800bf8c:	68bb      	ldr	r3, [r7, #8]
 800bf8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800bf90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800bf94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bf98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800bf9a:	4a04      	ldr	r2, [pc, #16]	; (800bfac <__NVIC_SetPriorityGrouping+0x44>)
 800bf9c:	68bb      	ldr	r3, [r7, #8]
 800bf9e:	60d3      	str	r3, [r2, #12]
}
 800bfa0:	bf00      	nop
 800bfa2:	3714      	adds	r7, #20
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfaa:	4770      	bx	lr
 800bfac:	e000ed00 	.word	0xe000ed00

0800bfb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800bfb0:	b480      	push	{r7}
 800bfb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800bfb4:	4b04      	ldr	r3, [pc, #16]	; (800bfc8 <__NVIC_GetPriorityGrouping+0x18>)
 800bfb6:	68db      	ldr	r3, [r3, #12]
 800bfb8:	0a1b      	lsrs	r3, r3, #8
 800bfba:	f003 0307 	and.w	r3, r3, #7
}
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc6:	4770      	bx	lr
 800bfc8:	e000ed00 	.word	0xe000ed00

0800bfcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800bfcc:	b480      	push	{r7}
 800bfce:	b083      	sub	sp, #12
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	4603      	mov	r3, r0
 800bfd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bfd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	db0b      	blt.n	800bff6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bfde:	79fb      	ldrb	r3, [r7, #7]
 800bfe0:	f003 021f 	and.w	r2, r3, #31
 800bfe4:	4907      	ldr	r1, [pc, #28]	; (800c004 <__NVIC_EnableIRQ+0x38>)
 800bfe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bfea:	095b      	lsrs	r3, r3, #5
 800bfec:	2001      	movs	r0, #1
 800bfee:	fa00 f202 	lsl.w	r2, r0, r2
 800bff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800bff6:	bf00      	nop
 800bff8:	370c      	adds	r7, #12
 800bffa:	46bd      	mov	sp, r7
 800bffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c000:	4770      	bx	lr
 800c002:	bf00      	nop
 800c004:	e000e100 	.word	0xe000e100

0800c008 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800c008:	b480      	push	{r7}
 800c00a:	b083      	sub	sp, #12
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	4603      	mov	r3, r0
 800c010:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c016:	2b00      	cmp	r3, #0
 800c018:	db12      	blt.n	800c040 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c01a:	79fb      	ldrb	r3, [r7, #7]
 800c01c:	f003 021f 	and.w	r2, r3, #31
 800c020:	490a      	ldr	r1, [pc, #40]	; (800c04c <__NVIC_DisableIRQ+0x44>)
 800c022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c026:	095b      	lsrs	r3, r3, #5
 800c028:	2001      	movs	r0, #1
 800c02a:	fa00 f202 	lsl.w	r2, r0, r2
 800c02e:	3320      	adds	r3, #32
 800c030:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800c034:	f3bf 8f4f 	dsb	sy
}
 800c038:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800c03a:	f3bf 8f6f 	isb	sy
}
 800c03e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800c040:	bf00      	nop
 800c042:	370c      	adds	r7, #12
 800c044:	46bd      	mov	sp, r7
 800c046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04a:	4770      	bx	lr
 800c04c:	e000e100 	.word	0xe000e100

0800c050 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800c050:	b480      	push	{r7}
 800c052:	b083      	sub	sp, #12
 800c054:	af00      	add	r7, sp, #0
 800c056:	4603      	mov	r3, r0
 800c058:	6039      	str	r1, [r7, #0]
 800c05a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c05c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c060:	2b00      	cmp	r3, #0
 800c062:	db0a      	blt.n	800c07a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c064:	683b      	ldr	r3, [r7, #0]
 800c066:	b2da      	uxtb	r2, r3
 800c068:	490c      	ldr	r1, [pc, #48]	; (800c09c <__NVIC_SetPriority+0x4c>)
 800c06a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c06e:	0112      	lsls	r2, r2, #4
 800c070:	b2d2      	uxtb	r2, r2
 800c072:	440b      	add	r3, r1
 800c074:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800c078:	e00a      	b.n	800c090 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	b2da      	uxtb	r2, r3
 800c07e:	4908      	ldr	r1, [pc, #32]	; (800c0a0 <__NVIC_SetPriority+0x50>)
 800c080:	79fb      	ldrb	r3, [r7, #7]
 800c082:	f003 030f 	and.w	r3, r3, #15
 800c086:	3b04      	subs	r3, #4
 800c088:	0112      	lsls	r2, r2, #4
 800c08a:	b2d2      	uxtb	r2, r2
 800c08c:	440b      	add	r3, r1
 800c08e:	761a      	strb	r2, [r3, #24]
}
 800c090:	bf00      	nop
 800c092:	370c      	adds	r7, #12
 800c094:	46bd      	mov	sp, r7
 800c096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09a:	4770      	bx	lr
 800c09c:	e000e100 	.word	0xe000e100
 800c0a0:	e000ed00 	.word	0xe000ed00

0800c0a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c0a4:	b480      	push	{r7}
 800c0a6:	b089      	sub	sp, #36	; 0x24
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	60f8      	str	r0, [r7, #12]
 800c0ac:	60b9      	str	r1, [r7, #8]
 800c0ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	f003 0307 	and.w	r3, r3, #7
 800c0b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c0b8:	69fb      	ldr	r3, [r7, #28]
 800c0ba:	f1c3 0307 	rsb	r3, r3, #7
 800c0be:	2b04      	cmp	r3, #4
 800c0c0:	bf28      	it	cs
 800c0c2:	2304      	movcs	r3, #4
 800c0c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c0c6:	69fb      	ldr	r3, [r7, #28]
 800c0c8:	3304      	adds	r3, #4
 800c0ca:	2b06      	cmp	r3, #6
 800c0cc:	d902      	bls.n	800c0d4 <NVIC_EncodePriority+0x30>
 800c0ce:	69fb      	ldr	r3, [r7, #28]
 800c0d0:	3b03      	subs	r3, #3
 800c0d2:	e000      	b.n	800c0d6 <NVIC_EncodePriority+0x32>
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c0d8:	f04f 32ff 	mov.w	r2, #4294967295
 800c0dc:	69bb      	ldr	r3, [r7, #24]
 800c0de:	fa02 f303 	lsl.w	r3, r2, r3
 800c0e2:	43da      	mvns	r2, r3
 800c0e4:	68bb      	ldr	r3, [r7, #8]
 800c0e6:	401a      	ands	r2, r3
 800c0e8:	697b      	ldr	r3, [r7, #20]
 800c0ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c0ec:	f04f 31ff 	mov.w	r1, #4294967295
 800c0f0:	697b      	ldr	r3, [r7, #20]
 800c0f2:	fa01 f303 	lsl.w	r3, r1, r3
 800c0f6:	43d9      	mvns	r1, r3
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c0fc:	4313      	orrs	r3, r2
         );
}
 800c0fe:	4618      	mov	r0, r3
 800c100:	3724      	adds	r7, #36	; 0x24
 800c102:	46bd      	mov	sp, r7
 800c104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c108:	4770      	bx	lr

0800c10a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c10a:	b580      	push	{r7, lr}
 800c10c:	b082      	sub	sp, #8
 800c10e:	af00      	add	r7, sp, #0
 800c110:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c112:	6878      	ldr	r0, [r7, #4]
 800c114:	f7ff ff28 	bl	800bf68 <__NVIC_SetPriorityGrouping>
}
 800c118:	bf00      	nop
 800c11a:	3708      	adds	r7, #8
 800c11c:	46bd      	mov	sp, r7
 800c11e:	bd80      	pop	{r7, pc}

0800c120 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800c120:	b580      	push	{r7, lr}
 800c122:	b086      	sub	sp, #24
 800c124:	af00      	add	r7, sp, #0
 800c126:	4603      	mov	r3, r0
 800c128:	60b9      	str	r1, [r7, #8]
 800c12a:	607a      	str	r2, [r7, #4]
 800c12c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800c12e:	2300      	movs	r3, #0
 800c130:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800c132:	f7ff ff3d 	bl	800bfb0 <__NVIC_GetPriorityGrouping>
 800c136:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c138:	687a      	ldr	r2, [r7, #4]
 800c13a:	68b9      	ldr	r1, [r7, #8]
 800c13c:	6978      	ldr	r0, [r7, #20]
 800c13e:	f7ff ffb1 	bl	800c0a4 <NVIC_EncodePriority>
 800c142:	4602      	mov	r2, r0
 800c144:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c148:	4611      	mov	r1, r2
 800c14a:	4618      	mov	r0, r3
 800c14c:	f7ff ff80 	bl	800c050 <__NVIC_SetPriority>
}
 800c150:	bf00      	nop
 800c152:	3718      	adds	r7, #24
 800c154:	46bd      	mov	sp, r7
 800c156:	bd80      	pop	{r7, pc}

0800c158 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b082      	sub	sp, #8
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	4603      	mov	r3, r0
 800c160:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c166:	4618      	mov	r0, r3
 800c168:	f7ff ff30 	bl	800bfcc <__NVIC_EnableIRQ>
}
 800c16c:	bf00      	nop
 800c16e:	3708      	adds	r7, #8
 800c170:	46bd      	mov	sp, r7
 800c172:	bd80      	pop	{r7, pc}

0800c174 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b082      	sub	sp, #8
 800c178:	af00      	add	r7, sp, #0
 800c17a:	4603      	mov	r3, r0
 800c17c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800c17e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c182:	4618      	mov	r0, r3
 800c184:	f7ff ff40 	bl	800c008 <__NVIC_DisableIRQ>
}
 800c188:	bf00      	nop
 800c18a:	3708      	adds	r7, #8
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bd80      	pop	{r7, pc}

0800c190 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b086      	sub	sp, #24
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800c198:	2300      	movs	r3, #0
 800c19a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800c19c:	f7fe faaa 	bl	800a6f4 <HAL_GetTick>
 800c1a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d101      	bne.n	800c1ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800c1a8:	2301      	movs	r3, #1
 800c1aa:	e099      	b.n	800c2e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	2202      	movs	r2, #2
 800c1b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	681a      	ldr	r2, [r3, #0]
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	f022 0201 	bic.w	r2, r2, #1
 800c1ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c1cc:	e00f      	b.n	800c1ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800c1ce:	f7fe fa91 	bl	800a6f4 <HAL_GetTick>
 800c1d2:	4602      	mov	r2, r0
 800c1d4:	693b      	ldr	r3, [r7, #16]
 800c1d6:	1ad3      	subs	r3, r2, r3
 800c1d8:	2b05      	cmp	r3, #5
 800c1da:	d908      	bls.n	800c1ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2220      	movs	r2, #32
 800c1e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	2203      	movs	r2, #3
 800c1e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800c1ea:	2303      	movs	r3, #3
 800c1ec:	e078      	b.n	800c2e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	f003 0301 	and.w	r3, r3, #1
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d1e8      	bne.n	800c1ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800c204:	697a      	ldr	r2, [r7, #20]
 800c206:	4b38      	ldr	r3, [pc, #224]	; (800c2e8 <HAL_DMA_Init+0x158>)
 800c208:	4013      	ands	r3, r2
 800c20a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	685a      	ldr	r2, [r3, #4]
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	689b      	ldr	r3, [r3, #8]
 800c214:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c21a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	691b      	ldr	r3, [r3, #16]
 800c220:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c226:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	699b      	ldr	r3, [r3, #24]
 800c22c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c232:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	6a1b      	ldr	r3, [r3, #32]
 800c238:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c23a:	697a      	ldr	r2, [r7, #20]
 800c23c:	4313      	orrs	r3, r2
 800c23e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c244:	2b04      	cmp	r3, #4
 800c246:	d107      	bne.n	800c258 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c250:	4313      	orrs	r3, r2
 800c252:	697a      	ldr	r2, [r7, #20]
 800c254:	4313      	orrs	r3, r2
 800c256:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	697a      	ldr	r2, [r7, #20]
 800c25e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	695b      	ldr	r3, [r3, #20]
 800c266:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800c268:	697b      	ldr	r3, [r7, #20]
 800c26a:	f023 0307 	bic.w	r3, r3, #7
 800c26e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c274:	697a      	ldr	r2, [r7, #20]
 800c276:	4313      	orrs	r3, r2
 800c278:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c27e:	2b04      	cmp	r3, #4
 800c280:	d117      	bne.n	800c2b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c286:	697a      	ldr	r2, [r7, #20]
 800c288:	4313      	orrs	r3, r2
 800c28a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c290:	2b00      	cmp	r3, #0
 800c292:	d00e      	beq.n	800c2b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800c294:	6878      	ldr	r0, [r7, #4]
 800c296:	f000 fa6f 	bl	800c778 <DMA_CheckFifoParam>
 800c29a:	4603      	mov	r3, r0
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d008      	beq.n	800c2b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	2240      	movs	r2, #64	; 0x40
 800c2a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	2201      	movs	r2, #1
 800c2aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800c2ae:	2301      	movs	r3, #1
 800c2b0:	e016      	b.n	800c2e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	697a      	ldr	r2, [r7, #20]
 800c2b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800c2ba:	6878      	ldr	r0, [r7, #4]
 800c2bc:	f000 fa26 	bl	800c70c <DMA_CalcBaseAndBitshift>
 800c2c0:	4603      	mov	r3, r0
 800c2c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c2c8:	223f      	movs	r2, #63	; 0x3f
 800c2ca:	409a      	lsls	r2, r3
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	2201      	movs	r2, #1
 800c2da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800c2de:	2300      	movs	r3, #0
}
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	3718      	adds	r7, #24
 800c2e4:	46bd      	mov	sp, r7
 800c2e6:	bd80      	pop	{r7, pc}
 800c2e8:	f010803f 	.word	0xf010803f

0800c2ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b086      	sub	sp, #24
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	60f8      	str	r0, [r7, #12]
 800c2f4:	60b9      	str	r1, [r7, #8]
 800c2f6:	607a      	str	r2, [r7, #4]
 800c2f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c302:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c30a:	2b01      	cmp	r3, #1
 800c30c:	d101      	bne.n	800c312 <HAL_DMA_Start_IT+0x26>
 800c30e:	2302      	movs	r3, #2
 800c310:	e040      	b.n	800c394 <HAL_DMA_Start_IT+0xa8>
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	2201      	movs	r2, #1
 800c316:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c320:	b2db      	uxtb	r3, r3
 800c322:	2b01      	cmp	r3, #1
 800c324:	d12f      	bne.n	800c386 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	2202      	movs	r2, #2
 800c32a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	2200      	movs	r2, #0
 800c332:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800c334:	683b      	ldr	r3, [r7, #0]
 800c336:	687a      	ldr	r2, [r7, #4]
 800c338:	68b9      	ldr	r1, [r7, #8]
 800c33a:	68f8      	ldr	r0, [r7, #12]
 800c33c:	f000 f9b8 	bl	800c6b0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c344:	223f      	movs	r2, #63	; 0x3f
 800c346:	409a      	lsls	r2, r3
 800c348:	693b      	ldr	r3, [r7, #16]
 800c34a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	681a      	ldr	r2, [r3, #0]
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	f042 0216 	orr.w	r2, r2, #22
 800c35a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c360:	2b00      	cmp	r3, #0
 800c362:	d007      	beq.n	800c374 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	681a      	ldr	r2, [r3, #0]
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	f042 0208 	orr.w	r2, r2, #8
 800c372:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	681a      	ldr	r2, [r3, #0]
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	f042 0201 	orr.w	r2, r2, #1
 800c382:	601a      	str	r2, [r3, #0]
 800c384:	e005      	b.n	800c392 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	2200      	movs	r2, #0
 800c38a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800c38e:	2302      	movs	r3, #2
 800c390:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800c392:	7dfb      	ldrb	r3, [r7, #23]
}
 800c394:	4618      	mov	r0, r3
 800c396:	3718      	adds	r7, #24
 800c398:	46bd      	mov	sp, r7
 800c39a:	bd80      	pop	{r7, pc}

0800c39c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b086      	sub	sp, #24
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800c3a8:	4b8e      	ldr	r3, [pc, #568]	; (800c5e4 <HAL_DMA_IRQHandler+0x248>)
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	4a8e      	ldr	r2, [pc, #568]	; (800c5e8 <HAL_DMA_IRQHandler+0x24c>)
 800c3ae:	fba2 2303 	umull	r2, r3, r2, r3
 800c3b2:	0a9b      	lsrs	r3, r3, #10
 800c3b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800c3bc:	693b      	ldr	r3, [r7, #16]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c3c6:	2208      	movs	r2, #8
 800c3c8:	409a      	lsls	r2, r3
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	4013      	ands	r3, r2
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d01a      	beq.n	800c408 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	f003 0304 	and.w	r3, r3, #4
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d013      	beq.n	800c408 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	681a      	ldr	r2, [r3, #0]
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	f022 0204 	bic.w	r2, r2, #4
 800c3ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c3f4:	2208      	movs	r2, #8
 800c3f6:	409a      	lsls	r2, r3
 800c3f8:	693b      	ldr	r3, [r7, #16]
 800c3fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c400:	f043 0201 	orr.w	r2, r3, #1
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c40c:	2201      	movs	r2, #1
 800c40e:	409a      	lsls	r2, r3
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	4013      	ands	r3, r2
 800c414:	2b00      	cmp	r3, #0
 800c416:	d012      	beq.n	800c43e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	695b      	ldr	r3, [r3, #20]
 800c41e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c422:	2b00      	cmp	r3, #0
 800c424:	d00b      	beq.n	800c43e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c42a:	2201      	movs	r2, #1
 800c42c:	409a      	lsls	r2, r3
 800c42e:	693b      	ldr	r3, [r7, #16]
 800c430:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c436:	f043 0202 	orr.w	r2, r3, #2
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c442:	2204      	movs	r2, #4
 800c444:	409a      	lsls	r2, r3
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	4013      	ands	r3, r2
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d012      	beq.n	800c474 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	f003 0302 	and.w	r3, r3, #2
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d00b      	beq.n	800c474 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c460:	2204      	movs	r2, #4
 800c462:	409a      	lsls	r2, r3
 800c464:	693b      	ldr	r3, [r7, #16]
 800c466:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c46c:	f043 0204 	orr.w	r2, r3, #4
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c478:	2210      	movs	r2, #16
 800c47a:	409a      	lsls	r2, r3
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	4013      	ands	r3, r2
 800c480:	2b00      	cmp	r3, #0
 800c482:	d043      	beq.n	800c50c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	f003 0308 	and.w	r3, r3, #8
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d03c      	beq.n	800c50c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c496:	2210      	movs	r2, #16
 800c498:	409a      	lsls	r2, r3
 800c49a:	693b      	ldr	r3, [r7, #16]
 800c49c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d018      	beq.n	800c4de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d108      	bne.n	800c4cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d024      	beq.n	800c50c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4c6:	6878      	ldr	r0, [r7, #4]
 800c4c8:	4798      	blx	r3
 800c4ca:	e01f      	b.n	800c50c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d01b      	beq.n	800c50c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c4d8:	6878      	ldr	r0, [r7, #4]
 800c4da:	4798      	blx	r3
 800c4dc:	e016      	b.n	800c50c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d107      	bne.n	800c4fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	681a      	ldr	r2, [r3, #0]
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	f022 0208 	bic.w	r2, r2, #8
 800c4fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c500:	2b00      	cmp	r3, #0
 800c502:	d003      	beq.n	800c50c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c508:	6878      	ldr	r0, [r7, #4]
 800c50a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c510:	2220      	movs	r2, #32
 800c512:	409a      	lsls	r2, r3
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	4013      	ands	r3, r2
 800c518:	2b00      	cmp	r3, #0
 800c51a:	f000 808f 	beq.w	800c63c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	f003 0310 	and.w	r3, r3, #16
 800c528:	2b00      	cmp	r3, #0
 800c52a:	f000 8087 	beq.w	800c63c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c532:	2220      	movs	r2, #32
 800c534:	409a      	lsls	r2, r3
 800c536:	693b      	ldr	r3, [r7, #16]
 800c538:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c540:	b2db      	uxtb	r3, r3
 800c542:	2b05      	cmp	r3, #5
 800c544:	d136      	bne.n	800c5b4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	681a      	ldr	r2, [r3, #0]
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	f022 0216 	bic.w	r2, r2, #22
 800c554:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	695a      	ldr	r2, [r3, #20]
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c564:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d103      	bne.n	800c576 <HAL_DMA_IRQHandler+0x1da>
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c572:	2b00      	cmp	r3, #0
 800c574:	d007      	beq.n	800c586 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	681a      	ldr	r2, [r3, #0]
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	f022 0208 	bic.w	r2, r2, #8
 800c584:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c58a:	223f      	movs	r2, #63	; 0x3f
 800c58c:	409a      	lsls	r2, r3
 800c58e:	693b      	ldr	r3, [r7, #16]
 800c590:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	2201      	movs	r2, #1
 800c596:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	2200      	movs	r2, #0
 800c59e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d07e      	beq.n	800c6a8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c5ae:	6878      	ldr	r0, [r7, #4]
 800c5b0:	4798      	blx	r3
        }
        return;
 800c5b2:	e079      	b.n	800c6a8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d01d      	beq.n	800c5fe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d10d      	bne.n	800c5ec <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d031      	beq.n	800c63c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c5dc:	6878      	ldr	r0, [r7, #4]
 800c5de:	4798      	blx	r3
 800c5e0:	e02c      	b.n	800c63c <HAL_DMA_IRQHandler+0x2a0>
 800c5e2:	bf00      	nop
 800c5e4:	20000054 	.word	0x20000054
 800c5e8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d023      	beq.n	800c63c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5f8:	6878      	ldr	r0, [r7, #4]
 800c5fa:	4798      	blx	r3
 800c5fc:	e01e      	b.n	800c63c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d10f      	bne.n	800c62c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	681a      	ldr	r2, [r3, #0]
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	f022 0210 	bic.w	r2, r2, #16
 800c61a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	2201      	movs	r2, #1
 800c620:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	2200      	movs	r2, #0
 800c628:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c630:	2b00      	cmp	r3, #0
 800c632:	d003      	beq.n	800c63c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c638:	6878      	ldr	r0, [r7, #4]
 800c63a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c640:	2b00      	cmp	r3, #0
 800c642:	d032      	beq.n	800c6aa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c648:	f003 0301 	and.w	r3, r3, #1
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d022      	beq.n	800c696 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	2205      	movs	r2, #5
 800c654:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	681a      	ldr	r2, [r3, #0]
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	f022 0201 	bic.w	r2, r2, #1
 800c666:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800c668:	68bb      	ldr	r3, [r7, #8]
 800c66a:	3301      	adds	r3, #1
 800c66c:	60bb      	str	r3, [r7, #8]
 800c66e:	697a      	ldr	r2, [r7, #20]
 800c670:	429a      	cmp	r2, r3
 800c672:	d307      	bcc.n	800c684 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	f003 0301 	and.w	r3, r3, #1
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d1f2      	bne.n	800c668 <HAL_DMA_IRQHandler+0x2cc>
 800c682:	e000      	b.n	800c686 <HAL_DMA_IRQHandler+0x2ea>
          break;
 800c684:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	2201      	movs	r2, #1
 800c68a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	2200      	movs	r2, #0
 800c692:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d005      	beq.n	800c6aa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6a2:	6878      	ldr	r0, [r7, #4]
 800c6a4:	4798      	blx	r3
 800c6a6:	e000      	b.n	800c6aa <HAL_DMA_IRQHandler+0x30e>
        return;
 800c6a8:	bf00      	nop
    }
  }
}
 800c6aa:	3718      	adds	r7, #24
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	bd80      	pop	{r7, pc}

0800c6b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c6b0:	b480      	push	{r7}
 800c6b2:	b085      	sub	sp, #20
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	60f8      	str	r0, [r7, #12]
 800c6b8:	60b9      	str	r1, [r7, #8]
 800c6ba:	607a      	str	r2, [r7, #4]
 800c6bc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	681a      	ldr	r2, [r3, #0]
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c6cc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	683a      	ldr	r2, [r7, #0]
 800c6d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	689b      	ldr	r3, [r3, #8]
 800c6da:	2b40      	cmp	r3, #64	; 0x40
 800c6dc:	d108      	bne.n	800c6f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	687a      	ldr	r2, [r7, #4]
 800c6e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	68ba      	ldr	r2, [r7, #8]
 800c6ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800c6ee:	e007      	b.n	800c700 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	68ba      	ldr	r2, [r7, #8]
 800c6f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	687a      	ldr	r2, [r7, #4]
 800c6fe:	60da      	str	r2, [r3, #12]
}
 800c700:	bf00      	nop
 800c702:	3714      	adds	r7, #20
 800c704:	46bd      	mov	sp, r7
 800c706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70a:	4770      	bx	lr

0800c70c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800c70c:	b480      	push	{r7}
 800c70e:	b085      	sub	sp, #20
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	b2db      	uxtb	r3, r3
 800c71a:	3b10      	subs	r3, #16
 800c71c:	4a14      	ldr	r2, [pc, #80]	; (800c770 <DMA_CalcBaseAndBitshift+0x64>)
 800c71e:	fba2 2303 	umull	r2, r3, r2, r3
 800c722:	091b      	lsrs	r3, r3, #4
 800c724:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800c726:	4a13      	ldr	r2, [pc, #76]	; (800c774 <DMA_CalcBaseAndBitshift+0x68>)
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	4413      	add	r3, r2
 800c72c:	781b      	ldrb	r3, [r3, #0]
 800c72e:	461a      	mov	r2, r3
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	2b03      	cmp	r3, #3
 800c738:	d909      	bls.n	800c74e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800c742:	f023 0303 	bic.w	r3, r3, #3
 800c746:	1d1a      	adds	r2, r3, #4
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	659a      	str	r2, [r3, #88]	; 0x58
 800c74c:	e007      	b.n	800c75e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800c756:	f023 0303 	bic.w	r3, r3, #3
 800c75a:	687a      	ldr	r2, [r7, #4]
 800c75c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800c762:	4618      	mov	r0, r3
 800c764:	3714      	adds	r7, #20
 800c766:	46bd      	mov	sp, r7
 800c768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76c:	4770      	bx	lr
 800c76e:	bf00      	nop
 800c770:	aaaaaaab 	.word	0xaaaaaaab
 800c774:	080200c0 	.word	0x080200c0

0800c778 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800c778:	b480      	push	{r7}
 800c77a:	b085      	sub	sp, #20
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c780:	2300      	movs	r3, #0
 800c782:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c788:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	699b      	ldr	r3, [r3, #24]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d11f      	bne.n	800c7d2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800c792:	68bb      	ldr	r3, [r7, #8]
 800c794:	2b03      	cmp	r3, #3
 800c796:	d856      	bhi.n	800c846 <DMA_CheckFifoParam+0xce>
 800c798:	a201      	add	r2, pc, #4	; (adr r2, 800c7a0 <DMA_CheckFifoParam+0x28>)
 800c79a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c79e:	bf00      	nop
 800c7a0:	0800c7b1 	.word	0x0800c7b1
 800c7a4:	0800c7c3 	.word	0x0800c7c3
 800c7a8:	0800c7b1 	.word	0x0800c7b1
 800c7ac:	0800c847 	.word	0x0800c847
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d046      	beq.n	800c84a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800c7bc:	2301      	movs	r3, #1
 800c7be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c7c0:	e043      	b.n	800c84a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7c6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800c7ca:	d140      	bne.n	800c84e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800c7cc:	2301      	movs	r3, #1
 800c7ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c7d0:	e03d      	b.n	800c84e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	699b      	ldr	r3, [r3, #24]
 800c7d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c7da:	d121      	bne.n	800c820 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800c7dc:	68bb      	ldr	r3, [r7, #8]
 800c7de:	2b03      	cmp	r3, #3
 800c7e0:	d837      	bhi.n	800c852 <DMA_CheckFifoParam+0xda>
 800c7e2:	a201      	add	r2, pc, #4	; (adr r2, 800c7e8 <DMA_CheckFifoParam+0x70>)
 800c7e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7e8:	0800c7f9 	.word	0x0800c7f9
 800c7ec:	0800c7ff 	.word	0x0800c7ff
 800c7f0:	0800c7f9 	.word	0x0800c7f9
 800c7f4:	0800c811 	.word	0x0800c811
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800c7f8:	2301      	movs	r3, #1
 800c7fa:	73fb      	strb	r3, [r7, #15]
      break;
 800c7fc:	e030      	b.n	800c860 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c802:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c806:	2b00      	cmp	r3, #0
 800c808:	d025      	beq.n	800c856 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800c80a:	2301      	movs	r3, #1
 800c80c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c80e:	e022      	b.n	800c856 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c814:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800c818:	d11f      	bne.n	800c85a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800c81a:	2301      	movs	r3, #1
 800c81c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800c81e:	e01c      	b.n	800c85a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800c820:	68bb      	ldr	r3, [r7, #8]
 800c822:	2b02      	cmp	r3, #2
 800c824:	d903      	bls.n	800c82e <DMA_CheckFifoParam+0xb6>
 800c826:	68bb      	ldr	r3, [r7, #8]
 800c828:	2b03      	cmp	r3, #3
 800c82a:	d003      	beq.n	800c834 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800c82c:	e018      	b.n	800c860 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800c82e:	2301      	movs	r3, #1
 800c830:	73fb      	strb	r3, [r7, #15]
      break;
 800c832:	e015      	b.n	800c860 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c838:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d00e      	beq.n	800c85e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800c840:	2301      	movs	r3, #1
 800c842:	73fb      	strb	r3, [r7, #15]
      break;
 800c844:	e00b      	b.n	800c85e <DMA_CheckFifoParam+0xe6>
      break;
 800c846:	bf00      	nop
 800c848:	e00a      	b.n	800c860 <DMA_CheckFifoParam+0xe8>
      break;
 800c84a:	bf00      	nop
 800c84c:	e008      	b.n	800c860 <DMA_CheckFifoParam+0xe8>
      break;
 800c84e:	bf00      	nop
 800c850:	e006      	b.n	800c860 <DMA_CheckFifoParam+0xe8>
      break;
 800c852:	bf00      	nop
 800c854:	e004      	b.n	800c860 <DMA_CheckFifoParam+0xe8>
      break;
 800c856:	bf00      	nop
 800c858:	e002      	b.n	800c860 <DMA_CheckFifoParam+0xe8>
      break;   
 800c85a:	bf00      	nop
 800c85c:	e000      	b.n	800c860 <DMA_CheckFifoParam+0xe8>
      break;
 800c85e:	bf00      	nop
    }
  } 
  
  return status; 
 800c860:	7bfb      	ldrb	r3, [r7, #15]
}
 800c862:	4618      	mov	r0, r3
 800c864:	3714      	adds	r7, #20
 800c866:	46bd      	mov	sp, r7
 800c868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86c:	4770      	bx	lr
 800c86e:	bf00      	nop

0800c870 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c870:	b480      	push	{r7}
 800c872:	b089      	sub	sp, #36	; 0x24
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
 800c878:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800c87a:	2300      	movs	r3, #0
 800c87c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800c87e:	2300      	movs	r3, #0
 800c880:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800c882:	2300      	movs	r3, #0
 800c884:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c886:	2300      	movs	r3, #0
 800c888:	61fb      	str	r3, [r7, #28]
 800c88a:	e165      	b.n	800cb58 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800c88c:	2201      	movs	r2, #1
 800c88e:	69fb      	ldr	r3, [r7, #28]
 800c890:	fa02 f303 	lsl.w	r3, r2, r3
 800c894:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800c896:	683b      	ldr	r3, [r7, #0]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	697a      	ldr	r2, [r7, #20]
 800c89c:	4013      	ands	r3, r2
 800c89e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800c8a0:	693a      	ldr	r2, [r7, #16]
 800c8a2:	697b      	ldr	r3, [r7, #20]
 800c8a4:	429a      	cmp	r2, r3
 800c8a6:	f040 8154 	bne.w	800cb52 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800c8aa:	683b      	ldr	r3, [r7, #0]
 800c8ac:	685b      	ldr	r3, [r3, #4]
 800c8ae:	f003 0303 	and.w	r3, r3, #3
 800c8b2:	2b01      	cmp	r3, #1
 800c8b4:	d005      	beq.n	800c8c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c8b6:	683b      	ldr	r3, [r7, #0]
 800c8b8:	685b      	ldr	r3, [r3, #4]
 800c8ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800c8be:	2b02      	cmp	r3, #2
 800c8c0:	d130      	bne.n	800c924 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	689b      	ldr	r3, [r3, #8]
 800c8c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800c8c8:	69fb      	ldr	r3, [r7, #28]
 800c8ca:	005b      	lsls	r3, r3, #1
 800c8cc:	2203      	movs	r2, #3
 800c8ce:	fa02 f303 	lsl.w	r3, r2, r3
 800c8d2:	43db      	mvns	r3, r3
 800c8d4:	69ba      	ldr	r2, [r7, #24]
 800c8d6:	4013      	ands	r3, r2
 800c8d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800c8da:	683b      	ldr	r3, [r7, #0]
 800c8dc:	68da      	ldr	r2, [r3, #12]
 800c8de:	69fb      	ldr	r3, [r7, #28]
 800c8e0:	005b      	lsls	r3, r3, #1
 800c8e2:	fa02 f303 	lsl.w	r3, r2, r3
 800c8e6:	69ba      	ldr	r2, [r7, #24]
 800c8e8:	4313      	orrs	r3, r2
 800c8ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	69ba      	ldr	r2, [r7, #24]
 800c8f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	685b      	ldr	r3, [r3, #4]
 800c8f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800c8f8:	2201      	movs	r2, #1
 800c8fa:	69fb      	ldr	r3, [r7, #28]
 800c8fc:	fa02 f303 	lsl.w	r3, r2, r3
 800c900:	43db      	mvns	r3, r3
 800c902:	69ba      	ldr	r2, [r7, #24]
 800c904:	4013      	ands	r3, r2
 800c906:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800c908:	683b      	ldr	r3, [r7, #0]
 800c90a:	685b      	ldr	r3, [r3, #4]
 800c90c:	091b      	lsrs	r3, r3, #4
 800c90e:	f003 0201 	and.w	r2, r3, #1
 800c912:	69fb      	ldr	r3, [r7, #28]
 800c914:	fa02 f303 	lsl.w	r3, r2, r3
 800c918:	69ba      	ldr	r2, [r7, #24]
 800c91a:	4313      	orrs	r3, r2
 800c91c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	69ba      	ldr	r2, [r7, #24]
 800c922:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800c924:	683b      	ldr	r3, [r7, #0]
 800c926:	685b      	ldr	r3, [r3, #4]
 800c928:	f003 0303 	and.w	r3, r3, #3
 800c92c:	2b03      	cmp	r3, #3
 800c92e:	d017      	beq.n	800c960 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	68db      	ldr	r3, [r3, #12]
 800c934:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800c936:	69fb      	ldr	r3, [r7, #28]
 800c938:	005b      	lsls	r3, r3, #1
 800c93a:	2203      	movs	r2, #3
 800c93c:	fa02 f303 	lsl.w	r3, r2, r3
 800c940:	43db      	mvns	r3, r3
 800c942:	69ba      	ldr	r2, [r7, #24]
 800c944:	4013      	ands	r3, r2
 800c946:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c948:	683b      	ldr	r3, [r7, #0]
 800c94a:	689a      	ldr	r2, [r3, #8]
 800c94c:	69fb      	ldr	r3, [r7, #28]
 800c94e:	005b      	lsls	r3, r3, #1
 800c950:	fa02 f303 	lsl.w	r3, r2, r3
 800c954:	69ba      	ldr	r2, [r7, #24]
 800c956:	4313      	orrs	r3, r2
 800c958:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	69ba      	ldr	r2, [r7, #24]
 800c95e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c960:	683b      	ldr	r3, [r7, #0]
 800c962:	685b      	ldr	r3, [r3, #4]
 800c964:	f003 0303 	and.w	r3, r3, #3
 800c968:	2b02      	cmp	r3, #2
 800c96a:	d123      	bne.n	800c9b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800c96c:	69fb      	ldr	r3, [r7, #28]
 800c96e:	08da      	lsrs	r2, r3, #3
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	3208      	adds	r2, #8
 800c974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c978:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800c97a:	69fb      	ldr	r3, [r7, #28]
 800c97c:	f003 0307 	and.w	r3, r3, #7
 800c980:	009b      	lsls	r3, r3, #2
 800c982:	220f      	movs	r2, #15
 800c984:	fa02 f303 	lsl.w	r3, r2, r3
 800c988:	43db      	mvns	r3, r3
 800c98a:	69ba      	ldr	r2, [r7, #24]
 800c98c:	4013      	ands	r3, r2
 800c98e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800c990:	683b      	ldr	r3, [r7, #0]
 800c992:	691a      	ldr	r2, [r3, #16]
 800c994:	69fb      	ldr	r3, [r7, #28]
 800c996:	f003 0307 	and.w	r3, r3, #7
 800c99a:	009b      	lsls	r3, r3, #2
 800c99c:	fa02 f303 	lsl.w	r3, r2, r3
 800c9a0:	69ba      	ldr	r2, [r7, #24]
 800c9a2:	4313      	orrs	r3, r2
 800c9a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800c9a6:	69fb      	ldr	r3, [r7, #28]
 800c9a8:	08da      	lsrs	r2, r3, #3
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	3208      	adds	r2, #8
 800c9ae:	69b9      	ldr	r1, [r7, #24]
 800c9b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800c9ba:	69fb      	ldr	r3, [r7, #28]
 800c9bc:	005b      	lsls	r3, r3, #1
 800c9be:	2203      	movs	r2, #3
 800c9c0:	fa02 f303 	lsl.w	r3, r2, r3
 800c9c4:	43db      	mvns	r3, r3
 800c9c6:	69ba      	ldr	r2, [r7, #24]
 800c9c8:	4013      	ands	r3, r2
 800c9ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800c9cc:	683b      	ldr	r3, [r7, #0]
 800c9ce:	685b      	ldr	r3, [r3, #4]
 800c9d0:	f003 0203 	and.w	r2, r3, #3
 800c9d4:	69fb      	ldr	r3, [r7, #28]
 800c9d6:	005b      	lsls	r3, r3, #1
 800c9d8:	fa02 f303 	lsl.w	r3, r2, r3
 800c9dc:	69ba      	ldr	r2, [r7, #24]
 800c9de:	4313      	orrs	r3, r2
 800c9e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	69ba      	ldr	r2, [r7, #24]
 800c9e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800c9e8:	683b      	ldr	r3, [r7, #0]
 800c9ea:	685b      	ldr	r3, [r3, #4]
 800c9ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	f000 80ae 	beq.w	800cb52 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	60fb      	str	r3, [r7, #12]
 800c9fa:	4b5d      	ldr	r3, [pc, #372]	; (800cb70 <HAL_GPIO_Init+0x300>)
 800c9fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9fe:	4a5c      	ldr	r2, [pc, #368]	; (800cb70 <HAL_GPIO_Init+0x300>)
 800ca00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ca04:	6453      	str	r3, [r2, #68]	; 0x44
 800ca06:	4b5a      	ldr	r3, [pc, #360]	; (800cb70 <HAL_GPIO_Init+0x300>)
 800ca08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ca0e:	60fb      	str	r3, [r7, #12]
 800ca10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800ca12:	4a58      	ldr	r2, [pc, #352]	; (800cb74 <HAL_GPIO_Init+0x304>)
 800ca14:	69fb      	ldr	r3, [r7, #28]
 800ca16:	089b      	lsrs	r3, r3, #2
 800ca18:	3302      	adds	r3, #2
 800ca1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800ca20:	69fb      	ldr	r3, [r7, #28]
 800ca22:	f003 0303 	and.w	r3, r3, #3
 800ca26:	009b      	lsls	r3, r3, #2
 800ca28:	220f      	movs	r2, #15
 800ca2a:	fa02 f303 	lsl.w	r3, r2, r3
 800ca2e:	43db      	mvns	r3, r3
 800ca30:	69ba      	ldr	r2, [r7, #24]
 800ca32:	4013      	ands	r3, r2
 800ca34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	4a4f      	ldr	r2, [pc, #316]	; (800cb78 <HAL_GPIO_Init+0x308>)
 800ca3a:	4293      	cmp	r3, r2
 800ca3c:	d025      	beq.n	800ca8a <HAL_GPIO_Init+0x21a>
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	4a4e      	ldr	r2, [pc, #312]	; (800cb7c <HAL_GPIO_Init+0x30c>)
 800ca42:	4293      	cmp	r3, r2
 800ca44:	d01f      	beq.n	800ca86 <HAL_GPIO_Init+0x216>
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	4a4d      	ldr	r2, [pc, #308]	; (800cb80 <HAL_GPIO_Init+0x310>)
 800ca4a:	4293      	cmp	r3, r2
 800ca4c:	d019      	beq.n	800ca82 <HAL_GPIO_Init+0x212>
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	4a4c      	ldr	r2, [pc, #304]	; (800cb84 <HAL_GPIO_Init+0x314>)
 800ca52:	4293      	cmp	r3, r2
 800ca54:	d013      	beq.n	800ca7e <HAL_GPIO_Init+0x20e>
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	4a4b      	ldr	r2, [pc, #300]	; (800cb88 <HAL_GPIO_Init+0x318>)
 800ca5a:	4293      	cmp	r3, r2
 800ca5c:	d00d      	beq.n	800ca7a <HAL_GPIO_Init+0x20a>
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	4a4a      	ldr	r2, [pc, #296]	; (800cb8c <HAL_GPIO_Init+0x31c>)
 800ca62:	4293      	cmp	r3, r2
 800ca64:	d007      	beq.n	800ca76 <HAL_GPIO_Init+0x206>
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	4a49      	ldr	r2, [pc, #292]	; (800cb90 <HAL_GPIO_Init+0x320>)
 800ca6a:	4293      	cmp	r3, r2
 800ca6c:	d101      	bne.n	800ca72 <HAL_GPIO_Init+0x202>
 800ca6e:	2306      	movs	r3, #6
 800ca70:	e00c      	b.n	800ca8c <HAL_GPIO_Init+0x21c>
 800ca72:	2307      	movs	r3, #7
 800ca74:	e00a      	b.n	800ca8c <HAL_GPIO_Init+0x21c>
 800ca76:	2305      	movs	r3, #5
 800ca78:	e008      	b.n	800ca8c <HAL_GPIO_Init+0x21c>
 800ca7a:	2304      	movs	r3, #4
 800ca7c:	e006      	b.n	800ca8c <HAL_GPIO_Init+0x21c>
 800ca7e:	2303      	movs	r3, #3
 800ca80:	e004      	b.n	800ca8c <HAL_GPIO_Init+0x21c>
 800ca82:	2302      	movs	r3, #2
 800ca84:	e002      	b.n	800ca8c <HAL_GPIO_Init+0x21c>
 800ca86:	2301      	movs	r3, #1
 800ca88:	e000      	b.n	800ca8c <HAL_GPIO_Init+0x21c>
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	69fa      	ldr	r2, [r7, #28]
 800ca8e:	f002 0203 	and.w	r2, r2, #3
 800ca92:	0092      	lsls	r2, r2, #2
 800ca94:	4093      	lsls	r3, r2
 800ca96:	69ba      	ldr	r2, [r7, #24]
 800ca98:	4313      	orrs	r3, r2
 800ca9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800ca9c:	4935      	ldr	r1, [pc, #212]	; (800cb74 <HAL_GPIO_Init+0x304>)
 800ca9e:	69fb      	ldr	r3, [r7, #28]
 800caa0:	089b      	lsrs	r3, r3, #2
 800caa2:	3302      	adds	r3, #2
 800caa4:	69ba      	ldr	r2, [r7, #24]
 800caa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800caaa:	4b3a      	ldr	r3, [pc, #232]	; (800cb94 <HAL_GPIO_Init+0x324>)
 800caac:	689b      	ldr	r3, [r3, #8]
 800caae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cab0:	693b      	ldr	r3, [r7, #16]
 800cab2:	43db      	mvns	r3, r3
 800cab4:	69ba      	ldr	r2, [r7, #24]
 800cab6:	4013      	ands	r3, r2
 800cab8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	685b      	ldr	r3, [r3, #4]
 800cabe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d003      	beq.n	800cace <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800cac6:	69ba      	ldr	r2, [r7, #24]
 800cac8:	693b      	ldr	r3, [r7, #16]
 800caca:	4313      	orrs	r3, r2
 800cacc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800cace:	4a31      	ldr	r2, [pc, #196]	; (800cb94 <HAL_GPIO_Init+0x324>)
 800cad0:	69bb      	ldr	r3, [r7, #24]
 800cad2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800cad4:	4b2f      	ldr	r3, [pc, #188]	; (800cb94 <HAL_GPIO_Init+0x324>)
 800cad6:	68db      	ldr	r3, [r3, #12]
 800cad8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cada:	693b      	ldr	r3, [r7, #16]
 800cadc:	43db      	mvns	r3, r3
 800cade:	69ba      	ldr	r2, [r7, #24]
 800cae0:	4013      	ands	r3, r2
 800cae2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800cae4:	683b      	ldr	r3, [r7, #0]
 800cae6:	685b      	ldr	r3, [r3, #4]
 800cae8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800caec:	2b00      	cmp	r3, #0
 800caee:	d003      	beq.n	800caf8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800caf0:	69ba      	ldr	r2, [r7, #24]
 800caf2:	693b      	ldr	r3, [r7, #16]
 800caf4:	4313      	orrs	r3, r2
 800caf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800caf8:	4a26      	ldr	r2, [pc, #152]	; (800cb94 <HAL_GPIO_Init+0x324>)
 800cafa:	69bb      	ldr	r3, [r7, #24]
 800cafc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800cafe:	4b25      	ldr	r3, [pc, #148]	; (800cb94 <HAL_GPIO_Init+0x324>)
 800cb00:	685b      	ldr	r3, [r3, #4]
 800cb02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cb04:	693b      	ldr	r3, [r7, #16]
 800cb06:	43db      	mvns	r3, r3
 800cb08:	69ba      	ldr	r2, [r7, #24]
 800cb0a:	4013      	ands	r3, r2
 800cb0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800cb0e:	683b      	ldr	r3, [r7, #0]
 800cb10:	685b      	ldr	r3, [r3, #4]
 800cb12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d003      	beq.n	800cb22 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800cb1a:	69ba      	ldr	r2, [r7, #24]
 800cb1c:	693b      	ldr	r3, [r7, #16]
 800cb1e:	4313      	orrs	r3, r2
 800cb20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800cb22:	4a1c      	ldr	r2, [pc, #112]	; (800cb94 <HAL_GPIO_Init+0x324>)
 800cb24:	69bb      	ldr	r3, [r7, #24]
 800cb26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800cb28:	4b1a      	ldr	r3, [pc, #104]	; (800cb94 <HAL_GPIO_Init+0x324>)
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cb2e:	693b      	ldr	r3, [r7, #16]
 800cb30:	43db      	mvns	r3, r3
 800cb32:	69ba      	ldr	r2, [r7, #24]
 800cb34:	4013      	ands	r3, r2
 800cb36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	685b      	ldr	r3, [r3, #4]
 800cb3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d003      	beq.n	800cb4c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800cb44:	69ba      	ldr	r2, [r7, #24]
 800cb46:	693b      	ldr	r3, [r7, #16]
 800cb48:	4313      	orrs	r3, r2
 800cb4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800cb4c:	4a11      	ldr	r2, [pc, #68]	; (800cb94 <HAL_GPIO_Init+0x324>)
 800cb4e:	69bb      	ldr	r3, [r7, #24]
 800cb50:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800cb52:	69fb      	ldr	r3, [r7, #28]
 800cb54:	3301      	adds	r3, #1
 800cb56:	61fb      	str	r3, [r7, #28]
 800cb58:	69fb      	ldr	r3, [r7, #28]
 800cb5a:	2b0f      	cmp	r3, #15
 800cb5c:	f67f ae96 	bls.w	800c88c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800cb60:	bf00      	nop
 800cb62:	bf00      	nop
 800cb64:	3724      	adds	r7, #36	; 0x24
 800cb66:	46bd      	mov	sp, r7
 800cb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6c:	4770      	bx	lr
 800cb6e:	bf00      	nop
 800cb70:	40023800 	.word	0x40023800
 800cb74:	40013800 	.word	0x40013800
 800cb78:	40020000 	.word	0x40020000
 800cb7c:	40020400 	.word	0x40020400
 800cb80:	40020800 	.word	0x40020800
 800cb84:	40020c00 	.word	0x40020c00
 800cb88:	40021000 	.word	0x40021000
 800cb8c:	40021400 	.word	0x40021400
 800cb90:	40021800 	.word	0x40021800
 800cb94:	40013c00 	.word	0x40013c00

0800cb98 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800cb98:	b480      	push	{r7}
 800cb9a:	b087      	sub	sp, #28
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
 800cba0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800cba2:	2300      	movs	r3, #0
 800cba4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800cba6:	2300      	movs	r3, #0
 800cba8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800cbaa:	2300      	movs	r3, #0
 800cbac:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800cbae:	2300      	movs	r3, #0
 800cbb0:	617b      	str	r3, [r7, #20]
 800cbb2:	e0c7      	b.n	800cd44 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800cbb4:	2201      	movs	r2, #1
 800cbb6:	697b      	ldr	r3, [r7, #20]
 800cbb8:	fa02 f303 	lsl.w	r3, r2, r3
 800cbbc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800cbbe:	683a      	ldr	r2, [r7, #0]
 800cbc0:	693b      	ldr	r3, [r7, #16]
 800cbc2:	4013      	ands	r3, r2
 800cbc4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800cbc6:	68fa      	ldr	r2, [r7, #12]
 800cbc8:	693b      	ldr	r3, [r7, #16]
 800cbca:	429a      	cmp	r2, r3
 800cbcc:	f040 80b7 	bne.w	800cd3e <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800cbd0:	4a62      	ldr	r2, [pc, #392]	; (800cd5c <HAL_GPIO_DeInit+0x1c4>)
 800cbd2:	697b      	ldr	r3, [r7, #20]
 800cbd4:	089b      	lsrs	r3, r3, #2
 800cbd6:	3302      	adds	r3, #2
 800cbd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cbdc:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800cbde:	697b      	ldr	r3, [r7, #20]
 800cbe0:	f003 0303 	and.w	r3, r3, #3
 800cbe4:	009b      	lsls	r3, r3, #2
 800cbe6:	220f      	movs	r2, #15
 800cbe8:	fa02 f303 	lsl.w	r3, r2, r3
 800cbec:	68ba      	ldr	r2, [r7, #8]
 800cbee:	4013      	ands	r3, r2
 800cbf0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	4a5a      	ldr	r2, [pc, #360]	; (800cd60 <HAL_GPIO_DeInit+0x1c8>)
 800cbf6:	4293      	cmp	r3, r2
 800cbf8:	d025      	beq.n	800cc46 <HAL_GPIO_DeInit+0xae>
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	4a59      	ldr	r2, [pc, #356]	; (800cd64 <HAL_GPIO_DeInit+0x1cc>)
 800cbfe:	4293      	cmp	r3, r2
 800cc00:	d01f      	beq.n	800cc42 <HAL_GPIO_DeInit+0xaa>
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	4a58      	ldr	r2, [pc, #352]	; (800cd68 <HAL_GPIO_DeInit+0x1d0>)
 800cc06:	4293      	cmp	r3, r2
 800cc08:	d019      	beq.n	800cc3e <HAL_GPIO_DeInit+0xa6>
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	4a57      	ldr	r2, [pc, #348]	; (800cd6c <HAL_GPIO_DeInit+0x1d4>)
 800cc0e:	4293      	cmp	r3, r2
 800cc10:	d013      	beq.n	800cc3a <HAL_GPIO_DeInit+0xa2>
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	4a56      	ldr	r2, [pc, #344]	; (800cd70 <HAL_GPIO_DeInit+0x1d8>)
 800cc16:	4293      	cmp	r3, r2
 800cc18:	d00d      	beq.n	800cc36 <HAL_GPIO_DeInit+0x9e>
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	4a55      	ldr	r2, [pc, #340]	; (800cd74 <HAL_GPIO_DeInit+0x1dc>)
 800cc1e:	4293      	cmp	r3, r2
 800cc20:	d007      	beq.n	800cc32 <HAL_GPIO_DeInit+0x9a>
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	4a54      	ldr	r2, [pc, #336]	; (800cd78 <HAL_GPIO_DeInit+0x1e0>)
 800cc26:	4293      	cmp	r3, r2
 800cc28:	d101      	bne.n	800cc2e <HAL_GPIO_DeInit+0x96>
 800cc2a:	2306      	movs	r3, #6
 800cc2c:	e00c      	b.n	800cc48 <HAL_GPIO_DeInit+0xb0>
 800cc2e:	2307      	movs	r3, #7
 800cc30:	e00a      	b.n	800cc48 <HAL_GPIO_DeInit+0xb0>
 800cc32:	2305      	movs	r3, #5
 800cc34:	e008      	b.n	800cc48 <HAL_GPIO_DeInit+0xb0>
 800cc36:	2304      	movs	r3, #4
 800cc38:	e006      	b.n	800cc48 <HAL_GPIO_DeInit+0xb0>
 800cc3a:	2303      	movs	r3, #3
 800cc3c:	e004      	b.n	800cc48 <HAL_GPIO_DeInit+0xb0>
 800cc3e:	2302      	movs	r3, #2
 800cc40:	e002      	b.n	800cc48 <HAL_GPIO_DeInit+0xb0>
 800cc42:	2301      	movs	r3, #1
 800cc44:	e000      	b.n	800cc48 <HAL_GPIO_DeInit+0xb0>
 800cc46:	2300      	movs	r3, #0
 800cc48:	697a      	ldr	r2, [r7, #20]
 800cc4a:	f002 0203 	and.w	r2, r2, #3
 800cc4e:	0092      	lsls	r2, r2, #2
 800cc50:	4093      	lsls	r3, r2
 800cc52:	68ba      	ldr	r2, [r7, #8]
 800cc54:	429a      	cmp	r2, r3
 800cc56:	d132      	bne.n	800ccbe <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800cc58:	4b48      	ldr	r3, [pc, #288]	; (800cd7c <HAL_GPIO_DeInit+0x1e4>)
 800cc5a:	681a      	ldr	r2, [r3, #0]
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	43db      	mvns	r3, r3
 800cc60:	4946      	ldr	r1, [pc, #280]	; (800cd7c <HAL_GPIO_DeInit+0x1e4>)
 800cc62:	4013      	ands	r3, r2
 800cc64:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800cc66:	4b45      	ldr	r3, [pc, #276]	; (800cd7c <HAL_GPIO_DeInit+0x1e4>)
 800cc68:	685a      	ldr	r2, [r3, #4]
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	43db      	mvns	r3, r3
 800cc6e:	4943      	ldr	r1, [pc, #268]	; (800cd7c <HAL_GPIO_DeInit+0x1e4>)
 800cc70:	4013      	ands	r3, r2
 800cc72:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800cc74:	4b41      	ldr	r3, [pc, #260]	; (800cd7c <HAL_GPIO_DeInit+0x1e4>)
 800cc76:	68da      	ldr	r2, [r3, #12]
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	43db      	mvns	r3, r3
 800cc7c:	493f      	ldr	r1, [pc, #252]	; (800cd7c <HAL_GPIO_DeInit+0x1e4>)
 800cc7e:	4013      	ands	r3, r2
 800cc80:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800cc82:	4b3e      	ldr	r3, [pc, #248]	; (800cd7c <HAL_GPIO_DeInit+0x1e4>)
 800cc84:	689a      	ldr	r2, [r3, #8]
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	43db      	mvns	r3, r3
 800cc8a:	493c      	ldr	r1, [pc, #240]	; (800cd7c <HAL_GPIO_DeInit+0x1e4>)
 800cc8c:	4013      	ands	r3, r2
 800cc8e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800cc90:	697b      	ldr	r3, [r7, #20]
 800cc92:	f003 0303 	and.w	r3, r3, #3
 800cc96:	009b      	lsls	r3, r3, #2
 800cc98:	220f      	movs	r2, #15
 800cc9a:	fa02 f303 	lsl.w	r3, r2, r3
 800cc9e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800cca0:	4a2e      	ldr	r2, [pc, #184]	; (800cd5c <HAL_GPIO_DeInit+0x1c4>)
 800cca2:	697b      	ldr	r3, [r7, #20]
 800cca4:	089b      	lsrs	r3, r3, #2
 800cca6:	3302      	adds	r3, #2
 800cca8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800ccac:	68bb      	ldr	r3, [r7, #8]
 800ccae:	43da      	mvns	r2, r3
 800ccb0:	482a      	ldr	r0, [pc, #168]	; (800cd5c <HAL_GPIO_DeInit+0x1c4>)
 800ccb2:	697b      	ldr	r3, [r7, #20]
 800ccb4:	089b      	lsrs	r3, r3, #2
 800ccb6:	400a      	ands	r2, r1
 800ccb8:	3302      	adds	r3, #2
 800ccba:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	681a      	ldr	r2, [r3, #0]
 800ccc2:	697b      	ldr	r3, [r7, #20]
 800ccc4:	005b      	lsls	r3, r3, #1
 800ccc6:	2103      	movs	r1, #3
 800ccc8:	fa01 f303 	lsl.w	r3, r1, r3
 800cccc:	43db      	mvns	r3, r3
 800ccce:	401a      	ands	r2, r3
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800ccd4:	697b      	ldr	r3, [r7, #20]
 800ccd6:	08da      	lsrs	r2, r3, #3
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	3208      	adds	r2, #8
 800ccdc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cce0:	697b      	ldr	r3, [r7, #20]
 800cce2:	f003 0307 	and.w	r3, r3, #7
 800cce6:	009b      	lsls	r3, r3, #2
 800cce8:	220f      	movs	r2, #15
 800ccea:	fa02 f303 	lsl.w	r3, r2, r3
 800ccee:	43db      	mvns	r3, r3
 800ccf0:	697a      	ldr	r2, [r7, #20]
 800ccf2:	08d2      	lsrs	r2, r2, #3
 800ccf4:	4019      	ands	r1, r3
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	3208      	adds	r2, #8
 800ccfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	68da      	ldr	r2, [r3, #12]
 800cd02:	697b      	ldr	r3, [r7, #20]
 800cd04:	005b      	lsls	r3, r3, #1
 800cd06:	2103      	movs	r1, #3
 800cd08:	fa01 f303 	lsl.w	r3, r1, r3
 800cd0c:	43db      	mvns	r3, r3
 800cd0e:	401a      	ands	r2, r3
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	685a      	ldr	r2, [r3, #4]
 800cd18:	2101      	movs	r1, #1
 800cd1a:	697b      	ldr	r3, [r7, #20]
 800cd1c:	fa01 f303 	lsl.w	r3, r1, r3
 800cd20:	43db      	mvns	r3, r3
 800cd22:	401a      	ands	r2, r3
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	689a      	ldr	r2, [r3, #8]
 800cd2c:	697b      	ldr	r3, [r7, #20]
 800cd2e:	005b      	lsls	r3, r3, #1
 800cd30:	2103      	movs	r1, #3
 800cd32:	fa01 f303 	lsl.w	r3, r1, r3
 800cd36:	43db      	mvns	r3, r3
 800cd38:	401a      	ands	r2, r3
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800cd3e:	697b      	ldr	r3, [r7, #20]
 800cd40:	3301      	adds	r3, #1
 800cd42:	617b      	str	r3, [r7, #20]
 800cd44:	697b      	ldr	r3, [r7, #20]
 800cd46:	2b0f      	cmp	r3, #15
 800cd48:	f67f af34 	bls.w	800cbb4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800cd4c:	bf00      	nop
 800cd4e:	bf00      	nop
 800cd50:	371c      	adds	r7, #28
 800cd52:	46bd      	mov	sp, r7
 800cd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd58:	4770      	bx	lr
 800cd5a:	bf00      	nop
 800cd5c:	40013800 	.word	0x40013800
 800cd60:	40020000 	.word	0x40020000
 800cd64:	40020400 	.word	0x40020400
 800cd68:	40020800 	.word	0x40020800
 800cd6c:	40020c00 	.word	0x40020c00
 800cd70:	40021000 	.word	0x40021000
 800cd74:	40021400 	.word	0x40021400
 800cd78:	40021800 	.word	0x40021800
 800cd7c:	40013c00 	.word	0x40013c00

0800cd80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800cd80:	b480      	push	{r7}
 800cd82:	b085      	sub	sp, #20
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
 800cd88:	460b      	mov	r3, r1
 800cd8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	691a      	ldr	r2, [r3, #16]
 800cd90:	887b      	ldrh	r3, [r7, #2]
 800cd92:	4013      	ands	r3, r2
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d002      	beq.n	800cd9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800cd98:	2301      	movs	r3, #1
 800cd9a:	73fb      	strb	r3, [r7, #15]
 800cd9c:	e001      	b.n	800cda2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800cd9e:	2300      	movs	r3, #0
 800cda0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800cda2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cda4:	4618      	mov	r0, r3
 800cda6:	3714      	adds	r7, #20
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdae:	4770      	bx	lr

0800cdb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800cdb0:	b480      	push	{r7}
 800cdb2:	b083      	sub	sp, #12
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
 800cdb8:	460b      	mov	r3, r1
 800cdba:	807b      	strh	r3, [r7, #2]
 800cdbc:	4613      	mov	r3, r2
 800cdbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800cdc0:	787b      	ldrb	r3, [r7, #1]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d003      	beq.n	800cdce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800cdc6:	887a      	ldrh	r2, [r7, #2]
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800cdcc:	e003      	b.n	800cdd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800cdce:	887b      	ldrh	r3, [r7, #2]
 800cdd0:	041a      	lsls	r2, r3, #16
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	619a      	str	r2, [r3, #24]
}
 800cdd6:	bf00      	nop
 800cdd8:	370c      	adds	r7, #12
 800cdda:	46bd      	mov	sp, r7
 800cddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde0:	4770      	bx	lr
	...

0800cde4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800cde4:	b580      	push	{r7, lr}
 800cde6:	b084      	sub	sp, #16
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d101      	bne.n	800cdf6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800cdf2:	2301      	movs	r3, #1
 800cdf4:	e12b      	b.n	800d04e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cdfc:	b2db      	uxtb	r3, r3
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d106      	bne.n	800ce10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	2200      	movs	r2, #0
 800ce06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800ce0a:	6878      	ldr	r0, [r7, #4]
 800ce0c:	f7fd f9be 	bl	800a18c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	2224      	movs	r2, #36	; 0x24
 800ce14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	681a      	ldr	r2, [r3, #0]
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	f022 0201 	bic.w	r2, r2, #1
 800ce26:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	681a      	ldr	r2, [r3, #0]
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ce36:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	681a      	ldr	r2, [r3, #0]
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ce46:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800ce48:	f002 fb46 	bl	800f4d8 <HAL_RCC_GetPCLK1Freq>
 800ce4c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	685b      	ldr	r3, [r3, #4]
 800ce52:	4a81      	ldr	r2, [pc, #516]	; (800d058 <HAL_I2C_Init+0x274>)
 800ce54:	4293      	cmp	r3, r2
 800ce56:	d807      	bhi.n	800ce68 <HAL_I2C_Init+0x84>
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	4a80      	ldr	r2, [pc, #512]	; (800d05c <HAL_I2C_Init+0x278>)
 800ce5c:	4293      	cmp	r3, r2
 800ce5e:	bf94      	ite	ls
 800ce60:	2301      	movls	r3, #1
 800ce62:	2300      	movhi	r3, #0
 800ce64:	b2db      	uxtb	r3, r3
 800ce66:	e006      	b.n	800ce76 <HAL_I2C_Init+0x92>
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	4a7d      	ldr	r2, [pc, #500]	; (800d060 <HAL_I2C_Init+0x27c>)
 800ce6c:	4293      	cmp	r3, r2
 800ce6e:	bf94      	ite	ls
 800ce70:	2301      	movls	r3, #1
 800ce72:	2300      	movhi	r3, #0
 800ce74:	b2db      	uxtb	r3, r3
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d001      	beq.n	800ce7e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800ce7a:	2301      	movs	r3, #1
 800ce7c:	e0e7      	b.n	800d04e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	4a78      	ldr	r2, [pc, #480]	; (800d064 <HAL_I2C_Init+0x280>)
 800ce82:	fba2 2303 	umull	r2, r3, r2, r3
 800ce86:	0c9b      	lsrs	r3, r3, #18
 800ce88:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	685b      	ldr	r3, [r3, #4]
 800ce90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	68ba      	ldr	r2, [r7, #8]
 800ce9a:	430a      	orrs	r2, r1
 800ce9c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	6a1b      	ldr	r3, [r3, #32]
 800cea4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	685b      	ldr	r3, [r3, #4]
 800ceac:	4a6a      	ldr	r2, [pc, #424]	; (800d058 <HAL_I2C_Init+0x274>)
 800ceae:	4293      	cmp	r3, r2
 800ceb0:	d802      	bhi.n	800ceb8 <HAL_I2C_Init+0xd4>
 800ceb2:	68bb      	ldr	r3, [r7, #8]
 800ceb4:	3301      	adds	r3, #1
 800ceb6:	e009      	b.n	800cecc <HAL_I2C_Init+0xe8>
 800ceb8:	68bb      	ldr	r3, [r7, #8]
 800ceba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800cebe:	fb02 f303 	mul.w	r3, r2, r3
 800cec2:	4a69      	ldr	r2, [pc, #420]	; (800d068 <HAL_I2C_Init+0x284>)
 800cec4:	fba2 2303 	umull	r2, r3, r2, r3
 800cec8:	099b      	lsrs	r3, r3, #6
 800ceca:	3301      	adds	r3, #1
 800cecc:	687a      	ldr	r2, [r7, #4]
 800cece:	6812      	ldr	r2, [r2, #0]
 800ced0:	430b      	orrs	r3, r1
 800ced2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	69db      	ldr	r3, [r3, #28]
 800ceda:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800cede:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	685b      	ldr	r3, [r3, #4]
 800cee6:	495c      	ldr	r1, [pc, #368]	; (800d058 <HAL_I2C_Init+0x274>)
 800cee8:	428b      	cmp	r3, r1
 800ceea:	d819      	bhi.n	800cf20 <HAL_I2C_Init+0x13c>
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	1e59      	subs	r1, r3, #1
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	685b      	ldr	r3, [r3, #4]
 800cef4:	005b      	lsls	r3, r3, #1
 800cef6:	fbb1 f3f3 	udiv	r3, r1, r3
 800cefa:	1c59      	adds	r1, r3, #1
 800cefc:	f640 73fc 	movw	r3, #4092	; 0xffc
 800cf00:	400b      	ands	r3, r1
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d00a      	beq.n	800cf1c <HAL_I2C_Init+0x138>
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	1e59      	subs	r1, r3, #1
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	685b      	ldr	r3, [r3, #4]
 800cf0e:	005b      	lsls	r3, r3, #1
 800cf10:	fbb1 f3f3 	udiv	r3, r1, r3
 800cf14:	3301      	adds	r3, #1
 800cf16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cf1a:	e051      	b.n	800cfc0 <HAL_I2C_Init+0x1dc>
 800cf1c:	2304      	movs	r3, #4
 800cf1e:	e04f      	b.n	800cfc0 <HAL_I2C_Init+0x1dc>
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	689b      	ldr	r3, [r3, #8]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d111      	bne.n	800cf4c <HAL_I2C_Init+0x168>
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	1e58      	subs	r0, r3, #1
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	6859      	ldr	r1, [r3, #4]
 800cf30:	460b      	mov	r3, r1
 800cf32:	005b      	lsls	r3, r3, #1
 800cf34:	440b      	add	r3, r1
 800cf36:	fbb0 f3f3 	udiv	r3, r0, r3
 800cf3a:	3301      	adds	r3, #1
 800cf3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	bf0c      	ite	eq
 800cf44:	2301      	moveq	r3, #1
 800cf46:	2300      	movne	r3, #0
 800cf48:	b2db      	uxtb	r3, r3
 800cf4a:	e012      	b.n	800cf72 <HAL_I2C_Init+0x18e>
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	1e58      	subs	r0, r3, #1
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	6859      	ldr	r1, [r3, #4]
 800cf54:	460b      	mov	r3, r1
 800cf56:	009b      	lsls	r3, r3, #2
 800cf58:	440b      	add	r3, r1
 800cf5a:	0099      	lsls	r1, r3, #2
 800cf5c:	440b      	add	r3, r1
 800cf5e:	fbb0 f3f3 	udiv	r3, r0, r3
 800cf62:	3301      	adds	r3, #1
 800cf64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	bf0c      	ite	eq
 800cf6c:	2301      	moveq	r3, #1
 800cf6e:	2300      	movne	r3, #0
 800cf70:	b2db      	uxtb	r3, r3
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d001      	beq.n	800cf7a <HAL_I2C_Init+0x196>
 800cf76:	2301      	movs	r3, #1
 800cf78:	e022      	b.n	800cfc0 <HAL_I2C_Init+0x1dc>
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	689b      	ldr	r3, [r3, #8]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d10e      	bne.n	800cfa0 <HAL_I2C_Init+0x1bc>
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	1e58      	subs	r0, r3, #1
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	6859      	ldr	r1, [r3, #4]
 800cf8a:	460b      	mov	r3, r1
 800cf8c:	005b      	lsls	r3, r3, #1
 800cf8e:	440b      	add	r3, r1
 800cf90:	fbb0 f3f3 	udiv	r3, r0, r3
 800cf94:	3301      	adds	r3, #1
 800cf96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cf9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cf9e:	e00f      	b.n	800cfc0 <HAL_I2C_Init+0x1dc>
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	1e58      	subs	r0, r3, #1
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	6859      	ldr	r1, [r3, #4]
 800cfa8:	460b      	mov	r3, r1
 800cfaa:	009b      	lsls	r3, r3, #2
 800cfac:	440b      	add	r3, r1
 800cfae:	0099      	lsls	r1, r3, #2
 800cfb0:	440b      	add	r3, r1
 800cfb2:	fbb0 f3f3 	udiv	r3, r0, r3
 800cfb6:	3301      	adds	r3, #1
 800cfb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cfbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800cfc0:	6879      	ldr	r1, [r7, #4]
 800cfc2:	6809      	ldr	r1, [r1, #0]
 800cfc4:	4313      	orrs	r3, r2
 800cfc6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	69da      	ldr	r2, [r3, #28]
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	6a1b      	ldr	r3, [r3, #32]
 800cfda:	431a      	orrs	r2, r3
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	430a      	orrs	r2, r1
 800cfe2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	689b      	ldr	r3, [r3, #8]
 800cfea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800cfee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cff2:	687a      	ldr	r2, [r7, #4]
 800cff4:	6911      	ldr	r1, [r2, #16]
 800cff6:	687a      	ldr	r2, [r7, #4]
 800cff8:	68d2      	ldr	r2, [r2, #12]
 800cffa:	4311      	orrs	r1, r2
 800cffc:	687a      	ldr	r2, [r7, #4]
 800cffe:	6812      	ldr	r2, [r2, #0]
 800d000:	430b      	orrs	r3, r1
 800d002:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	68db      	ldr	r3, [r3, #12]
 800d00a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	695a      	ldr	r2, [r3, #20]
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	699b      	ldr	r3, [r3, #24]
 800d016:	431a      	orrs	r2, r3
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	430a      	orrs	r2, r1
 800d01e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	681a      	ldr	r2, [r3, #0]
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	f042 0201 	orr.w	r2, r2, #1
 800d02e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	2200      	movs	r2, #0
 800d034:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	2220      	movs	r2, #32
 800d03a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	2200      	movs	r2, #0
 800d042:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	2200      	movs	r2, #0
 800d048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800d04c:	2300      	movs	r3, #0
}
 800d04e:	4618      	mov	r0, r3
 800d050:	3710      	adds	r7, #16
 800d052:	46bd      	mov	sp, r7
 800d054:	bd80      	pop	{r7, pc}
 800d056:	bf00      	nop
 800d058:	000186a0 	.word	0x000186a0
 800d05c:	001e847f 	.word	0x001e847f
 800d060:	003d08ff 	.word	0x003d08ff
 800d064:	431bde83 	.word	0x431bde83
 800d068:	10624dd3 	.word	0x10624dd3

0800d06c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b088      	sub	sp, #32
 800d070:	af02      	add	r7, sp, #8
 800d072:	60f8      	str	r0, [r7, #12]
 800d074:	4608      	mov	r0, r1
 800d076:	4611      	mov	r1, r2
 800d078:	461a      	mov	r2, r3
 800d07a:	4603      	mov	r3, r0
 800d07c:	817b      	strh	r3, [r7, #10]
 800d07e:	460b      	mov	r3, r1
 800d080:	813b      	strh	r3, [r7, #8]
 800d082:	4613      	mov	r3, r2
 800d084:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d086:	f7fd fb35 	bl	800a6f4 <HAL_GetTick>
 800d08a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d092:	b2db      	uxtb	r3, r3
 800d094:	2b20      	cmp	r3, #32
 800d096:	f040 80d9 	bne.w	800d24c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d09a:	697b      	ldr	r3, [r7, #20]
 800d09c:	9300      	str	r3, [sp, #0]
 800d09e:	2319      	movs	r3, #25
 800d0a0:	2201      	movs	r2, #1
 800d0a2:	496d      	ldr	r1, [pc, #436]	; (800d258 <HAL_I2C_Mem_Write+0x1ec>)
 800d0a4:	68f8      	ldr	r0, [r7, #12]
 800d0a6:	f000 fc7f 	bl	800d9a8 <I2C_WaitOnFlagUntilTimeout>
 800d0aa:	4603      	mov	r3, r0
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d001      	beq.n	800d0b4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800d0b0:	2302      	movs	r3, #2
 800d0b2:	e0cc      	b.n	800d24e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d0ba:	2b01      	cmp	r3, #1
 800d0bc:	d101      	bne.n	800d0c2 <HAL_I2C_Mem_Write+0x56>
 800d0be:	2302      	movs	r3, #2
 800d0c0:	e0c5      	b.n	800d24e <HAL_I2C_Mem_Write+0x1e2>
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	2201      	movs	r2, #1
 800d0c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	f003 0301 	and.w	r3, r3, #1
 800d0d4:	2b01      	cmp	r3, #1
 800d0d6:	d007      	beq.n	800d0e8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	681a      	ldr	r2, [r3, #0]
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	f042 0201 	orr.w	r2, r2, #1
 800d0e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	681a      	ldr	r2, [r3, #0]
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d0f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	2221      	movs	r2, #33	; 0x21
 800d0fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	2240      	movs	r2, #64	; 0x40
 800d104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	2200      	movs	r2, #0
 800d10c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	6a3a      	ldr	r2, [r7, #32]
 800d112:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d118:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d11e:	b29a      	uxth	r2, r3
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	4a4d      	ldr	r2, [pc, #308]	; (800d25c <HAL_I2C_Mem_Write+0x1f0>)
 800d128:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d12a:	88f8      	ldrh	r0, [r7, #6]
 800d12c:	893a      	ldrh	r2, [r7, #8]
 800d12e:	8979      	ldrh	r1, [r7, #10]
 800d130:	697b      	ldr	r3, [r7, #20]
 800d132:	9301      	str	r3, [sp, #4]
 800d134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d136:	9300      	str	r3, [sp, #0]
 800d138:	4603      	mov	r3, r0
 800d13a:	68f8      	ldr	r0, [r7, #12]
 800d13c:	f000 fab6 	bl	800d6ac <I2C_RequestMemoryWrite>
 800d140:	4603      	mov	r3, r0
 800d142:	2b00      	cmp	r3, #0
 800d144:	d052      	beq.n	800d1ec <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800d146:	2301      	movs	r3, #1
 800d148:	e081      	b.n	800d24e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d14a:	697a      	ldr	r2, [r7, #20]
 800d14c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d14e:	68f8      	ldr	r0, [r7, #12]
 800d150:	f000 fd00 	bl	800db54 <I2C_WaitOnTXEFlagUntilTimeout>
 800d154:	4603      	mov	r3, r0
 800d156:	2b00      	cmp	r3, #0
 800d158:	d00d      	beq.n	800d176 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d15e:	2b04      	cmp	r3, #4
 800d160:	d107      	bne.n	800d172 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	681a      	ldr	r2, [r3, #0]
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d170:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800d172:	2301      	movs	r3, #1
 800d174:	e06b      	b.n	800d24e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d17a:	781a      	ldrb	r2, [r3, #0]
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d186:	1c5a      	adds	r2, r3, #1
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d190:	3b01      	subs	r3, #1
 800d192:	b29a      	uxth	r2, r3
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d19c:	b29b      	uxth	r3, r3
 800d19e:	3b01      	subs	r3, #1
 800d1a0:	b29a      	uxth	r2, r3
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	695b      	ldr	r3, [r3, #20]
 800d1ac:	f003 0304 	and.w	r3, r3, #4
 800d1b0:	2b04      	cmp	r3, #4
 800d1b2:	d11b      	bne.n	800d1ec <HAL_I2C_Mem_Write+0x180>
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d017      	beq.n	800d1ec <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1c0:	781a      	ldrb	r2, [r3, #0]
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1cc:	1c5a      	adds	r2, r3, #1
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d1d6:	3b01      	subs	r3, #1
 800d1d8:	b29a      	uxth	r2, r3
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d1e2:	b29b      	uxth	r3, r3
 800d1e4:	3b01      	subs	r3, #1
 800d1e6:	b29a      	uxth	r2, r3
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d1aa      	bne.n	800d14a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d1f4:	697a      	ldr	r2, [r7, #20]
 800d1f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d1f8:	68f8      	ldr	r0, [r7, #12]
 800d1fa:	f000 fcec 	bl	800dbd6 <I2C_WaitOnBTFFlagUntilTimeout>
 800d1fe:	4603      	mov	r3, r0
 800d200:	2b00      	cmp	r3, #0
 800d202:	d00d      	beq.n	800d220 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d208:	2b04      	cmp	r3, #4
 800d20a:	d107      	bne.n	800d21c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	681a      	ldr	r2, [r3, #0]
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d21a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800d21c:	2301      	movs	r3, #1
 800d21e:	e016      	b.n	800d24e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	681a      	ldr	r2, [r3, #0]
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d22e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	2220      	movs	r2, #32
 800d234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	2200      	movs	r2, #0
 800d23c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	2200      	movs	r2, #0
 800d244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d248:	2300      	movs	r3, #0
 800d24a:	e000      	b.n	800d24e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800d24c:	2302      	movs	r3, #2
  }
}
 800d24e:	4618      	mov	r0, r3
 800d250:	3718      	adds	r7, #24
 800d252:	46bd      	mov	sp, r7
 800d254:	bd80      	pop	{r7, pc}
 800d256:	bf00      	nop
 800d258:	00100002 	.word	0x00100002
 800d25c:	ffff0000 	.word	0xffff0000

0800d260 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d260:	b580      	push	{r7, lr}
 800d262:	b08c      	sub	sp, #48	; 0x30
 800d264:	af02      	add	r7, sp, #8
 800d266:	60f8      	str	r0, [r7, #12]
 800d268:	4608      	mov	r0, r1
 800d26a:	4611      	mov	r1, r2
 800d26c:	461a      	mov	r2, r3
 800d26e:	4603      	mov	r3, r0
 800d270:	817b      	strh	r3, [r7, #10]
 800d272:	460b      	mov	r3, r1
 800d274:	813b      	strh	r3, [r7, #8]
 800d276:	4613      	mov	r3, r2
 800d278:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d27a:	f7fd fa3b 	bl	800a6f4 <HAL_GetTick>
 800d27e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d286:	b2db      	uxtb	r3, r3
 800d288:	2b20      	cmp	r3, #32
 800d28a:	f040 8208 	bne.w	800d69e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d28e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d290:	9300      	str	r3, [sp, #0]
 800d292:	2319      	movs	r3, #25
 800d294:	2201      	movs	r2, #1
 800d296:	497b      	ldr	r1, [pc, #492]	; (800d484 <HAL_I2C_Mem_Read+0x224>)
 800d298:	68f8      	ldr	r0, [r7, #12]
 800d29a:	f000 fb85 	bl	800d9a8 <I2C_WaitOnFlagUntilTimeout>
 800d29e:	4603      	mov	r3, r0
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d001      	beq.n	800d2a8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800d2a4:	2302      	movs	r3, #2
 800d2a6:	e1fb      	b.n	800d6a0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d2ae:	2b01      	cmp	r3, #1
 800d2b0:	d101      	bne.n	800d2b6 <HAL_I2C_Mem_Read+0x56>
 800d2b2:	2302      	movs	r3, #2
 800d2b4:	e1f4      	b.n	800d6a0 <HAL_I2C_Mem_Read+0x440>
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	2201      	movs	r2, #1
 800d2ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	f003 0301 	and.w	r3, r3, #1
 800d2c8:	2b01      	cmp	r3, #1
 800d2ca:	d007      	beq.n	800d2dc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	681a      	ldr	r2, [r3, #0]
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	f042 0201 	orr.w	r2, r2, #1
 800d2da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	681a      	ldr	r2, [r3, #0]
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d2ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	2222      	movs	r2, #34	; 0x22
 800d2f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	2240      	movs	r2, #64	; 0x40
 800d2f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	2200      	movs	r2, #0
 800d300:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d306:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800d30c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d312:	b29a      	uxth	r2, r3
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	4a5b      	ldr	r2, [pc, #364]	; (800d488 <HAL_I2C_Mem_Read+0x228>)
 800d31c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d31e:	88f8      	ldrh	r0, [r7, #6]
 800d320:	893a      	ldrh	r2, [r7, #8]
 800d322:	8979      	ldrh	r1, [r7, #10]
 800d324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d326:	9301      	str	r3, [sp, #4]
 800d328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d32a:	9300      	str	r3, [sp, #0]
 800d32c:	4603      	mov	r3, r0
 800d32e:	68f8      	ldr	r0, [r7, #12]
 800d330:	f000 fa52 	bl	800d7d8 <I2C_RequestMemoryRead>
 800d334:	4603      	mov	r3, r0
 800d336:	2b00      	cmp	r3, #0
 800d338:	d001      	beq.n	800d33e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800d33a:	2301      	movs	r3, #1
 800d33c:	e1b0      	b.n	800d6a0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d342:	2b00      	cmp	r3, #0
 800d344:	d113      	bne.n	800d36e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d346:	2300      	movs	r3, #0
 800d348:	623b      	str	r3, [r7, #32]
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	695b      	ldr	r3, [r3, #20]
 800d350:	623b      	str	r3, [r7, #32]
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	699b      	ldr	r3, [r3, #24]
 800d358:	623b      	str	r3, [r7, #32]
 800d35a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	681a      	ldr	r2, [r3, #0]
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d36a:	601a      	str	r2, [r3, #0]
 800d36c:	e184      	b.n	800d678 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d372:	2b01      	cmp	r3, #1
 800d374:	d11b      	bne.n	800d3ae <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	681a      	ldr	r2, [r3, #0]
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d384:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d386:	2300      	movs	r3, #0
 800d388:	61fb      	str	r3, [r7, #28]
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	695b      	ldr	r3, [r3, #20]
 800d390:	61fb      	str	r3, [r7, #28]
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	699b      	ldr	r3, [r3, #24]
 800d398:	61fb      	str	r3, [r7, #28]
 800d39a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	681a      	ldr	r2, [r3, #0]
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d3aa:	601a      	str	r2, [r3, #0]
 800d3ac:	e164      	b.n	800d678 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d3b2:	2b02      	cmp	r3, #2
 800d3b4:	d11b      	bne.n	800d3ee <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	681a      	ldr	r2, [r3, #0]
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d3c4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	681a      	ldr	r2, [r3, #0]
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d3d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	61bb      	str	r3, [r7, #24]
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	695b      	ldr	r3, [r3, #20]
 800d3e0:	61bb      	str	r3, [r7, #24]
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	699b      	ldr	r3, [r3, #24]
 800d3e8:	61bb      	str	r3, [r7, #24]
 800d3ea:	69bb      	ldr	r3, [r7, #24]
 800d3ec:	e144      	b.n	800d678 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	617b      	str	r3, [r7, #20]
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	695b      	ldr	r3, [r3, #20]
 800d3f8:	617b      	str	r3, [r7, #20]
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	699b      	ldr	r3, [r3, #24]
 800d400:	617b      	str	r3, [r7, #20]
 800d402:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800d404:	e138      	b.n	800d678 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d40a:	2b03      	cmp	r3, #3
 800d40c:	f200 80f1 	bhi.w	800d5f2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d414:	2b01      	cmp	r3, #1
 800d416:	d123      	bne.n	800d460 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d41a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d41c:	68f8      	ldr	r0, [r7, #12]
 800d41e:	f000 fc1b 	bl	800dc58 <I2C_WaitOnRXNEFlagUntilTimeout>
 800d422:	4603      	mov	r3, r0
 800d424:	2b00      	cmp	r3, #0
 800d426:	d001      	beq.n	800d42c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800d428:	2301      	movs	r3, #1
 800d42a:	e139      	b.n	800d6a0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	691a      	ldr	r2, [r3, #16]
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d436:	b2d2      	uxtb	r2, r2
 800d438:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d43e:	1c5a      	adds	r2, r3, #1
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d448:	3b01      	subs	r3, #1
 800d44a:	b29a      	uxth	r2, r3
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d454:	b29b      	uxth	r3, r3
 800d456:	3b01      	subs	r3, #1
 800d458:	b29a      	uxth	r2, r3
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d45e:	e10b      	b.n	800d678 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d464:	2b02      	cmp	r3, #2
 800d466:	d14e      	bne.n	800d506 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d46a:	9300      	str	r3, [sp, #0]
 800d46c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d46e:	2200      	movs	r2, #0
 800d470:	4906      	ldr	r1, [pc, #24]	; (800d48c <HAL_I2C_Mem_Read+0x22c>)
 800d472:	68f8      	ldr	r0, [r7, #12]
 800d474:	f000 fa98 	bl	800d9a8 <I2C_WaitOnFlagUntilTimeout>
 800d478:	4603      	mov	r3, r0
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d008      	beq.n	800d490 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800d47e:	2301      	movs	r3, #1
 800d480:	e10e      	b.n	800d6a0 <HAL_I2C_Mem_Read+0x440>
 800d482:	bf00      	nop
 800d484:	00100002 	.word	0x00100002
 800d488:	ffff0000 	.word	0xffff0000
 800d48c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	681a      	ldr	r2, [r3, #0]
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d49e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	691a      	ldr	r2, [r3, #16]
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4aa:	b2d2      	uxtb	r2, r2
 800d4ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4b2:	1c5a      	adds	r2, r3, #1
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d4bc:	3b01      	subs	r3, #1
 800d4be:	b29a      	uxth	r2, r3
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d4c8:	b29b      	uxth	r3, r3
 800d4ca:	3b01      	subs	r3, #1
 800d4cc:	b29a      	uxth	r2, r3
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	691a      	ldr	r2, [r3, #16]
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4dc:	b2d2      	uxtb	r2, r2
 800d4de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4e4:	1c5a      	adds	r2, r3, #1
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d4ee:	3b01      	subs	r3, #1
 800d4f0:	b29a      	uxth	r2, r3
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d4fa:	b29b      	uxth	r3, r3
 800d4fc:	3b01      	subs	r3, #1
 800d4fe:	b29a      	uxth	r2, r3
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d504:	e0b8      	b.n	800d678 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d508:	9300      	str	r3, [sp, #0]
 800d50a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d50c:	2200      	movs	r2, #0
 800d50e:	4966      	ldr	r1, [pc, #408]	; (800d6a8 <HAL_I2C_Mem_Read+0x448>)
 800d510:	68f8      	ldr	r0, [r7, #12]
 800d512:	f000 fa49 	bl	800d9a8 <I2C_WaitOnFlagUntilTimeout>
 800d516:	4603      	mov	r3, r0
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d001      	beq.n	800d520 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800d51c:	2301      	movs	r3, #1
 800d51e:	e0bf      	b.n	800d6a0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	681a      	ldr	r2, [r3, #0]
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d52e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	691a      	ldr	r2, [r3, #16]
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d53a:	b2d2      	uxtb	r2, r2
 800d53c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d542:	1c5a      	adds	r2, r3, #1
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d54c:	3b01      	subs	r3, #1
 800d54e:	b29a      	uxth	r2, r3
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d558:	b29b      	uxth	r3, r3
 800d55a:	3b01      	subs	r3, #1
 800d55c:	b29a      	uxth	r2, r3
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d564:	9300      	str	r3, [sp, #0]
 800d566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d568:	2200      	movs	r2, #0
 800d56a:	494f      	ldr	r1, [pc, #316]	; (800d6a8 <HAL_I2C_Mem_Read+0x448>)
 800d56c:	68f8      	ldr	r0, [r7, #12]
 800d56e:	f000 fa1b 	bl	800d9a8 <I2C_WaitOnFlagUntilTimeout>
 800d572:	4603      	mov	r3, r0
 800d574:	2b00      	cmp	r3, #0
 800d576:	d001      	beq.n	800d57c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800d578:	2301      	movs	r3, #1
 800d57a:	e091      	b.n	800d6a0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	681a      	ldr	r2, [r3, #0]
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d58a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	691a      	ldr	r2, [r3, #16]
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d596:	b2d2      	uxtb	r2, r2
 800d598:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d59e:	1c5a      	adds	r2, r3, #1
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d5a8:	3b01      	subs	r3, #1
 800d5aa:	b29a      	uxth	r2, r3
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d5b4:	b29b      	uxth	r3, r3
 800d5b6:	3b01      	subs	r3, #1
 800d5b8:	b29a      	uxth	r2, r3
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	691a      	ldr	r2, [r3, #16]
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5c8:	b2d2      	uxtb	r2, r2
 800d5ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5d0:	1c5a      	adds	r2, r3, #1
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d5da:	3b01      	subs	r3, #1
 800d5dc:	b29a      	uxth	r2, r3
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d5e6:	b29b      	uxth	r3, r3
 800d5e8:	3b01      	subs	r3, #1
 800d5ea:	b29a      	uxth	r2, r3
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d5f0:	e042      	b.n	800d678 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d5f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d5f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d5f6:	68f8      	ldr	r0, [r7, #12]
 800d5f8:	f000 fb2e 	bl	800dc58 <I2C_WaitOnRXNEFlagUntilTimeout>
 800d5fc:	4603      	mov	r3, r0
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d001      	beq.n	800d606 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800d602:	2301      	movs	r3, #1
 800d604:	e04c      	b.n	800d6a0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	691a      	ldr	r2, [r3, #16]
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d610:	b2d2      	uxtb	r2, r2
 800d612:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d618:	1c5a      	adds	r2, r3, #1
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d622:	3b01      	subs	r3, #1
 800d624:	b29a      	uxth	r2, r3
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d62e:	b29b      	uxth	r3, r3
 800d630:	3b01      	subs	r3, #1
 800d632:	b29a      	uxth	r2, r3
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	695b      	ldr	r3, [r3, #20]
 800d63e:	f003 0304 	and.w	r3, r3, #4
 800d642:	2b04      	cmp	r3, #4
 800d644:	d118      	bne.n	800d678 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	691a      	ldr	r2, [r3, #16]
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d650:	b2d2      	uxtb	r2, r2
 800d652:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d658:	1c5a      	adds	r2, r3, #1
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d662:	3b01      	subs	r3, #1
 800d664:	b29a      	uxth	r2, r3
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d66e:	b29b      	uxth	r3, r3
 800d670:	3b01      	subs	r3, #1
 800d672:	b29a      	uxth	r2, r3
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	f47f aec2 	bne.w	800d406 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	2220      	movs	r2, #32
 800d686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	2200      	movs	r2, #0
 800d68e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	2200      	movs	r2, #0
 800d696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d69a:	2300      	movs	r3, #0
 800d69c:	e000      	b.n	800d6a0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800d69e:	2302      	movs	r3, #2
  }
}
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	3728      	adds	r7, #40	; 0x28
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	bd80      	pop	{r7, pc}
 800d6a8:	00010004 	.word	0x00010004

0800d6ac <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b088      	sub	sp, #32
 800d6b0:	af02      	add	r7, sp, #8
 800d6b2:	60f8      	str	r0, [r7, #12]
 800d6b4:	4608      	mov	r0, r1
 800d6b6:	4611      	mov	r1, r2
 800d6b8:	461a      	mov	r2, r3
 800d6ba:	4603      	mov	r3, r0
 800d6bc:	817b      	strh	r3, [r7, #10]
 800d6be:	460b      	mov	r3, r1
 800d6c0:	813b      	strh	r3, [r7, #8]
 800d6c2:	4613      	mov	r3, r2
 800d6c4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	681a      	ldr	r2, [r3, #0]
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d6d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d6d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6d8:	9300      	str	r3, [sp, #0]
 800d6da:	6a3b      	ldr	r3, [r7, #32]
 800d6dc:	2200      	movs	r2, #0
 800d6de:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d6e2:	68f8      	ldr	r0, [r7, #12]
 800d6e4:	f000 f960 	bl	800d9a8 <I2C_WaitOnFlagUntilTimeout>
 800d6e8:	4603      	mov	r3, r0
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d00d      	beq.n	800d70a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d6f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d6fc:	d103      	bne.n	800d706 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d704:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800d706:	2303      	movs	r3, #3
 800d708:	e05f      	b.n	800d7ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800d70a:	897b      	ldrh	r3, [r7, #10]
 800d70c:	b2db      	uxtb	r3, r3
 800d70e:	461a      	mov	r2, r3
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800d718:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d71a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d71c:	6a3a      	ldr	r2, [r7, #32]
 800d71e:	492d      	ldr	r1, [pc, #180]	; (800d7d4 <I2C_RequestMemoryWrite+0x128>)
 800d720:	68f8      	ldr	r0, [r7, #12]
 800d722:	f000 f998 	bl	800da56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d726:	4603      	mov	r3, r0
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d001      	beq.n	800d730 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800d72c:	2301      	movs	r3, #1
 800d72e:	e04c      	b.n	800d7ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d730:	2300      	movs	r3, #0
 800d732:	617b      	str	r3, [r7, #20]
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	695b      	ldr	r3, [r3, #20]
 800d73a:	617b      	str	r3, [r7, #20]
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	699b      	ldr	r3, [r3, #24]
 800d742:	617b      	str	r3, [r7, #20]
 800d744:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d746:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d748:	6a39      	ldr	r1, [r7, #32]
 800d74a:	68f8      	ldr	r0, [r7, #12]
 800d74c:	f000 fa02 	bl	800db54 <I2C_WaitOnTXEFlagUntilTimeout>
 800d750:	4603      	mov	r3, r0
 800d752:	2b00      	cmp	r3, #0
 800d754:	d00d      	beq.n	800d772 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d75a:	2b04      	cmp	r3, #4
 800d75c:	d107      	bne.n	800d76e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	681a      	ldr	r2, [r3, #0]
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d76c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800d76e:	2301      	movs	r3, #1
 800d770:	e02b      	b.n	800d7ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d772:	88fb      	ldrh	r3, [r7, #6]
 800d774:	2b01      	cmp	r3, #1
 800d776:	d105      	bne.n	800d784 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800d778:	893b      	ldrh	r3, [r7, #8]
 800d77a:	b2da      	uxtb	r2, r3
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	611a      	str	r2, [r3, #16]
 800d782:	e021      	b.n	800d7c8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800d784:	893b      	ldrh	r3, [r7, #8]
 800d786:	0a1b      	lsrs	r3, r3, #8
 800d788:	b29b      	uxth	r3, r3
 800d78a:	b2da      	uxtb	r2, r3
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d794:	6a39      	ldr	r1, [r7, #32]
 800d796:	68f8      	ldr	r0, [r7, #12]
 800d798:	f000 f9dc 	bl	800db54 <I2C_WaitOnTXEFlagUntilTimeout>
 800d79c:	4603      	mov	r3, r0
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d00d      	beq.n	800d7be <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7a6:	2b04      	cmp	r3, #4
 800d7a8:	d107      	bne.n	800d7ba <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	681a      	ldr	r2, [r3, #0]
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d7b8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800d7ba:	2301      	movs	r3, #1
 800d7bc:	e005      	b.n	800d7ca <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800d7be:	893b      	ldrh	r3, [r7, #8]
 800d7c0:	b2da      	uxtb	r2, r3
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800d7c8:	2300      	movs	r3, #0
}
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	3718      	adds	r7, #24
 800d7ce:	46bd      	mov	sp, r7
 800d7d0:	bd80      	pop	{r7, pc}
 800d7d2:	bf00      	nop
 800d7d4:	00010002 	.word	0x00010002

0800d7d8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b088      	sub	sp, #32
 800d7dc:	af02      	add	r7, sp, #8
 800d7de:	60f8      	str	r0, [r7, #12]
 800d7e0:	4608      	mov	r0, r1
 800d7e2:	4611      	mov	r1, r2
 800d7e4:	461a      	mov	r2, r3
 800d7e6:	4603      	mov	r3, r0
 800d7e8:	817b      	strh	r3, [r7, #10]
 800d7ea:	460b      	mov	r3, r1
 800d7ec:	813b      	strh	r3, [r7, #8]
 800d7ee:	4613      	mov	r3, r2
 800d7f0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	681a      	ldr	r2, [r3, #0]
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d800:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	681a      	ldr	r2, [r3, #0]
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d810:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d814:	9300      	str	r3, [sp, #0]
 800d816:	6a3b      	ldr	r3, [r7, #32]
 800d818:	2200      	movs	r2, #0
 800d81a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d81e:	68f8      	ldr	r0, [r7, #12]
 800d820:	f000 f8c2 	bl	800d9a8 <I2C_WaitOnFlagUntilTimeout>
 800d824:	4603      	mov	r3, r0
 800d826:	2b00      	cmp	r3, #0
 800d828:	d00d      	beq.n	800d846 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d834:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d838:	d103      	bne.n	800d842 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d840:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800d842:	2303      	movs	r3, #3
 800d844:	e0aa      	b.n	800d99c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800d846:	897b      	ldrh	r3, [r7, #10]
 800d848:	b2db      	uxtb	r3, r3
 800d84a:	461a      	mov	r2, r3
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800d854:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d858:	6a3a      	ldr	r2, [r7, #32]
 800d85a:	4952      	ldr	r1, [pc, #328]	; (800d9a4 <I2C_RequestMemoryRead+0x1cc>)
 800d85c:	68f8      	ldr	r0, [r7, #12]
 800d85e:	f000 f8fa 	bl	800da56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d862:	4603      	mov	r3, r0
 800d864:	2b00      	cmp	r3, #0
 800d866:	d001      	beq.n	800d86c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800d868:	2301      	movs	r3, #1
 800d86a:	e097      	b.n	800d99c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d86c:	2300      	movs	r3, #0
 800d86e:	617b      	str	r3, [r7, #20]
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	695b      	ldr	r3, [r3, #20]
 800d876:	617b      	str	r3, [r7, #20]
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	699b      	ldr	r3, [r3, #24]
 800d87e:	617b      	str	r3, [r7, #20]
 800d880:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d882:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d884:	6a39      	ldr	r1, [r7, #32]
 800d886:	68f8      	ldr	r0, [r7, #12]
 800d888:	f000 f964 	bl	800db54 <I2C_WaitOnTXEFlagUntilTimeout>
 800d88c:	4603      	mov	r3, r0
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d00d      	beq.n	800d8ae <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d896:	2b04      	cmp	r3, #4
 800d898:	d107      	bne.n	800d8aa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	681a      	ldr	r2, [r3, #0]
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d8a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800d8aa:	2301      	movs	r3, #1
 800d8ac:	e076      	b.n	800d99c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d8ae:	88fb      	ldrh	r3, [r7, #6]
 800d8b0:	2b01      	cmp	r3, #1
 800d8b2:	d105      	bne.n	800d8c0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800d8b4:	893b      	ldrh	r3, [r7, #8]
 800d8b6:	b2da      	uxtb	r2, r3
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	611a      	str	r2, [r3, #16]
 800d8be:	e021      	b.n	800d904 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800d8c0:	893b      	ldrh	r3, [r7, #8]
 800d8c2:	0a1b      	lsrs	r3, r3, #8
 800d8c4:	b29b      	uxth	r3, r3
 800d8c6:	b2da      	uxtb	r2, r3
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d8ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d8d0:	6a39      	ldr	r1, [r7, #32]
 800d8d2:	68f8      	ldr	r0, [r7, #12]
 800d8d4:	f000 f93e 	bl	800db54 <I2C_WaitOnTXEFlagUntilTimeout>
 800d8d8:	4603      	mov	r3, r0
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d00d      	beq.n	800d8fa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8e2:	2b04      	cmp	r3, #4
 800d8e4:	d107      	bne.n	800d8f6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	681a      	ldr	r2, [r3, #0]
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d8f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800d8f6:	2301      	movs	r3, #1
 800d8f8:	e050      	b.n	800d99c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800d8fa:	893b      	ldrh	r3, [r7, #8]
 800d8fc:	b2da      	uxtb	r2, r3
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d904:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d906:	6a39      	ldr	r1, [r7, #32]
 800d908:	68f8      	ldr	r0, [r7, #12]
 800d90a:	f000 f923 	bl	800db54 <I2C_WaitOnTXEFlagUntilTimeout>
 800d90e:	4603      	mov	r3, r0
 800d910:	2b00      	cmp	r3, #0
 800d912:	d00d      	beq.n	800d930 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d918:	2b04      	cmp	r3, #4
 800d91a:	d107      	bne.n	800d92c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	681a      	ldr	r2, [r3, #0]
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d92a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800d92c:	2301      	movs	r3, #1
 800d92e:	e035      	b.n	800d99c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	681a      	ldr	r2, [r3, #0]
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d93e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d942:	9300      	str	r3, [sp, #0]
 800d944:	6a3b      	ldr	r3, [r7, #32]
 800d946:	2200      	movs	r2, #0
 800d948:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d94c:	68f8      	ldr	r0, [r7, #12]
 800d94e:	f000 f82b 	bl	800d9a8 <I2C_WaitOnFlagUntilTimeout>
 800d952:	4603      	mov	r3, r0
 800d954:	2b00      	cmp	r3, #0
 800d956:	d00d      	beq.n	800d974 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d962:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d966:	d103      	bne.n	800d970 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d96e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800d970:	2303      	movs	r3, #3
 800d972:	e013      	b.n	800d99c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800d974:	897b      	ldrh	r3, [r7, #10]
 800d976:	b2db      	uxtb	r3, r3
 800d978:	f043 0301 	orr.w	r3, r3, #1
 800d97c:	b2da      	uxtb	r2, r3
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d986:	6a3a      	ldr	r2, [r7, #32]
 800d988:	4906      	ldr	r1, [pc, #24]	; (800d9a4 <I2C_RequestMemoryRead+0x1cc>)
 800d98a:	68f8      	ldr	r0, [r7, #12]
 800d98c:	f000 f863 	bl	800da56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d990:	4603      	mov	r3, r0
 800d992:	2b00      	cmp	r3, #0
 800d994:	d001      	beq.n	800d99a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800d996:	2301      	movs	r3, #1
 800d998:	e000      	b.n	800d99c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800d99a:	2300      	movs	r3, #0
}
 800d99c:	4618      	mov	r0, r3
 800d99e:	3718      	adds	r7, #24
 800d9a0:	46bd      	mov	sp, r7
 800d9a2:	bd80      	pop	{r7, pc}
 800d9a4:	00010002 	.word	0x00010002

0800d9a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b084      	sub	sp, #16
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	60f8      	str	r0, [r7, #12]
 800d9b0:	60b9      	str	r1, [r7, #8]
 800d9b2:	603b      	str	r3, [r7, #0]
 800d9b4:	4613      	mov	r3, r2
 800d9b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d9b8:	e025      	b.n	800da06 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d9ba:	683b      	ldr	r3, [r7, #0]
 800d9bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9c0:	d021      	beq.n	800da06 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d9c2:	f7fc fe97 	bl	800a6f4 <HAL_GetTick>
 800d9c6:	4602      	mov	r2, r0
 800d9c8:	69bb      	ldr	r3, [r7, #24]
 800d9ca:	1ad3      	subs	r3, r2, r3
 800d9cc:	683a      	ldr	r2, [r7, #0]
 800d9ce:	429a      	cmp	r2, r3
 800d9d0:	d302      	bcc.n	800d9d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 800d9d2:	683b      	ldr	r3, [r7, #0]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d116      	bne.n	800da06 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	2200      	movs	r2, #0
 800d9dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	2220      	movs	r2, #32
 800d9e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9f2:	f043 0220 	orr.w	r2, r3, #32
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	2200      	movs	r2, #0
 800d9fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800da02:	2301      	movs	r3, #1
 800da04:	e023      	b.n	800da4e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800da06:	68bb      	ldr	r3, [r7, #8]
 800da08:	0c1b      	lsrs	r3, r3, #16
 800da0a:	b2db      	uxtb	r3, r3
 800da0c:	2b01      	cmp	r3, #1
 800da0e:	d10d      	bne.n	800da2c <I2C_WaitOnFlagUntilTimeout+0x84>
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	695b      	ldr	r3, [r3, #20]
 800da16:	43da      	mvns	r2, r3
 800da18:	68bb      	ldr	r3, [r7, #8]
 800da1a:	4013      	ands	r3, r2
 800da1c:	b29b      	uxth	r3, r3
 800da1e:	2b00      	cmp	r3, #0
 800da20:	bf0c      	ite	eq
 800da22:	2301      	moveq	r3, #1
 800da24:	2300      	movne	r3, #0
 800da26:	b2db      	uxtb	r3, r3
 800da28:	461a      	mov	r2, r3
 800da2a:	e00c      	b.n	800da46 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	699b      	ldr	r3, [r3, #24]
 800da32:	43da      	mvns	r2, r3
 800da34:	68bb      	ldr	r3, [r7, #8]
 800da36:	4013      	ands	r3, r2
 800da38:	b29b      	uxth	r3, r3
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	bf0c      	ite	eq
 800da3e:	2301      	moveq	r3, #1
 800da40:	2300      	movne	r3, #0
 800da42:	b2db      	uxtb	r3, r3
 800da44:	461a      	mov	r2, r3
 800da46:	79fb      	ldrb	r3, [r7, #7]
 800da48:	429a      	cmp	r2, r3
 800da4a:	d0b6      	beq.n	800d9ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800da4c:	2300      	movs	r3, #0
}
 800da4e:	4618      	mov	r0, r3
 800da50:	3710      	adds	r7, #16
 800da52:	46bd      	mov	sp, r7
 800da54:	bd80      	pop	{r7, pc}

0800da56 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800da56:	b580      	push	{r7, lr}
 800da58:	b084      	sub	sp, #16
 800da5a:	af00      	add	r7, sp, #0
 800da5c:	60f8      	str	r0, [r7, #12]
 800da5e:	60b9      	str	r1, [r7, #8]
 800da60:	607a      	str	r2, [r7, #4]
 800da62:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800da64:	e051      	b.n	800db0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	695b      	ldr	r3, [r3, #20]
 800da6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800da70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800da74:	d123      	bne.n	800dabe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	681a      	ldr	r2, [r3, #0]
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800da84:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800da8e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	2200      	movs	r2, #0
 800da94:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	2220      	movs	r2, #32
 800da9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	2200      	movs	r2, #0
 800daa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800daaa:	f043 0204 	orr.w	r2, r3, #4
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	2200      	movs	r2, #0
 800dab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800daba:	2301      	movs	r3, #1
 800dabc:	e046      	b.n	800db4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dac4:	d021      	beq.n	800db0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dac6:	f7fc fe15 	bl	800a6f4 <HAL_GetTick>
 800daca:	4602      	mov	r2, r0
 800dacc:	683b      	ldr	r3, [r7, #0]
 800dace:	1ad3      	subs	r3, r2, r3
 800dad0:	687a      	ldr	r2, [r7, #4]
 800dad2:	429a      	cmp	r2, r3
 800dad4:	d302      	bcc.n	800dadc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d116      	bne.n	800db0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	2200      	movs	r2, #0
 800dae0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	2220      	movs	r2, #32
 800dae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	2200      	movs	r2, #0
 800daee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800daf6:	f043 0220 	orr.w	r2, r3, #32
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	2200      	movs	r2, #0
 800db02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800db06:	2301      	movs	r3, #1
 800db08:	e020      	b.n	800db4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800db0a:	68bb      	ldr	r3, [r7, #8]
 800db0c:	0c1b      	lsrs	r3, r3, #16
 800db0e:	b2db      	uxtb	r3, r3
 800db10:	2b01      	cmp	r3, #1
 800db12:	d10c      	bne.n	800db2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	695b      	ldr	r3, [r3, #20]
 800db1a:	43da      	mvns	r2, r3
 800db1c:	68bb      	ldr	r3, [r7, #8]
 800db1e:	4013      	ands	r3, r2
 800db20:	b29b      	uxth	r3, r3
 800db22:	2b00      	cmp	r3, #0
 800db24:	bf14      	ite	ne
 800db26:	2301      	movne	r3, #1
 800db28:	2300      	moveq	r3, #0
 800db2a:	b2db      	uxtb	r3, r3
 800db2c:	e00b      	b.n	800db46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	699b      	ldr	r3, [r3, #24]
 800db34:	43da      	mvns	r2, r3
 800db36:	68bb      	ldr	r3, [r7, #8]
 800db38:	4013      	ands	r3, r2
 800db3a:	b29b      	uxth	r3, r3
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	bf14      	ite	ne
 800db40:	2301      	movne	r3, #1
 800db42:	2300      	moveq	r3, #0
 800db44:	b2db      	uxtb	r3, r3
 800db46:	2b00      	cmp	r3, #0
 800db48:	d18d      	bne.n	800da66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800db4a:	2300      	movs	r3, #0
}
 800db4c:	4618      	mov	r0, r3
 800db4e:	3710      	adds	r7, #16
 800db50:	46bd      	mov	sp, r7
 800db52:	bd80      	pop	{r7, pc}

0800db54 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800db54:	b580      	push	{r7, lr}
 800db56:	b084      	sub	sp, #16
 800db58:	af00      	add	r7, sp, #0
 800db5a:	60f8      	str	r0, [r7, #12]
 800db5c:	60b9      	str	r1, [r7, #8]
 800db5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800db60:	e02d      	b.n	800dbbe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800db62:	68f8      	ldr	r0, [r7, #12]
 800db64:	f000 f8ce 	bl	800dd04 <I2C_IsAcknowledgeFailed>
 800db68:	4603      	mov	r3, r0
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d001      	beq.n	800db72 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800db6e:	2301      	movs	r3, #1
 800db70:	e02d      	b.n	800dbce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800db72:	68bb      	ldr	r3, [r7, #8]
 800db74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db78:	d021      	beq.n	800dbbe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800db7a:	f7fc fdbb 	bl	800a6f4 <HAL_GetTick>
 800db7e:	4602      	mov	r2, r0
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	1ad3      	subs	r3, r2, r3
 800db84:	68ba      	ldr	r2, [r7, #8]
 800db86:	429a      	cmp	r2, r3
 800db88:	d302      	bcc.n	800db90 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800db8a:	68bb      	ldr	r3, [r7, #8]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d116      	bne.n	800dbbe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	2200      	movs	r2, #0
 800db94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	2220      	movs	r2, #32
 800db9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	2200      	movs	r2, #0
 800dba2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbaa:	f043 0220 	orr.w	r2, r3, #32
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	2200      	movs	r2, #0
 800dbb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800dbba:	2301      	movs	r3, #1
 800dbbc:	e007      	b.n	800dbce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	695b      	ldr	r3, [r3, #20]
 800dbc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dbc8:	2b80      	cmp	r3, #128	; 0x80
 800dbca:	d1ca      	bne.n	800db62 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800dbcc:	2300      	movs	r3, #0
}
 800dbce:	4618      	mov	r0, r3
 800dbd0:	3710      	adds	r7, #16
 800dbd2:	46bd      	mov	sp, r7
 800dbd4:	bd80      	pop	{r7, pc}

0800dbd6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800dbd6:	b580      	push	{r7, lr}
 800dbd8:	b084      	sub	sp, #16
 800dbda:	af00      	add	r7, sp, #0
 800dbdc:	60f8      	str	r0, [r7, #12]
 800dbde:	60b9      	str	r1, [r7, #8]
 800dbe0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800dbe2:	e02d      	b.n	800dc40 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800dbe4:	68f8      	ldr	r0, [r7, #12]
 800dbe6:	f000 f88d 	bl	800dd04 <I2C_IsAcknowledgeFailed>
 800dbea:	4603      	mov	r3, r0
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d001      	beq.n	800dbf4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800dbf0:	2301      	movs	r3, #1
 800dbf2:	e02d      	b.n	800dc50 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dbf4:	68bb      	ldr	r3, [r7, #8]
 800dbf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbfa:	d021      	beq.n	800dc40 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dbfc:	f7fc fd7a 	bl	800a6f4 <HAL_GetTick>
 800dc00:	4602      	mov	r2, r0
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	1ad3      	subs	r3, r2, r3
 800dc06:	68ba      	ldr	r2, [r7, #8]
 800dc08:	429a      	cmp	r2, r3
 800dc0a:	d302      	bcc.n	800dc12 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800dc0c:	68bb      	ldr	r3, [r7, #8]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d116      	bne.n	800dc40 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	2200      	movs	r2, #0
 800dc16:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	2220      	movs	r2, #32
 800dc1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	2200      	movs	r2, #0
 800dc24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc2c:	f043 0220 	orr.w	r2, r3, #32
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	2200      	movs	r2, #0
 800dc38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800dc3c:	2301      	movs	r3, #1
 800dc3e:	e007      	b.n	800dc50 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	695b      	ldr	r3, [r3, #20]
 800dc46:	f003 0304 	and.w	r3, r3, #4
 800dc4a:	2b04      	cmp	r3, #4
 800dc4c:	d1ca      	bne.n	800dbe4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800dc4e:	2300      	movs	r3, #0
}
 800dc50:	4618      	mov	r0, r3
 800dc52:	3710      	adds	r7, #16
 800dc54:	46bd      	mov	sp, r7
 800dc56:	bd80      	pop	{r7, pc}

0800dc58 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b084      	sub	sp, #16
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	60f8      	str	r0, [r7, #12]
 800dc60:	60b9      	str	r1, [r7, #8]
 800dc62:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800dc64:	e042      	b.n	800dcec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	695b      	ldr	r3, [r3, #20]
 800dc6c:	f003 0310 	and.w	r3, r3, #16
 800dc70:	2b10      	cmp	r3, #16
 800dc72:	d119      	bne.n	800dca8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	f06f 0210 	mvn.w	r2, #16
 800dc7c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	2200      	movs	r2, #0
 800dc82:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	2220      	movs	r2, #32
 800dc88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	2200      	movs	r2, #0
 800dc90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	2200      	movs	r2, #0
 800dca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800dca4:	2301      	movs	r3, #1
 800dca6:	e029      	b.n	800dcfc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dca8:	f7fc fd24 	bl	800a6f4 <HAL_GetTick>
 800dcac:	4602      	mov	r2, r0
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	1ad3      	subs	r3, r2, r3
 800dcb2:	68ba      	ldr	r2, [r7, #8]
 800dcb4:	429a      	cmp	r2, r3
 800dcb6:	d302      	bcc.n	800dcbe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800dcb8:	68bb      	ldr	r3, [r7, #8]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d116      	bne.n	800dcec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	2200      	movs	r2, #0
 800dcc2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	2220      	movs	r2, #32
 800dcc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	2200      	movs	r2, #0
 800dcd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcd8:	f043 0220 	orr.w	r2, r3, #32
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	2200      	movs	r2, #0
 800dce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800dce8:	2301      	movs	r3, #1
 800dcea:	e007      	b.n	800dcfc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	695b      	ldr	r3, [r3, #20]
 800dcf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dcf6:	2b40      	cmp	r3, #64	; 0x40
 800dcf8:	d1b5      	bne.n	800dc66 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800dcfa:	2300      	movs	r3, #0
}
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	3710      	adds	r7, #16
 800dd00:	46bd      	mov	sp, r7
 800dd02:	bd80      	pop	{r7, pc}

0800dd04 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800dd04:	b480      	push	{r7}
 800dd06:	b083      	sub	sp, #12
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	695b      	ldr	r3, [r3, #20]
 800dd12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dd16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dd1a:	d11b      	bne.n	800dd54 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800dd24:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	2200      	movs	r2, #0
 800dd2a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	2220      	movs	r2, #32
 800dd30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	2200      	movs	r2, #0
 800dd38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd40:	f043 0204 	orr.w	r2, r3, #4
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	2200      	movs	r2, #0
 800dd4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800dd50:	2301      	movs	r3, #1
 800dd52:	e000      	b.n	800dd56 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800dd54:	2300      	movs	r3, #0
}
 800dd56:	4618      	mov	r0, r3
 800dd58:	370c      	adds	r7, #12
 800dd5a:	46bd      	mov	sp, r7
 800dd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd60:	4770      	bx	lr

0800dd62 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800dd62:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd64:	b08f      	sub	sp, #60	; 0x3c
 800dd66:	af0a      	add	r7, sp, #40	; 0x28
 800dd68:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d101      	bne.n	800dd74 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800dd70:	2301      	movs	r3, #1
 800dd72:	e116      	b.n	800dfa2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800dd80:	b2db      	uxtb	r3, r3
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d106      	bne.n	800dd94 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	2200      	movs	r2, #0
 800dd8a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800dd8e:	6878      	ldr	r0, [r7, #4]
 800dd90:	f00b fc2e 	bl	80195f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	2203      	movs	r2, #3
 800dd98:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800dd9c:	68bb      	ldr	r3, [r7, #8]
 800dd9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dda0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d102      	bne.n	800ddae <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	2200      	movs	r2, #0
 800ddac:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	f004 fa61 	bl	801227a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	603b      	str	r3, [r7, #0]
 800ddbe:	687e      	ldr	r6, [r7, #4]
 800ddc0:	466d      	mov	r5, sp
 800ddc2:	f106 0410 	add.w	r4, r6, #16
 800ddc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ddc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ddca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ddcc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ddce:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ddd2:	e885 0003 	stmia.w	r5, {r0, r1}
 800ddd6:	1d33      	adds	r3, r6, #4
 800ddd8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ddda:	6838      	ldr	r0, [r7, #0]
 800dddc:	f004 f938 	bl	8012050 <USB_CoreInit>
 800dde0:	4603      	mov	r3, r0
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d005      	beq.n	800ddf2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	2202      	movs	r2, #2
 800ddea:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800ddee:	2301      	movs	r3, #1
 800ddf0:	e0d7      	b.n	800dfa2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	2100      	movs	r1, #0
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	f004 fa4f 	bl	801229c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ddfe:	2300      	movs	r3, #0
 800de00:	73fb      	strb	r3, [r7, #15]
 800de02:	e04a      	b.n	800de9a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800de04:	7bfa      	ldrb	r2, [r7, #15]
 800de06:	6879      	ldr	r1, [r7, #4]
 800de08:	4613      	mov	r3, r2
 800de0a:	00db      	lsls	r3, r3, #3
 800de0c:	4413      	add	r3, r2
 800de0e:	009b      	lsls	r3, r3, #2
 800de10:	440b      	add	r3, r1
 800de12:	333d      	adds	r3, #61	; 0x3d
 800de14:	2201      	movs	r2, #1
 800de16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800de18:	7bfa      	ldrb	r2, [r7, #15]
 800de1a:	6879      	ldr	r1, [r7, #4]
 800de1c:	4613      	mov	r3, r2
 800de1e:	00db      	lsls	r3, r3, #3
 800de20:	4413      	add	r3, r2
 800de22:	009b      	lsls	r3, r3, #2
 800de24:	440b      	add	r3, r1
 800de26:	333c      	adds	r3, #60	; 0x3c
 800de28:	7bfa      	ldrb	r2, [r7, #15]
 800de2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800de2c:	7bfa      	ldrb	r2, [r7, #15]
 800de2e:	7bfb      	ldrb	r3, [r7, #15]
 800de30:	b298      	uxth	r0, r3
 800de32:	6879      	ldr	r1, [r7, #4]
 800de34:	4613      	mov	r3, r2
 800de36:	00db      	lsls	r3, r3, #3
 800de38:	4413      	add	r3, r2
 800de3a:	009b      	lsls	r3, r3, #2
 800de3c:	440b      	add	r3, r1
 800de3e:	3344      	adds	r3, #68	; 0x44
 800de40:	4602      	mov	r2, r0
 800de42:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800de44:	7bfa      	ldrb	r2, [r7, #15]
 800de46:	6879      	ldr	r1, [r7, #4]
 800de48:	4613      	mov	r3, r2
 800de4a:	00db      	lsls	r3, r3, #3
 800de4c:	4413      	add	r3, r2
 800de4e:	009b      	lsls	r3, r3, #2
 800de50:	440b      	add	r3, r1
 800de52:	3340      	adds	r3, #64	; 0x40
 800de54:	2200      	movs	r2, #0
 800de56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800de58:	7bfa      	ldrb	r2, [r7, #15]
 800de5a:	6879      	ldr	r1, [r7, #4]
 800de5c:	4613      	mov	r3, r2
 800de5e:	00db      	lsls	r3, r3, #3
 800de60:	4413      	add	r3, r2
 800de62:	009b      	lsls	r3, r3, #2
 800de64:	440b      	add	r3, r1
 800de66:	3348      	adds	r3, #72	; 0x48
 800de68:	2200      	movs	r2, #0
 800de6a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800de6c:	7bfa      	ldrb	r2, [r7, #15]
 800de6e:	6879      	ldr	r1, [r7, #4]
 800de70:	4613      	mov	r3, r2
 800de72:	00db      	lsls	r3, r3, #3
 800de74:	4413      	add	r3, r2
 800de76:	009b      	lsls	r3, r3, #2
 800de78:	440b      	add	r3, r1
 800de7a:	334c      	adds	r3, #76	; 0x4c
 800de7c:	2200      	movs	r2, #0
 800de7e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800de80:	7bfa      	ldrb	r2, [r7, #15]
 800de82:	6879      	ldr	r1, [r7, #4]
 800de84:	4613      	mov	r3, r2
 800de86:	00db      	lsls	r3, r3, #3
 800de88:	4413      	add	r3, r2
 800de8a:	009b      	lsls	r3, r3, #2
 800de8c:	440b      	add	r3, r1
 800de8e:	3354      	adds	r3, #84	; 0x54
 800de90:	2200      	movs	r2, #0
 800de92:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800de94:	7bfb      	ldrb	r3, [r7, #15]
 800de96:	3301      	adds	r3, #1
 800de98:	73fb      	strb	r3, [r7, #15]
 800de9a:	7bfa      	ldrb	r2, [r7, #15]
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	685b      	ldr	r3, [r3, #4]
 800dea0:	429a      	cmp	r2, r3
 800dea2:	d3af      	bcc.n	800de04 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800dea4:	2300      	movs	r3, #0
 800dea6:	73fb      	strb	r3, [r7, #15]
 800dea8:	e044      	b.n	800df34 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800deaa:	7bfa      	ldrb	r2, [r7, #15]
 800deac:	6879      	ldr	r1, [r7, #4]
 800deae:	4613      	mov	r3, r2
 800deb0:	00db      	lsls	r3, r3, #3
 800deb2:	4413      	add	r3, r2
 800deb4:	009b      	lsls	r3, r3, #2
 800deb6:	440b      	add	r3, r1
 800deb8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800debc:	2200      	movs	r2, #0
 800debe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800dec0:	7bfa      	ldrb	r2, [r7, #15]
 800dec2:	6879      	ldr	r1, [r7, #4]
 800dec4:	4613      	mov	r3, r2
 800dec6:	00db      	lsls	r3, r3, #3
 800dec8:	4413      	add	r3, r2
 800deca:	009b      	lsls	r3, r3, #2
 800decc:	440b      	add	r3, r1
 800dece:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800ded2:	7bfa      	ldrb	r2, [r7, #15]
 800ded4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800ded6:	7bfa      	ldrb	r2, [r7, #15]
 800ded8:	6879      	ldr	r1, [r7, #4]
 800deda:	4613      	mov	r3, r2
 800dedc:	00db      	lsls	r3, r3, #3
 800dede:	4413      	add	r3, r2
 800dee0:	009b      	lsls	r3, r3, #2
 800dee2:	440b      	add	r3, r1
 800dee4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800dee8:	2200      	movs	r2, #0
 800deea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800deec:	7bfa      	ldrb	r2, [r7, #15]
 800deee:	6879      	ldr	r1, [r7, #4]
 800def0:	4613      	mov	r3, r2
 800def2:	00db      	lsls	r3, r3, #3
 800def4:	4413      	add	r3, r2
 800def6:	009b      	lsls	r3, r3, #2
 800def8:	440b      	add	r3, r1
 800defa:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800defe:	2200      	movs	r2, #0
 800df00:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800df02:	7bfa      	ldrb	r2, [r7, #15]
 800df04:	6879      	ldr	r1, [r7, #4]
 800df06:	4613      	mov	r3, r2
 800df08:	00db      	lsls	r3, r3, #3
 800df0a:	4413      	add	r3, r2
 800df0c:	009b      	lsls	r3, r3, #2
 800df0e:	440b      	add	r3, r1
 800df10:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800df14:	2200      	movs	r2, #0
 800df16:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800df18:	7bfa      	ldrb	r2, [r7, #15]
 800df1a:	6879      	ldr	r1, [r7, #4]
 800df1c:	4613      	mov	r3, r2
 800df1e:	00db      	lsls	r3, r3, #3
 800df20:	4413      	add	r3, r2
 800df22:	009b      	lsls	r3, r3, #2
 800df24:	440b      	add	r3, r1
 800df26:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800df2a:	2200      	movs	r2, #0
 800df2c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800df2e:	7bfb      	ldrb	r3, [r7, #15]
 800df30:	3301      	adds	r3, #1
 800df32:	73fb      	strb	r3, [r7, #15]
 800df34:	7bfa      	ldrb	r2, [r7, #15]
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	685b      	ldr	r3, [r3, #4]
 800df3a:	429a      	cmp	r2, r3
 800df3c:	d3b5      	bcc.n	800deaa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	603b      	str	r3, [r7, #0]
 800df44:	687e      	ldr	r6, [r7, #4]
 800df46:	466d      	mov	r5, sp
 800df48:	f106 0410 	add.w	r4, r6, #16
 800df4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800df4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800df50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800df52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800df54:	e894 0003 	ldmia.w	r4, {r0, r1}
 800df58:	e885 0003 	stmia.w	r5, {r0, r1}
 800df5c:	1d33      	adds	r3, r6, #4
 800df5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800df60:	6838      	ldr	r0, [r7, #0]
 800df62:	f004 f9e7 	bl	8012334 <USB_DevInit>
 800df66:	4603      	mov	r3, r0
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d005      	beq.n	800df78 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	2202      	movs	r2, #2
 800df70:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800df74:	2301      	movs	r3, #1
 800df76:	e014      	b.n	800dfa2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	2200      	movs	r2, #0
 800df7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	2201      	movs	r2, #1
 800df84:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df8c:	2b01      	cmp	r3, #1
 800df8e:	d102      	bne.n	800df96 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800df90:	6878      	ldr	r0, [r7, #4]
 800df92:	f001 f98b 	bl	800f2ac <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	4618      	mov	r0, r3
 800df9c:	f005 fb29 	bl	80135f2 <USB_DevDisconnect>

  return HAL_OK;
 800dfa0:	2300      	movs	r3, #0
}
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	3714      	adds	r7, #20
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dfaa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800dfaa:	b580      	push	{r7, lr}
 800dfac:	b084      	sub	sp, #16
 800dfae:	af00      	add	r7, sp, #0
 800dfb0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800dfbe:	2b01      	cmp	r3, #1
 800dfc0:	d101      	bne.n	800dfc6 <HAL_PCD_Start+0x1c>
 800dfc2:	2302      	movs	r3, #2
 800dfc4:	e020      	b.n	800e008 <HAL_PCD_Start+0x5e>
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	2201      	movs	r2, #1
 800dfca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfd2:	2b01      	cmp	r3, #1
 800dfd4:	d109      	bne.n	800dfea <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800dfda:	2b01      	cmp	r3, #1
 800dfdc:	d005      	beq.n	800dfea <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfe2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	4618      	mov	r0, r3
 800dff0:	f004 f932 	bl	8012258 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	4618      	mov	r0, r3
 800dffa:	f005 fad9 	bl	80135b0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	2200      	movs	r2, #0
 800e002:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800e006:	2300      	movs	r3, #0
}
 800e008:	4618      	mov	r0, r3
 800e00a:	3710      	adds	r7, #16
 800e00c:	46bd      	mov	sp, r7
 800e00e:	bd80      	pop	{r7, pc}

0800e010 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800e010:	b590      	push	{r4, r7, lr}
 800e012:	b08d      	sub	sp, #52	; 0x34
 800e014:	af00      	add	r7, sp, #0
 800e016:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e01e:	6a3b      	ldr	r3, [r7, #32]
 800e020:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	4618      	mov	r0, r3
 800e028:	f005 fb97 	bl	801375a <USB_GetMode>
 800e02c:	4603      	mov	r3, r0
 800e02e:	2b00      	cmp	r3, #0
 800e030:	f040 84b7 	bne.w	800e9a2 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	4618      	mov	r0, r3
 800e03a:	f005 fafb 	bl	8013634 <USB_ReadInterrupts>
 800e03e:	4603      	mov	r3, r0
 800e040:	2b00      	cmp	r3, #0
 800e042:	f000 84ad 	beq.w	800e9a0 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800e046:	69fb      	ldr	r3, [r7, #28]
 800e048:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e04c:	689b      	ldr	r3, [r3, #8]
 800e04e:	0a1b      	lsrs	r3, r3, #8
 800e050:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	4618      	mov	r0, r3
 800e060:	f005 fae8 	bl	8013634 <USB_ReadInterrupts>
 800e064:	4603      	mov	r3, r0
 800e066:	f003 0302 	and.w	r3, r3, #2
 800e06a:	2b02      	cmp	r3, #2
 800e06c:	d107      	bne.n	800e07e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	695a      	ldr	r2, [r3, #20]
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	f002 0202 	and.w	r2, r2, #2
 800e07c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	4618      	mov	r0, r3
 800e084:	f005 fad6 	bl	8013634 <USB_ReadInterrupts>
 800e088:	4603      	mov	r3, r0
 800e08a:	f003 0310 	and.w	r3, r3, #16
 800e08e:	2b10      	cmp	r3, #16
 800e090:	d161      	bne.n	800e156 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	699a      	ldr	r2, [r3, #24]
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	f022 0210 	bic.w	r2, r2, #16
 800e0a0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800e0a2:	6a3b      	ldr	r3, [r7, #32]
 800e0a4:	6a1b      	ldr	r3, [r3, #32]
 800e0a6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800e0a8:	69bb      	ldr	r3, [r7, #24]
 800e0aa:	f003 020f 	and.w	r2, r3, #15
 800e0ae:	4613      	mov	r3, r2
 800e0b0:	00db      	lsls	r3, r3, #3
 800e0b2:	4413      	add	r3, r2
 800e0b4:	009b      	lsls	r3, r3, #2
 800e0b6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800e0ba:	687a      	ldr	r2, [r7, #4]
 800e0bc:	4413      	add	r3, r2
 800e0be:	3304      	adds	r3, #4
 800e0c0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800e0c2:	69bb      	ldr	r3, [r7, #24]
 800e0c4:	0c5b      	lsrs	r3, r3, #17
 800e0c6:	f003 030f 	and.w	r3, r3, #15
 800e0ca:	2b02      	cmp	r3, #2
 800e0cc:	d124      	bne.n	800e118 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800e0ce:	69ba      	ldr	r2, [r7, #24]
 800e0d0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800e0d4:	4013      	ands	r3, r2
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d035      	beq.n	800e146 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800e0da:	697b      	ldr	r3, [r7, #20]
 800e0dc:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800e0de:	69bb      	ldr	r3, [r7, #24]
 800e0e0:	091b      	lsrs	r3, r3, #4
 800e0e2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800e0e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e0e8:	b29b      	uxth	r3, r3
 800e0ea:	461a      	mov	r2, r3
 800e0ec:	6a38      	ldr	r0, [r7, #32]
 800e0ee:	f005 f90d 	bl	801330c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800e0f2:	697b      	ldr	r3, [r7, #20]
 800e0f4:	691a      	ldr	r2, [r3, #16]
 800e0f6:	69bb      	ldr	r3, [r7, #24]
 800e0f8:	091b      	lsrs	r3, r3, #4
 800e0fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e0fe:	441a      	add	r2, r3
 800e100:	697b      	ldr	r3, [r7, #20]
 800e102:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800e104:	697b      	ldr	r3, [r7, #20]
 800e106:	6a1a      	ldr	r2, [r3, #32]
 800e108:	69bb      	ldr	r3, [r7, #24]
 800e10a:	091b      	lsrs	r3, r3, #4
 800e10c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e110:	441a      	add	r2, r3
 800e112:	697b      	ldr	r3, [r7, #20]
 800e114:	621a      	str	r2, [r3, #32]
 800e116:	e016      	b.n	800e146 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800e118:	69bb      	ldr	r3, [r7, #24]
 800e11a:	0c5b      	lsrs	r3, r3, #17
 800e11c:	f003 030f 	and.w	r3, r3, #15
 800e120:	2b06      	cmp	r3, #6
 800e122:	d110      	bne.n	800e146 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e12a:	2208      	movs	r2, #8
 800e12c:	4619      	mov	r1, r3
 800e12e:	6a38      	ldr	r0, [r7, #32]
 800e130:	f005 f8ec 	bl	801330c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800e134:	697b      	ldr	r3, [r7, #20]
 800e136:	6a1a      	ldr	r2, [r3, #32]
 800e138:	69bb      	ldr	r3, [r7, #24]
 800e13a:	091b      	lsrs	r3, r3, #4
 800e13c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e140:	441a      	add	r2, r3
 800e142:	697b      	ldr	r3, [r7, #20]
 800e144:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	699a      	ldr	r2, [r3, #24]
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	f042 0210 	orr.w	r2, r2, #16
 800e154:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	4618      	mov	r0, r3
 800e15c:	f005 fa6a 	bl	8013634 <USB_ReadInterrupts>
 800e160:	4603      	mov	r3, r0
 800e162:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e166:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800e16a:	f040 80a7 	bne.w	800e2bc <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800e16e:	2300      	movs	r3, #0
 800e170:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	4618      	mov	r0, r3
 800e178:	f005 fa6f 	bl	801365a <USB_ReadDevAllOutEpInterrupt>
 800e17c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800e17e:	e099      	b.n	800e2b4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800e180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e182:	f003 0301 	and.w	r3, r3, #1
 800e186:	2b00      	cmp	r3, #0
 800e188:	f000 808e 	beq.w	800e2a8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e192:	b2d2      	uxtb	r2, r2
 800e194:	4611      	mov	r1, r2
 800e196:	4618      	mov	r0, r3
 800e198:	f005 fa93 	bl	80136c2 <USB_ReadDevOutEPInterrupt>
 800e19c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800e19e:	693b      	ldr	r3, [r7, #16]
 800e1a0:	f003 0301 	and.w	r3, r3, #1
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d00c      	beq.n	800e1c2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800e1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1aa:	015a      	lsls	r2, r3, #5
 800e1ac:	69fb      	ldr	r3, [r7, #28]
 800e1ae:	4413      	add	r3, r2
 800e1b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e1b4:	461a      	mov	r2, r3
 800e1b6:	2301      	movs	r3, #1
 800e1b8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800e1ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e1bc:	6878      	ldr	r0, [r7, #4]
 800e1be:	f000 feef 	bl	800efa0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800e1c2:	693b      	ldr	r3, [r7, #16]
 800e1c4:	f003 0308 	and.w	r3, r3, #8
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d00c      	beq.n	800e1e6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800e1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1ce:	015a      	lsls	r2, r3, #5
 800e1d0:	69fb      	ldr	r3, [r7, #28]
 800e1d2:	4413      	add	r3, r2
 800e1d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e1d8:	461a      	mov	r2, r3
 800e1da:	2308      	movs	r3, #8
 800e1dc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800e1de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e1e0:	6878      	ldr	r0, [r7, #4]
 800e1e2:	f000 ffc5 	bl	800f170 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800e1e6:	693b      	ldr	r3, [r7, #16]
 800e1e8:	f003 0310 	and.w	r3, r3, #16
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d008      	beq.n	800e202 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800e1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1f2:	015a      	lsls	r2, r3, #5
 800e1f4:	69fb      	ldr	r3, [r7, #28]
 800e1f6:	4413      	add	r3, r2
 800e1f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e1fc:	461a      	mov	r2, r3
 800e1fe:	2310      	movs	r3, #16
 800e200:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800e202:	693b      	ldr	r3, [r7, #16]
 800e204:	f003 0302 	and.w	r3, r3, #2
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d030      	beq.n	800e26e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800e20c:	6a3b      	ldr	r3, [r7, #32]
 800e20e:	695b      	ldr	r3, [r3, #20]
 800e210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e214:	2b80      	cmp	r3, #128	; 0x80
 800e216:	d109      	bne.n	800e22c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800e218:	69fb      	ldr	r3, [r7, #28]
 800e21a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e21e:	685b      	ldr	r3, [r3, #4]
 800e220:	69fa      	ldr	r2, [r7, #28]
 800e222:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e226:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e22a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800e22c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e22e:	4613      	mov	r3, r2
 800e230:	00db      	lsls	r3, r3, #3
 800e232:	4413      	add	r3, r2
 800e234:	009b      	lsls	r3, r3, #2
 800e236:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800e23a:	687a      	ldr	r2, [r7, #4]
 800e23c:	4413      	add	r3, r2
 800e23e:	3304      	adds	r3, #4
 800e240:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800e242:	697b      	ldr	r3, [r7, #20]
 800e244:	78db      	ldrb	r3, [r3, #3]
 800e246:	2b01      	cmp	r3, #1
 800e248:	d108      	bne.n	800e25c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800e24a:	697b      	ldr	r3, [r7, #20]
 800e24c:	2200      	movs	r2, #0
 800e24e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800e250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e252:	b2db      	uxtb	r3, r3
 800e254:	4619      	mov	r1, r3
 800e256:	6878      	ldr	r0, [r7, #4]
 800e258:	f00b faf4 	bl	8019844 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800e25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e25e:	015a      	lsls	r2, r3, #5
 800e260:	69fb      	ldr	r3, [r7, #28]
 800e262:	4413      	add	r3, r2
 800e264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e268:	461a      	mov	r2, r3
 800e26a:	2302      	movs	r3, #2
 800e26c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800e26e:	693b      	ldr	r3, [r7, #16]
 800e270:	f003 0320 	and.w	r3, r3, #32
 800e274:	2b00      	cmp	r3, #0
 800e276:	d008      	beq.n	800e28a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800e278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e27a:	015a      	lsls	r2, r3, #5
 800e27c:	69fb      	ldr	r3, [r7, #28]
 800e27e:	4413      	add	r3, r2
 800e280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e284:	461a      	mov	r2, r3
 800e286:	2320      	movs	r3, #32
 800e288:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800e28a:	693b      	ldr	r3, [r7, #16]
 800e28c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e290:	2b00      	cmp	r3, #0
 800e292:	d009      	beq.n	800e2a8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800e294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e296:	015a      	lsls	r2, r3, #5
 800e298:	69fb      	ldr	r3, [r7, #28]
 800e29a:	4413      	add	r3, r2
 800e29c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2a0:	461a      	mov	r2, r3
 800e2a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e2a6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800e2a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2aa:	3301      	adds	r3, #1
 800e2ac:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800e2ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2b0:	085b      	lsrs	r3, r3, #1
 800e2b2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800e2b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	f47f af62 	bne.w	800e180 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	f005 f9b7 	bl	8013634 <USB_ReadInterrupts>
 800e2c6:	4603      	mov	r3, r0
 800e2c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e2cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e2d0:	f040 80db 	bne.w	800e48a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	4618      	mov	r0, r3
 800e2da:	f005 f9d8 	bl	801368e <USB_ReadDevAllInEpInterrupt>
 800e2de:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800e2e4:	e0cd      	b.n	800e482 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800e2e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2e8:	f003 0301 	and.w	r3, r3, #1
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	f000 80c2 	beq.w	800e476 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e2f8:	b2d2      	uxtb	r2, r2
 800e2fa:	4611      	mov	r1, r2
 800e2fc:	4618      	mov	r0, r3
 800e2fe:	f005 f9fe 	bl	80136fe <USB_ReadDevInEPInterrupt>
 800e302:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800e304:	693b      	ldr	r3, [r7, #16]
 800e306:	f003 0301 	and.w	r3, r3, #1
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d057      	beq.n	800e3be <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800e30e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e310:	f003 030f 	and.w	r3, r3, #15
 800e314:	2201      	movs	r2, #1
 800e316:	fa02 f303 	lsl.w	r3, r2, r3
 800e31a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800e31c:	69fb      	ldr	r3, [r7, #28]
 800e31e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e322:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	43db      	mvns	r3, r3
 800e328:	69f9      	ldr	r1, [r7, #28]
 800e32a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e32e:	4013      	ands	r3, r2
 800e330:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800e332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e334:	015a      	lsls	r2, r3, #5
 800e336:	69fb      	ldr	r3, [r7, #28]
 800e338:	4413      	add	r3, r2
 800e33a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e33e:	461a      	mov	r2, r3
 800e340:	2301      	movs	r3, #1
 800e342:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	691b      	ldr	r3, [r3, #16]
 800e348:	2b01      	cmp	r3, #1
 800e34a:	d132      	bne.n	800e3b2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800e34c:	6879      	ldr	r1, [r7, #4]
 800e34e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e350:	4613      	mov	r3, r2
 800e352:	00db      	lsls	r3, r3, #3
 800e354:	4413      	add	r3, r2
 800e356:	009b      	lsls	r3, r3, #2
 800e358:	440b      	add	r3, r1
 800e35a:	334c      	adds	r3, #76	; 0x4c
 800e35c:	6819      	ldr	r1, [r3, #0]
 800e35e:	6878      	ldr	r0, [r7, #4]
 800e360:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e362:	4613      	mov	r3, r2
 800e364:	00db      	lsls	r3, r3, #3
 800e366:	4413      	add	r3, r2
 800e368:	009b      	lsls	r3, r3, #2
 800e36a:	4403      	add	r3, r0
 800e36c:	3348      	adds	r3, #72	; 0x48
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	4419      	add	r1, r3
 800e372:	6878      	ldr	r0, [r7, #4]
 800e374:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e376:	4613      	mov	r3, r2
 800e378:	00db      	lsls	r3, r3, #3
 800e37a:	4413      	add	r3, r2
 800e37c:	009b      	lsls	r3, r3, #2
 800e37e:	4403      	add	r3, r0
 800e380:	334c      	adds	r3, #76	; 0x4c
 800e382:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800e384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e386:	2b00      	cmp	r3, #0
 800e388:	d113      	bne.n	800e3b2 <HAL_PCD_IRQHandler+0x3a2>
 800e38a:	6879      	ldr	r1, [r7, #4]
 800e38c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e38e:	4613      	mov	r3, r2
 800e390:	00db      	lsls	r3, r3, #3
 800e392:	4413      	add	r3, r2
 800e394:	009b      	lsls	r3, r3, #2
 800e396:	440b      	add	r3, r1
 800e398:	3354      	adds	r3, #84	; 0x54
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d108      	bne.n	800e3b2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	6818      	ldr	r0, [r3, #0]
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e3aa:	461a      	mov	r2, r3
 800e3ac:	2101      	movs	r1, #1
 800e3ae:	f005 fa05 	bl	80137bc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800e3b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3b4:	b2db      	uxtb	r3, r3
 800e3b6:	4619      	mov	r1, r3
 800e3b8:	6878      	ldr	r0, [r7, #4]
 800e3ba:	f00b f9be 	bl	801973a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800e3be:	693b      	ldr	r3, [r7, #16]
 800e3c0:	f003 0308 	and.w	r3, r3, #8
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d008      	beq.n	800e3da <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800e3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3ca:	015a      	lsls	r2, r3, #5
 800e3cc:	69fb      	ldr	r3, [r7, #28]
 800e3ce:	4413      	add	r3, r2
 800e3d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e3d4:	461a      	mov	r2, r3
 800e3d6:	2308      	movs	r3, #8
 800e3d8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800e3da:	693b      	ldr	r3, [r7, #16]
 800e3dc:	f003 0310 	and.w	r3, r3, #16
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d008      	beq.n	800e3f6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800e3e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3e6:	015a      	lsls	r2, r3, #5
 800e3e8:	69fb      	ldr	r3, [r7, #28]
 800e3ea:	4413      	add	r3, r2
 800e3ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e3f0:	461a      	mov	r2, r3
 800e3f2:	2310      	movs	r3, #16
 800e3f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800e3f6:	693b      	ldr	r3, [r7, #16]
 800e3f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d008      	beq.n	800e412 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800e400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e402:	015a      	lsls	r2, r3, #5
 800e404:	69fb      	ldr	r3, [r7, #28]
 800e406:	4413      	add	r3, r2
 800e408:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e40c:	461a      	mov	r2, r3
 800e40e:	2340      	movs	r3, #64	; 0x40
 800e410:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800e412:	693b      	ldr	r3, [r7, #16]
 800e414:	f003 0302 	and.w	r3, r3, #2
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d023      	beq.n	800e464 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800e41c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e41e:	6a38      	ldr	r0, [r7, #32]
 800e420:	f004 f8e6 	bl	80125f0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800e424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e426:	4613      	mov	r3, r2
 800e428:	00db      	lsls	r3, r3, #3
 800e42a:	4413      	add	r3, r2
 800e42c:	009b      	lsls	r3, r3, #2
 800e42e:	3338      	adds	r3, #56	; 0x38
 800e430:	687a      	ldr	r2, [r7, #4]
 800e432:	4413      	add	r3, r2
 800e434:	3304      	adds	r3, #4
 800e436:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800e438:	697b      	ldr	r3, [r7, #20]
 800e43a:	78db      	ldrb	r3, [r3, #3]
 800e43c:	2b01      	cmp	r3, #1
 800e43e:	d108      	bne.n	800e452 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800e440:	697b      	ldr	r3, [r7, #20]
 800e442:	2200      	movs	r2, #0
 800e444:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800e446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e448:	b2db      	uxtb	r3, r3
 800e44a:	4619      	mov	r1, r3
 800e44c:	6878      	ldr	r0, [r7, #4]
 800e44e:	f00b fa0b 	bl	8019868 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800e452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e454:	015a      	lsls	r2, r3, #5
 800e456:	69fb      	ldr	r3, [r7, #28]
 800e458:	4413      	add	r3, r2
 800e45a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e45e:	461a      	mov	r2, r3
 800e460:	2302      	movs	r3, #2
 800e462:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800e464:	693b      	ldr	r3, [r7, #16]
 800e466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d003      	beq.n	800e476 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800e46e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e470:	6878      	ldr	r0, [r7, #4]
 800e472:	f000 fd08 	bl	800ee86 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800e476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e478:	3301      	adds	r3, #1
 800e47a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800e47c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e47e:	085b      	lsrs	r3, r3, #1
 800e480:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800e482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e484:	2b00      	cmp	r3, #0
 800e486:	f47f af2e 	bne.w	800e2e6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	4618      	mov	r0, r3
 800e490:	f005 f8d0 	bl	8013634 <USB_ReadInterrupts>
 800e494:	4603      	mov	r3, r0
 800e496:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e49a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e49e:	d122      	bne.n	800e4e6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800e4a0:	69fb      	ldr	r3, [r7, #28]
 800e4a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e4a6:	685b      	ldr	r3, [r3, #4]
 800e4a8:	69fa      	ldr	r2, [r7, #28]
 800e4aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e4ae:	f023 0301 	bic.w	r3, r3, #1
 800e4b2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800e4ba:	2b01      	cmp	r3, #1
 800e4bc:	d108      	bne.n	800e4d0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	2200      	movs	r2, #0
 800e4c2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800e4c6:	2100      	movs	r1, #0
 800e4c8:	6878      	ldr	r0, [r7, #4]
 800e4ca:	f00b fb85 	bl	8019bd8 <HAL_PCDEx_LPM_Callback>
 800e4ce:	e002      	b.n	800e4d6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800e4d0:	6878      	ldr	r0, [r7, #4]
 800e4d2:	f00b f9a9 	bl	8019828 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	695a      	ldr	r2, [r3, #20]
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800e4e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	f005 f8a2 	bl	8013634 <USB_ReadInterrupts>
 800e4f0:	4603      	mov	r3, r0
 800e4f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e4f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e4fa:	d112      	bne.n	800e522 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800e4fc:	69fb      	ldr	r3, [r7, #28]
 800e4fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e502:	689b      	ldr	r3, [r3, #8]
 800e504:	f003 0301 	and.w	r3, r3, #1
 800e508:	2b01      	cmp	r3, #1
 800e50a:	d102      	bne.n	800e512 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800e50c:	6878      	ldr	r0, [r7, #4]
 800e50e:	f00b f965 	bl	80197dc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	695a      	ldr	r2, [r3, #20]
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800e520:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	4618      	mov	r0, r3
 800e528:	f005 f884 	bl	8013634 <USB_ReadInterrupts>
 800e52c:	4603      	mov	r3, r0
 800e52e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e532:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e536:	d121      	bne.n	800e57c <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	695a      	ldr	r2, [r3, #20]
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800e546:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d111      	bne.n	800e576 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	2201      	movs	r2, #1
 800e556:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e560:	089b      	lsrs	r3, r3, #2
 800e562:	f003 020f 	and.w	r2, r3, #15
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800e56c:	2101      	movs	r1, #1
 800e56e:	6878      	ldr	r0, [r7, #4]
 800e570:	f00b fb32 	bl	8019bd8 <HAL_PCDEx_LPM_Callback>
 800e574:	e002      	b.n	800e57c <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800e576:	6878      	ldr	r0, [r7, #4]
 800e578:	f00b f930 	bl	80197dc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	4618      	mov	r0, r3
 800e582:	f005 f857 	bl	8013634 <USB_ReadInterrupts>
 800e586:	4603      	mov	r3, r0
 800e588:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e58c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e590:	f040 80b7 	bne.w	800e702 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800e594:	69fb      	ldr	r3, [r7, #28]
 800e596:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e59a:	685b      	ldr	r3, [r3, #4]
 800e59c:	69fa      	ldr	r2, [r7, #28]
 800e59e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e5a2:	f023 0301 	bic.w	r3, r3, #1
 800e5a6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	2110      	movs	r1, #16
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	f004 f81e 	bl	80125f0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e5b8:	e046      	b.n	800e648 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800e5ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5bc:	015a      	lsls	r2, r3, #5
 800e5be:	69fb      	ldr	r3, [r7, #28]
 800e5c0:	4413      	add	r3, r2
 800e5c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5c6:	461a      	mov	r2, r3
 800e5c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e5cc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e5ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5d0:	015a      	lsls	r2, r3, #5
 800e5d2:	69fb      	ldr	r3, [r7, #28]
 800e5d4:	4413      	add	r3, r2
 800e5d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e5de:	0151      	lsls	r1, r2, #5
 800e5e0:	69fa      	ldr	r2, [r7, #28]
 800e5e2:	440a      	add	r2, r1
 800e5e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e5e8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e5ec:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800e5ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5f0:	015a      	lsls	r2, r3, #5
 800e5f2:	69fb      	ldr	r3, [r7, #28]
 800e5f4:	4413      	add	r3, r2
 800e5f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e5fa:	461a      	mov	r2, r3
 800e5fc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e600:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800e602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e604:	015a      	lsls	r2, r3, #5
 800e606:	69fb      	ldr	r3, [r7, #28]
 800e608:	4413      	add	r3, r2
 800e60a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e612:	0151      	lsls	r1, r2, #5
 800e614:	69fa      	ldr	r2, [r7, #28]
 800e616:	440a      	add	r2, r1
 800e618:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e61c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e620:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800e622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e624:	015a      	lsls	r2, r3, #5
 800e626:	69fb      	ldr	r3, [r7, #28]
 800e628:	4413      	add	r3, r2
 800e62a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e632:	0151      	lsls	r1, r2, #5
 800e634:	69fa      	ldr	r2, [r7, #28]
 800e636:	440a      	add	r2, r1
 800e638:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e63c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e640:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e644:	3301      	adds	r3, #1
 800e646:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	685b      	ldr	r3, [r3, #4]
 800e64c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e64e:	429a      	cmp	r2, r3
 800e650:	d3b3      	bcc.n	800e5ba <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800e652:	69fb      	ldr	r3, [r7, #28]
 800e654:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e658:	69db      	ldr	r3, [r3, #28]
 800e65a:	69fa      	ldr	r2, [r7, #28]
 800e65c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e660:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800e664:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d016      	beq.n	800e69c <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800e66e:	69fb      	ldr	r3, [r7, #28]
 800e670:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e674:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e678:	69fa      	ldr	r2, [r7, #28]
 800e67a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e67e:	f043 030b 	orr.w	r3, r3, #11
 800e682:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800e686:	69fb      	ldr	r3, [r7, #28]
 800e688:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e68c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e68e:	69fa      	ldr	r2, [r7, #28]
 800e690:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e694:	f043 030b 	orr.w	r3, r3, #11
 800e698:	6453      	str	r3, [r2, #68]	; 0x44
 800e69a:	e015      	b.n	800e6c8 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800e69c:	69fb      	ldr	r3, [r7, #28]
 800e69e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e6a2:	695b      	ldr	r3, [r3, #20]
 800e6a4:	69fa      	ldr	r2, [r7, #28]
 800e6a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e6aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e6ae:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800e6b2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800e6b4:	69fb      	ldr	r3, [r7, #28]
 800e6b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e6ba:	691b      	ldr	r3, [r3, #16]
 800e6bc:	69fa      	ldr	r2, [r7, #28]
 800e6be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e6c2:	f043 030b 	orr.w	r3, r3, #11
 800e6c6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800e6c8:	69fb      	ldr	r3, [r7, #28]
 800e6ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	69fa      	ldr	r2, [r7, #28]
 800e6d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e6d6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800e6da:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	6818      	ldr	r0, [r3, #0]
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	691b      	ldr	r3, [r3, #16]
 800e6e4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800e6ec:	461a      	mov	r2, r3
 800e6ee:	f005 f865 	bl	80137bc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	695a      	ldr	r2, [r3, #20]
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800e700:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	4618      	mov	r0, r3
 800e708:	f004 ff94 	bl	8013634 <USB_ReadInterrupts>
 800e70c:	4603      	mov	r3, r0
 800e70e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e712:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e716:	d124      	bne.n	800e762 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	4618      	mov	r0, r3
 800e71e:	f005 f82a 	bl	8013776 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	4618      	mov	r0, r3
 800e728:	f003 ffdf 	bl	80126ea <USB_GetDevSpeed>
 800e72c:	4603      	mov	r3, r0
 800e72e:	461a      	mov	r2, r3
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	681c      	ldr	r4, [r3, #0]
 800e738:	f000 fec2 	bl	800f4c0 <HAL_RCC_GetHCLKFreq>
 800e73c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800e742:	b2db      	uxtb	r3, r3
 800e744:	461a      	mov	r2, r3
 800e746:	4620      	mov	r0, r4
 800e748:	f003 fce4 	bl	8012114 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800e74c:	6878      	ldr	r0, [r7, #4]
 800e74e:	f00b f81c 	bl	801978a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	695a      	ldr	r2, [r3, #20]
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800e760:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	4618      	mov	r0, r3
 800e768:	f004 ff64 	bl	8013634 <USB_ReadInterrupts>
 800e76c:	4603      	mov	r3, r0
 800e76e:	f003 0308 	and.w	r3, r3, #8
 800e772:	2b08      	cmp	r3, #8
 800e774:	d10a      	bne.n	800e78c <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800e776:	6878      	ldr	r0, [r7, #4]
 800e778:	f00a fff9 	bl	801976e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	695a      	ldr	r2, [r3, #20]
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	f002 0208 	and.w	r2, r2, #8
 800e78a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	4618      	mov	r0, r3
 800e792:	f004 ff4f 	bl	8013634 <USB_ReadInterrupts>
 800e796:	4603      	mov	r3, r0
 800e798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e79c:	2b80      	cmp	r3, #128	; 0x80
 800e79e:	d122      	bne.n	800e7e6 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800e7a0:	6a3b      	ldr	r3, [r7, #32]
 800e7a2:	699b      	ldr	r3, [r3, #24]
 800e7a4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e7a8:	6a3b      	ldr	r3, [r7, #32]
 800e7aa:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800e7ac:	2301      	movs	r3, #1
 800e7ae:	627b      	str	r3, [r7, #36]	; 0x24
 800e7b0:	e014      	b.n	800e7dc <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800e7b2:	6879      	ldr	r1, [r7, #4]
 800e7b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e7b6:	4613      	mov	r3, r2
 800e7b8:	00db      	lsls	r3, r3, #3
 800e7ba:	4413      	add	r3, r2
 800e7bc:	009b      	lsls	r3, r3, #2
 800e7be:	440b      	add	r3, r1
 800e7c0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800e7c4:	781b      	ldrb	r3, [r3, #0]
 800e7c6:	2b01      	cmp	r3, #1
 800e7c8:	d105      	bne.n	800e7d6 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800e7ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7cc:	b2db      	uxtb	r3, r3
 800e7ce:	4619      	mov	r1, r3
 800e7d0:	6878      	ldr	r0, [r7, #4]
 800e7d2:	f000 fb27 	bl	800ee24 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800e7d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7d8:	3301      	adds	r3, #1
 800e7da:	627b      	str	r3, [r7, #36]	; 0x24
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	685b      	ldr	r3, [r3, #4]
 800e7e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e7e2:	429a      	cmp	r2, r3
 800e7e4:	d3e5      	bcc.n	800e7b2 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	f004 ff22 	bl	8013634 <USB_ReadInterrupts>
 800e7f0:	4603      	mov	r3, r0
 800e7f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e7f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e7fa:	d13b      	bne.n	800e874 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800e7fc:	2301      	movs	r3, #1
 800e7fe:	627b      	str	r3, [r7, #36]	; 0x24
 800e800:	e02b      	b.n	800e85a <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800e802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e804:	015a      	lsls	r2, r3, #5
 800e806:	69fb      	ldr	r3, [r7, #28]
 800e808:	4413      	add	r3, r2
 800e80a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800e812:	6879      	ldr	r1, [r7, #4]
 800e814:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e816:	4613      	mov	r3, r2
 800e818:	00db      	lsls	r3, r3, #3
 800e81a:	4413      	add	r3, r2
 800e81c:	009b      	lsls	r3, r3, #2
 800e81e:	440b      	add	r3, r1
 800e820:	3340      	adds	r3, #64	; 0x40
 800e822:	781b      	ldrb	r3, [r3, #0]
 800e824:	2b01      	cmp	r3, #1
 800e826:	d115      	bne.n	800e854 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800e828:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	da12      	bge.n	800e854 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800e82e:	6879      	ldr	r1, [r7, #4]
 800e830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e832:	4613      	mov	r3, r2
 800e834:	00db      	lsls	r3, r3, #3
 800e836:	4413      	add	r3, r2
 800e838:	009b      	lsls	r3, r3, #2
 800e83a:	440b      	add	r3, r1
 800e83c:	333f      	adds	r3, #63	; 0x3f
 800e83e:	2201      	movs	r2, #1
 800e840:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800e842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e844:	b2db      	uxtb	r3, r3
 800e846:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e84a:	b2db      	uxtb	r3, r3
 800e84c:	4619      	mov	r1, r3
 800e84e:	6878      	ldr	r0, [r7, #4]
 800e850:	f000 fae8 	bl	800ee24 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800e854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e856:	3301      	adds	r3, #1
 800e858:	627b      	str	r3, [r7, #36]	; 0x24
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	685b      	ldr	r3, [r3, #4]
 800e85e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e860:	429a      	cmp	r2, r3
 800e862:	d3ce      	bcc.n	800e802 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	695a      	ldr	r2, [r3, #20]
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800e872:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	4618      	mov	r0, r3
 800e87a:	f004 fedb 	bl	8013634 <USB_ReadInterrupts>
 800e87e:	4603      	mov	r3, r0
 800e880:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e884:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e888:	d155      	bne.n	800e936 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800e88a:	2301      	movs	r3, #1
 800e88c:	627b      	str	r3, [r7, #36]	; 0x24
 800e88e:	e045      	b.n	800e91c <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800e890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e892:	015a      	lsls	r2, r3, #5
 800e894:	69fb      	ldr	r3, [r7, #28]
 800e896:	4413      	add	r3, r2
 800e898:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800e8a0:	6879      	ldr	r1, [r7, #4]
 800e8a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8a4:	4613      	mov	r3, r2
 800e8a6:	00db      	lsls	r3, r3, #3
 800e8a8:	4413      	add	r3, r2
 800e8aa:	009b      	lsls	r3, r3, #2
 800e8ac:	440b      	add	r3, r1
 800e8ae:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800e8b2:	781b      	ldrb	r3, [r3, #0]
 800e8b4:	2b01      	cmp	r3, #1
 800e8b6:	d12e      	bne.n	800e916 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800e8b8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	da2b      	bge.n	800e916 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800e8be:	69bb      	ldr	r3, [r7, #24]
 800e8c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800e8ca:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800e8ce:	429a      	cmp	r2, r3
 800e8d0:	d121      	bne.n	800e916 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800e8d2:	6879      	ldr	r1, [r7, #4]
 800e8d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8d6:	4613      	mov	r3, r2
 800e8d8:	00db      	lsls	r3, r3, #3
 800e8da:	4413      	add	r3, r2
 800e8dc:	009b      	lsls	r3, r3, #2
 800e8de:	440b      	add	r3, r1
 800e8e0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800e8e4:	2201      	movs	r2, #1
 800e8e6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800e8e8:	6a3b      	ldr	r3, [r7, #32]
 800e8ea:	699b      	ldr	r3, [r3, #24]
 800e8ec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e8f0:	6a3b      	ldr	r3, [r7, #32]
 800e8f2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800e8f4:	6a3b      	ldr	r3, [r7, #32]
 800e8f6:	695b      	ldr	r3, [r3, #20]
 800e8f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d10a      	bne.n	800e916 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800e900:	69fb      	ldr	r3, [r7, #28]
 800e902:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e906:	685b      	ldr	r3, [r3, #4]
 800e908:	69fa      	ldr	r2, [r7, #28]
 800e90a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e90e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e912:	6053      	str	r3, [r2, #4]
            break;
 800e914:	e007      	b.n	800e926 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800e916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e918:	3301      	adds	r3, #1
 800e91a:	627b      	str	r3, [r7, #36]	; 0x24
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	685b      	ldr	r3, [r3, #4]
 800e920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e922:	429a      	cmp	r2, r3
 800e924:	d3b4      	bcc.n	800e890 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	695a      	ldr	r2, [r3, #20]
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800e934:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	4618      	mov	r0, r3
 800e93c:	f004 fe7a 	bl	8013634 <USB_ReadInterrupts>
 800e940:	4603      	mov	r3, r0
 800e942:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e94a:	d10a      	bne.n	800e962 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800e94c:	6878      	ldr	r0, [r7, #4]
 800e94e:	f00a ff9d 	bl	801988c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	695a      	ldr	r2, [r3, #20]
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800e960:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	4618      	mov	r0, r3
 800e968:	f004 fe64 	bl	8013634 <USB_ReadInterrupts>
 800e96c:	4603      	mov	r3, r0
 800e96e:	f003 0304 	and.w	r3, r3, #4
 800e972:	2b04      	cmp	r3, #4
 800e974:	d115      	bne.n	800e9a2 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	685b      	ldr	r3, [r3, #4]
 800e97c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800e97e:	69bb      	ldr	r3, [r7, #24]
 800e980:	f003 0304 	and.w	r3, r3, #4
 800e984:	2b00      	cmp	r3, #0
 800e986:	d002      	beq.n	800e98e <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800e988:	6878      	ldr	r0, [r7, #4]
 800e98a:	f00a ff8d 	bl	80198a8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	6859      	ldr	r1, [r3, #4]
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	69ba      	ldr	r2, [r7, #24]
 800e99a:	430a      	orrs	r2, r1
 800e99c:	605a      	str	r2, [r3, #4]
 800e99e:	e000      	b.n	800e9a2 <HAL_PCD_IRQHandler+0x992>
      return;
 800e9a0:	bf00      	nop
    }
  }
}
 800e9a2:	3734      	adds	r7, #52	; 0x34
 800e9a4:	46bd      	mov	sp, r7
 800e9a6:	bd90      	pop	{r4, r7, pc}

0800e9a8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800e9a8:	b580      	push	{r7, lr}
 800e9aa:	b082      	sub	sp, #8
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	6078      	str	r0, [r7, #4]
 800e9b0:	460b      	mov	r3, r1
 800e9b2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800e9ba:	2b01      	cmp	r3, #1
 800e9bc:	d101      	bne.n	800e9c2 <HAL_PCD_SetAddress+0x1a>
 800e9be:	2302      	movs	r3, #2
 800e9c0:	e013      	b.n	800e9ea <HAL_PCD_SetAddress+0x42>
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	2201      	movs	r2, #1
 800e9c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	78fa      	ldrb	r2, [r7, #3]
 800e9ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	78fa      	ldrb	r2, [r7, #3]
 800e9d8:	4611      	mov	r1, r2
 800e9da:	4618      	mov	r0, r3
 800e9dc:	f004 fdc2 	bl	8013564 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	2200      	movs	r2, #0
 800e9e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800e9e8:	2300      	movs	r3, #0
}
 800e9ea:	4618      	mov	r0, r3
 800e9ec:	3708      	adds	r7, #8
 800e9ee:	46bd      	mov	sp, r7
 800e9f0:	bd80      	pop	{r7, pc}

0800e9f2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800e9f2:	b580      	push	{r7, lr}
 800e9f4:	b084      	sub	sp, #16
 800e9f6:	af00      	add	r7, sp, #0
 800e9f8:	6078      	str	r0, [r7, #4]
 800e9fa:	4608      	mov	r0, r1
 800e9fc:	4611      	mov	r1, r2
 800e9fe:	461a      	mov	r2, r3
 800ea00:	4603      	mov	r3, r0
 800ea02:	70fb      	strb	r3, [r7, #3]
 800ea04:	460b      	mov	r3, r1
 800ea06:	803b      	strh	r3, [r7, #0]
 800ea08:	4613      	mov	r3, r2
 800ea0a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800ea0c:	2300      	movs	r3, #0
 800ea0e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800ea10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	da0f      	bge.n	800ea38 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ea18:	78fb      	ldrb	r3, [r7, #3]
 800ea1a:	f003 020f 	and.w	r2, r3, #15
 800ea1e:	4613      	mov	r3, r2
 800ea20:	00db      	lsls	r3, r3, #3
 800ea22:	4413      	add	r3, r2
 800ea24:	009b      	lsls	r3, r3, #2
 800ea26:	3338      	adds	r3, #56	; 0x38
 800ea28:	687a      	ldr	r2, [r7, #4]
 800ea2a:	4413      	add	r3, r2
 800ea2c:	3304      	adds	r3, #4
 800ea2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	2201      	movs	r2, #1
 800ea34:	705a      	strb	r2, [r3, #1]
 800ea36:	e00f      	b.n	800ea58 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ea38:	78fb      	ldrb	r3, [r7, #3]
 800ea3a:	f003 020f 	and.w	r2, r3, #15
 800ea3e:	4613      	mov	r3, r2
 800ea40:	00db      	lsls	r3, r3, #3
 800ea42:	4413      	add	r3, r2
 800ea44:	009b      	lsls	r3, r3, #2
 800ea46:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800ea4a:	687a      	ldr	r2, [r7, #4]
 800ea4c:	4413      	add	r3, r2
 800ea4e:	3304      	adds	r3, #4
 800ea50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	2200      	movs	r2, #0
 800ea56:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800ea58:	78fb      	ldrb	r3, [r7, #3]
 800ea5a:	f003 030f 	and.w	r3, r3, #15
 800ea5e:	b2da      	uxtb	r2, r3
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800ea64:	883a      	ldrh	r2, [r7, #0]
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	78ba      	ldrb	r2, [r7, #2]
 800ea6e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	785b      	ldrb	r3, [r3, #1]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d004      	beq.n	800ea82 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	781b      	ldrb	r3, [r3, #0]
 800ea7c:	b29a      	uxth	r2, r3
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800ea82:	78bb      	ldrb	r3, [r7, #2]
 800ea84:	2b02      	cmp	r3, #2
 800ea86:	d102      	bne.n	800ea8e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	2200      	movs	r2, #0
 800ea8c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800ea94:	2b01      	cmp	r3, #1
 800ea96:	d101      	bne.n	800ea9c <HAL_PCD_EP_Open+0xaa>
 800ea98:	2302      	movs	r3, #2
 800ea9a:	e00e      	b.n	800eaba <HAL_PCD_EP_Open+0xc8>
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	2201      	movs	r2, #1
 800eaa0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	68f9      	ldr	r1, [r7, #12]
 800eaaa:	4618      	mov	r0, r3
 800eaac:	f003 fe42 	bl	8012734 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	2200      	movs	r2, #0
 800eab4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800eab8:	7afb      	ldrb	r3, [r7, #11]
}
 800eaba:	4618      	mov	r0, r3
 800eabc:	3710      	adds	r7, #16
 800eabe:	46bd      	mov	sp, r7
 800eac0:	bd80      	pop	{r7, pc}

0800eac2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800eac2:	b580      	push	{r7, lr}
 800eac4:	b084      	sub	sp, #16
 800eac6:	af00      	add	r7, sp, #0
 800eac8:	6078      	str	r0, [r7, #4]
 800eaca:	460b      	mov	r3, r1
 800eacc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800eace:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	da0f      	bge.n	800eaf6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ead6:	78fb      	ldrb	r3, [r7, #3]
 800ead8:	f003 020f 	and.w	r2, r3, #15
 800eadc:	4613      	mov	r3, r2
 800eade:	00db      	lsls	r3, r3, #3
 800eae0:	4413      	add	r3, r2
 800eae2:	009b      	lsls	r3, r3, #2
 800eae4:	3338      	adds	r3, #56	; 0x38
 800eae6:	687a      	ldr	r2, [r7, #4]
 800eae8:	4413      	add	r3, r2
 800eaea:	3304      	adds	r3, #4
 800eaec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	2201      	movs	r2, #1
 800eaf2:	705a      	strb	r2, [r3, #1]
 800eaf4:	e00f      	b.n	800eb16 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800eaf6:	78fb      	ldrb	r3, [r7, #3]
 800eaf8:	f003 020f 	and.w	r2, r3, #15
 800eafc:	4613      	mov	r3, r2
 800eafe:	00db      	lsls	r3, r3, #3
 800eb00:	4413      	add	r3, r2
 800eb02:	009b      	lsls	r3, r3, #2
 800eb04:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800eb08:	687a      	ldr	r2, [r7, #4]
 800eb0a:	4413      	add	r3, r2
 800eb0c:	3304      	adds	r3, #4
 800eb0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	2200      	movs	r2, #0
 800eb14:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800eb16:	78fb      	ldrb	r3, [r7, #3]
 800eb18:	f003 030f 	and.w	r3, r3, #15
 800eb1c:	b2da      	uxtb	r2, r3
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800eb28:	2b01      	cmp	r3, #1
 800eb2a:	d101      	bne.n	800eb30 <HAL_PCD_EP_Close+0x6e>
 800eb2c:	2302      	movs	r3, #2
 800eb2e:	e00e      	b.n	800eb4e <HAL_PCD_EP_Close+0x8c>
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	2201      	movs	r2, #1
 800eb34:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	68f9      	ldr	r1, [r7, #12]
 800eb3e:	4618      	mov	r0, r3
 800eb40:	f003 fe80 	bl	8012844 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	2200      	movs	r2, #0
 800eb48:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800eb4c:	2300      	movs	r3, #0
}
 800eb4e:	4618      	mov	r0, r3
 800eb50:	3710      	adds	r7, #16
 800eb52:	46bd      	mov	sp, r7
 800eb54:	bd80      	pop	{r7, pc}

0800eb56 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800eb56:	b580      	push	{r7, lr}
 800eb58:	b086      	sub	sp, #24
 800eb5a:	af00      	add	r7, sp, #0
 800eb5c:	60f8      	str	r0, [r7, #12]
 800eb5e:	607a      	str	r2, [r7, #4]
 800eb60:	603b      	str	r3, [r7, #0]
 800eb62:	460b      	mov	r3, r1
 800eb64:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800eb66:	7afb      	ldrb	r3, [r7, #11]
 800eb68:	f003 020f 	and.w	r2, r3, #15
 800eb6c:	4613      	mov	r3, r2
 800eb6e:	00db      	lsls	r3, r3, #3
 800eb70:	4413      	add	r3, r2
 800eb72:	009b      	lsls	r3, r3, #2
 800eb74:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800eb78:	68fa      	ldr	r2, [r7, #12]
 800eb7a:	4413      	add	r3, r2
 800eb7c:	3304      	adds	r3, #4
 800eb7e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800eb80:	697b      	ldr	r3, [r7, #20]
 800eb82:	687a      	ldr	r2, [r7, #4]
 800eb84:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800eb86:	697b      	ldr	r3, [r7, #20]
 800eb88:	683a      	ldr	r2, [r7, #0]
 800eb8a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800eb8c:	697b      	ldr	r3, [r7, #20]
 800eb8e:	2200      	movs	r2, #0
 800eb90:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800eb92:	697b      	ldr	r3, [r7, #20]
 800eb94:	2200      	movs	r2, #0
 800eb96:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800eb98:	7afb      	ldrb	r3, [r7, #11]
 800eb9a:	f003 030f 	and.w	r3, r3, #15
 800eb9e:	b2da      	uxtb	r2, r3
 800eba0:	697b      	ldr	r3, [r7, #20]
 800eba2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	691b      	ldr	r3, [r3, #16]
 800eba8:	2b01      	cmp	r3, #1
 800ebaa:	d102      	bne.n	800ebb2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800ebac:	687a      	ldr	r2, [r7, #4]
 800ebae:	697b      	ldr	r3, [r7, #20]
 800ebb0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800ebb2:	7afb      	ldrb	r3, [r7, #11]
 800ebb4:	f003 030f 	and.w	r3, r3, #15
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d109      	bne.n	800ebd0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	6818      	ldr	r0, [r3, #0]
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	691b      	ldr	r3, [r3, #16]
 800ebc4:	b2db      	uxtb	r3, r3
 800ebc6:	461a      	mov	r2, r3
 800ebc8:	6979      	ldr	r1, [r7, #20]
 800ebca:	f004 f95f 	bl	8012e8c <USB_EP0StartXfer>
 800ebce:	e008      	b.n	800ebe2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	6818      	ldr	r0, [r3, #0]
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	691b      	ldr	r3, [r3, #16]
 800ebd8:	b2db      	uxtb	r3, r3
 800ebda:	461a      	mov	r2, r3
 800ebdc:	6979      	ldr	r1, [r7, #20]
 800ebde:	f003 ff0d 	bl	80129fc <USB_EPStartXfer>
  }

  return HAL_OK;
 800ebe2:	2300      	movs	r3, #0
}
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	3718      	adds	r7, #24
 800ebe8:	46bd      	mov	sp, r7
 800ebea:	bd80      	pop	{r7, pc}

0800ebec <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ebec:	b480      	push	{r7}
 800ebee:	b083      	sub	sp, #12
 800ebf0:	af00      	add	r7, sp, #0
 800ebf2:	6078      	str	r0, [r7, #4]
 800ebf4:	460b      	mov	r3, r1
 800ebf6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800ebf8:	78fb      	ldrb	r3, [r7, #3]
 800ebfa:	f003 020f 	and.w	r2, r3, #15
 800ebfe:	6879      	ldr	r1, [r7, #4]
 800ec00:	4613      	mov	r3, r2
 800ec02:	00db      	lsls	r3, r3, #3
 800ec04:	4413      	add	r3, r2
 800ec06:	009b      	lsls	r3, r3, #2
 800ec08:	440b      	add	r3, r1
 800ec0a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800ec0e:	681b      	ldr	r3, [r3, #0]
}
 800ec10:	4618      	mov	r0, r3
 800ec12:	370c      	adds	r7, #12
 800ec14:	46bd      	mov	sp, r7
 800ec16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec1a:	4770      	bx	lr

0800ec1c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800ec1c:	b580      	push	{r7, lr}
 800ec1e:	b086      	sub	sp, #24
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	60f8      	str	r0, [r7, #12]
 800ec24:	607a      	str	r2, [r7, #4]
 800ec26:	603b      	str	r3, [r7, #0]
 800ec28:	460b      	mov	r3, r1
 800ec2a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ec2c:	7afb      	ldrb	r3, [r7, #11]
 800ec2e:	f003 020f 	and.w	r2, r3, #15
 800ec32:	4613      	mov	r3, r2
 800ec34:	00db      	lsls	r3, r3, #3
 800ec36:	4413      	add	r3, r2
 800ec38:	009b      	lsls	r3, r3, #2
 800ec3a:	3338      	adds	r3, #56	; 0x38
 800ec3c:	68fa      	ldr	r2, [r7, #12]
 800ec3e:	4413      	add	r3, r2
 800ec40:	3304      	adds	r3, #4
 800ec42:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800ec44:	697b      	ldr	r3, [r7, #20]
 800ec46:	687a      	ldr	r2, [r7, #4]
 800ec48:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800ec4a:	697b      	ldr	r3, [r7, #20]
 800ec4c:	683a      	ldr	r2, [r7, #0]
 800ec4e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800ec50:	697b      	ldr	r3, [r7, #20]
 800ec52:	2200      	movs	r2, #0
 800ec54:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800ec56:	697b      	ldr	r3, [r7, #20]
 800ec58:	2201      	movs	r2, #1
 800ec5a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ec5c:	7afb      	ldrb	r3, [r7, #11]
 800ec5e:	f003 030f 	and.w	r3, r3, #15
 800ec62:	b2da      	uxtb	r2, r3
 800ec64:	697b      	ldr	r3, [r7, #20]
 800ec66:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	691b      	ldr	r3, [r3, #16]
 800ec6c:	2b01      	cmp	r3, #1
 800ec6e:	d102      	bne.n	800ec76 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800ec70:	687a      	ldr	r2, [r7, #4]
 800ec72:	697b      	ldr	r3, [r7, #20]
 800ec74:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800ec76:	7afb      	ldrb	r3, [r7, #11]
 800ec78:	f003 030f 	and.w	r3, r3, #15
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d109      	bne.n	800ec94 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	6818      	ldr	r0, [r3, #0]
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	691b      	ldr	r3, [r3, #16]
 800ec88:	b2db      	uxtb	r3, r3
 800ec8a:	461a      	mov	r2, r3
 800ec8c:	6979      	ldr	r1, [r7, #20]
 800ec8e:	f004 f8fd 	bl	8012e8c <USB_EP0StartXfer>
 800ec92:	e008      	b.n	800eca6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	6818      	ldr	r0, [r3, #0]
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	691b      	ldr	r3, [r3, #16]
 800ec9c:	b2db      	uxtb	r3, r3
 800ec9e:	461a      	mov	r2, r3
 800eca0:	6979      	ldr	r1, [r7, #20]
 800eca2:	f003 feab 	bl	80129fc <USB_EPStartXfer>
  }

  return HAL_OK;
 800eca6:	2300      	movs	r3, #0
}
 800eca8:	4618      	mov	r0, r3
 800ecaa:	3718      	adds	r7, #24
 800ecac:	46bd      	mov	sp, r7
 800ecae:	bd80      	pop	{r7, pc}

0800ecb0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ecb0:	b580      	push	{r7, lr}
 800ecb2:	b084      	sub	sp, #16
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	6078      	str	r0, [r7, #4]
 800ecb8:	460b      	mov	r3, r1
 800ecba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800ecbc:	78fb      	ldrb	r3, [r7, #3]
 800ecbe:	f003 020f 	and.w	r2, r3, #15
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	685b      	ldr	r3, [r3, #4]
 800ecc6:	429a      	cmp	r2, r3
 800ecc8:	d901      	bls.n	800ecce <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800ecca:	2301      	movs	r3, #1
 800eccc:	e050      	b.n	800ed70 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800ecce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	da0f      	bge.n	800ecf6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ecd6:	78fb      	ldrb	r3, [r7, #3]
 800ecd8:	f003 020f 	and.w	r2, r3, #15
 800ecdc:	4613      	mov	r3, r2
 800ecde:	00db      	lsls	r3, r3, #3
 800ece0:	4413      	add	r3, r2
 800ece2:	009b      	lsls	r3, r3, #2
 800ece4:	3338      	adds	r3, #56	; 0x38
 800ece6:	687a      	ldr	r2, [r7, #4]
 800ece8:	4413      	add	r3, r2
 800ecea:	3304      	adds	r3, #4
 800ecec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	2201      	movs	r2, #1
 800ecf2:	705a      	strb	r2, [r3, #1]
 800ecf4:	e00d      	b.n	800ed12 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800ecf6:	78fa      	ldrb	r2, [r7, #3]
 800ecf8:	4613      	mov	r3, r2
 800ecfa:	00db      	lsls	r3, r3, #3
 800ecfc:	4413      	add	r3, r2
 800ecfe:	009b      	lsls	r3, r3, #2
 800ed00:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800ed04:	687a      	ldr	r2, [r7, #4]
 800ed06:	4413      	add	r3, r2
 800ed08:	3304      	adds	r3, #4
 800ed0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	2200      	movs	r2, #0
 800ed10:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	2201      	movs	r2, #1
 800ed16:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ed18:	78fb      	ldrb	r3, [r7, #3]
 800ed1a:	f003 030f 	and.w	r3, r3, #15
 800ed1e:	b2da      	uxtb	r2, r3
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800ed2a:	2b01      	cmp	r3, #1
 800ed2c:	d101      	bne.n	800ed32 <HAL_PCD_EP_SetStall+0x82>
 800ed2e:	2302      	movs	r3, #2
 800ed30:	e01e      	b.n	800ed70 <HAL_PCD_EP_SetStall+0xc0>
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	2201      	movs	r2, #1
 800ed36:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	68f9      	ldr	r1, [r7, #12]
 800ed40:	4618      	mov	r0, r3
 800ed42:	f004 fb3b 	bl	80133bc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800ed46:	78fb      	ldrb	r3, [r7, #3]
 800ed48:	f003 030f 	and.w	r3, r3, #15
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d10a      	bne.n	800ed66 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	6818      	ldr	r0, [r3, #0]
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	691b      	ldr	r3, [r3, #16]
 800ed58:	b2d9      	uxtb	r1, r3
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800ed60:	461a      	mov	r2, r3
 800ed62:	f004 fd2b 	bl	80137bc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	2200      	movs	r2, #0
 800ed6a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800ed6e:	2300      	movs	r3, #0
}
 800ed70:	4618      	mov	r0, r3
 800ed72:	3710      	adds	r7, #16
 800ed74:	46bd      	mov	sp, r7
 800ed76:	bd80      	pop	{r7, pc}

0800ed78 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ed78:	b580      	push	{r7, lr}
 800ed7a:	b084      	sub	sp, #16
 800ed7c:	af00      	add	r7, sp, #0
 800ed7e:	6078      	str	r0, [r7, #4]
 800ed80:	460b      	mov	r3, r1
 800ed82:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800ed84:	78fb      	ldrb	r3, [r7, #3]
 800ed86:	f003 020f 	and.w	r2, r3, #15
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	685b      	ldr	r3, [r3, #4]
 800ed8e:	429a      	cmp	r2, r3
 800ed90:	d901      	bls.n	800ed96 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800ed92:	2301      	movs	r3, #1
 800ed94:	e042      	b.n	800ee1c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800ed96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	da0f      	bge.n	800edbe <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ed9e:	78fb      	ldrb	r3, [r7, #3]
 800eda0:	f003 020f 	and.w	r2, r3, #15
 800eda4:	4613      	mov	r3, r2
 800eda6:	00db      	lsls	r3, r3, #3
 800eda8:	4413      	add	r3, r2
 800edaa:	009b      	lsls	r3, r3, #2
 800edac:	3338      	adds	r3, #56	; 0x38
 800edae:	687a      	ldr	r2, [r7, #4]
 800edb0:	4413      	add	r3, r2
 800edb2:	3304      	adds	r3, #4
 800edb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	2201      	movs	r2, #1
 800edba:	705a      	strb	r2, [r3, #1]
 800edbc:	e00f      	b.n	800edde <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800edbe:	78fb      	ldrb	r3, [r7, #3]
 800edc0:	f003 020f 	and.w	r2, r3, #15
 800edc4:	4613      	mov	r3, r2
 800edc6:	00db      	lsls	r3, r3, #3
 800edc8:	4413      	add	r3, r2
 800edca:	009b      	lsls	r3, r3, #2
 800edcc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800edd0:	687a      	ldr	r2, [r7, #4]
 800edd2:	4413      	add	r3, r2
 800edd4:	3304      	adds	r3, #4
 800edd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	2200      	movs	r2, #0
 800eddc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	2200      	movs	r2, #0
 800ede2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ede4:	78fb      	ldrb	r3, [r7, #3]
 800ede6:	f003 030f 	and.w	r3, r3, #15
 800edea:	b2da      	uxtb	r2, r3
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800edf6:	2b01      	cmp	r3, #1
 800edf8:	d101      	bne.n	800edfe <HAL_PCD_EP_ClrStall+0x86>
 800edfa:	2302      	movs	r3, #2
 800edfc:	e00e      	b.n	800ee1c <HAL_PCD_EP_ClrStall+0xa4>
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	2201      	movs	r2, #1
 800ee02:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	68f9      	ldr	r1, [r7, #12]
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	f004 fb43 	bl	8013498 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	2200      	movs	r2, #0
 800ee16:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800ee1a:	2300      	movs	r3, #0
}
 800ee1c:	4618      	mov	r0, r3
 800ee1e:	3710      	adds	r7, #16
 800ee20:	46bd      	mov	sp, r7
 800ee22:	bd80      	pop	{r7, pc}

0800ee24 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ee24:	b580      	push	{r7, lr}
 800ee26:	b084      	sub	sp, #16
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	6078      	str	r0, [r7, #4]
 800ee2c:	460b      	mov	r3, r1
 800ee2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800ee30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	da0c      	bge.n	800ee52 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ee38:	78fb      	ldrb	r3, [r7, #3]
 800ee3a:	f003 020f 	and.w	r2, r3, #15
 800ee3e:	4613      	mov	r3, r2
 800ee40:	00db      	lsls	r3, r3, #3
 800ee42:	4413      	add	r3, r2
 800ee44:	009b      	lsls	r3, r3, #2
 800ee46:	3338      	adds	r3, #56	; 0x38
 800ee48:	687a      	ldr	r2, [r7, #4]
 800ee4a:	4413      	add	r3, r2
 800ee4c:	3304      	adds	r3, #4
 800ee4e:	60fb      	str	r3, [r7, #12]
 800ee50:	e00c      	b.n	800ee6c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ee52:	78fb      	ldrb	r3, [r7, #3]
 800ee54:	f003 020f 	and.w	r2, r3, #15
 800ee58:	4613      	mov	r3, r2
 800ee5a:	00db      	lsls	r3, r3, #3
 800ee5c:	4413      	add	r3, r2
 800ee5e:	009b      	lsls	r3, r3, #2
 800ee60:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800ee64:	687a      	ldr	r2, [r7, #4]
 800ee66:	4413      	add	r3, r2
 800ee68:	3304      	adds	r3, #4
 800ee6a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	68f9      	ldr	r1, [r7, #12]
 800ee72:	4618      	mov	r0, r3
 800ee74:	f004 f962 	bl	801313c <USB_EPStopXfer>
 800ee78:	4603      	mov	r3, r0
 800ee7a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800ee7c:	7afb      	ldrb	r3, [r7, #11]
}
 800ee7e:	4618      	mov	r0, r3
 800ee80:	3710      	adds	r7, #16
 800ee82:	46bd      	mov	sp, r7
 800ee84:	bd80      	pop	{r7, pc}

0800ee86 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800ee86:	b580      	push	{r7, lr}
 800ee88:	b08a      	sub	sp, #40	; 0x28
 800ee8a:	af02      	add	r7, sp, #8
 800ee8c:	6078      	str	r0, [r7, #4]
 800ee8e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee96:	697b      	ldr	r3, [r7, #20]
 800ee98:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800ee9a:	683a      	ldr	r2, [r7, #0]
 800ee9c:	4613      	mov	r3, r2
 800ee9e:	00db      	lsls	r3, r3, #3
 800eea0:	4413      	add	r3, r2
 800eea2:	009b      	lsls	r3, r3, #2
 800eea4:	3338      	adds	r3, #56	; 0x38
 800eea6:	687a      	ldr	r2, [r7, #4]
 800eea8:	4413      	add	r3, r2
 800eeaa:	3304      	adds	r3, #4
 800eeac:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	6a1a      	ldr	r2, [r3, #32]
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	699b      	ldr	r3, [r3, #24]
 800eeb6:	429a      	cmp	r2, r3
 800eeb8:	d901      	bls.n	800eebe <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800eeba:	2301      	movs	r3, #1
 800eebc:	e06c      	b.n	800ef98 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	699a      	ldr	r2, [r3, #24]
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	6a1b      	ldr	r3, [r3, #32]
 800eec6:	1ad3      	subs	r3, r2, r3
 800eec8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	68db      	ldr	r3, [r3, #12]
 800eece:	69fa      	ldr	r2, [r7, #28]
 800eed0:	429a      	cmp	r2, r3
 800eed2:	d902      	bls.n	800eeda <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	68db      	ldr	r3, [r3, #12]
 800eed8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800eeda:	69fb      	ldr	r3, [r7, #28]
 800eedc:	3303      	adds	r3, #3
 800eede:	089b      	lsrs	r3, r3, #2
 800eee0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800eee2:	e02b      	b.n	800ef3c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	699a      	ldr	r2, [r3, #24]
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	6a1b      	ldr	r3, [r3, #32]
 800eeec:	1ad3      	subs	r3, r2, r3
 800eeee:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	68db      	ldr	r3, [r3, #12]
 800eef4:	69fa      	ldr	r2, [r7, #28]
 800eef6:	429a      	cmp	r2, r3
 800eef8:	d902      	bls.n	800ef00 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	68db      	ldr	r3, [r3, #12]
 800eefe:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800ef00:	69fb      	ldr	r3, [r7, #28]
 800ef02:	3303      	adds	r3, #3
 800ef04:	089b      	lsrs	r3, r3, #2
 800ef06:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	6919      	ldr	r1, [r3, #16]
 800ef0c:	683b      	ldr	r3, [r7, #0]
 800ef0e:	b2da      	uxtb	r2, r3
 800ef10:	69fb      	ldr	r3, [r7, #28]
 800ef12:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800ef18:	b2db      	uxtb	r3, r3
 800ef1a:	9300      	str	r3, [sp, #0]
 800ef1c:	4603      	mov	r3, r0
 800ef1e:	6978      	ldr	r0, [r7, #20]
 800ef20:	f004 f9b6 	bl	8013290 <USB_WritePacket>

    ep->xfer_buff  += len;
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	691a      	ldr	r2, [r3, #16]
 800ef28:	69fb      	ldr	r3, [r7, #28]
 800ef2a:	441a      	add	r2, r3
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	6a1a      	ldr	r2, [r3, #32]
 800ef34:	69fb      	ldr	r3, [r7, #28]
 800ef36:	441a      	add	r2, r3
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800ef3c:	683b      	ldr	r3, [r7, #0]
 800ef3e:	015a      	lsls	r2, r3, #5
 800ef40:	693b      	ldr	r3, [r7, #16]
 800ef42:	4413      	add	r3, r2
 800ef44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef48:	699b      	ldr	r3, [r3, #24]
 800ef4a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800ef4c:	69ba      	ldr	r2, [r7, #24]
 800ef4e:	429a      	cmp	r2, r3
 800ef50:	d809      	bhi.n	800ef66 <PCD_WriteEmptyTxFifo+0xe0>
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	6a1a      	ldr	r2, [r3, #32]
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800ef5a:	429a      	cmp	r2, r3
 800ef5c:	d203      	bcs.n	800ef66 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	699b      	ldr	r3, [r3, #24]
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d1be      	bne.n	800eee4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	699a      	ldr	r2, [r3, #24]
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	6a1b      	ldr	r3, [r3, #32]
 800ef6e:	429a      	cmp	r2, r3
 800ef70:	d811      	bhi.n	800ef96 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800ef72:	683b      	ldr	r3, [r7, #0]
 800ef74:	f003 030f 	and.w	r3, r3, #15
 800ef78:	2201      	movs	r2, #1
 800ef7a:	fa02 f303 	lsl.w	r3, r2, r3
 800ef7e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800ef80:	693b      	ldr	r3, [r7, #16]
 800ef82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ef88:	68bb      	ldr	r3, [r7, #8]
 800ef8a:	43db      	mvns	r3, r3
 800ef8c:	6939      	ldr	r1, [r7, #16]
 800ef8e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ef92:	4013      	ands	r3, r2
 800ef94:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800ef96:	2300      	movs	r3, #0
}
 800ef98:	4618      	mov	r0, r3
 800ef9a:	3720      	adds	r7, #32
 800ef9c:	46bd      	mov	sp, r7
 800ef9e:	bd80      	pop	{r7, pc}

0800efa0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800efa0:	b580      	push	{r7, lr}
 800efa2:	b088      	sub	sp, #32
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	6078      	str	r0, [r7, #4]
 800efa8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800efb0:	69fb      	ldr	r3, [r7, #28]
 800efb2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800efb4:	69fb      	ldr	r3, [r7, #28]
 800efb6:	333c      	adds	r3, #60	; 0x3c
 800efb8:	3304      	adds	r3, #4
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800efbe:	683b      	ldr	r3, [r7, #0]
 800efc0:	015a      	lsls	r2, r3, #5
 800efc2:	69bb      	ldr	r3, [r7, #24]
 800efc4:	4413      	add	r3, r2
 800efc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800efca:	689b      	ldr	r3, [r3, #8]
 800efcc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	691b      	ldr	r3, [r3, #16]
 800efd2:	2b01      	cmp	r3, #1
 800efd4:	d17b      	bne.n	800f0ce <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800efd6:	693b      	ldr	r3, [r7, #16]
 800efd8:	f003 0308 	and.w	r3, r3, #8
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d015      	beq.n	800f00c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800efe0:	697b      	ldr	r3, [r7, #20]
 800efe2:	4a61      	ldr	r2, [pc, #388]	; (800f168 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800efe4:	4293      	cmp	r3, r2
 800efe6:	f240 80b9 	bls.w	800f15c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800efea:	693b      	ldr	r3, [r7, #16]
 800efec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	f000 80b3 	beq.w	800f15c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800eff6:	683b      	ldr	r3, [r7, #0]
 800eff8:	015a      	lsls	r2, r3, #5
 800effa:	69bb      	ldr	r3, [r7, #24]
 800effc:	4413      	add	r3, r2
 800effe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f002:	461a      	mov	r2, r3
 800f004:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f008:	6093      	str	r3, [r2, #8]
 800f00a:	e0a7      	b.n	800f15c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800f00c:	693b      	ldr	r3, [r7, #16]
 800f00e:	f003 0320 	and.w	r3, r3, #32
 800f012:	2b00      	cmp	r3, #0
 800f014:	d009      	beq.n	800f02a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800f016:	683b      	ldr	r3, [r7, #0]
 800f018:	015a      	lsls	r2, r3, #5
 800f01a:	69bb      	ldr	r3, [r7, #24]
 800f01c:	4413      	add	r3, r2
 800f01e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f022:	461a      	mov	r2, r3
 800f024:	2320      	movs	r3, #32
 800f026:	6093      	str	r3, [r2, #8]
 800f028:	e098      	b.n	800f15c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800f02a:	693b      	ldr	r3, [r7, #16]
 800f02c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800f030:	2b00      	cmp	r3, #0
 800f032:	f040 8093 	bne.w	800f15c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800f036:	697b      	ldr	r3, [r7, #20]
 800f038:	4a4b      	ldr	r2, [pc, #300]	; (800f168 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800f03a:	4293      	cmp	r3, r2
 800f03c:	d90f      	bls.n	800f05e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800f03e:	693b      	ldr	r3, [r7, #16]
 800f040:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800f044:	2b00      	cmp	r3, #0
 800f046:	d00a      	beq.n	800f05e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800f048:	683b      	ldr	r3, [r7, #0]
 800f04a:	015a      	lsls	r2, r3, #5
 800f04c:	69bb      	ldr	r3, [r7, #24]
 800f04e:	4413      	add	r3, r2
 800f050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f054:	461a      	mov	r2, r3
 800f056:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f05a:	6093      	str	r3, [r2, #8]
 800f05c:	e07e      	b.n	800f15c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800f05e:	683a      	ldr	r2, [r7, #0]
 800f060:	4613      	mov	r3, r2
 800f062:	00db      	lsls	r3, r3, #3
 800f064:	4413      	add	r3, r2
 800f066:	009b      	lsls	r3, r3, #2
 800f068:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800f06c:	687a      	ldr	r2, [r7, #4]
 800f06e:	4413      	add	r3, r2
 800f070:	3304      	adds	r3, #4
 800f072:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	69da      	ldr	r2, [r3, #28]
 800f078:	683b      	ldr	r3, [r7, #0]
 800f07a:	0159      	lsls	r1, r3, #5
 800f07c:	69bb      	ldr	r3, [r7, #24]
 800f07e:	440b      	add	r3, r1
 800f080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f084:	691b      	ldr	r3, [r3, #16]
 800f086:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f08a:	1ad2      	subs	r2, r2, r3
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800f090:	683b      	ldr	r3, [r7, #0]
 800f092:	2b00      	cmp	r3, #0
 800f094:	d114      	bne.n	800f0c0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	699b      	ldr	r3, [r3, #24]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d109      	bne.n	800f0b2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	6818      	ldr	r0, [r3, #0]
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f0a8:	461a      	mov	r2, r3
 800f0aa:	2101      	movs	r1, #1
 800f0ac:	f004 fb86 	bl	80137bc <USB_EP0_OutStart>
 800f0b0:	e006      	b.n	800f0c0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	691a      	ldr	r2, [r3, #16]
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	6a1b      	ldr	r3, [r3, #32]
 800f0ba:	441a      	add	r2, r3
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800f0c0:	683b      	ldr	r3, [r7, #0]
 800f0c2:	b2db      	uxtb	r3, r3
 800f0c4:	4619      	mov	r1, r3
 800f0c6:	6878      	ldr	r0, [r7, #4]
 800f0c8:	f00a fb1c 	bl	8019704 <HAL_PCD_DataOutStageCallback>
 800f0cc:	e046      	b.n	800f15c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800f0ce:	697b      	ldr	r3, [r7, #20]
 800f0d0:	4a26      	ldr	r2, [pc, #152]	; (800f16c <PCD_EP_OutXfrComplete_int+0x1cc>)
 800f0d2:	4293      	cmp	r3, r2
 800f0d4:	d124      	bne.n	800f120 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800f0d6:	693b      	ldr	r3, [r7, #16]
 800f0d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d00a      	beq.n	800f0f6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800f0e0:	683b      	ldr	r3, [r7, #0]
 800f0e2:	015a      	lsls	r2, r3, #5
 800f0e4:	69bb      	ldr	r3, [r7, #24]
 800f0e6:	4413      	add	r3, r2
 800f0e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0ec:	461a      	mov	r2, r3
 800f0ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f0f2:	6093      	str	r3, [r2, #8]
 800f0f4:	e032      	b.n	800f15c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800f0f6:	693b      	ldr	r3, [r7, #16]
 800f0f8:	f003 0320 	and.w	r3, r3, #32
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d008      	beq.n	800f112 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800f100:	683b      	ldr	r3, [r7, #0]
 800f102:	015a      	lsls	r2, r3, #5
 800f104:	69bb      	ldr	r3, [r7, #24]
 800f106:	4413      	add	r3, r2
 800f108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f10c:	461a      	mov	r2, r3
 800f10e:	2320      	movs	r3, #32
 800f110:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800f112:	683b      	ldr	r3, [r7, #0]
 800f114:	b2db      	uxtb	r3, r3
 800f116:	4619      	mov	r1, r3
 800f118:	6878      	ldr	r0, [r7, #4]
 800f11a:	f00a faf3 	bl	8019704 <HAL_PCD_DataOutStageCallback>
 800f11e:	e01d      	b.n	800f15c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800f120:	683b      	ldr	r3, [r7, #0]
 800f122:	2b00      	cmp	r3, #0
 800f124:	d114      	bne.n	800f150 <PCD_EP_OutXfrComplete_int+0x1b0>
 800f126:	6879      	ldr	r1, [r7, #4]
 800f128:	683a      	ldr	r2, [r7, #0]
 800f12a:	4613      	mov	r3, r2
 800f12c:	00db      	lsls	r3, r3, #3
 800f12e:	4413      	add	r3, r2
 800f130:	009b      	lsls	r3, r3, #2
 800f132:	440b      	add	r3, r1
 800f134:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d108      	bne.n	800f150 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	6818      	ldr	r0, [r3, #0]
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f148:	461a      	mov	r2, r3
 800f14a:	2100      	movs	r1, #0
 800f14c:	f004 fb36 	bl	80137bc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800f150:	683b      	ldr	r3, [r7, #0]
 800f152:	b2db      	uxtb	r3, r3
 800f154:	4619      	mov	r1, r3
 800f156:	6878      	ldr	r0, [r7, #4]
 800f158:	f00a fad4 	bl	8019704 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800f15c:	2300      	movs	r3, #0
}
 800f15e:	4618      	mov	r0, r3
 800f160:	3720      	adds	r7, #32
 800f162:	46bd      	mov	sp, r7
 800f164:	bd80      	pop	{r7, pc}
 800f166:	bf00      	nop
 800f168:	4f54300a 	.word	0x4f54300a
 800f16c:	4f54310a 	.word	0x4f54310a

0800f170 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800f170:	b580      	push	{r7, lr}
 800f172:	b086      	sub	sp, #24
 800f174:	af00      	add	r7, sp, #0
 800f176:	6078      	str	r0, [r7, #4]
 800f178:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f180:	697b      	ldr	r3, [r7, #20]
 800f182:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800f184:	697b      	ldr	r3, [r7, #20]
 800f186:	333c      	adds	r3, #60	; 0x3c
 800f188:	3304      	adds	r3, #4
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800f18e:	683b      	ldr	r3, [r7, #0]
 800f190:	015a      	lsls	r2, r3, #5
 800f192:	693b      	ldr	r3, [r7, #16]
 800f194:	4413      	add	r3, r2
 800f196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f19a:	689b      	ldr	r3, [r3, #8]
 800f19c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	4a15      	ldr	r2, [pc, #84]	; (800f1f8 <PCD_EP_OutSetupPacket_int+0x88>)
 800f1a2:	4293      	cmp	r3, r2
 800f1a4:	d90e      	bls.n	800f1c4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800f1a6:	68bb      	ldr	r3, [r7, #8]
 800f1a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d009      	beq.n	800f1c4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800f1b0:	683b      	ldr	r3, [r7, #0]
 800f1b2:	015a      	lsls	r2, r3, #5
 800f1b4:	693b      	ldr	r3, [r7, #16]
 800f1b6:	4413      	add	r3, r2
 800f1b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f1bc:	461a      	mov	r2, r3
 800f1be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f1c2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800f1c4:	6878      	ldr	r0, [r7, #4]
 800f1c6:	f00a fa8b 	bl	80196e0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	4a0a      	ldr	r2, [pc, #40]	; (800f1f8 <PCD_EP_OutSetupPacket_int+0x88>)
 800f1ce:	4293      	cmp	r3, r2
 800f1d0:	d90c      	bls.n	800f1ec <PCD_EP_OutSetupPacket_int+0x7c>
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	691b      	ldr	r3, [r3, #16]
 800f1d6:	2b01      	cmp	r3, #1
 800f1d8:	d108      	bne.n	800f1ec <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	6818      	ldr	r0, [r3, #0]
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f1e4:	461a      	mov	r2, r3
 800f1e6:	2101      	movs	r1, #1
 800f1e8:	f004 fae8 	bl	80137bc <USB_EP0_OutStart>
  }

  return HAL_OK;
 800f1ec:	2300      	movs	r3, #0
}
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	3718      	adds	r7, #24
 800f1f2:	46bd      	mov	sp, r7
 800f1f4:	bd80      	pop	{r7, pc}
 800f1f6:	bf00      	nop
 800f1f8:	4f54300a 	.word	0x4f54300a

0800f1fc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800f1fc:	b480      	push	{r7}
 800f1fe:	b085      	sub	sp, #20
 800f200:	af00      	add	r7, sp, #0
 800f202:	6078      	str	r0, [r7, #4]
 800f204:	460b      	mov	r3, r1
 800f206:	70fb      	strb	r3, [r7, #3]
 800f208:	4613      	mov	r3, r2
 800f20a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f212:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800f214:	78fb      	ldrb	r3, [r7, #3]
 800f216:	2b00      	cmp	r3, #0
 800f218:	d107      	bne.n	800f22a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800f21a:	883b      	ldrh	r3, [r7, #0]
 800f21c:	0419      	lsls	r1, r3, #16
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	68ba      	ldr	r2, [r7, #8]
 800f224:	430a      	orrs	r2, r1
 800f226:	629a      	str	r2, [r3, #40]	; 0x28
 800f228:	e028      	b.n	800f27c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f230:	0c1b      	lsrs	r3, r3, #16
 800f232:	68ba      	ldr	r2, [r7, #8]
 800f234:	4413      	add	r3, r2
 800f236:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800f238:	2300      	movs	r3, #0
 800f23a:	73fb      	strb	r3, [r7, #15]
 800f23c:	e00d      	b.n	800f25a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	681a      	ldr	r2, [r3, #0]
 800f242:	7bfb      	ldrb	r3, [r7, #15]
 800f244:	3340      	adds	r3, #64	; 0x40
 800f246:	009b      	lsls	r3, r3, #2
 800f248:	4413      	add	r3, r2
 800f24a:	685b      	ldr	r3, [r3, #4]
 800f24c:	0c1b      	lsrs	r3, r3, #16
 800f24e:	68ba      	ldr	r2, [r7, #8]
 800f250:	4413      	add	r3, r2
 800f252:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800f254:	7bfb      	ldrb	r3, [r7, #15]
 800f256:	3301      	adds	r3, #1
 800f258:	73fb      	strb	r3, [r7, #15]
 800f25a:	7bfa      	ldrb	r2, [r7, #15]
 800f25c:	78fb      	ldrb	r3, [r7, #3]
 800f25e:	3b01      	subs	r3, #1
 800f260:	429a      	cmp	r2, r3
 800f262:	d3ec      	bcc.n	800f23e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800f264:	883b      	ldrh	r3, [r7, #0]
 800f266:	0418      	lsls	r0, r3, #16
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	6819      	ldr	r1, [r3, #0]
 800f26c:	78fb      	ldrb	r3, [r7, #3]
 800f26e:	3b01      	subs	r3, #1
 800f270:	68ba      	ldr	r2, [r7, #8]
 800f272:	4302      	orrs	r2, r0
 800f274:	3340      	adds	r3, #64	; 0x40
 800f276:	009b      	lsls	r3, r3, #2
 800f278:	440b      	add	r3, r1
 800f27a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800f27c:	2300      	movs	r3, #0
}
 800f27e:	4618      	mov	r0, r3
 800f280:	3714      	adds	r7, #20
 800f282:	46bd      	mov	sp, r7
 800f284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f288:	4770      	bx	lr

0800f28a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800f28a:	b480      	push	{r7}
 800f28c:	b083      	sub	sp, #12
 800f28e:	af00      	add	r7, sp, #0
 800f290:	6078      	str	r0, [r7, #4]
 800f292:	460b      	mov	r3, r1
 800f294:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	887a      	ldrh	r2, [r7, #2]
 800f29c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800f29e:	2300      	movs	r3, #0
}
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	370c      	adds	r7, #12
 800f2a4:	46bd      	mov	sp, r7
 800f2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2aa:	4770      	bx	lr

0800f2ac <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800f2ac:	b480      	push	{r7}
 800f2ae:	b085      	sub	sp, #20
 800f2b0:	af00      	add	r7, sp, #0
 800f2b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	2201      	movs	r2, #1
 800f2be:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	2200      	movs	r2, #0
 800f2c6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	699b      	ldr	r3, [r3, #24]
 800f2ce:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f2da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f2de:	f043 0303 	orr.w	r3, r3, #3
 800f2e2:	68fa      	ldr	r2, [r7, #12]
 800f2e4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800f2e6:	2300      	movs	r3, #0
}
 800f2e8:	4618      	mov	r0, r3
 800f2ea:	3714      	adds	r7, #20
 800f2ec:	46bd      	mov	sp, r7
 800f2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f2:	4770      	bx	lr

0800f2f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800f2f4:	b580      	push	{r7, lr}
 800f2f6:	b084      	sub	sp, #16
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	6078      	str	r0, [r7, #4]
 800f2fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	2b00      	cmp	r3, #0
 800f302:	d101      	bne.n	800f308 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800f304:	2301      	movs	r3, #1
 800f306:	e0cc      	b.n	800f4a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800f308:	4b68      	ldr	r3, [pc, #416]	; (800f4ac <HAL_RCC_ClockConfig+0x1b8>)
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	f003 030f 	and.w	r3, r3, #15
 800f310:	683a      	ldr	r2, [r7, #0]
 800f312:	429a      	cmp	r2, r3
 800f314:	d90c      	bls.n	800f330 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f316:	4b65      	ldr	r3, [pc, #404]	; (800f4ac <HAL_RCC_ClockConfig+0x1b8>)
 800f318:	683a      	ldr	r2, [r7, #0]
 800f31a:	b2d2      	uxtb	r2, r2
 800f31c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800f31e:	4b63      	ldr	r3, [pc, #396]	; (800f4ac <HAL_RCC_ClockConfig+0x1b8>)
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	f003 030f 	and.w	r3, r3, #15
 800f326:	683a      	ldr	r2, [r7, #0]
 800f328:	429a      	cmp	r2, r3
 800f32a:	d001      	beq.n	800f330 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800f32c:	2301      	movs	r3, #1
 800f32e:	e0b8      	b.n	800f4a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	f003 0302 	and.w	r3, r3, #2
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d020      	beq.n	800f37e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	f003 0304 	and.w	r3, r3, #4
 800f344:	2b00      	cmp	r3, #0
 800f346:	d005      	beq.n	800f354 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800f348:	4b59      	ldr	r3, [pc, #356]	; (800f4b0 <HAL_RCC_ClockConfig+0x1bc>)
 800f34a:	689b      	ldr	r3, [r3, #8]
 800f34c:	4a58      	ldr	r2, [pc, #352]	; (800f4b0 <HAL_RCC_ClockConfig+0x1bc>)
 800f34e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800f352:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	f003 0308 	and.w	r3, r3, #8
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d005      	beq.n	800f36c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800f360:	4b53      	ldr	r3, [pc, #332]	; (800f4b0 <HAL_RCC_ClockConfig+0x1bc>)
 800f362:	689b      	ldr	r3, [r3, #8]
 800f364:	4a52      	ldr	r2, [pc, #328]	; (800f4b0 <HAL_RCC_ClockConfig+0x1bc>)
 800f366:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800f36a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f36c:	4b50      	ldr	r3, [pc, #320]	; (800f4b0 <HAL_RCC_ClockConfig+0x1bc>)
 800f36e:	689b      	ldr	r3, [r3, #8]
 800f370:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	689b      	ldr	r3, [r3, #8]
 800f378:	494d      	ldr	r1, [pc, #308]	; (800f4b0 <HAL_RCC_ClockConfig+0x1bc>)
 800f37a:	4313      	orrs	r3, r2
 800f37c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	f003 0301 	and.w	r3, r3, #1
 800f386:	2b00      	cmp	r3, #0
 800f388:	d044      	beq.n	800f414 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	685b      	ldr	r3, [r3, #4]
 800f38e:	2b01      	cmp	r3, #1
 800f390:	d107      	bne.n	800f3a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f392:	4b47      	ldr	r3, [pc, #284]	; (800f4b0 <HAL_RCC_ClockConfig+0x1bc>)
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d119      	bne.n	800f3d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f39e:	2301      	movs	r3, #1
 800f3a0:	e07f      	b.n	800f4a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	685b      	ldr	r3, [r3, #4]
 800f3a6:	2b02      	cmp	r3, #2
 800f3a8:	d003      	beq.n	800f3b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800f3ae:	2b03      	cmp	r3, #3
 800f3b0:	d107      	bne.n	800f3c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f3b2:	4b3f      	ldr	r3, [pc, #252]	; (800f4b0 <HAL_RCC_ClockConfig+0x1bc>)
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d109      	bne.n	800f3d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f3be:	2301      	movs	r3, #1
 800f3c0:	e06f      	b.n	800f4a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f3c2:	4b3b      	ldr	r3, [pc, #236]	; (800f4b0 <HAL_RCC_ClockConfig+0x1bc>)
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	f003 0302 	and.w	r3, r3, #2
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d101      	bne.n	800f3d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f3ce:	2301      	movs	r3, #1
 800f3d0:	e067      	b.n	800f4a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800f3d2:	4b37      	ldr	r3, [pc, #220]	; (800f4b0 <HAL_RCC_ClockConfig+0x1bc>)
 800f3d4:	689b      	ldr	r3, [r3, #8]
 800f3d6:	f023 0203 	bic.w	r2, r3, #3
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	685b      	ldr	r3, [r3, #4]
 800f3de:	4934      	ldr	r1, [pc, #208]	; (800f4b0 <HAL_RCC_ClockConfig+0x1bc>)
 800f3e0:	4313      	orrs	r3, r2
 800f3e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800f3e4:	f7fb f986 	bl	800a6f4 <HAL_GetTick>
 800f3e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f3ea:	e00a      	b.n	800f402 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f3ec:	f7fb f982 	bl	800a6f4 <HAL_GetTick>
 800f3f0:	4602      	mov	r2, r0
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	1ad3      	subs	r3, r2, r3
 800f3f6:	f241 3288 	movw	r2, #5000	; 0x1388
 800f3fa:	4293      	cmp	r3, r2
 800f3fc:	d901      	bls.n	800f402 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800f3fe:	2303      	movs	r3, #3
 800f400:	e04f      	b.n	800f4a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f402:	4b2b      	ldr	r3, [pc, #172]	; (800f4b0 <HAL_RCC_ClockConfig+0x1bc>)
 800f404:	689b      	ldr	r3, [r3, #8]
 800f406:	f003 020c 	and.w	r2, r3, #12
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	685b      	ldr	r3, [r3, #4]
 800f40e:	009b      	lsls	r3, r3, #2
 800f410:	429a      	cmp	r2, r3
 800f412:	d1eb      	bne.n	800f3ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800f414:	4b25      	ldr	r3, [pc, #148]	; (800f4ac <HAL_RCC_ClockConfig+0x1b8>)
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	f003 030f 	and.w	r3, r3, #15
 800f41c:	683a      	ldr	r2, [r7, #0]
 800f41e:	429a      	cmp	r2, r3
 800f420:	d20c      	bcs.n	800f43c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f422:	4b22      	ldr	r3, [pc, #136]	; (800f4ac <HAL_RCC_ClockConfig+0x1b8>)
 800f424:	683a      	ldr	r2, [r7, #0]
 800f426:	b2d2      	uxtb	r2, r2
 800f428:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800f42a:	4b20      	ldr	r3, [pc, #128]	; (800f4ac <HAL_RCC_ClockConfig+0x1b8>)
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	f003 030f 	and.w	r3, r3, #15
 800f432:	683a      	ldr	r2, [r7, #0]
 800f434:	429a      	cmp	r2, r3
 800f436:	d001      	beq.n	800f43c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800f438:	2301      	movs	r3, #1
 800f43a:	e032      	b.n	800f4a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	f003 0304 	and.w	r3, r3, #4
 800f444:	2b00      	cmp	r3, #0
 800f446:	d008      	beq.n	800f45a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800f448:	4b19      	ldr	r3, [pc, #100]	; (800f4b0 <HAL_RCC_ClockConfig+0x1bc>)
 800f44a:	689b      	ldr	r3, [r3, #8]
 800f44c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	68db      	ldr	r3, [r3, #12]
 800f454:	4916      	ldr	r1, [pc, #88]	; (800f4b0 <HAL_RCC_ClockConfig+0x1bc>)
 800f456:	4313      	orrs	r3, r2
 800f458:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	f003 0308 	and.w	r3, r3, #8
 800f462:	2b00      	cmp	r3, #0
 800f464:	d009      	beq.n	800f47a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800f466:	4b12      	ldr	r3, [pc, #72]	; (800f4b0 <HAL_RCC_ClockConfig+0x1bc>)
 800f468:	689b      	ldr	r3, [r3, #8]
 800f46a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	691b      	ldr	r3, [r3, #16]
 800f472:	00db      	lsls	r3, r3, #3
 800f474:	490e      	ldr	r1, [pc, #56]	; (800f4b0 <HAL_RCC_ClockConfig+0x1bc>)
 800f476:	4313      	orrs	r3, r2
 800f478:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800f47a:	f000 fbb1 	bl	800fbe0 <HAL_RCC_GetSysClockFreq>
 800f47e:	4602      	mov	r2, r0
 800f480:	4b0b      	ldr	r3, [pc, #44]	; (800f4b0 <HAL_RCC_ClockConfig+0x1bc>)
 800f482:	689b      	ldr	r3, [r3, #8]
 800f484:	091b      	lsrs	r3, r3, #4
 800f486:	f003 030f 	and.w	r3, r3, #15
 800f48a:	490a      	ldr	r1, [pc, #40]	; (800f4b4 <HAL_RCC_ClockConfig+0x1c0>)
 800f48c:	5ccb      	ldrb	r3, [r1, r3]
 800f48e:	fa22 f303 	lsr.w	r3, r2, r3
 800f492:	4a09      	ldr	r2, [pc, #36]	; (800f4b8 <HAL_RCC_ClockConfig+0x1c4>)
 800f494:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800f496:	4b09      	ldr	r3, [pc, #36]	; (800f4bc <HAL_RCC_ClockConfig+0x1c8>)
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	4618      	mov	r0, r3
 800f49c:	f7fa ffea 	bl	800a474 <HAL_InitTick>

  return HAL_OK;
 800f4a0:	2300      	movs	r3, #0
}
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	3710      	adds	r7, #16
 800f4a6:	46bd      	mov	sp, r7
 800f4a8:	bd80      	pop	{r7, pc}
 800f4aa:	bf00      	nop
 800f4ac:	40023c00 	.word	0x40023c00
 800f4b0:	40023800 	.word	0x40023800
 800f4b4:	080200a8 	.word	0x080200a8
 800f4b8:	20000054 	.word	0x20000054
 800f4bc:	20000058 	.word	0x20000058

0800f4c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f4c0:	b480      	push	{r7}
 800f4c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800f4c4:	4b03      	ldr	r3, [pc, #12]	; (800f4d4 <HAL_RCC_GetHCLKFreq+0x14>)
 800f4c6:	681b      	ldr	r3, [r3, #0]
}
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	46bd      	mov	sp, r7
 800f4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d0:	4770      	bx	lr
 800f4d2:	bf00      	nop
 800f4d4:	20000054 	.word	0x20000054

0800f4d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f4d8:	b580      	push	{r7, lr}
 800f4da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800f4dc:	f7ff fff0 	bl	800f4c0 <HAL_RCC_GetHCLKFreq>
 800f4e0:	4602      	mov	r2, r0
 800f4e2:	4b05      	ldr	r3, [pc, #20]	; (800f4f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800f4e4:	689b      	ldr	r3, [r3, #8]
 800f4e6:	0a9b      	lsrs	r3, r3, #10
 800f4e8:	f003 0307 	and.w	r3, r3, #7
 800f4ec:	4903      	ldr	r1, [pc, #12]	; (800f4fc <HAL_RCC_GetPCLK1Freq+0x24>)
 800f4ee:	5ccb      	ldrb	r3, [r1, r3]
 800f4f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f4f4:	4618      	mov	r0, r3
 800f4f6:	bd80      	pop	{r7, pc}
 800f4f8:	40023800 	.word	0x40023800
 800f4fc:	080200b8 	.word	0x080200b8

0800f500 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f500:	b580      	push	{r7, lr}
 800f502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800f504:	f7ff ffdc 	bl	800f4c0 <HAL_RCC_GetHCLKFreq>
 800f508:	4602      	mov	r2, r0
 800f50a:	4b05      	ldr	r3, [pc, #20]	; (800f520 <HAL_RCC_GetPCLK2Freq+0x20>)
 800f50c:	689b      	ldr	r3, [r3, #8]
 800f50e:	0b5b      	lsrs	r3, r3, #13
 800f510:	f003 0307 	and.w	r3, r3, #7
 800f514:	4903      	ldr	r1, [pc, #12]	; (800f524 <HAL_RCC_GetPCLK2Freq+0x24>)
 800f516:	5ccb      	ldrb	r3, [r1, r3]
 800f518:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f51c:	4618      	mov	r0, r3
 800f51e:	bd80      	pop	{r7, pc}
 800f520:	40023800 	.word	0x40023800
 800f524:	080200b8 	.word	0x080200b8

0800f528 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800f528:	b480      	push	{r7}
 800f52a:	b083      	sub	sp, #12
 800f52c:	af00      	add	r7, sp, #0
 800f52e:	6078      	str	r0, [r7, #4]
 800f530:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	220f      	movs	r2, #15
 800f536:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800f538:	4b12      	ldr	r3, [pc, #72]	; (800f584 <HAL_RCC_GetClockConfig+0x5c>)
 800f53a:	689b      	ldr	r3, [r3, #8]
 800f53c:	f003 0203 	and.w	r2, r3, #3
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800f544:	4b0f      	ldr	r3, [pc, #60]	; (800f584 <HAL_RCC_GetClockConfig+0x5c>)
 800f546:	689b      	ldr	r3, [r3, #8]
 800f548:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800f550:	4b0c      	ldr	r3, [pc, #48]	; (800f584 <HAL_RCC_GetClockConfig+0x5c>)
 800f552:	689b      	ldr	r3, [r3, #8]
 800f554:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800f55c:	4b09      	ldr	r3, [pc, #36]	; (800f584 <HAL_RCC_GetClockConfig+0x5c>)
 800f55e:	689b      	ldr	r3, [r3, #8]
 800f560:	08db      	lsrs	r3, r3, #3
 800f562:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800f56a:	4b07      	ldr	r3, [pc, #28]	; (800f588 <HAL_RCC_GetClockConfig+0x60>)
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	f003 020f 	and.w	r2, r3, #15
 800f572:	683b      	ldr	r3, [r7, #0]
 800f574:	601a      	str	r2, [r3, #0]
}
 800f576:	bf00      	nop
 800f578:	370c      	adds	r7, #12
 800f57a:	46bd      	mov	sp, r7
 800f57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f580:	4770      	bx	lr
 800f582:	bf00      	nop
 800f584:	40023800 	.word	0x40023800
 800f588:	40023c00 	.word	0x40023c00

0800f58c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800f58c:	b580      	push	{r7, lr}
 800f58e:	b08c      	sub	sp, #48	; 0x30
 800f590:	af00      	add	r7, sp, #0
 800f592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800f594:	2300      	movs	r3, #0
 800f596:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 800f598:	2300      	movs	r3, #0
 800f59a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800f59c:	2300      	movs	r3, #0
 800f59e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 800f5a0:	2300      	movs	r3, #0
 800f5a2:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800f5a4:	2300      	movs	r3, #0
 800f5a6:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 800f5a8:	2300      	movs	r3, #0
 800f5aa:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800f5ac:	2300      	movs	r3, #0
 800f5ae:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800f5b0:	2300      	movs	r3, #0
 800f5b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 800f5b4:	2300      	movs	r3, #0
 800f5b6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	f003 0301 	and.w	r3, r3, #1
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d010      	beq.n	800f5e6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800f5c4:	4b6f      	ldr	r3, [pc, #444]	; (800f784 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800f5c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f5ca:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5d2:	496c      	ldr	r1, [pc, #432]	; (800f784 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800f5d4:	4313      	orrs	r3, r2
 800f5d6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d101      	bne.n	800f5e6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800f5e2:	2301      	movs	r3, #1
 800f5e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	f003 0302 	and.w	r3, r3, #2
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d010      	beq.n	800f614 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800f5f2:	4b64      	ldr	r3, [pc, #400]	; (800f784 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800f5f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f5f8:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f600:	4960      	ldr	r1, [pc, #384]	; (800f784 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800f602:	4313      	orrs	r3, r2
 800f604:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d101      	bne.n	800f614 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800f610:	2301      	movs	r3, #1
 800f612:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	f003 0304 	and.w	r3, r3, #4
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d017      	beq.n	800f650 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800f620:	4b58      	ldr	r3, [pc, #352]	; (800f784 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800f622:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f626:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f62e:	4955      	ldr	r1, [pc, #340]	; (800f784 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800f630:	4313      	orrs	r3, r2
 800f632:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f63a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f63e:	d101      	bne.n	800f644 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 800f640:	2301      	movs	r3, #1
 800f642:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d101      	bne.n	800f650 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800f64c:	2301      	movs	r3, #1
 800f64e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	f003 0308 	and.w	r3, r3, #8
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d017      	beq.n	800f68c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800f65c:	4b49      	ldr	r3, [pc, #292]	; (800f784 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800f65e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f662:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f66a:	4946      	ldr	r1, [pc, #280]	; (800f784 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800f66c:	4313      	orrs	r3, r2
 800f66e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f676:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f67a:	d101      	bne.n	800f680 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800f67c:	2301      	movs	r3, #1
 800f67e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f684:	2b00      	cmp	r3, #0
 800f686:	d101      	bne.n	800f68c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800f688:	2301      	movs	r3, #1
 800f68a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	f003 0320 	and.w	r3, r3, #32
 800f694:	2b00      	cmp	r3, #0
 800f696:	f000 808a 	beq.w	800f7ae <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800f69a:	2300      	movs	r3, #0
 800f69c:	60bb      	str	r3, [r7, #8]
 800f69e:	4b39      	ldr	r3, [pc, #228]	; (800f784 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800f6a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6a2:	4a38      	ldr	r2, [pc, #224]	; (800f784 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800f6a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f6a8:	6413      	str	r3, [r2, #64]	; 0x40
 800f6aa:	4b36      	ldr	r3, [pc, #216]	; (800f784 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800f6ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f6b2:	60bb      	str	r3, [r7, #8]
 800f6b4:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800f6b6:	4b34      	ldr	r3, [pc, #208]	; (800f788 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	4a33      	ldr	r2, [pc, #204]	; (800f788 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800f6bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f6c0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800f6c2:	f7fb f817 	bl	800a6f4 <HAL_GetTick>
 800f6c6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800f6c8:	e008      	b.n	800f6dc <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800f6ca:	f7fb f813 	bl	800a6f4 <HAL_GetTick>
 800f6ce:	4602      	mov	r2, r0
 800f6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6d2:	1ad3      	subs	r3, r2, r3
 800f6d4:	2b02      	cmp	r3, #2
 800f6d6:	d901      	bls.n	800f6dc <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800f6d8:	2303      	movs	r3, #3
 800f6da:	e278      	b.n	800fbce <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800f6dc:	4b2a      	ldr	r3, [pc, #168]	; (800f788 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d0f0      	beq.n	800f6ca <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800f6e8:	4b26      	ldr	r3, [pc, #152]	; (800f784 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800f6ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f6ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f6f0:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800f6f2:	6a3b      	ldr	r3, [r7, #32]
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d02f      	beq.n	800f758 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f700:	6a3a      	ldr	r2, [r7, #32]
 800f702:	429a      	cmp	r2, r3
 800f704:	d028      	beq.n	800f758 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800f706:	4b1f      	ldr	r3, [pc, #124]	; (800f784 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800f708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f70a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f70e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800f710:	4b1e      	ldr	r3, [pc, #120]	; (800f78c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800f712:	2201      	movs	r2, #1
 800f714:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800f716:	4b1d      	ldr	r3, [pc, #116]	; (800f78c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800f718:	2200      	movs	r2, #0
 800f71a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800f71c:	4a19      	ldr	r2, [pc, #100]	; (800f784 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800f71e:	6a3b      	ldr	r3, [r7, #32]
 800f720:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800f722:	4b18      	ldr	r3, [pc, #96]	; (800f784 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800f724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f726:	f003 0301 	and.w	r3, r3, #1
 800f72a:	2b01      	cmp	r3, #1
 800f72c:	d114      	bne.n	800f758 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800f72e:	f7fa ffe1 	bl	800a6f4 <HAL_GetTick>
 800f732:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f734:	e00a      	b.n	800f74c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f736:	f7fa ffdd 	bl	800a6f4 <HAL_GetTick>
 800f73a:	4602      	mov	r2, r0
 800f73c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f73e:	1ad3      	subs	r3, r2, r3
 800f740:	f241 3288 	movw	r2, #5000	; 0x1388
 800f744:	4293      	cmp	r3, r2
 800f746:	d901      	bls.n	800f74c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800f748:	2303      	movs	r3, #3
 800f74a:	e240      	b.n	800fbce <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f74c:	4b0d      	ldr	r3, [pc, #52]	; (800f784 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800f74e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f750:	f003 0302 	and.w	r3, r3, #2
 800f754:	2b00      	cmp	r3, #0
 800f756:	d0ee      	beq.n	800f736 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f75c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f760:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f764:	d114      	bne.n	800f790 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800f766:	4b07      	ldr	r3, [pc, #28]	; (800f784 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800f768:	689b      	ldr	r3, [r3, #8]
 800f76a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f772:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800f776:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f77a:	4902      	ldr	r1, [pc, #8]	; (800f784 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800f77c:	4313      	orrs	r3, r2
 800f77e:	608b      	str	r3, [r1, #8]
 800f780:	e00c      	b.n	800f79c <HAL_RCCEx_PeriphCLKConfig+0x210>
 800f782:	bf00      	nop
 800f784:	40023800 	.word	0x40023800
 800f788:	40007000 	.word	0x40007000
 800f78c:	42470e40 	.word	0x42470e40
 800f790:	4b4a      	ldr	r3, [pc, #296]	; (800f8bc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800f792:	689b      	ldr	r3, [r3, #8]
 800f794:	4a49      	ldr	r2, [pc, #292]	; (800f8bc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800f796:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800f79a:	6093      	str	r3, [r2, #8]
 800f79c:	4b47      	ldr	r3, [pc, #284]	; (800f8bc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800f79e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f7a8:	4944      	ldr	r1, [pc, #272]	; (800f8bc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800f7aa:	4313      	orrs	r3, r2
 800f7ac:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	f003 0310 	and.w	r3, r3, #16
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d004      	beq.n	800f7c4 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800f7c0:	4b3f      	ldr	r3, [pc, #252]	; (800f8c0 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800f7c2:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d00a      	beq.n	800f7e6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800f7d0:	4b3a      	ldr	r3, [pc, #232]	; (800f8bc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800f7d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f7d6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f7de:	4937      	ldr	r1, [pc, #220]	; (800f8bc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800f7e0:	4313      	orrs	r3, r2
 800f7e2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d00a      	beq.n	800f808 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800f7f2:	4b32      	ldr	r3, [pc, #200]	; (800f8bc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800f7f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f7f8:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f800:	492e      	ldr	r1, [pc, #184]	; (800f8bc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800f802:	4313      	orrs	r3, r2
 800f804:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f810:	2b00      	cmp	r3, #0
 800f812:	d011      	beq.n	800f838 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800f814:	4b29      	ldr	r3, [pc, #164]	; (800f8bc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800f816:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f81a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f822:	4926      	ldr	r1, [pc, #152]	; (800f8bc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800f824:	4313      	orrs	r3, r2
 800f826:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f82e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f832:	d101      	bne.n	800f838 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 800f834:	2301      	movs	r3, #1
 800f836:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f840:	2b00      	cmp	r3, #0
 800f842:	d00a      	beq.n	800f85a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800f844:	4b1d      	ldr	r3, [pc, #116]	; (800f8bc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800f846:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f84a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f852:	491a      	ldr	r1, [pc, #104]	; (800f8bc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800f854:	4313      	orrs	r3, r2
 800f856:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f862:	2b00      	cmp	r3, #0
 800f864:	d011      	beq.n	800f88a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800f866:	4b15      	ldr	r3, [pc, #84]	; (800f8bc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800f868:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f86c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f874:	4911      	ldr	r1, [pc, #68]	; (800f8bc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800f876:	4313      	orrs	r3, r2
 800f878:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f880:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f884:	d101      	bne.n	800f88a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800f886:	2301      	movs	r3, #1
 800f888:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800f88a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f88c:	2b01      	cmp	r3, #1
 800f88e:	d005      	beq.n	800f89c <HAL_RCCEx_PeriphCLKConfig+0x310>
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f898:	f040 80ff 	bne.w	800fa9a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800f89c:	4b09      	ldr	r3, [pc, #36]	; (800f8c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f89e:	2200      	movs	r2, #0
 800f8a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800f8a2:	f7fa ff27 	bl	800a6f4 <HAL_GetTick>
 800f8a6:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800f8a8:	e00e      	b.n	800f8c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800f8aa:	f7fa ff23 	bl	800a6f4 <HAL_GetTick>
 800f8ae:	4602      	mov	r2, r0
 800f8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8b2:	1ad3      	subs	r3, r2, r3
 800f8b4:	2b02      	cmp	r3, #2
 800f8b6:	d907      	bls.n	800f8c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800f8b8:	2303      	movs	r3, #3
 800f8ba:	e188      	b.n	800fbce <HAL_RCCEx_PeriphCLKConfig+0x642>
 800f8bc:	40023800 	.word	0x40023800
 800f8c0:	424711e0 	.word	0x424711e0
 800f8c4:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800f8c8:	4b7e      	ldr	r3, [pc, #504]	; (800fac4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d1ea      	bne.n	800f8aa <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	f003 0301 	and.w	r3, r3, #1
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d003      	beq.n	800f8e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d009      	beq.n	800f8fc <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d028      	beq.n	800f946 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d124      	bne.n	800f946 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800f8fc:	4b71      	ldr	r3, [pc, #452]	; (800fac4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800f8fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f902:	0c1b      	lsrs	r3, r3, #16
 800f904:	f003 0303 	and.w	r3, r3, #3
 800f908:	3301      	adds	r3, #1
 800f90a:	005b      	lsls	r3, r3, #1
 800f90c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800f90e:	4b6d      	ldr	r3, [pc, #436]	; (800fac4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800f910:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f914:	0e1b      	lsrs	r3, r3, #24
 800f916:	f003 030f 	and.w	r3, r3, #15
 800f91a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	685a      	ldr	r2, [r3, #4]
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	689b      	ldr	r3, [r3, #8]
 800f924:	019b      	lsls	r3, r3, #6
 800f926:	431a      	orrs	r2, r3
 800f928:	69fb      	ldr	r3, [r7, #28]
 800f92a:	085b      	lsrs	r3, r3, #1
 800f92c:	3b01      	subs	r3, #1
 800f92e:	041b      	lsls	r3, r3, #16
 800f930:	431a      	orrs	r2, r3
 800f932:	69bb      	ldr	r3, [r7, #24]
 800f934:	061b      	lsls	r3, r3, #24
 800f936:	431a      	orrs	r2, r3
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	695b      	ldr	r3, [r3, #20]
 800f93c:	071b      	lsls	r3, r3, #28
 800f93e:	4961      	ldr	r1, [pc, #388]	; (800fac4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800f940:	4313      	orrs	r3, r2
 800f942:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	f003 0304 	and.w	r3, r3, #4
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d004      	beq.n	800f95c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f956:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f95a:	d00a      	beq.n	800f972 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800f964:	2b00      	cmp	r3, #0
 800f966:	d035      	beq.n	800f9d4 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f96c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f970:	d130      	bne.n	800f9d4 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800f972:	4b54      	ldr	r3, [pc, #336]	; (800fac4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800f974:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f978:	0c1b      	lsrs	r3, r3, #16
 800f97a:	f003 0303 	and.w	r3, r3, #3
 800f97e:	3301      	adds	r3, #1
 800f980:	005b      	lsls	r3, r3, #1
 800f982:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800f984:	4b4f      	ldr	r3, [pc, #316]	; (800fac4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800f986:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f98a:	0f1b      	lsrs	r3, r3, #28
 800f98c:	f003 0307 	and.w	r3, r3, #7
 800f990:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	685a      	ldr	r2, [r3, #4]
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	689b      	ldr	r3, [r3, #8]
 800f99a:	019b      	lsls	r3, r3, #6
 800f99c:	431a      	orrs	r2, r3
 800f99e:	69fb      	ldr	r3, [r7, #28]
 800f9a0:	085b      	lsrs	r3, r3, #1
 800f9a2:	3b01      	subs	r3, #1
 800f9a4:	041b      	lsls	r3, r3, #16
 800f9a6:	431a      	orrs	r2, r3
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	691b      	ldr	r3, [r3, #16]
 800f9ac:	061b      	lsls	r3, r3, #24
 800f9ae:	431a      	orrs	r2, r3
 800f9b0:	697b      	ldr	r3, [r7, #20]
 800f9b2:	071b      	lsls	r3, r3, #28
 800f9b4:	4943      	ldr	r1, [pc, #268]	; (800fac4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800f9b6:	4313      	orrs	r3, r2
 800f9b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800f9bc:	4b41      	ldr	r3, [pc, #260]	; (800fac4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800f9be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f9c2:	f023 021f 	bic.w	r2, r3, #31
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9ca:	3b01      	subs	r3, #1
 800f9cc:	493d      	ldr	r1, [pc, #244]	; (800fac4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800f9ce:	4313      	orrs	r3, r2
 800f9d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d029      	beq.n	800fa34 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f9e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f9e8:	d124      	bne.n	800fa34 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800f9ea:	4b36      	ldr	r3, [pc, #216]	; (800fac4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800f9ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f9f0:	0c1b      	lsrs	r3, r3, #16
 800f9f2:	f003 0303 	and.w	r3, r3, #3
 800f9f6:	3301      	adds	r3, #1
 800f9f8:	005b      	lsls	r3, r3, #1
 800f9fa:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800f9fc:	4b31      	ldr	r3, [pc, #196]	; (800fac4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800f9fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fa02:	0f1b      	lsrs	r3, r3, #28
 800fa04:	f003 0307 	and.w	r3, r3, #7
 800fa08:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	685a      	ldr	r2, [r3, #4]
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	689b      	ldr	r3, [r3, #8]
 800fa12:	019b      	lsls	r3, r3, #6
 800fa14:	431a      	orrs	r2, r3
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	68db      	ldr	r3, [r3, #12]
 800fa1a:	085b      	lsrs	r3, r3, #1
 800fa1c:	3b01      	subs	r3, #1
 800fa1e:	041b      	lsls	r3, r3, #16
 800fa20:	431a      	orrs	r2, r3
 800fa22:	69bb      	ldr	r3, [r7, #24]
 800fa24:	061b      	lsls	r3, r3, #24
 800fa26:	431a      	orrs	r2, r3
 800fa28:	697b      	ldr	r3, [r7, #20]
 800fa2a:	071b      	lsls	r3, r3, #28
 800fa2c:	4925      	ldr	r1, [pc, #148]	; (800fac4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800fa2e:	4313      	orrs	r3, r2
 800fa30:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d016      	beq.n	800fa6e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	685a      	ldr	r2, [r3, #4]
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	689b      	ldr	r3, [r3, #8]
 800fa48:	019b      	lsls	r3, r3, #6
 800fa4a:	431a      	orrs	r2, r3
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	68db      	ldr	r3, [r3, #12]
 800fa50:	085b      	lsrs	r3, r3, #1
 800fa52:	3b01      	subs	r3, #1
 800fa54:	041b      	lsls	r3, r3, #16
 800fa56:	431a      	orrs	r2, r3
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	691b      	ldr	r3, [r3, #16]
 800fa5c:	061b      	lsls	r3, r3, #24
 800fa5e:	431a      	orrs	r2, r3
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	695b      	ldr	r3, [r3, #20]
 800fa64:	071b      	lsls	r3, r3, #28
 800fa66:	4917      	ldr	r1, [pc, #92]	; (800fac4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800fa68:	4313      	orrs	r3, r2
 800fa6a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800fa6e:	4b16      	ldr	r3, [pc, #88]	; (800fac8 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800fa70:	2201      	movs	r2, #1
 800fa72:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800fa74:	f7fa fe3e 	bl	800a6f4 <HAL_GetTick>
 800fa78:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800fa7a:	e008      	b.n	800fa8e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800fa7c:	f7fa fe3a 	bl	800a6f4 <HAL_GetTick>
 800fa80:	4602      	mov	r2, r0
 800fa82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa84:	1ad3      	subs	r3, r2, r3
 800fa86:	2b02      	cmp	r3, #2
 800fa88:	d901      	bls.n	800fa8e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800fa8a:	2303      	movs	r3, #3
 800fa8c:	e09f      	b.n	800fbce <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800fa8e:	4b0d      	ldr	r3, [pc, #52]	; (800fac4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d0f0      	beq.n	800fa7c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800fa9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa9c:	2b01      	cmp	r3, #1
 800fa9e:	f040 8095 	bne.w	800fbcc <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800faa2:	4b0a      	ldr	r3, [pc, #40]	; (800facc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800faa4:	2200      	movs	r2, #0
 800faa6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800faa8:	f7fa fe24 	bl	800a6f4 <HAL_GetTick>
 800faac:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800faae:	e00f      	b.n	800fad0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800fab0:	f7fa fe20 	bl	800a6f4 <HAL_GetTick>
 800fab4:	4602      	mov	r2, r0
 800fab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fab8:	1ad3      	subs	r3, r2, r3
 800faba:	2b02      	cmp	r3, #2
 800fabc:	d908      	bls.n	800fad0 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800fabe:	2303      	movs	r3, #3
 800fac0:	e085      	b.n	800fbce <HAL_RCCEx_PeriphCLKConfig+0x642>
 800fac2:	bf00      	nop
 800fac4:	40023800 	.word	0x40023800
 800fac8:	42470068 	.word	0x42470068
 800facc:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800fad0:	4b41      	ldr	r3, [pc, #260]	; (800fbd8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800fad8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fadc:	d0e8      	beq.n	800fab0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	f003 0304 	and.w	r3, r3, #4
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d003      	beq.n	800faf2 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d009      	beq.n	800fb06 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d02b      	beq.n	800fb56 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d127      	bne.n	800fb56 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800fb06:	4b34      	ldr	r3, [pc, #208]	; (800fbd8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800fb08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fb0c:	0c1b      	lsrs	r3, r3, #16
 800fb0e:	f003 0303 	and.w	r3, r3, #3
 800fb12:	3301      	adds	r3, #1
 800fb14:	005b      	lsls	r3, r3, #1
 800fb16:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	699a      	ldr	r2, [r3, #24]
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	69db      	ldr	r3, [r3, #28]
 800fb20:	019b      	lsls	r3, r3, #6
 800fb22:	431a      	orrs	r2, r3
 800fb24:	693b      	ldr	r3, [r7, #16]
 800fb26:	085b      	lsrs	r3, r3, #1
 800fb28:	3b01      	subs	r3, #1
 800fb2a:	041b      	lsls	r3, r3, #16
 800fb2c:	431a      	orrs	r2, r3
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb32:	061b      	lsls	r3, r3, #24
 800fb34:	4928      	ldr	r1, [pc, #160]	; (800fbd8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800fb36:	4313      	orrs	r3, r2
 800fb38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800fb3c:	4b26      	ldr	r3, [pc, #152]	; (800fbd8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800fb3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fb42:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb4a:	3b01      	subs	r3, #1
 800fb4c:	021b      	lsls	r3, r3, #8
 800fb4e:	4922      	ldr	r1, [pc, #136]	; (800fbd8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800fb50:	4313      	orrs	r3, r2
 800fb52:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d01d      	beq.n	800fb9e <HAL_RCCEx_PeriphCLKConfig+0x612>
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800fb6a:	d118      	bne.n	800fb9e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800fb6c:	4b1a      	ldr	r3, [pc, #104]	; (800fbd8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800fb6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fb72:	0e1b      	lsrs	r3, r3, #24
 800fb74:	f003 030f 	and.w	r3, r3, #15
 800fb78:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	699a      	ldr	r2, [r3, #24]
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	69db      	ldr	r3, [r3, #28]
 800fb82:	019b      	lsls	r3, r3, #6
 800fb84:	431a      	orrs	r2, r3
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	6a1b      	ldr	r3, [r3, #32]
 800fb8a:	085b      	lsrs	r3, r3, #1
 800fb8c:	3b01      	subs	r3, #1
 800fb8e:	041b      	lsls	r3, r3, #16
 800fb90:	431a      	orrs	r2, r3
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	061b      	lsls	r3, r3, #24
 800fb96:	4910      	ldr	r1, [pc, #64]	; (800fbd8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800fb98:	4313      	orrs	r3, r2
 800fb9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800fb9e:	4b0f      	ldr	r3, [pc, #60]	; (800fbdc <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800fba0:	2201      	movs	r2, #1
 800fba2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800fba4:	f7fa fda6 	bl	800a6f4 <HAL_GetTick>
 800fba8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800fbaa:	e008      	b.n	800fbbe <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800fbac:	f7fa fda2 	bl	800a6f4 <HAL_GetTick>
 800fbb0:	4602      	mov	r2, r0
 800fbb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbb4:	1ad3      	subs	r3, r2, r3
 800fbb6:	2b02      	cmp	r3, #2
 800fbb8:	d901      	bls.n	800fbbe <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800fbba:	2303      	movs	r3, #3
 800fbbc:	e007      	b.n	800fbce <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800fbbe:	4b06      	ldr	r3, [pc, #24]	; (800fbd8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800fbc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fbca:	d1ef      	bne.n	800fbac <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 800fbcc:	2300      	movs	r3, #0
}
 800fbce:	4618      	mov	r0, r3
 800fbd0:	3730      	adds	r7, #48	; 0x30
 800fbd2:	46bd      	mov	sp, r7
 800fbd4:	bd80      	pop	{r7, pc}
 800fbd6:	bf00      	nop
 800fbd8:	40023800 	.word	0x40023800
 800fbdc:	42470070 	.word	0x42470070

0800fbe0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800fbe0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fbe4:	b0a6      	sub	sp, #152	; 0x98
 800fbe6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800fbe8:	2300      	movs	r3, #0
 800fbea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 800fbee:	2300      	movs	r3, #0
 800fbf0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 800fbf4:	2300      	movs	r3, #0
 800fbf6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 800fbfa:	2300      	movs	r3, #0
 800fbfc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 800fc00:	2300      	movs	r3, #0
 800fc02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800fc06:	4bc8      	ldr	r3, [pc, #800]	; (800ff28 <HAL_RCC_GetSysClockFreq+0x348>)
 800fc08:	689b      	ldr	r3, [r3, #8]
 800fc0a:	f003 030c 	and.w	r3, r3, #12
 800fc0e:	2b0c      	cmp	r3, #12
 800fc10:	f200 817e 	bhi.w	800ff10 <HAL_RCC_GetSysClockFreq+0x330>
 800fc14:	a201      	add	r2, pc, #4	; (adr r2, 800fc1c <HAL_RCC_GetSysClockFreq+0x3c>)
 800fc16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc1a:	bf00      	nop
 800fc1c:	0800fc51 	.word	0x0800fc51
 800fc20:	0800ff11 	.word	0x0800ff11
 800fc24:	0800ff11 	.word	0x0800ff11
 800fc28:	0800ff11 	.word	0x0800ff11
 800fc2c:	0800fc59 	.word	0x0800fc59
 800fc30:	0800ff11 	.word	0x0800ff11
 800fc34:	0800ff11 	.word	0x0800ff11
 800fc38:	0800ff11 	.word	0x0800ff11
 800fc3c:	0800fc61 	.word	0x0800fc61
 800fc40:	0800ff11 	.word	0x0800ff11
 800fc44:	0800ff11 	.word	0x0800ff11
 800fc48:	0800ff11 	.word	0x0800ff11
 800fc4c:	0800fdcb 	.word	0x0800fdcb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800fc50:	4bb6      	ldr	r3, [pc, #728]	; (800ff2c <HAL_RCC_GetSysClockFreq+0x34c>)
 800fc52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 800fc56:	e15f      	b.n	800ff18 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800fc58:	4bb5      	ldr	r3, [pc, #724]	; (800ff30 <HAL_RCC_GetSysClockFreq+0x350>)
 800fc5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800fc5e:	e15b      	b.n	800ff18 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800fc60:	4bb1      	ldr	r3, [pc, #708]	; (800ff28 <HAL_RCC_GetSysClockFreq+0x348>)
 800fc62:	685b      	ldr	r3, [r3, #4]
 800fc64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fc68:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800fc6c:	4bae      	ldr	r3, [pc, #696]	; (800ff28 <HAL_RCC_GetSysClockFreq+0x348>)
 800fc6e:	685b      	ldr	r3, [r3, #4]
 800fc70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d031      	beq.n	800fcdc <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800fc78:	4bab      	ldr	r3, [pc, #684]	; (800ff28 <HAL_RCC_GetSysClockFreq+0x348>)
 800fc7a:	685b      	ldr	r3, [r3, #4]
 800fc7c:	099b      	lsrs	r3, r3, #6
 800fc7e:	2200      	movs	r2, #0
 800fc80:	66bb      	str	r3, [r7, #104]	; 0x68
 800fc82:	66fa      	str	r2, [r7, #108]	; 0x6c
 800fc84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fc86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fc8a:	663b      	str	r3, [r7, #96]	; 0x60
 800fc8c:	2300      	movs	r3, #0
 800fc8e:	667b      	str	r3, [r7, #100]	; 0x64
 800fc90:	4ba7      	ldr	r3, [pc, #668]	; (800ff30 <HAL_RCC_GetSysClockFreq+0x350>)
 800fc92:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800fc96:	462a      	mov	r2, r5
 800fc98:	fb03 f202 	mul.w	r2, r3, r2
 800fc9c:	2300      	movs	r3, #0
 800fc9e:	4621      	mov	r1, r4
 800fca0:	fb01 f303 	mul.w	r3, r1, r3
 800fca4:	4413      	add	r3, r2
 800fca6:	4aa2      	ldr	r2, [pc, #648]	; (800ff30 <HAL_RCC_GetSysClockFreq+0x350>)
 800fca8:	4621      	mov	r1, r4
 800fcaa:	fba1 1202 	umull	r1, r2, r1, r2
 800fcae:	67fa      	str	r2, [r7, #124]	; 0x7c
 800fcb0:	460a      	mov	r2, r1
 800fcb2:	67ba      	str	r2, [r7, #120]	; 0x78
 800fcb4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800fcb6:	4413      	add	r3, r2
 800fcb8:	67fb      	str	r3, [r7, #124]	; 0x7c
 800fcba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fcbe:	2200      	movs	r2, #0
 800fcc0:	65bb      	str	r3, [r7, #88]	; 0x58
 800fcc2:	65fa      	str	r2, [r7, #92]	; 0x5c
 800fcc4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800fcc8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800fccc:	f7f0 fffc 	bl	8000cc8 <__aeabi_uldivmod>
 800fcd0:	4602      	mov	r2, r0
 800fcd2:	460b      	mov	r3, r1
 800fcd4:	4613      	mov	r3, r2
 800fcd6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800fcda:	e064      	b.n	800fda6 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800fcdc:	4b92      	ldr	r3, [pc, #584]	; (800ff28 <HAL_RCC_GetSysClockFreq+0x348>)
 800fcde:	685b      	ldr	r3, [r3, #4]
 800fce0:	099b      	lsrs	r3, r3, #6
 800fce2:	2200      	movs	r2, #0
 800fce4:	653b      	str	r3, [r7, #80]	; 0x50
 800fce6:	657a      	str	r2, [r7, #84]	; 0x54
 800fce8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fcea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fcee:	64bb      	str	r3, [r7, #72]	; 0x48
 800fcf0:	2300      	movs	r3, #0
 800fcf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fcf4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800fcf8:	4622      	mov	r2, r4
 800fcfa:	462b      	mov	r3, r5
 800fcfc:	f04f 0000 	mov.w	r0, #0
 800fd00:	f04f 0100 	mov.w	r1, #0
 800fd04:	0159      	lsls	r1, r3, #5
 800fd06:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800fd0a:	0150      	lsls	r0, r2, #5
 800fd0c:	4602      	mov	r2, r0
 800fd0e:	460b      	mov	r3, r1
 800fd10:	4621      	mov	r1, r4
 800fd12:	1a51      	subs	r1, r2, r1
 800fd14:	6139      	str	r1, [r7, #16]
 800fd16:	4629      	mov	r1, r5
 800fd18:	eb63 0301 	sbc.w	r3, r3, r1
 800fd1c:	617b      	str	r3, [r7, #20]
 800fd1e:	f04f 0200 	mov.w	r2, #0
 800fd22:	f04f 0300 	mov.w	r3, #0
 800fd26:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800fd2a:	4659      	mov	r1, fp
 800fd2c:	018b      	lsls	r3, r1, #6
 800fd2e:	4651      	mov	r1, sl
 800fd30:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800fd34:	4651      	mov	r1, sl
 800fd36:	018a      	lsls	r2, r1, #6
 800fd38:	4651      	mov	r1, sl
 800fd3a:	ebb2 0801 	subs.w	r8, r2, r1
 800fd3e:	4659      	mov	r1, fp
 800fd40:	eb63 0901 	sbc.w	r9, r3, r1
 800fd44:	f04f 0200 	mov.w	r2, #0
 800fd48:	f04f 0300 	mov.w	r3, #0
 800fd4c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800fd50:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800fd54:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800fd58:	4690      	mov	r8, r2
 800fd5a:	4699      	mov	r9, r3
 800fd5c:	4623      	mov	r3, r4
 800fd5e:	eb18 0303 	adds.w	r3, r8, r3
 800fd62:	60bb      	str	r3, [r7, #8]
 800fd64:	462b      	mov	r3, r5
 800fd66:	eb49 0303 	adc.w	r3, r9, r3
 800fd6a:	60fb      	str	r3, [r7, #12]
 800fd6c:	f04f 0200 	mov.w	r2, #0
 800fd70:	f04f 0300 	mov.w	r3, #0
 800fd74:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800fd78:	4629      	mov	r1, r5
 800fd7a:	028b      	lsls	r3, r1, #10
 800fd7c:	4621      	mov	r1, r4
 800fd7e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800fd82:	4621      	mov	r1, r4
 800fd84:	028a      	lsls	r2, r1, #10
 800fd86:	4610      	mov	r0, r2
 800fd88:	4619      	mov	r1, r3
 800fd8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fd8e:	2200      	movs	r2, #0
 800fd90:	643b      	str	r3, [r7, #64]	; 0x40
 800fd92:	647a      	str	r2, [r7, #68]	; 0x44
 800fd94:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800fd98:	f7f0 ff96 	bl	8000cc8 <__aeabi_uldivmod>
 800fd9c:	4602      	mov	r2, r0
 800fd9e:	460b      	mov	r3, r1
 800fda0:	4613      	mov	r3, r2
 800fda2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800fda6:	4b60      	ldr	r3, [pc, #384]	; (800ff28 <HAL_RCC_GetSysClockFreq+0x348>)
 800fda8:	685b      	ldr	r3, [r3, #4]
 800fdaa:	0c1b      	lsrs	r3, r3, #16
 800fdac:	f003 0303 	and.w	r3, r3, #3
 800fdb0:	3301      	adds	r3, #1
 800fdb2:	005b      	lsls	r3, r3, #1
 800fdb4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 800fdb8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800fdbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fdc0:	fbb2 f3f3 	udiv	r3, r2, r3
 800fdc4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800fdc8:	e0a6      	b.n	800ff18 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800fdca:	4b57      	ldr	r3, [pc, #348]	; (800ff28 <HAL_RCC_GetSysClockFreq+0x348>)
 800fdcc:	685b      	ldr	r3, [r3, #4]
 800fdce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fdd2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800fdd6:	4b54      	ldr	r3, [pc, #336]	; (800ff28 <HAL_RCC_GetSysClockFreq+0x348>)
 800fdd8:	685b      	ldr	r3, [r3, #4]
 800fdda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d02a      	beq.n	800fe38 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800fde2:	4b51      	ldr	r3, [pc, #324]	; (800ff28 <HAL_RCC_GetSysClockFreq+0x348>)
 800fde4:	685b      	ldr	r3, [r3, #4]
 800fde6:	099b      	lsrs	r3, r3, #6
 800fde8:	2200      	movs	r2, #0
 800fdea:	63bb      	str	r3, [r7, #56]	; 0x38
 800fdec:	63fa      	str	r2, [r7, #60]	; 0x3c
 800fdee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdf0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800fdf4:	2100      	movs	r1, #0
 800fdf6:	4b4e      	ldr	r3, [pc, #312]	; (800ff30 <HAL_RCC_GetSysClockFreq+0x350>)
 800fdf8:	fb03 f201 	mul.w	r2, r3, r1
 800fdfc:	2300      	movs	r3, #0
 800fdfe:	fb00 f303 	mul.w	r3, r0, r3
 800fe02:	4413      	add	r3, r2
 800fe04:	4a4a      	ldr	r2, [pc, #296]	; (800ff30 <HAL_RCC_GetSysClockFreq+0x350>)
 800fe06:	fba0 1202 	umull	r1, r2, r0, r2
 800fe0a:	677a      	str	r2, [r7, #116]	; 0x74
 800fe0c:	460a      	mov	r2, r1
 800fe0e:	673a      	str	r2, [r7, #112]	; 0x70
 800fe10:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800fe12:	4413      	add	r3, r2
 800fe14:	677b      	str	r3, [r7, #116]	; 0x74
 800fe16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fe1a:	2200      	movs	r2, #0
 800fe1c:	633b      	str	r3, [r7, #48]	; 0x30
 800fe1e:	637a      	str	r2, [r7, #52]	; 0x34
 800fe20:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800fe24:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800fe28:	f7f0 ff4e 	bl	8000cc8 <__aeabi_uldivmod>
 800fe2c:	4602      	mov	r2, r0
 800fe2e:	460b      	mov	r3, r1
 800fe30:	4613      	mov	r3, r2
 800fe32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800fe36:	e05b      	b.n	800fef0 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800fe38:	4b3b      	ldr	r3, [pc, #236]	; (800ff28 <HAL_RCC_GetSysClockFreq+0x348>)
 800fe3a:	685b      	ldr	r3, [r3, #4]
 800fe3c:	099b      	lsrs	r3, r3, #6
 800fe3e:	2200      	movs	r2, #0
 800fe40:	62bb      	str	r3, [r7, #40]	; 0x28
 800fe42:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fe44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe4a:	623b      	str	r3, [r7, #32]
 800fe4c:	2300      	movs	r3, #0
 800fe4e:	627b      	str	r3, [r7, #36]	; 0x24
 800fe50:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800fe54:	4642      	mov	r2, r8
 800fe56:	464b      	mov	r3, r9
 800fe58:	f04f 0000 	mov.w	r0, #0
 800fe5c:	f04f 0100 	mov.w	r1, #0
 800fe60:	0159      	lsls	r1, r3, #5
 800fe62:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800fe66:	0150      	lsls	r0, r2, #5
 800fe68:	4602      	mov	r2, r0
 800fe6a:	460b      	mov	r3, r1
 800fe6c:	4641      	mov	r1, r8
 800fe6e:	ebb2 0a01 	subs.w	sl, r2, r1
 800fe72:	4649      	mov	r1, r9
 800fe74:	eb63 0b01 	sbc.w	fp, r3, r1
 800fe78:	f04f 0200 	mov.w	r2, #0
 800fe7c:	f04f 0300 	mov.w	r3, #0
 800fe80:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800fe84:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800fe88:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800fe8c:	ebb2 040a 	subs.w	r4, r2, sl
 800fe90:	eb63 050b 	sbc.w	r5, r3, fp
 800fe94:	f04f 0200 	mov.w	r2, #0
 800fe98:	f04f 0300 	mov.w	r3, #0
 800fe9c:	00eb      	lsls	r3, r5, #3
 800fe9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800fea2:	00e2      	lsls	r2, r4, #3
 800fea4:	4614      	mov	r4, r2
 800fea6:	461d      	mov	r5, r3
 800fea8:	4643      	mov	r3, r8
 800feaa:	18e3      	adds	r3, r4, r3
 800feac:	603b      	str	r3, [r7, #0]
 800feae:	464b      	mov	r3, r9
 800feb0:	eb45 0303 	adc.w	r3, r5, r3
 800feb4:	607b      	str	r3, [r7, #4]
 800feb6:	f04f 0200 	mov.w	r2, #0
 800feba:	f04f 0300 	mov.w	r3, #0
 800febe:	e9d7 4500 	ldrd	r4, r5, [r7]
 800fec2:	4629      	mov	r1, r5
 800fec4:	028b      	lsls	r3, r1, #10
 800fec6:	4621      	mov	r1, r4
 800fec8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800fecc:	4621      	mov	r1, r4
 800fece:	028a      	lsls	r2, r1, #10
 800fed0:	4610      	mov	r0, r2
 800fed2:	4619      	mov	r1, r3
 800fed4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fed8:	2200      	movs	r2, #0
 800feda:	61bb      	str	r3, [r7, #24]
 800fedc:	61fa      	str	r2, [r7, #28]
 800fede:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800fee2:	f7f0 fef1 	bl	8000cc8 <__aeabi_uldivmod>
 800fee6:	4602      	mov	r2, r0
 800fee8:	460b      	mov	r3, r1
 800feea:	4613      	mov	r3, r2
 800feec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800fef0:	4b0d      	ldr	r3, [pc, #52]	; (800ff28 <HAL_RCC_GetSysClockFreq+0x348>)
 800fef2:	685b      	ldr	r3, [r3, #4]
 800fef4:	0f1b      	lsrs	r3, r3, #28
 800fef6:	f003 0307 	and.w	r3, r3, #7
 800fefa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 800fefe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ff02:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ff06:	fbb2 f3f3 	udiv	r3, r2, r3
 800ff0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800ff0e:	e003      	b.n	800ff18 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800ff10:	4b06      	ldr	r3, [pc, #24]	; (800ff2c <HAL_RCC_GetSysClockFreq+0x34c>)
 800ff12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800ff16:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ff18:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 800ff1c:	4618      	mov	r0, r3
 800ff1e:	3798      	adds	r7, #152	; 0x98
 800ff20:	46bd      	mov	sp, r7
 800ff22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ff26:	bf00      	nop
 800ff28:	40023800 	.word	0x40023800
 800ff2c:	00f42400 	.word	0x00f42400
 800ff30:	017d7840 	.word	0x017d7840

0800ff34 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ff34:	b580      	push	{r7, lr}
 800ff36:	b086      	sub	sp, #24
 800ff38:	af00      	add	r7, sp, #0
 800ff3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d101      	bne.n	800ff46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ff42:	2301      	movs	r3, #1
 800ff44:	e291      	b.n	801046a <HAL_RCC_OscConfig+0x536>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	f003 0301 	and.w	r3, r3, #1
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	f000 8087 	beq.w	8010062 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800ff54:	4b96      	ldr	r3, [pc, #600]	; (80101b0 <HAL_RCC_OscConfig+0x27c>)
 800ff56:	689b      	ldr	r3, [r3, #8]
 800ff58:	f003 030c 	and.w	r3, r3, #12
 800ff5c:	2b04      	cmp	r3, #4
 800ff5e:	d019      	beq.n	800ff94 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800ff60:	4b93      	ldr	r3, [pc, #588]	; (80101b0 <HAL_RCC_OscConfig+0x27c>)
 800ff62:	689b      	ldr	r3, [r3, #8]
 800ff64:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800ff68:	2b08      	cmp	r3, #8
 800ff6a:	d106      	bne.n	800ff7a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800ff6c:	4b90      	ldr	r3, [pc, #576]	; (80101b0 <HAL_RCC_OscConfig+0x27c>)
 800ff6e:	685b      	ldr	r3, [r3, #4]
 800ff70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ff74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ff78:	d00c      	beq.n	800ff94 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ff7a:	4b8d      	ldr	r3, [pc, #564]	; (80101b0 <HAL_RCC_OscConfig+0x27c>)
 800ff7c:	689b      	ldr	r3, [r3, #8]
 800ff7e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800ff82:	2b0c      	cmp	r3, #12
 800ff84:	d112      	bne.n	800ffac <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ff86:	4b8a      	ldr	r3, [pc, #552]	; (80101b0 <HAL_RCC_OscConfig+0x27c>)
 800ff88:	685b      	ldr	r3, [r3, #4]
 800ff8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ff8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ff92:	d10b      	bne.n	800ffac <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ff94:	4b86      	ldr	r3, [pc, #536]	; (80101b0 <HAL_RCC_OscConfig+0x27c>)
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d05f      	beq.n	8010060 <HAL_RCC_OscConfig+0x12c>
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	685b      	ldr	r3, [r3, #4]
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d15b      	bne.n	8010060 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800ffa8:	2301      	movs	r3, #1
 800ffaa:	e25e      	b.n	801046a <HAL_RCC_OscConfig+0x536>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	685b      	ldr	r3, [r3, #4]
 800ffb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ffb4:	d106      	bne.n	800ffc4 <HAL_RCC_OscConfig+0x90>
 800ffb6:	4b7e      	ldr	r3, [pc, #504]	; (80101b0 <HAL_RCC_OscConfig+0x27c>)
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	4a7d      	ldr	r2, [pc, #500]	; (80101b0 <HAL_RCC_OscConfig+0x27c>)
 800ffbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ffc0:	6013      	str	r3, [r2, #0]
 800ffc2:	e01d      	b.n	8010000 <HAL_RCC_OscConfig+0xcc>
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	685b      	ldr	r3, [r3, #4]
 800ffc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ffcc:	d10c      	bne.n	800ffe8 <HAL_RCC_OscConfig+0xb4>
 800ffce:	4b78      	ldr	r3, [pc, #480]	; (80101b0 <HAL_RCC_OscConfig+0x27c>)
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	4a77      	ldr	r2, [pc, #476]	; (80101b0 <HAL_RCC_OscConfig+0x27c>)
 800ffd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ffd8:	6013      	str	r3, [r2, #0]
 800ffda:	4b75      	ldr	r3, [pc, #468]	; (80101b0 <HAL_RCC_OscConfig+0x27c>)
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	4a74      	ldr	r2, [pc, #464]	; (80101b0 <HAL_RCC_OscConfig+0x27c>)
 800ffe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ffe4:	6013      	str	r3, [r2, #0]
 800ffe6:	e00b      	b.n	8010000 <HAL_RCC_OscConfig+0xcc>
 800ffe8:	4b71      	ldr	r3, [pc, #452]	; (80101b0 <HAL_RCC_OscConfig+0x27c>)
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	4a70      	ldr	r2, [pc, #448]	; (80101b0 <HAL_RCC_OscConfig+0x27c>)
 800ffee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fff2:	6013      	str	r3, [r2, #0]
 800fff4:	4b6e      	ldr	r3, [pc, #440]	; (80101b0 <HAL_RCC_OscConfig+0x27c>)
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	4a6d      	ldr	r2, [pc, #436]	; (80101b0 <HAL_RCC_OscConfig+0x27c>)
 800fffa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800fffe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	685b      	ldr	r3, [r3, #4]
 8010004:	2b00      	cmp	r3, #0
 8010006:	d015      	beq.n	8010034 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010008:	f7fa fb74 	bl	800a6f4 <HAL_GetTick>
 801000c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801000e:	e00a      	b.n	8010026 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8010010:	f7fa fb70 	bl	800a6f4 <HAL_GetTick>
 8010014:	4602      	mov	r2, r0
 8010016:	693b      	ldr	r3, [r7, #16]
 8010018:	1ad3      	subs	r3, r2, r3
 801001a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 801001e:	4293      	cmp	r3, r2
 8010020:	d901      	bls.n	8010026 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8010022:	2303      	movs	r3, #3
 8010024:	e221      	b.n	801046a <HAL_RCC_OscConfig+0x536>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010026:	4b62      	ldr	r3, [pc, #392]	; (80101b0 <HAL_RCC_OscConfig+0x27c>)
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801002e:	2b00      	cmp	r3, #0
 8010030:	d0ee      	beq.n	8010010 <HAL_RCC_OscConfig+0xdc>
 8010032:	e016      	b.n	8010062 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010034:	f7fa fb5e 	bl	800a6f4 <HAL_GetTick>
 8010038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801003a:	e00a      	b.n	8010052 <HAL_RCC_OscConfig+0x11e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801003c:	f7fa fb5a 	bl	800a6f4 <HAL_GetTick>
 8010040:	4602      	mov	r2, r0
 8010042:	693b      	ldr	r3, [r7, #16]
 8010044:	1ad3      	subs	r3, r2, r3
 8010046:	f640 32b8 	movw	r2, #3000	; 0xbb8
 801004a:	4293      	cmp	r3, r2
 801004c:	d901      	bls.n	8010052 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 801004e:	2303      	movs	r3, #3
 8010050:	e20b      	b.n	801046a <HAL_RCC_OscConfig+0x536>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010052:	4b57      	ldr	r3, [pc, #348]	; (80101b0 <HAL_RCC_OscConfig+0x27c>)
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801005a:	2b00      	cmp	r3, #0
 801005c:	d1ee      	bne.n	801003c <HAL_RCC_OscConfig+0x108>
 801005e:	e000      	b.n	8010062 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010060:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	f003 0302 	and.w	r3, r3, #2
 801006a:	2b00      	cmp	r3, #0
 801006c:	d06f      	beq.n	801014e <HAL_RCC_OscConfig+0x21a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 801006e:	4b50      	ldr	r3, [pc, #320]	; (80101b0 <HAL_RCC_OscConfig+0x27c>)
 8010070:	689b      	ldr	r3, [r3, #8]
 8010072:	f003 030c 	and.w	r3, r3, #12
 8010076:	2b00      	cmp	r3, #0
 8010078:	d017      	beq.n	80100aa <HAL_RCC_OscConfig+0x176>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 801007a:	4b4d      	ldr	r3, [pc, #308]	; (80101b0 <HAL_RCC_OscConfig+0x27c>)
 801007c:	689b      	ldr	r3, [r3, #8]
 801007e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8010082:	2b08      	cmp	r3, #8
 8010084:	d105      	bne.n	8010092 <HAL_RCC_OscConfig+0x15e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8010086:	4b4a      	ldr	r3, [pc, #296]	; (80101b0 <HAL_RCC_OscConfig+0x27c>)
 8010088:	685b      	ldr	r3, [r3, #4]
 801008a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801008e:	2b00      	cmp	r3, #0
 8010090:	d00b      	beq.n	80100aa <HAL_RCC_OscConfig+0x176>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8010092:	4b47      	ldr	r3, [pc, #284]	; (80101b0 <HAL_RCC_OscConfig+0x27c>)
 8010094:	689b      	ldr	r3, [r3, #8]
 8010096:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 801009a:	2b0c      	cmp	r3, #12
 801009c:	d11c      	bne.n	80100d8 <HAL_RCC_OscConfig+0x1a4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801009e:	4b44      	ldr	r3, [pc, #272]	; (80101b0 <HAL_RCC_OscConfig+0x27c>)
 80100a0:	685b      	ldr	r3, [r3, #4]
 80100a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d116      	bne.n	80100d8 <HAL_RCC_OscConfig+0x1a4>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80100aa:	4b41      	ldr	r3, [pc, #260]	; (80101b0 <HAL_RCC_OscConfig+0x27c>)
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	f003 0302 	and.w	r3, r3, #2
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d005      	beq.n	80100c2 <HAL_RCC_OscConfig+0x18e>
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	68db      	ldr	r3, [r3, #12]
 80100ba:	2b01      	cmp	r3, #1
 80100bc:	d001      	beq.n	80100c2 <HAL_RCC_OscConfig+0x18e>
      {
        return HAL_ERROR;
 80100be:	2301      	movs	r3, #1
 80100c0:	e1d3      	b.n	801046a <HAL_RCC_OscConfig+0x536>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80100c2:	4b3b      	ldr	r3, [pc, #236]	; (80101b0 <HAL_RCC_OscConfig+0x27c>)
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	691b      	ldr	r3, [r3, #16]
 80100ce:	00db      	lsls	r3, r3, #3
 80100d0:	4937      	ldr	r1, [pc, #220]	; (80101b0 <HAL_RCC_OscConfig+0x27c>)
 80100d2:	4313      	orrs	r3, r2
 80100d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80100d6:	e03a      	b.n	801014e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	68db      	ldr	r3, [r3, #12]
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d020      	beq.n	8010122 <HAL_RCC_OscConfig+0x1ee>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80100e0:	4b34      	ldr	r3, [pc, #208]	; (80101b4 <HAL_RCC_OscConfig+0x280>)
 80100e2:	2201      	movs	r2, #1
 80100e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80100e6:	f7fa fb05 	bl	800a6f4 <HAL_GetTick>
 80100ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80100ec:	e008      	b.n	8010100 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80100ee:	f7fa fb01 	bl	800a6f4 <HAL_GetTick>
 80100f2:	4602      	mov	r2, r0
 80100f4:	693b      	ldr	r3, [r7, #16]
 80100f6:	1ad3      	subs	r3, r2, r3
 80100f8:	2b02      	cmp	r3, #2
 80100fa:	d901      	bls.n	8010100 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80100fc:	2303      	movs	r3, #3
 80100fe:	e1b4      	b.n	801046a <HAL_RCC_OscConfig+0x536>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010100:	4b2b      	ldr	r3, [pc, #172]	; (80101b0 <HAL_RCC_OscConfig+0x27c>)
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	f003 0302 	and.w	r3, r3, #2
 8010108:	2b00      	cmp	r3, #0
 801010a:	d0f0      	beq.n	80100ee <HAL_RCC_OscConfig+0x1ba>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801010c:	4b28      	ldr	r3, [pc, #160]	; (80101b0 <HAL_RCC_OscConfig+0x27c>)
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	691b      	ldr	r3, [r3, #16]
 8010118:	00db      	lsls	r3, r3, #3
 801011a:	4925      	ldr	r1, [pc, #148]	; (80101b0 <HAL_RCC_OscConfig+0x27c>)
 801011c:	4313      	orrs	r3, r2
 801011e:	600b      	str	r3, [r1, #0]
 8010120:	e015      	b.n	801014e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8010122:	4b24      	ldr	r3, [pc, #144]	; (80101b4 <HAL_RCC_OscConfig+0x280>)
 8010124:	2200      	movs	r2, #0
 8010126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010128:	f7fa fae4 	bl	800a6f4 <HAL_GetTick>
 801012c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801012e:	e008      	b.n	8010142 <HAL_RCC_OscConfig+0x20e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8010130:	f7fa fae0 	bl	800a6f4 <HAL_GetTick>
 8010134:	4602      	mov	r2, r0
 8010136:	693b      	ldr	r3, [r7, #16]
 8010138:	1ad3      	subs	r3, r2, r3
 801013a:	2b02      	cmp	r3, #2
 801013c:	d901      	bls.n	8010142 <HAL_RCC_OscConfig+0x20e>
          {
            return HAL_TIMEOUT;
 801013e:	2303      	movs	r3, #3
 8010140:	e193      	b.n	801046a <HAL_RCC_OscConfig+0x536>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8010142:	4b1b      	ldr	r3, [pc, #108]	; (80101b0 <HAL_RCC_OscConfig+0x27c>)
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	f003 0302 	and.w	r3, r3, #2
 801014a:	2b00      	cmp	r3, #0
 801014c:	d1f0      	bne.n	8010130 <HAL_RCC_OscConfig+0x1fc>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	f003 0308 	and.w	r3, r3, #8
 8010156:	2b00      	cmp	r3, #0
 8010158:	d036      	beq.n	80101c8 <HAL_RCC_OscConfig+0x294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	695b      	ldr	r3, [r3, #20]
 801015e:	2b00      	cmp	r3, #0
 8010160:	d016      	beq.n	8010190 <HAL_RCC_OscConfig+0x25c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8010162:	4b15      	ldr	r3, [pc, #84]	; (80101b8 <HAL_RCC_OscConfig+0x284>)
 8010164:	2201      	movs	r2, #1
 8010166:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010168:	f7fa fac4 	bl	800a6f4 <HAL_GetTick>
 801016c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801016e:	e008      	b.n	8010182 <HAL_RCC_OscConfig+0x24e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8010170:	f7fa fac0 	bl	800a6f4 <HAL_GetTick>
 8010174:	4602      	mov	r2, r0
 8010176:	693b      	ldr	r3, [r7, #16]
 8010178:	1ad3      	subs	r3, r2, r3
 801017a:	2b02      	cmp	r3, #2
 801017c:	d901      	bls.n	8010182 <HAL_RCC_OscConfig+0x24e>
        {
          return HAL_TIMEOUT;
 801017e:	2303      	movs	r3, #3
 8010180:	e173      	b.n	801046a <HAL_RCC_OscConfig+0x536>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8010182:	4b0b      	ldr	r3, [pc, #44]	; (80101b0 <HAL_RCC_OscConfig+0x27c>)
 8010184:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010186:	f003 0302 	and.w	r3, r3, #2
 801018a:	2b00      	cmp	r3, #0
 801018c:	d0f0      	beq.n	8010170 <HAL_RCC_OscConfig+0x23c>
 801018e:	e01b      	b.n	80101c8 <HAL_RCC_OscConfig+0x294>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8010190:	4b09      	ldr	r3, [pc, #36]	; (80101b8 <HAL_RCC_OscConfig+0x284>)
 8010192:	2200      	movs	r2, #0
 8010194:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010196:	f7fa faad 	bl	800a6f4 <HAL_GetTick>
 801019a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801019c:	e00e      	b.n	80101bc <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801019e:	f7fa faa9 	bl	800a6f4 <HAL_GetTick>
 80101a2:	4602      	mov	r2, r0
 80101a4:	693b      	ldr	r3, [r7, #16]
 80101a6:	1ad3      	subs	r3, r2, r3
 80101a8:	2b02      	cmp	r3, #2
 80101aa:	d907      	bls.n	80101bc <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80101ac:	2303      	movs	r3, #3
 80101ae:	e15c      	b.n	801046a <HAL_RCC_OscConfig+0x536>
 80101b0:	40023800 	.word	0x40023800
 80101b4:	42470000 	.word	0x42470000
 80101b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80101bc:	4b8a      	ldr	r3, [pc, #552]	; (80103e8 <HAL_RCC_OscConfig+0x4b4>)
 80101be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80101c0:	f003 0302 	and.w	r3, r3, #2
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d1ea      	bne.n	801019e <HAL_RCC_OscConfig+0x26a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	f003 0304 	and.w	r3, r3, #4
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	f000 8097 	beq.w	8010304 <HAL_RCC_OscConfig+0x3d0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80101d6:	2300      	movs	r3, #0
 80101d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80101da:	4b83      	ldr	r3, [pc, #524]	; (80103e8 <HAL_RCC_OscConfig+0x4b4>)
 80101dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80101de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d10f      	bne.n	8010206 <HAL_RCC_OscConfig+0x2d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80101e6:	2300      	movs	r3, #0
 80101e8:	60bb      	str	r3, [r7, #8]
 80101ea:	4b7f      	ldr	r3, [pc, #508]	; (80103e8 <HAL_RCC_OscConfig+0x4b4>)
 80101ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80101ee:	4a7e      	ldr	r2, [pc, #504]	; (80103e8 <HAL_RCC_OscConfig+0x4b4>)
 80101f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80101f4:	6413      	str	r3, [r2, #64]	; 0x40
 80101f6:	4b7c      	ldr	r3, [pc, #496]	; (80103e8 <HAL_RCC_OscConfig+0x4b4>)
 80101f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80101fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80101fe:	60bb      	str	r3, [r7, #8]
 8010200:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8010202:	2301      	movs	r3, #1
 8010204:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010206:	4b79      	ldr	r3, [pc, #484]	; (80103ec <HAL_RCC_OscConfig+0x4b8>)
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801020e:	2b00      	cmp	r3, #0
 8010210:	d118      	bne.n	8010244 <HAL_RCC_OscConfig+0x310>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8010212:	4b76      	ldr	r3, [pc, #472]	; (80103ec <HAL_RCC_OscConfig+0x4b8>)
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	4a75      	ldr	r2, [pc, #468]	; (80103ec <HAL_RCC_OscConfig+0x4b8>)
 8010218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801021c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801021e:	f7fa fa69 	bl	800a6f4 <HAL_GetTick>
 8010222:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010224:	e008      	b.n	8010238 <HAL_RCC_OscConfig+0x304>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010226:	f7fa fa65 	bl	800a6f4 <HAL_GetTick>
 801022a:	4602      	mov	r2, r0
 801022c:	693b      	ldr	r3, [r7, #16]
 801022e:	1ad3      	subs	r3, r2, r3
 8010230:	2b02      	cmp	r3, #2
 8010232:	d901      	bls.n	8010238 <HAL_RCC_OscConfig+0x304>
        {
          return HAL_TIMEOUT;
 8010234:	2303      	movs	r3, #3
 8010236:	e118      	b.n	801046a <HAL_RCC_OscConfig+0x536>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010238:	4b6c      	ldr	r3, [pc, #432]	; (80103ec <HAL_RCC_OscConfig+0x4b8>)
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010240:	2b00      	cmp	r3, #0
 8010242:	d0f0      	beq.n	8010226 <HAL_RCC_OscConfig+0x2f2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	689b      	ldr	r3, [r3, #8]
 8010248:	2b01      	cmp	r3, #1
 801024a:	d106      	bne.n	801025a <HAL_RCC_OscConfig+0x326>
 801024c:	4b66      	ldr	r3, [pc, #408]	; (80103e8 <HAL_RCC_OscConfig+0x4b4>)
 801024e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010250:	4a65      	ldr	r2, [pc, #404]	; (80103e8 <HAL_RCC_OscConfig+0x4b4>)
 8010252:	f043 0301 	orr.w	r3, r3, #1
 8010256:	6713      	str	r3, [r2, #112]	; 0x70
 8010258:	e01c      	b.n	8010294 <HAL_RCC_OscConfig+0x360>
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	689b      	ldr	r3, [r3, #8]
 801025e:	2b05      	cmp	r3, #5
 8010260:	d10c      	bne.n	801027c <HAL_RCC_OscConfig+0x348>
 8010262:	4b61      	ldr	r3, [pc, #388]	; (80103e8 <HAL_RCC_OscConfig+0x4b4>)
 8010264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010266:	4a60      	ldr	r2, [pc, #384]	; (80103e8 <HAL_RCC_OscConfig+0x4b4>)
 8010268:	f043 0304 	orr.w	r3, r3, #4
 801026c:	6713      	str	r3, [r2, #112]	; 0x70
 801026e:	4b5e      	ldr	r3, [pc, #376]	; (80103e8 <HAL_RCC_OscConfig+0x4b4>)
 8010270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010272:	4a5d      	ldr	r2, [pc, #372]	; (80103e8 <HAL_RCC_OscConfig+0x4b4>)
 8010274:	f043 0301 	orr.w	r3, r3, #1
 8010278:	6713      	str	r3, [r2, #112]	; 0x70
 801027a:	e00b      	b.n	8010294 <HAL_RCC_OscConfig+0x360>
 801027c:	4b5a      	ldr	r3, [pc, #360]	; (80103e8 <HAL_RCC_OscConfig+0x4b4>)
 801027e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010280:	4a59      	ldr	r2, [pc, #356]	; (80103e8 <HAL_RCC_OscConfig+0x4b4>)
 8010282:	f023 0301 	bic.w	r3, r3, #1
 8010286:	6713      	str	r3, [r2, #112]	; 0x70
 8010288:	4b57      	ldr	r3, [pc, #348]	; (80103e8 <HAL_RCC_OscConfig+0x4b4>)
 801028a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801028c:	4a56      	ldr	r2, [pc, #344]	; (80103e8 <HAL_RCC_OscConfig+0x4b4>)
 801028e:	f023 0304 	bic.w	r3, r3, #4
 8010292:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	689b      	ldr	r3, [r3, #8]
 8010298:	2b00      	cmp	r3, #0
 801029a:	d015      	beq.n	80102c8 <HAL_RCC_OscConfig+0x394>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801029c:	f7fa fa2a 	bl	800a6f4 <HAL_GetTick>
 80102a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80102a2:	e00a      	b.n	80102ba <HAL_RCC_OscConfig+0x386>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80102a4:	f7fa fa26 	bl	800a6f4 <HAL_GetTick>
 80102a8:	4602      	mov	r2, r0
 80102aa:	693b      	ldr	r3, [r7, #16]
 80102ac:	1ad3      	subs	r3, r2, r3
 80102ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80102b2:	4293      	cmp	r3, r2
 80102b4:	d901      	bls.n	80102ba <HAL_RCC_OscConfig+0x386>
        {
          return HAL_TIMEOUT;
 80102b6:	2303      	movs	r3, #3
 80102b8:	e0d7      	b.n	801046a <HAL_RCC_OscConfig+0x536>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80102ba:	4b4b      	ldr	r3, [pc, #300]	; (80103e8 <HAL_RCC_OscConfig+0x4b4>)
 80102bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80102be:	f003 0302 	and.w	r3, r3, #2
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d0ee      	beq.n	80102a4 <HAL_RCC_OscConfig+0x370>
 80102c6:	e014      	b.n	80102f2 <HAL_RCC_OscConfig+0x3be>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80102c8:	f7fa fa14 	bl	800a6f4 <HAL_GetTick>
 80102cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80102ce:	e00a      	b.n	80102e6 <HAL_RCC_OscConfig+0x3b2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80102d0:	f7fa fa10 	bl	800a6f4 <HAL_GetTick>
 80102d4:	4602      	mov	r2, r0
 80102d6:	693b      	ldr	r3, [r7, #16]
 80102d8:	1ad3      	subs	r3, r2, r3
 80102da:	f241 3288 	movw	r2, #5000	; 0x1388
 80102de:	4293      	cmp	r3, r2
 80102e0:	d901      	bls.n	80102e6 <HAL_RCC_OscConfig+0x3b2>
        {
          return HAL_TIMEOUT;
 80102e2:	2303      	movs	r3, #3
 80102e4:	e0c1      	b.n	801046a <HAL_RCC_OscConfig+0x536>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80102e6:	4b40      	ldr	r3, [pc, #256]	; (80103e8 <HAL_RCC_OscConfig+0x4b4>)
 80102e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80102ea:	f003 0302 	and.w	r3, r3, #2
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d1ee      	bne.n	80102d0 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80102f2:	7dfb      	ldrb	r3, [r7, #23]
 80102f4:	2b01      	cmp	r3, #1
 80102f6:	d105      	bne.n	8010304 <HAL_RCC_OscConfig+0x3d0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80102f8:	4b3b      	ldr	r3, [pc, #236]	; (80103e8 <HAL_RCC_OscConfig+0x4b4>)
 80102fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80102fc:	4a3a      	ldr	r2, [pc, #232]	; (80103e8 <HAL_RCC_OscConfig+0x4b4>)
 80102fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010302:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	699b      	ldr	r3, [r3, #24]
 8010308:	2b00      	cmp	r3, #0
 801030a:	f000 80ad 	beq.w	8010468 <HAL_RCC_OscConfig+0x534>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801030e:	4b36      	ldr	r3, [pc, #216]	; (80103e8 <HAL_RCC_OscConfig+0x4b4>)
 8010310:	689b      	ldr	r3, [r3, #8]
 8010312:	f003 030c 	and.w	r3, r3, #12
 8010316:	2b08      	cmp	r3, #8
 8010318:	d060      	beq.n	80103dc <HAL_RCC_OscConfig+0x4a8>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	699b      	ldr	r3, [r3, #24]
 801031e:	2b02      	cmp	r3, #2
 8010320:	d145      	bne.n	80103ae <HAL_RCC_OscConfig+0x47a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010322:	4b33      	ldr	r3, [pc, #204]	; (80103f0 <HAL_RCC_OscConfig+0x4bc>)
 8010324:	2200      	movs	r2, #0
 8010326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010328:	f7fa f9e4 	bl	800a6f4 <HAL_GetTick>
 801032c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801032e:	e008      	b.n	8010342 <HAL_RCC_OscConfig+0x40e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010330:	f7fa f9e0 	bl	800a6f4 <HAL_GetTick>
 8010334:	4602      	mov	r2, r0
 8010336:	693b      	ldr	r3, [r7, #16]
 8010338:	1ad3      	subs	r3, r2, r3
 801033a:	2b02      	cmp	r3, #2
 801033c:	d901      	bls.n	8010342 <HAL_RCC_OscConfig+0x40e>
          {
            return HAL_TIMEOUT;
 801033e:	2303      	movs	r3, #3
 8010340:	e093      	b.n	801046a <HAL_RCC_OscConfig+0x536>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010342:	4b29      	ldr	r3, [pc, #164]	; (80103e8 <HAL_RCC_OscConfig+0x4b4>)
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801034a:	2b00      	cmp	r3, #0
 801034c:	d1f0      	bne.n	8010330 <HAL_RCC_OscConfig+0x3fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	69da      	ldr	r2, [r3, #28]
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	6a1b      	ldr	r3, [r3, #32]
 8010356:	431a      	orrs	r2, r3
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801035c:	019b      	lsls	r3, r3, #6
 801035e:	431a      	orrs	r2, r3
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010364:	085b      	lsrs	r3, r3, #1
 8010366:	3b01      	subs	r3, #1
 8010368:	041b      	lsls	r3, r3, #16
 801036a:	431a      	orrs	r2, r3
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010370:	061b      	lsls	r3, r3, #24
 8010372:	431a      	orrs	r2, r3
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010378:	071b      	lsls	r3, r3, #28
 801037a:	491b      	ldr	r1, [pc, #108]	; (80103e8 <HAL_RCC_OscConfig+0x4b4>)
 801037c:	4313      	orrs	r3, r2
 801037e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8010380:	4b1b      	ldr	r3, [pc, #108]	; (80103f0 <HAL_RCC_OscConfig+0x4bc>)
 8010382:	2201      	movs	r2, #1
 8010384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010386:	f7fa f9b5 	bl	800a6f4 <HAL_GetTick>
 801038a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801038c:	e008      	b.n	80103a0 <HAL_RCC_OscConfig+0x46c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801038e:	f7fa f9b1 	bl	800a6f4 <HAL_GetTick>
 8010392:	4602      	mov	r2, r0
 8010394:	693b      	ldr	r3, [r7, #16]
 8010396:	1ad3      	subs	r3, r2, r3
 8010398:	2b02      	cmp	r3, #2
 801039a:	d901      	bls.n	80103a0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 801039c:	2303      	movs	r3, #3
 801039e:	e064      	b.n	801046a <HAL_RCC_OscConfig+0x536>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80103a0:	4b11      	ldr	r3, [pc, #68]	; (80103e8 <HAL_RCC_OscConfig+0x4b4>)
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d0f0      	beq.n	801038e <HAL_RCC_OscConfig+0x45a>
 80103ac:	e05c      	b.n	8010468 <HAL_RCC_OscConfig+0x534>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80103ae:	4b10      	ldr	r3, [pc, #64]	; (80103f0 <HAL_RCC_OscConfig+0x4bc>)
 80103b0:	2200      	movs	r2, #0
 80103b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80103b4:	f7fa f99e 	bl	800a6f4 <HAL_GetTick>
 80103b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80103ba:	e008      	b.n	80103ce <HAL_RCC_OscConfig+0x49a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80103bc:	f7fa f99a 	bl	800a6f4 <HAL_GetTick>
 80103c0:	4602      	mov	r2, r0
 80103c2:	693b      	ldr	r3, [r7, #16]
 80103c4:	1ad3      	subs	r3, r2, r3
 80103c6:	2b02      	cmp	r3, #2
 80103c8:	d901      	bls.n	80103ce <HAL_RCC_OscConfig+0x49a>
          {
            return HAL_TIMEOUT;
 80103ca:	2303      	movs	r3, #3
 80103cc:	e04d      	b.n	801046a <HAL_RCC_OscConfig+0x536>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80103ce:	4b06      	ldr	r3, [pc, #24]	; (80103e8 <HAL_RCC_OscConfig+0x4b4>)
 80103d0:	681b      	ldr	r3, [r3, #0]
 80103d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d1f0      	bne.n	80103bc <HAL_RCC_OscConfig+0x488>
 80103da:	e045      	b.n	8010468 <HAL_RCC_OscConfig+0x534>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	699b      	ldr	r3, [r3, #24]
 80103e0:	2b01      	cmp	r3, #1
 80103e2:	d107      	bne.n	80103f4 <HAL_RCC_OscConfig+0x4c0>
      {
        return HAL_ERROR;
 80103e4:	2301      	movs	r3, #1
 80103e6:	e040      	b.n	801046a <HAL_RCC_OscConfig+0x536>
 80103e8:	40023800 	.word	0x40023800
 80103ec:	40007000 	.word	0x40007000
 80103f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80103f4:	4b1f      	ldr	r3, [pc, #124]	; (8010474 <HAL_RCC_OscConfig+0x540>)
 80103f6:	685b      	ldr	r3, [r3, #4]
 80103f8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	699b      	ldr	r3, [r3, #24]
 80103fe:	2b01      	cmp	r3, #1
 8010400:	d030      	beq.n	8010464 <HAL_RCC_OscConfig+0x530>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801040c:	429a      	cmp	r2, r3
 801040e:	d129      	bne.n	8010464 <HAL_RCC_OscConfig+0x530>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8010410:	68fb      	ldr	r3, [r7, #12]
 8010412:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801041a:	429a      	cmp	r2, r3
 801041c:	d122      	bne.n	8010464 <HAL_RCC_OscConfig+0x530>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801041e:	68fa      	ldr	r2, [r7, #12]
 8010420:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8010424:	4013      	ands	r3, r2
 8010426:	687a      	ldr	r2, [r7, #4]
 8010428:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801042a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801042c:	4293      	cmp	r3, r2
 801042e:	d119      	bne.n	8010464 <HAL_RCC_OscConfig+0x530>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801043a:	085b      	lsrs	r3, r3, #1
 801043c:	3b01      	subs	r3, #1
 801043e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8010440:	429a      	cmp	r2, r3
 8010442:	d10f      	bne.n	8010464 <HAL_RCC_OscConfig+0x530>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801044e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8010450:	429a      	cmp	r2, r3
 8010452:	d107      	bne.n	8010464 <HAL_RCC_OscConfig+0x530>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801045e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8010460:	429a      	cmp	r2, r3
 8010462:	d001      	beq.n	8010468 <HAL_RCC_OscConfig+0x534>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8010464:	2301      	movs	r3, #1
 8010466:	e000      	b.n	801046a <HAL_RCC_OscConfig+0x536>
        }
      }
    }
  }
  return HAL_OK;
 8010468:	2300      	movs	r3, #0
}
 801046a:	4618      	mov	r0, r3
 801046c:	3718      	adds	r7, #24
 801046e:	46bd      	mov	sp, r7
 8010470:	bd80      	pop	{r7, pc}
 8010472:	bf00      	nop
 8010474:	40023800 	.word	0x40023800

08010478 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8010478:	b580      	push	{r7, lr}
 801047a:	b082      	sub	sp, #8
 801047c:	af00      	add	r7, sp, #0
 801047e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	2b00      	cmp	r3, #0
 8010484:	d101      	bne.n	801048a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8010486:	2301      	movs	r3, #1
 8010488:	e07b      	b.n	8010582 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801048e:	2b00      	cmp	r3, #0
 8010490:	d108      	bne.n	80104a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	685b      	ldr	r3, [r3, #4]
 8010496:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801049a:	d009      	beq.n	80104b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	2200      	movs	r2, #0
 80104a0:	61da      	str	r2, [r3, #28]
 80104a2:	e005      	b.n	80104b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	2200      	movs	r2, #0
 80104a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	2200      	movs	r2, #0
 80104ae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	2200      	movs	r2, #0
 80104b4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80104bc:	b2db      	uxtb	r3, r3
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d106      	bne.n	80104d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	2200      	movs	r2, #0
 80104c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80104ca:	6878      	ldr	r0, [r7, #4]
 80104cc:	f7f9 fea6 	bl	800a21c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	2202      	movs	r2, #2
 80104d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	681a      	ldr	r2, [r3, #0]
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80104e6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	685b      	ldr	r3, [r3, #4]
 80104ec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	689b      	ldr	r3, [r3, #8]
 80104f4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80104f8:	431a      	orrs	r2, r3
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	68db      	ldr	r3, [r3, #12]
 80104fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010502:	431a      	orrs	r2, r3
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	691b      	ldr	r3, [r3, #16]
 8010508:	f003 0302 	and.w	r3, r3, #2
 801050c:	431a      	orrs	r2, r3
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	695b      	ldr	r3, [r3, #20]
 8010512:	f003 0301 	and.w	r3, r3, #1
 8010516:	431a      	orrs	r2, r3
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	699b      	ldr	r3, [r3, #24]
 801051c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010520:	431a      	orrs	r2, r3
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	69db      	ldr	r3, [r3, #28]
 8010526:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801052a:	431a      	orrs	r2, r3
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	6a1b      	ldr	r3, [r3, #32]
 8010530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010534:	ea42 0103 	orr.w	r1, r2, r3
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801053c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	430a      	orrs	r2, r1
 8010546:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	699b      	ldr	r3, [r3, #24]
 801054c:	0c1b      	lsrs	r3, r3, #16
 801054e:	f003 0104 	and.w	r1, r3, #4
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010556:	f003 0210 	and.w	r2, r3, #16
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	681b      	ldr	r3, [r3, #0]
 801055e:	430a      	orrs	r2, r1
 8010560:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	69da      	ldr	r2, [r3, #28]
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010570:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	2200      	movs	r2, #0
 8010576:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	2201      	movs	r2, #1
 801057c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8010580:	2300      	movs	r3, #0
}
 8010582:	4618      	mov	r0, r3
 8010584:	3708      	adds	r7, #8
 8010586:	46bd      	mov	sp, r7
 8010588:	bd80      	pop	{r7, pc}

0801058a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801058a:	b580      	push	{r7, lr}
 801058c:	b088      	sub	sp, #32
 801058e:	af00      	add	r7, sp, #0
 8010590:	60f8      	str	r0, [r7, #12]
 8010592:	60b9      	str	r1, [r7, #8]
 8010594:	603b      	str	r3, [r7, #0]
 8010596:	4613      	mov	r3, r2
 8010598:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801059a:	2300      	movs	r3, #0
 801059c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80105a4:	2b01      	cmp	r3, #1
 80105a6:	d101      	bne.n	80105ac <HAL_SPI_Transmit+0x22>
 80105a8:	2302      	movs	r3, #2
 80105aa:	e126      	b.n	80107fa <HAL_SPI_Transmit+0x270>
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	2201      	movs	r2, #1
 80105b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80105b4:	f7fa f89e 	bl	800a6f4 <HAL_GetTick>
 80105b8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80105ba:	88fb      	ldrh	r3, [r7, #6]
 80105bc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80105c4:	b2db      	uxtb	r3, r3
 80105c6:	2b01      	cmp	r3, #1
 80105c8:	d002      	beq.n	80105d0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80105ca:	2302      	movs	r3, #2
 80105cc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80105ce:	e10b      	b.n	80107e8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80105d0:	68bb      	ldr	r3, [r7, #8]
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d002      	beq.n	80105dc <HAL_SPI_Transmit+0x52>
 80105d6:	88fb      	ldrh	r3, [r7, #6]
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d102      	bne.n	80105e2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80105dc:	2301      	movs	r3, #1
 80105de:	77fb      	strb	r3, [r7, #31]
    goto error;
 80105e0:	e102      	b.n	80107e8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	2203      	movs	r2, #3
 80105e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	2200      	movs	r2, #0
 80105ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	68ba      	ldr	r2, [r7, #8]
 80105f4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	88fa      	ldrh	r2, [r7, #6]
 80105fa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	88fa      	ldrh	r2, [r7, #6]
 8010600:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	2200      	movs	r2, #0
 8010606:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	2200      	movs	r2, #0
 801060c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	2200      	movs	r2, #0
 8010612:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	2200      	movs	r2, #0
 8010618:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	2200      	movs	r2, #0
 801061e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	689b      	ldr	r3, [r3, #8]
 8010624:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010628:	d10f      	bne.n	801064a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	681a      	ldr	r2, [r3, #0]
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010638:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 801063a:	68fb      	ldr	r3, [r7, #12]
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	681a      	ldr	r2, [r3, #0]
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8010648:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010654:	2b40      	cmp	r3, #64	; 0x40
 8010656:	d007      	beq.n	8010668 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8010658:	68fb      	ldr	r3, [r7, #12]
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	681a      	ldr	r2, [r3, #0]
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010666:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	68db      	ldr	r3, [r3, #12]
 801066c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010670:	d14b      	bne.n	801070a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	685b      	ldr	r3, [r3, #4]
 8010676:	2b00      	cmp	r3, #0
 8010678:	d002      	beq.n	8010680 <HAL_SPI_Transmit+0xf6>
 801067a:	8afb      	ldrh	r3, [r7, #22]
 801067c:	2b01      	cmp	r3, #1
 801067e:	d13e      	bne.n	80106fe <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010684:	881a      	ldrh	r2, [r3, #0]
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010690:	1c9a      	adds	r2, r3, #2
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8010696:	68fb      	ldr	r3, [r7, #12]
 8010698:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801069a:	b29b      	uxth	r3, r3
 801069c:	3b01      	subs	r3, #1
 801069e:	b29a      	uxth	r2, r3
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80106a4:	e02b      	b.n	80106fe <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	689b      	ldr	r3, [r3, #8]
 80106ac:	f003 0302 	and.w	r3, r3, #2
 80106b0:	2b02      	cmp	r3, #2
 80106b2:	d112      	bne.n	80106da <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106b8:	881a      	ldrh	r2, [r3, #0]
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	681b      	ldr	r3, [r3, #0]
 80106be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80106c0:	68fb      	ldr	r3, [r7, #12]
 80106c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106c4:	1c9a      	adds	r2, r3, #2
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80106ce:	b29b      	uxth	r3, r3
 80106d0:	3b01      	subs	r3, #1
 80106d2:	b29a      	uxth	r2, r3
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	86da      	strh	r2, [r3, #54]	; 0x36
 80106d8:	e011      	b.n	80106fe <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80106da:	f7fa f80b 	bl	800a6f4 <HAL_GetTick>
 80106de:	4602      	mov	r2, r0
 80106e0:	69bb      	ldr	r3, [r7, #24]
 80106e2:	1ad3      	subs	r3, r2, r3
 80106e4:	683a      	ldr	r2, [r7, #0]
 80106e6:	429a      	cmp	r2, r3
 80106e8:	d803      	bhi.n	80106f2 <HAL_SPI_Transmit+0x168>
 80106ea:	683b      	ldr	r3, [r7, #0]
 80106ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106f0:	d102      	bne.n	80106f8 <HAL_SPI_Transmit+0x16e>
 80106f2:	683b      	ldr	r3, [r7, #0]
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d102      	bne.n	80106fe <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80106f8:	2303      	movs	r3, #3
 80106fa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80106fc:	e074      	b.n	80107e8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010702:	b29b      	uxth	r3, r3
 8010704:	2b00      	cmp	r3, #0
 8010706:	d1ce      	bne.n	80106a6 <HAL_SPI_Transmit+0x11c>
 8010708:	e04c      	b.n	80107a4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	685b      	ldr	r3, [r3, #4]
 801070e:	2b00      	cmp	r3, #0
 8010710:	d002      	beq.n	8010718 <HAL_SPI_Transmit+0x18e>
 8010712:	8afb      	ldrh	r3, [r7, #22]
 8010714:	2b01      	cmp	r3, #1
 8010716:	d140      	bne.n	801079a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	330c      	adds	r3, #12
 8010722:	7812      	ldrb	r2, [r2, #0]
 8010724:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8010726:	68fb      	ldr	r3, [r7, #12]
 8010728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801072a:	1c5a      	adds	r2, r3, #1
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010734:	b29b      	uxth	r3, r3
 8010736:	3b01      	subs	r3, #1
 8010738:	b29a      	uxth	r2, r3
 801073a:	68fb      	ldr	r3, [r7, #12]
 801073c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 801073e:	e02c      	b.n	801079a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	689b      	ldr	r3, [r3, #8]
 8010746:	f003 0302 	and.w	r3, r3, #2
 801074a:	2b02      	cmp	r3, #2
 801074c:	d113      	bne.n	8010776 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	330c      	adds	r3, #12
 8010758:	7812      	ldrb	r2, [r2, #0]
 801075a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010760:	1c5a      	adds	r2, r3, #1
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801076a:	b29b      	uxth	r3, r3
 801076c:	3b01      	subs	r3, #1
 801076e:	b29a      	uxth	r2, r3
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	86da      	strh	r2, [r3, #54]	; 0x36
 8010774:	e011      	b.n	801079a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010776:	f7f9 ffbd 	bl	800a6f4 <HAL_GetTick>
 801077a:	4602      	mov	r2, r0
 801077c:	69bb      	ldr	r3, [r7, #24]
 801077e:	1ad3      	subs	r3, r2, r3
 8010780:	683a      	ldr	r2, [r7, #0]
 8010782:	429a      	cmp	r2, r3
 8010784:	d803      	bhi.n	801078e <HAL_SPI_Transmit+0x204>
 8010786:	683b      	ldr	r3, [r7, #0]
 8010788:	f1b3 3fff 	cmp.w	r3, #4294967295
 801078c:	d102      	bne.n	8010794 <HAL_SPI_Transmit+0x20a>
 801078e:	683b      	ldr	r3, [r7, #0]
 8010790:	2b00      	cmp	r3, #0
 8010792:	d102      	bne.n	801079a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8010794:	2303      	movs	r3, #3
 8010796:	77fb      	strb	r3, [r7, #31]
          goto error;
 8010798:	e026      	b.n	80107e8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801079e:	b29b      	uxth	r3, r3
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d1cd      	bne.n	8010740 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80107a4:	69ba      	ldr	r2, [r7, #24]
 80107a6:	6839      	ldr	r1, [r7, #0]
 80107a8:	68f8      	ldr	r0, [r7, #12]
 80107aa:	f000 fbcb 	bl	8010f44 <SPI_EndRxTxTransaction>
 80107ae:	4603      	mov	r3, r0
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d002      	beq.n	80107ba <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	2220      	movs	r2, #32
 80107b8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	689b      	ldr	r3, [r3, #8]
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d10a      	bne.n	80107d8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80107c2:	2300      	movs	r3, #0
 80107c4:	613b      	str	r3, [r7, #16]
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	68db      	ldr	r3, [r3, #12]
 80107cc:	613b      	str	r3, [r7, #16]
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	681b      	ldr	r3, [r3, #0]
 80107d2:	689b      	ldr	r3, [r3, #8]
 80107d4:	613b      	str	r3, [r7, #16]
 80107d6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d002      	beq.n	80107e6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80107e0:	2301      	movs	r3, #1
 80107e2:	77fb      	strb	r3, [r7, #31]
 80107e4:	e000      	b.n	80107e8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80107e6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	2201      	movs	r2, #1
 80107ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	2200      	movs	r2, #0
 80107f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80107f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80107fa:	4618      	mov	r0, r3
 80107fc:	3720      	adds	r7, #32
 80107fe:	46bd      	mov	sp, r7
 8010800:	bd80      	pop	{r7, pc}

08010802 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010802:	b580      	push	{r7, lr}
 8010804:	b088      	sub	sp, #32
 8010806:	af02      	add	r7, sp, #8
 8010808:	60f8      	str	r0, [r7, #12]
 801080a:	60b9      	str	r1, [r7, #8]
 801080c:	603b      	str	r3, [r7, #0]
 801080e:	4613      	mov	r3, r2
 8010810:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8010812:	2300      	movs	r3, #0
 8010814:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	685b      	ldr	r3, [r3, #4]
 801081a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801081e:	d112      	bne.n	8010846 <HAL_SPI_Receive+0x44>
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	689b      	ldr	r3, [r3, #8]
 8010824:	2b00      	cmp	r3, #0
 8010826:	d10e      	bne.n	8010846 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	2204      	movs	r2, #4
 801082c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8010830:	88fa      	ldrh	r2, [r7, #6]
 8010832:	683b      	ldr	r3, [r7, #0]
 8010834:	9300      	str	r3, [sp, #0]
 8010836:	4613      	mov	r3, r2
 8010838:	68ba      	ldr	r2, [r7, #8]
 801083a:	68b9      	ldr	r1, [r7, #8]
 801083c:	68f8      	ldr	r0, [r7, #12]
 801083e:	f000 f8f1 	bl	8010a24 <HAL_SPI_TransmitReceive>
 8010842:	4603      	mov	r3, r0
 8010844:	e0ea      	b.n	8010a1c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801084c:	2b01      	cmp	r3, #1
 801084e:	d101      	bne.n	8010854 <HAL_SPI_Receive+0x52>
 8010850:	2302      	movs	r3, #2
 8010852:	e0e3      	b.n	8010a1c <HAL_SPI_Receive+0x21a>
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	2201      	movs	r2, #1
 8010858:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801085c:	f7f9 ff4a 	bl	800a6f4 <HAL_GetTick>
 8010860:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010868:	b2db      	uxtb	r3, r3
 801086a:	2b01      	cmp	r3, #1
 801086c:	d002      	beq.n	8010874 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 801086e:	2302      	movs	r3, #2
 8010870:	75fb      	strb	r3, [r7, #23]
    goto error;
 8010872:	e0ca      	b.n	8010a0a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8010874:	68bb      	ldr	r3, [r7, #8]
 8010876:	2b00      	cmp	r3, #0
 8010878:	d002      	beq.n	8010880 <HAL_SPI_Receive+0x7e>
 801087a:	88fb      	ldrh	r3, [r7, #6]
 801087c:	2b00      	cmp	r3, #0
 801087e:	d102      	bne.n	8010886 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8010880:	2301      	movs	r3, #1
 8010882:	75fb      	strb	r3, [r7, #23]
    goto error;
 8010884:	e0c1      	b.n	8010a0a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	2204      	movs	r2, #4
 801088a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801088e:	68fb      	ldr	r3, [r7, #12]
 8010890:	2200      	movs	r2, #0
 8010892:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	68ba      	ldr	r2, [r7, #8]
 8010898:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	88fa      	ldrh	r2, [r7, #6]
 801089e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80108a0:	68fb      	ldr	r3, [r7, #12]
 80108a2:	88fa      	ldrh	r2, [r7, #6]
 80108a4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	2200      	movs	r2, #0
 80108aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	2200      	movs	r2, #0
 80108b0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	2200      	movs	r2, #0
 80108b6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	2200      	movs	r2, #0
 80108bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	2200      	movs	r2, #0
 80108c2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	689b      	ldr	r3, [r3, #8]
 80108c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80108cc:	d10f      	bne.n	80108ee <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	681a      	ldr	r2, [r3, #0]
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80108dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	681a      	ldr	r2, [r3, #0]
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80108ec:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80108f8:	2b40      	cmp	r3, #64	; 0x40
 80108fa:	d007      	beq.n	801090c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	681a      	ldr	r2, [r3, #0]
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801090a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 801090c:	68fb      	ldr	r3, [r7, #12]
 801090e:	68db      	ldr	r3, [r3, #12]
 8010910:	2b00      	cmp	r3, #0
 8010912:	d162      	bne.n	80109da <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8010914:	e02e      	b.n	8010974 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	689b      	ldr	r3, [r3, #8]
 801091c:	f003 0301 	and.w	r3, r3, #1
 8010920:	2b01      	cmp	r3, #1
 8010922:	d115      	bne.n	8010950 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8010924:	68fb      	ldr	r3, [r7, #12]
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	f103 020c 	add.w	r2, r3, #12
 801092c:	68fb      	ldr	r3, [r7, #12]
 801092e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010930:	7812      	ldrb	r2, [r2, #0]
 8010932:	b2d2      	uxtb	r2, r2
 8010934:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801093a:	1c5a      	adds	r2, r3, #1
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010944:	b29b      	uxth	r3, r3
 8010946:	3b01      	subs	r3, #1
 8010948:	b29a      	uxth	r2, r3
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	87da      	strh	r2, [r3, #62]	; 0x3e
 801094e:	e011      	b.n	8010974 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010950:	f7f9 fed0 	bl	800a6f4 <HAL_GetTick>
 8010954:	4602      	mov	r2, r0
 8010956:	693b      	ldr	r3, [r7, #16]
 8010958:	1ad3      	subs	r3, r2, r3
 801095a:	683a      	ldr	r2, [r7, #0]
 801095c:	429a      	cmp	r2, r3
 801095e:	d803      	bhi.n	8010968 <HAL_SPI_Receive+0x166>
 8010960:	683b      	ldr	r3, [r7, #0]
 8010962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010966:	d102      	bne.n	801096e <HAL_SPI_Receive+0x16c>
 8010968:	683b      	ldr	r3, [r7, #0]
 801096a:	2b00      	cmp	r3, #0
 801096c:	d102      	bne.n	8010974 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 801096e:	2303      	movs	r3, #3
 8010970:	75fb      	strb	r3, [r7, #23]
          goto error;
 8010972:	e04a      	b.n	8010a0a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010978:	b29b      	uxth	r3, r3
 801097a:	2b00      	cmp	r3, #0
 801097c:	d1cb      	bne.n	8010916 <HAL_SPI_Receive+0x114>
 801097e:	e031      	b.n	80109e4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	689b      	ldr	r3, [r3, #8]
 8010986:	f003 0301 	and.w	r3, r3, #1
 801098a:	2b01      	cmp	r3, #1
 801098c:	d113      	bne.n	80109b6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	681b      	ldr	r3, [r3, #0]
 8010992:	68da      	ldr	r2, [r3, #12]
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010998:	b292      	uxth	r2, r2
 801099a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80109a0:	1c9a      	adds	r2, r3, #2
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80109aa:	b29b      	uxth	r3, r3
 80109ac:	3b01      	subs	r3, #1
 80109ae:	b29a      	uxth	r2, r3
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80109b4:	e011      	b.n	80109da <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80109b6:	f7f9 fe9d 	bl	800a6f4 <HAL_GetTick>
 80109ba:	4602      	mov	r2, r0
 80109bc:	693b      	ldr	r3, [r7, #16]
 80109be:	1ad3      	subs	r3, r2, r3
 80109c0:	683a      	ldr	r2, [r7, #0]
 80109c2:	429a      	cmp	r2, r3
 80109c4:	d803      	bhi.n	80109ce <HAL_SPI_Receive+0x1cc>
 80109c6:	683b      	ldr	r3, [r7, #0]
 80109c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109cc:	d102      	bne.n	80109d4 <HAL_SPI_Receive+0x1d2>
 80109ce:	683b      	ldr	r3, [r7, #0]
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d102      	bne.n	80109da <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80109d4:	2303      	movs	r3, #3
 80109d6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80109d8:	e017      	b.n	8010a0a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80109de:	b29b      	uxth	r3, r3
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d1cd      	bne.n	8010980 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80109e4:	693a      	ldr	r2, [r7, #16]
 80109e6:	6839      	ldr	r1, [r7, #0]
 80109e8:	68f8      	ldr	r0, [r7, #12]
 80109ea:	f000 fa45 	bl	8010e78 <SPI_EndRxTransaction>
 80109ee:	4603      	mov	r3, r0
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d002      	beq.n	80109fa <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	2220      	movs	r2, #32
 80109f8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d002      	beq.n	8010a08 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8010a02:	2301      	movs	r3, #1
 8010a04:	75fb      	strb	r3, [r7, #23]
 8010a06:	e000      	b.n	8010a0a <HAL_SPI_Receive+0x208>
  }

error :
 8010a08:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8010a0a:	68fb      	ldr	r3, [r7, #12]
 8010a0c:	2201      	movs	r2, #1
 8010a0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	2200      	movs	r2, #0
 8010a16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8010a1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a1c:	4618      	mov	r0, r3
 8010a1e:	3718      	adds	r7, #24
 8010a20:	46bd      	mov	sp, r7
 8010a22:	bd80      	pop	{r7, pc}

08010a24 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8010a24:	b580      	push	{r7, lr}
 8010a26:	b08c      	sub	sp, #48	; 0x30
 8010a28:	af00      	add	r7, sp, #0
 8010a2a:	60f8      	str	r0, [r7, #12]
 8010a2c:	60b9      	str	r1, [r7, #8]
 8010a2e:	607a      	str	r2, [r7, #4]
 8010a30:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8010a32:	2301      	movs	r3, #1
 8010a34:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8010a36:	2300      	movs	r3, #0
 8010a38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8010a42:	2b01      	cmp	r3, #1
 8010a44:	d101      	bne.n	8010a4a <HAL_SPI_TransmitReceive+0x26>
 8010a46:	2302      	movs	r3, #2
 8010a48:	e18a      	b.n	8010d60 <HAL_SPI_TransmitReceive+0x33c>
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	2201      	movs	r2, #1
 8010a4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010a52:	f7f9 fe4f 	bl	800a6f4 <HAL_GetTick>
 8010a56:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8010a58:	68fb      	ldr	r3, [r7, #12]
 8010a5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010a5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	685b      	ldr	r3, [r3, #4]
 8010a66:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8010a68:	887b      	ldrh	r3, [r7, #2]
 8010a6a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8010a6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010a70:	2b01      	cmp	r3, #1
 8010a72:	d00f      	beq.n	8010a94 <HAL_SPI_TransmitReceive+0x70>
 8010a74:	69fb      	ldr	r3, [r7, #28]
 8010a76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010a7a:	d107      	bne.n	8010a8c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8010a7c:	68fb      	ldr	r3, [r7, #12]
 8010a7e:	689b      	ldr	r3, [r3, #8]
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d103      	bne.n	8010a8c <HAL_SPI_TransmitReceive+0x68>
 8010a84:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010a88:	2b04      	cmp	r3, #4
 8010a8a:	d003      	beq.n	8010a94 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8010a8c:	2302      	movs	r3, #2
 8010a8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8010a92:	e15b      	b.n	8010d4c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8010a94:	68bb      	ldr	r3, [r7, #8]
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d005      	beq.n	8010aa6 <HAL_SPI_TransmitReceive+0x82>
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d002      	beq.n	8010aa6 <HAL_SPI_TransmitReceive+0x82>
 8010aa0:	887b      	ldrh	r3, [r7, #2]
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d103      	bne.n	8010aae <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8010aa6:	2301      	movs	r3, #1
 8010aa8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8010aac:	e14e      	b.n	8010d4c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8010aae:	68fb      	ldr	r3, [r7, #12]
 8010ab0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010ab4:	b2db      	uxtb	r3, r3
 8010ab6:	2b04      	cmp	r3, #4
 8010ab8:	d003      	beq.n	8010ac2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	2205      	movs	r2, #5
 8010abe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	2200      	movs	r2, #0
 8010ac6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	687a      	ldr	r2, [r7, #4]
 8010acc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8010ace:	68fb      	ldr	r3, [r7, #12]
 8010ad0:	887a      	ldrh	r2, [r7, #2]
 8010ad2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8010ad4:	68fb      	ldr	r3, [r7, #12]
 8010ad6:	887a      	ldrh	r2, [r7, #2]
 8010ad8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	68ba      	ldr	r2, [r7, #8]
 8010ade:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	887a      	ldrh	r2, [r7, #2]
 8010ae4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	887a      	ldrh	r2, [r7, #2]
 8010aea:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	2200      	movs	r2, #0
 8010af0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	2200      	movs	r2, #0
 8010af6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b02:	2b40      	cmp	r3, #64	; 0x40
 8010b04:	d007      	beq.n	8010b16 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	681a      	ldr	r2, [r3, #0]
 8010b0c:	68fb      	ldr	r3, [r7, #12]
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010b14:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8010b16:	68fb      	ldr	r3, [r7, #12]
 8010b18:	68db      	ldr	r3, [r3, #12]
 8010b1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010b1e:	d178      	bne.n	8010c12 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010b20:	68fb      	ldr	r3, [r7, #12]
 8010b22:	685b      	ldr	r3, [r3, #4]
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d002      	beq.n	8010b2e <HAL_SPI_TransmitReceive+0x10a>
 8010b28:	8b7b      	ldrh	r3, [r7, #26]
 8010b2a:	2b01      	cmp	r3, #1
 8010b2c:	d166      	bne.n	8010bfc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010b2e:	68fb      	ldr	r3, [r7, #12]
 8010b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b32:	881a      	ldrh	r2, [r3, #0]
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8010b3a:	68fb      	ldr	r3, [r7, #12]
 8010b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b3e:	1c9a      	adds	r2, r3, #2
 8010b40:	68fb      	ldr	r3, [r7, #12]
 8010b42:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010b48:	b29b      	uxth	r3, r3
 8010b4a:	3b01      	subs	r3, #1
 8010b4c:	b29a      	uxth	r2, r3
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010b52:	e053      	b.n	8010bfc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8010b54:	68fb      	ldr	r3, [r7, #12]
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	689b      	ldr	r3, [r3, #8]
 8010b5a:	f003 0302 	and.w	r3, r3, #2
 8010b5e:	2b02      	cmp	r3, #2
 8010b60:	d11b      	bne.n	8010b9a <HAL_SPI_TransmitReceive+0x176>
 8010b62:	68fb      	ldr	r3, [r7, #12]
 8010b64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010b66:	b29b      	uxth	r3, r3
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d016      	beq.n	8010b9a <HAL_SPI_TransmitReceive+0x176>
 8010b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b6e:	2b01      	cmp	r3, #1
 8010b70:	d113      	bne.n	8010b9a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b76:	881a      	ldrh	r2, [r3, #0]
 8010b78:	68fb      	ldr	r3, [r7, #12]
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8010b7e:	68fb      	ldr	r3, [r7, #12]
 8010b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b82:	1c9a      	adds	r2, r3, #2
 8010b84:	68fb      	ldr	r3, [r7, #12]
 8010b86:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010b8c:	b29b      	uxth	r3, r3
 8010b8e:	3b01      	subs	r3, #1
 8010b90:	b29a      	uxth	r2, r3
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8010b96:	2300      	movs	r3, #0
 8010b98:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	681b      	ldr	r3, [r3, #0]
 8010b9e:	689b      	ldr	r3, [r3, #8]
 8010ba0:	f003 0301 	and.w	r3, r3, #1
 8010ba4:	2b01      	cmp	r3, #1
 8010ba6:	d119      	bne.n	8010bdc <HAL_SPI_TransmitReceive+0x1b8>
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010bac:	b29b      	uxth	r3, r3
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d014      	beq.n	8010bdc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8010bb2:	68fb      	ldr	r3, [r7, #12]
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	68da      	ldr	r2, [r3, #12]
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010bbc:	b292      	uxth	r2, r2
 8010bbe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8010bc0:	68fb      	ldr	r3, [r7, #12]
 8010bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010bc4:	1c9a      	adds	r2, r3, #2
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8010bca:	68fb      	ldr	r3, [r7, #12]
 8010bcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010bce:	b29b      	uxth	r3, r3
 8010bd0:	3b01      	subs	r3, #1
 8010bd2:	b29a      	uxth	r2, r3
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8010bd8:	2301      	movs	r3, #1
 8010bda:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8010bdc:	f7f9 fd8a 	bl	800a6f4 <HAL_GetTick>
 8010be0:	4602      	mov	r2, r0
 8010be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010be4:	1ad3      	subs	r3, r2, r3
 8010be6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010be8:	429a      	cmp	r2, r3
 8010bea:	d807      	bhi.n	8010bfc <HAL_SPI_TransmitReceive+0x1d8>
 8010bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bf2:	d003      	beq.n	8010bfc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8010bf4:	2303      	movs	r3, #3
 8010bf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8010bfa:	e0a7      	b.n	8010d4c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010c00:	b29b      	uxth	r3, r3
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d1a6      	bne.n	8010b54 <HAL_SPI_TransmitReceive+0x130>
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010c0a:	b29b      	uxth	r3, r3
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d1a1      	bne.n	8010b54 <HAL_SPI_TransmitReceive+0x130>
 8010c10:	e07c      	b.n	8010d0c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010c12:	68fb      	ldr	r3, [r7, #12]
 8010c14:	685b      	ldr	r3, [r3, #4]
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d002      	beq.n	8010c20 <HAL_SPI_TransmitReceive+0x1fc>
 8010c1a:	8b7b      	ldrh	r3, [r7, #26]
 8010c1c:	2b01      	cmp	r3, #1
 8010c1e:	d16b      	bne.n	8010cf8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010c24:	68fb      	ldr	r3, [r7, #12]
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	330c      	adds	r3, #12
 8010c2a:	7812      	ldrb	r2, [r2, #0]
 8010c2c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8010c2e:	68fb      	ldr	r3, [r7, #12]
 8010c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c32:	1c5a      	adds	r2, r3, #1
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8010c38:	68fb      	ldr	r3, [r7, #12]
 8010c3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010c3c:	b29b      	uxth	r3, r3
 8010c3e:	3b01      	subs	r3, #1
 8010c40:	b29a      	uxth	r2, r3
 8010c42:	68fb      	ldr	r3, [r7, #12]
 8010c44:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010c46:	e057      	b.n	8010cf8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	689b      	ldr	r3, [r3, #8]
 8010c4e:	f003 0302 	and.w	r3, r3, #2
 8010c52:	2b02      	cmp	r3, #2
 8010c54:	d11c      	bne.n	8010c90 <HAL_SPI_TransmitReceive+0x26c>
 8010c56:	68fb      	ldr	r3, [r7, #12]
 8010c58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010c5a:	b29b      	uxth	r3, r3
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d017      	beq.n	8010c90 <HAL_SPI_TransmitReceive+0x26c>
 8010c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c62:	2b01      	cmp	r3, #1
 8010c64:	d114      	bne.n	8010c90 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	330c      	adds	r3, #12
 8010c70:	7812      	ldrb	r2, [r2, #0]
 8010c72:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c78:	1c5a      	adds	r2, r3, #1
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8010c7e:	68fb      	ldr	r3, [r7, #12]
 8010c80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010c82:	b29b      	uxth	r3, r3
 8010c84:	3b01      	subs	r3, #1
 8010c86:	b29a      	uxth	r2, r3
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8010c8c:	2300      	movs	r3, #0
 8010c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8010c90:	68fb      	ldr	r3, [r7, #12]
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	689b      	ldr	r3, [r3, #8]
 8010c96:	f003 0301 	and.w	r3, r3, #1
 8010c9a:	2b01      	cmp	r3, #1
 8010c9c:	d119      	bne.n	8010cd2 <HAL_SPI_TransmitReceive+0x2ae>
 8010c9e:	68fb      	ldr	r3, [r7, #12]
 8010ca0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010ca2:	b29b      	uxth	r3, r3
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d014      	beq.n	8010cd2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8010ca8:	68fb      	ldr	r3, [r7, #12]
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	68da      	ldr	r2, [r3, #12]
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010cb2:	b2d2      	uxtb	r2, r2
 8010cb4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010cba:	1c5a      	adds	r2, r3, #1
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8010cc0:	68fb      	ldr	r3, [r7, #12]
 8010cc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010cc4:	b29b      	uxth	r3, r3
 8010cc6:	3b01      	subs	r3, #1
 8010cc8:	b29a      	uxth	r2, r3
 8010cca:	68fb      	ldr	r3, [r7, #12]
 8010ccc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8010cce:	2301      	movs	r3, #1
 8010cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8010cd2:	f7f9 fd0f 	bl	800a6f4 <HAL_GetTick>
 8010cd6:	4602      	mov	r2, r0
 8010cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cda:	1ad3      	subs	r3, r2, r3
 8010cdc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010cde:	429a      	cmp	r2, r3
 8010ce0:	d803      	bhi.n	8010cea <HAL_SPI_TransmitReceive+0x2c6>
 8010ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ce8:	d102      	bne.n	8010cf0 <HAL_SPI_TransmitReceive+0x2cc>
 8010cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d103      	bne.n	8010cf8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8010cf0:	2303      	movs	r3, #3
 8010cf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8010cf6:	e029      	b.n	8010d4c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010cfc:	b29b      	uxth	r3, r3
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d1a2      	bne.n	8010c48 <HAL_SPI_TransmitReceive+0x224>
 8010d02:	68fb      	ldr	r3, [r7, #12]
 8010d04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010d06:	b29b      	uxth	r3, r3
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d19d      	bne.n	8010c48 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8010d0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d0e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010d10:	68f8      	ldr	r0, [r7, #12]
 8010d12:	f000 f917 	bl	8010f44 <SPI_EndRxTxTransaction>
 8010d16:	4603      	mov	r3, r0
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d006      	beq.n	8010d2a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8010d1c:	2301      	movs	r3, #1
 8010d1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8010d22:	68fb      	ldr	r3, [r7, #12]
 8010d24:	2220      	movs	r2, #32
 8010d26:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8010d28:	e010      	b.n	8010d4c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8010d2a:	68fb      	ldr	r3, [r7, #12]
 8010d2c:	689b      	ldr	r3, [r3, #8]
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d10b      	bne.n	8010d4a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010d32:	2300      	movs	r3, #0
 8010d34:	617b      	str	r3, [r7, #20]
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	68db      	ldr	r3, [r3, #12]
 8010d3c:	617b      	str	r3, [r7, #20]
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	681b      	ldr	r3, [r3, #0]
 8010d42:	689b      	ldr	r3, [r3, #8]
 8010d44:	617b      	str	r3, [r7, #20]
 8010d46:	697b      	ldr	r3, [r7, #20]
 8010d48:	e000      	b.n	8010d4c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8010d4a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8010d4c:	68fb      	ldr	r3, [r7, #12]
 8010d4e:	2201      	movs	r2, #1
 8010d50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8010d54:	68fb      	ldr	r3, [r7, #12]
 8010d56:	2200      	movs	r2, #0
 8010d58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8010d5c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8010d60:	4618      	mov	r0, r3
 8010d62:	3730      	adds	r7, #48	; 0x30
 8010d64:	46bd      	mov	sp, r7
 8010d66:	bd80      	pop	{r7, pc}

08010d68 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8010d68:	b580      	push	{r7, lr}
 8010d6a:	b088      	sub	sp, #32
 8010d6c:	af00      	add	r7, sp, #0
 8010d6e:	60f8      	str	r0, [r7, #12]
 8010d70:	60b9      	str	r1, [r7, #8]
 8010d72:	603b      	str	r3, [r7, #0]
 8010d74:	4613      	mov	r3, r2
 8010d76:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8010d78:	f7f9 fcbc 	bl	800a6f4 <HAL_GetTick>
 8010d7c:	4602      	mov	r2, r0
 8010d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d80:	1a9b      	subs	r3, r3, r2
 8010d82:	683a      	ldr	r2, [r7, #0]
 8010d84:	4413      	add	r3, r2
 8010d86:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8010d88:	f7f9 fcb4 	bl	800a6f4 <HAL_GetTick>
 8010d8c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8010d8e:	4b39      	ldr	r3, [pc, #228]	; (8010e74 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8010d90:	681b      	ldr	r3, [r3, #0]
 8010d92:	015b      	lsls	r3, r3, #5
 8010d94:	0d1b      	lsrs	r3, r3, #20
 8010d96:	69fa      	ldr	r2, [r7, #28]
 8010d98:	fb02 f303 	mul.w	r3, r2, r3
 8010d9c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8010d9e:	e054      	b.n	8010e4a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8010da0:	683b      	ldr	r3, [r7, #0]
 8010da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010da6:	d050      	beq.n	8010e4a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8010da8:	f7f9 fca4 	bl	800a6f4 <HAL_GetTick>
 8010dac:	4602      	mov	r2, r0
 8010dae:	69bb      	ldr	r3, [r7, #24]
 8010db0:	1ad3      	subs	r3, r2, r3
 8010db2:	69fa      	ldr	r2, [r7, #28]
 8010db4:	429a      	cmp	r2, r3
 8010db6:	d902      	bls.n	8010dbe <SPI_WaitFlagStateUntilTimeout+0x56>
 8010db8:	69fb      	ldr	r3, [r7, #28]
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d13d      	bne.n	8010e3a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8010dbe:	68fb      	ldr	r3, [r7, #12]
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	685a      	ldr	r2, [r3, #4]
 8010dc4:	68fb      	ldr	r3, [r7, #12]
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8010dcc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	685b      	ldr	r3, [r3, #4]
 8010dd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010dd6:	d111      	bne.n	8010dfc <SPI_WaitFlagStateUntilTimeout+0x94>
 8010dd8:	68fb      	ldr	r3, [r7, #12]
 8010dda:	689b      	ldr	r3, [r3, #8]
 8010ddc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010de0:	d004      	beq.n	8010dec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8010de2:	68fb      	ldr	r3, [r7, #12]
 8010de4:	689b      	ldr	r3, [r3, #8]
 8010de6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010dea:	d107      	bne.n	8010dfc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8010dec:	68fb      	ldr	r3, [r7, #12]
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	681a      	ldr	r2, [r3, #0]
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010dfa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010e04:	d10f      	bne.n	8010e26 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8010e06:	68fb      	ldr	r3, [r7, #12]
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	681a      	ldr	r2, [r3, #0]
 8010e0c:	68fb      	ldr	r3, [r7, #12]
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8010e14:	601a      	str	r2, [r3, #0]
 8010e16:	68fb      	ldr	r3, [r7, #12]
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	681a      	ldr	r2, [r3, #0]
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8010e24:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	2201      	movs	r2, #1
 8010e2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8010e2e:	68fb      	ldr	r3, [r7, #12]
 8010e30:	2200      	movs	r2, #0
 8010e32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8010e36:	2303      	movs	r3, #3
 8010e38:	e017      	b.n	8010e6a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8010e3a:	697b      	ldr	r3, [r7, #20]
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d101      	bne.n	8010e44 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8010e40:	2300      	movs	r3, #0
 8010e42:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8010e44:	697b      	ldr	r3, [r7, #20]
 8010e46:	3b01      	subs	r3, #1
 8010e48:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8010e4a:	68fb      	ldr	r3, [r7, #12]
 8010e4c:	681b      	ldr	r3, [r3, #0]
 8010e4e:	689a      	ldr	r2, [r3, #8]
 8010e50:	68bb      	ldr	r3, [r7, #8]
 8010e52:	4013      	ands	r3, r2
 8010e54:	68ba      	ldr	r2, [r7, #8]
 8010e56:	429a      	cmp	r2, r3
 8010e58:	bf0c      	ite	eq
 8010e5a:	2301      	moveq	r3, #1
 8010e5c:	2300      	movne	r3, #0
 8010e5e:	b2db      	uxtb	r3, r3
 8010e60:	461a      	mov	r2, r3
 8010e62:	79fb      	ldrb	r3, [r7, #7]
 8010e64:	429a      	cmp	r2, r3
 8010e66:	d19b      	bne.n	8010da0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8010e68:	2300      	movs	r3, #0
}
 8010e6a:	4618      	mov	r0, r3
 8010e6c:	3720      	adds	r7, #32
 8010e6e:	46bd      	mov	sp, r7
 8010e70:	bd80      	pop	{r7, pc}
 8010e72:	bf00      	nop
 8010e74:	20000054 	.word	0x20000054

08010e78 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8010e78:	b580      	push	{r7, lr}
 8010e7a:	b086      	sub	sp, #24
 8010e7c:	af02      	add	r7, sp, #8
 8010e7e:	60f8      	str	r0, [r7, #12]
 8010e80:	60b9      	str	r1, [r7, #8]
 8010e82:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	685b      	ldr	r3, [r3, #4]
 8010e88:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010e8c:	d111      	bne.n	8010eb2 <SPI_EndRxTransaction+0x3a>
 8010e8e:	68fb      	ldr	r3, [r7, #12]
 8010e90:	689b      	ldr	r3, [r3, #8]
 8010e92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010e96:	d004      	beq.n	8010ea2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8010e98:	68fb      	ldr	r3, [r7, #12]
 8010e9a:	689b      	ldr	r3, [r3, #8]
 8010e9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010ea0:	d107      	bne.n	8010eb2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8010ea2:	68fb      	ldr	r3, [r7, #12]
 8010ea4:	681b      	ldr	r3, [r3, #0]
 8010ea6:	681a      	ldr	r2, [r3, #0]
 8010ea8:	68fb      	ldr	r3, [r7, #12]
 8010eaa:	681b      	ldr	r3, [r3, #0]
 8010eac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010eb0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010eb2:	68fb      	ldr	r3, [r7, #12]
 8010eb4:	685b      	ldr	r3, [r3, #4]
 8010eb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010eba:	d12a      	bne.n	8010f12 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8010ebc:	68fb      	ldr	r3, [r7, #12]
 8010ebe:	689b      	ldr	r3, [r3, #8]
 8010ec0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010ec4:	d012      	beq.n	8010eec <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	9300      	str	r3, [sp, #0]
 8010eca:	68bb      	ldr	r3, [r7, #8]
 8010ecc:	2200      	movs	r2, #0
 8010ece:	2180      	movs	r1, #128	; 0x80
 8010ed0:	68f8      	ldr	r0, [r7, #12]
 8010ed2:	f7ff ff49 	bl	8010d68 <SPI_WaitFlagStateUntilTimeout>
 8010ed6:	4603      	mov	r3, r0
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d02d      	beq.n	8010f38 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010edc:	68fb      	ldr	r3, [r7, #12]
 8010ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010ee0:	f043 0220 	orr.w	r2, r3, #32
 8010ee4:	68fb      	ldr	r3, [r7, #12]
 8010ee6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8010ee8:	2303      	movs	r3, #3
 8010eea:	e026      	b.n	8010f3a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	9300      	str	r3, [sp, #0]
 8010ef0:	68bb      	ldr	r3, [r7, #8]
 8010ef2:	2200      	movs	r2, #0
 8010ef4:	2101      	movs	r1, #1
 8010ef6:	68f8      	ldr	r0, [r7, #12]
 8010ef8:	f7ff ff36 	bl	8010d68 <SPI_WaitFlagStateUntilTimeout>
 8010efc:	4603      	mov	r3, r0
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d01a      	beq.n	8010f38 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010f06:	f043 0220 	orr.w	r2, r3, #32
 8010f0a:	68fb      	ldr	r3, [r7, #12]
 8010f0c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8010f0e:	2303      	movs	r3, #3
 8010f10:	e013      	b.n	8010f3a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	9300      	str	r3, [sp, #0]
 8010f16:	68bb      	ldr	r3, [r7, #8]
 8010f18:	2200      	movs	r2, #0
 8010f1a:	2101      	movs	r1, #1
 8010f1c:	68f8      	ldr	r0, [r7, #12]
 8010f1e:	f7ff ff23 	bl	8010d68 <SPI_WaitFlagStateUntilTimeout>
 8010f22:	4603      	mov	r3, r0
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d007      	beq.n	8010f38 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010f28:	68fb      	ldr	r3, [r7, #12]
 8010f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010f2c:	f043 0220 	orr.w	r2, r3, #32
 8010f30:	68fb      	ldr	r3, [r7, #12]
 8010f32:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8010f34:	2303      	movs	r3, #3
 8010f36:	e000      	b.n	8010f3a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8010f38:	2300      	movs	r3, #0
}
 8010f3a:	4618      	mov	r0, r3
 8010f3c:	3710      	adds	r7, #16
 8010f3e:	46bd      	mov	sp, r7
 8010f40:	bd80      	pop	{r7, pc}
	...

08010f44 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8010f44:	b580      	push	{r7, lr}
 8010f46:	b088      	sub	sp, #32
 8010f48:	af02      	add	r7, sp, #8
 8010f4a:	60f8      	str	r0, [r7, #12]
 8010f4c:	60b9      	str	r1, [r7, #8]
 8010f4e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8010f50:	4b1b      	ldr	r3, [pc, #108]	; (8010fc0 <SPI_EndRxTxTransaction+0x7c>)
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	4a1b      	ldr	r2, [pc, #108]	; (8010fc4 <SPI_EndRxTxTransaction+0x80>)
 8010f56:	fba2 2303 	umull	r2, r3, r2, r3
 8010f5a:	0d5b      	lsrs	r3, r3, #21
 8010f5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010f60:	fb02 f303 	mul.w	r3, r2, r3
 8010f64:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	685b      	ldr	r3, [r3, #4]
 8010f6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010f6e:	d112      	bne.n	8010f96 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	9300      	str	r3, [sp, #0]
 8010f74:	68bb      	ldr	r3, [r7, #8]
 8010f76:	2200      	movs	r2, #0
 8010f78:	2180      	movs	r1, #128	; 0x80
 8010f7a:	68f8      	ldr	r0, [r7, #12]
 8010f7c:	f7ff fef4 	bl	8010d68 <SPI_WaitFlagStateUntilTimeout>
 8010f80:	4603      	mov	r3, r0
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d016      	beq.n	8010fb4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010f8a:	f043 0220 	orr.w	r2, r3, #32
 8010f8e:	68fb      	ldr	r3, [r7, #12]
 8010f90:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8010f92:	2303      	movs	r3, #3
 8010f94:	e00f      	b.n	8010fb6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8010f96:	697b      	ldr	r3, [r7, #20]
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d00a      	beq.n	8010fb2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8010f9c:	697b      	ldr	r3, [r7, #20]
 8010f9e:	3b01      	subs	r3, #1
 8010fa0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8010fa2:	68fb      	ldr	r3, [r7, #12]
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	689b      	ldr	r3, [r3, #8]
 8010fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010fac:	2b80      	cmp	r3, #128	; 0x80
 8010fae:	d0f2      	beq.n	8010f96 <SPI_EndRxTxTransaction+0x52>
 8010fb0:	e000      	b.n	8010fb4 <SPI_EndRxTxTransaction+0x70>
        break;
 8010fb2:	bf00      	nop
  }

  return HAL_OK;
 8010fb4:	2300      	movs	r3, #0
}
 8010fb6:	4618      	mov	r0, r3
 8010fb8:	3718      	adds	r7, #24
 8010fba:	46bd      	mov	sp, r7
 8010fbc:	bd80      	pop	{r7, pc}
 8010fbe:	bf00      	nop
 8010fc0:	20000054 	.word	0x20000054
 8010fc4:	165e9f81 	.word	0x165e9f81

08010fc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010fc8:	b580      	push	{r7, lr}
 8010fca:	b082      	sub	sp, #8
 8010fcc:	af00      	add	r7, sp, #0
 8010fce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d101      	bne.n	8010fda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010fd6:	2301      	movs	r3, #1
 8010fd8:	e041      	b.n	801105e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010fe0:	b2db      	uxtb	r3, r3
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d106      	bne.n	8010ff4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	2200      	movs	r2, #0
 8010fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8010fee:	6878      	ldr	r0, [r7, #4]
 8010ff0:	f7f9 f9c2 	bl	800a378 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	2202      	movs	r2, #2
 8010ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	681a      	ldr	r2, [r3, #0]
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	3304      	adds	r3, #4
 8011004:	4619      	mov	r1, r3
 8011006:	4610      	mov	r0, r2
 8011008:	f000 fa96 	bl	8011538 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	2201      	movs	r2, #1
 8011010:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	2201      	movs	r2, #1
 8011018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	2201      	movs	r2, #1
 8011020:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	2201      	movs	r2, #1
 8011028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	2201      	movs	r2, #1
 8011030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	2201      	movs	r2, #1
 8011038:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	2201      	movs	r2, #1
 8011040:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	2201      	movs	r2, #1
 8011048:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	2201      	movs	r2, #1
 8011050:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	2201      	movs	r2, #1
 8011058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801105c:	2300      	movs	r3, #0
}
 801105e:	4618      	mov	r0, r3
 8011060:	3708      	adds	r7, #8
 8011062:	46bd      	mov	sp, r7
 8011064:	bd80      	pop	{r7, pc}
	...

08011068 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8011068:	b480      	push	{r7}
 801106a:	b085      	sub	sp, #20
 801106c:	af00      	add	r7, sp, #0
 801106e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011076:	b2db      	uxtb	r3, r3
 8011078:	2b01      	cmp	r3, #1
 801107a:	d001      	beq.n	8011080 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801107c:	2301      	movs	r3, #1
 801107e:	e04e      	b.n	801111e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	2202      	movs	r2, #2
 8011084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	681b      	ldr	r3, [r3, #0]
 801108c:	68da      	ldr	r2, [r3, #12]
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	681b      	ldr	r3, [r3, #0]
 8011092:	f042 0201 	orr.w	r2, r2, #1
 8011096:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	681b      	ldr	r3, [r3, #0]
 801109c:	4a23      	ldr	r2, [pc, #140]	; (801112c <HAL_TIM_Base_Start_IT+0xc4>)
 801109e:	4293      	cmp	r3, r2
 80110a0:	d022      	beq.n	80110e8 <HAL_TIM_Base_Start_IT+0x80>
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	681b      	ldr	r3, [r3, #0]
 80110a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80110aa:	d01d      	beq.n	80110e8 <HAL_TIM_Base_Start_IT+0x80>
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	681b      	ldr	r3, [r3, #0]
 80110b0:	4a1f      	ldr	r2, [pc, #124]	; (8011130 <HAL_TIM_Base_Start_IT+0xc8>)
 80110b2:	4293      	cmp	r3, r2
 80110b4:	d018      	beq.n	80110e8 <HAL_TIM_Base_Start_IT+0x80>
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	4a1e      	ldr	r2, [pc, #120]	; (8011134 <HAL_TIM_Base_Start_IT+0xcc>)
 80110bc:	4293      	cmp	r3, r2
 80110be:	d013      	beq.n	80110e8 <HAL_TIM_Base_Start_IT+0x80>
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	4a1c      	ldr	r2, [pc, #112]	; (8011138 <HAL_TIM_Base_Start_IT+0xd0>)
 80110c6:	4293      	cmp	r3, r2
 80110c8:	d00e      	beq.n	80110e8 <HAL_TIM_Base_Start_IT+0x80>
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	4a1b      	ldr	r2, [pc, #108]	; (801113c <HAL_TIM_Base_Start_IT+0xd4>)
 80110d0:	4293      	cmp	r3, r2
 80110d2:	d009      	beq.n	80110e8 <HAL_TIM_Base_Start_IT+0x80>
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	4a19      	ldr	r2, [pc, #100]	; (8011140 <HAL_TIM_Base_Start_IT+0xd8>)
 80110da:	4293      	cmp	r3, r2
 80110dc:	d004      	beq.n	80110e8 <HAL_TIM_Base_Start_IT+0x80>
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	681b      	ldr	r3, [r3, #0]
 80110e2:	4a18      	ldr	r2, [pc, #96]	; (8011144 <HAL_TIM_Base_Start_IT+0xdc>)
 80110e4:	4293      	cmp	r3, r2
 80110e6:	d111      	bne.n	801110c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	689b      	ldr	r3, [r3, #8]
 80110ee:	f003 0307 	and.w	r3, r3, #7
 80110f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80110f4:	68fb      	ldr	r3, [r7, #12]
 80110f6:	2b06      	cmp	r3, #6
 80110f8:	d010      	beq.n	801111c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	681b      	ldr	r3, [r3, #0]
 80110fe:	681a      	ldr	r2, [r3, #0]
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	f042 0201 	orr.w	r2, r2, #1
 8011108:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801110a:	e007      	b.n	801111c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	681a      	ldr	r2, [r3, #0]
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	f042 0201 	orr.w	r2, r2, #1
 801111a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801111c:	2300      	movs	r3, #0
}
 801111e:	4618      	mov	r0, r3
 8011120:	3714      	adds	r7, #20
 8011122:	46bd      	mov	sp, r7
 8011124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011128:	4770      	bx	lr
 801112a:	bf00      	nop
 801112c:	40010000 	.word	0x40010000
 8011130:	40000400 	.word	0x40000400
 8011134:	40000800 	.word	0x40000800
 8011138:	40000c00 	.word	0x40000c00
 801113c:	40010400 	.word	0x40010400
 8011140:	40014000 	.word	0x40014000
 8011144:	40001800 	.word	0x40001800

08011148 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8011148:	b580      	push	{r7, lr}
 801114a:	b082      	sub	sp, #8
 801114c:	af00      	add	r7, sp, #0
 801114e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	681b      	ldr	r3, [r3, #0]
 8011154:	691b      	ldr	r3, [r3, #16]
 8011156:	f003 0302 	and.w	r3, r3, #2
 801115a:	2b02      	cmp	r3, #2
 801115c:	d122      	bne.n	80111a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	681b      	ldr	r3, [r3, #0]
 8011162:	68db      	ldr	r3, [r3, #12]
 8011164:	f003 0302 	and.w	r3, r3, #2
 8011168:	2b02      	cmp	r3, #2
 801116a:	d11b      	bne.n	80111a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	681b      	ldr	r3, [r3, #0]
 8011170:	f06f 0202 	mvn.w	r2, #2
 8011174:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	2201      	movs	r2, #1
 801117a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	699b      	ldr	r3, [r3, #24]
 8011182:	f003 0303 	and.w	r3, r3, #3
 8011186:	2b00      	cmp	r3, #0
 8011188:	d003      	beq.n	8011192 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801118a:	6878      	ldr	r0, [r7, #4]
 801118c:	f000 f9b5 	bl	80114fa <HAL_TIM_IC_CaptureCallback>
 8011190:	e005      	b.n	801119e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8011192:	6878      	ldr	r0, [r7, #4]
 8011194:	f000 f9a7 	bl	80114e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011198:	6878      	ldr	r0, [r7, #4]
 801119a:	f000 f9b8 	bl	801150e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	2200      	movs	r2, #0
 80111a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	691b      	ldr	r3, [r3, #16]
 80111aa:	f003 0304 	and.w	r3, r3, #4
 80111ae:	2b04      	cmp	r3, #4
 80111b0:	d122      	bne.n	80111f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	68db      	ldr	r3, [r3, #12]
 80111b8:	f003 0304 	and.w	r3, r3, #4
 80111bc:	2b04      	cmp	r3, #4
 80111be:	d11b      	bne.n	80111f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	681b      	ldr	r3, [r3, #0]
 80111c4:	f06f 0204 	mvn.w	r2, #4
 80111c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	2202      	movs	r2, #2
 80111ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	681b      	ldr	r3, [r3, #0]
 80111d4:	699b      	ldr	r3, [r3, #24]
 80111d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d003      	beq.n	80111e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80111de:	6878      	ldr	r0, [r7, #4]
 80111e0:	f000 f98b 	bl	80114fa <HAL_TIM_IC_CaptureCallback>
 80111e4:	e005      	b.n	80111f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80111e6:	6878      	ldr	r0, [r7, #4]
 80111e8:	f000 f97d 	bl	80114e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80111ec:	6878      	ldr	r0, [r7, #4]
 80111ee:	f000 f98e 	bl	801150e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	2200      	movs	r2, #0
 80111f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	681b      	ldr	r3, [r3, #0]
 80111fc:	691b      	ldr	r3, [r3, #16]
 80111fe:	f003 0308 	and.w	r3, r3, #8
 8011202:	2b08      	cmp	r3, #8
 8011204:	d122      	bne.n	801124c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	681b      	ldr	r3, [r3, #0]
 801120a:	68db      	ldr	r3, [r3, #12]
 801120c:	f003 0308 	and.w	r3, r3, #8
 8011210:	2b08      	cmp	r3, #8
 8011212:	d11b      	bne.n	801124c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	681b      	ldr	r3, [r3, #0]
 8011218:	f06f 0208 	mvn.w	r2, #8
 801121c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	2204      	movs	r2, #4
 8011222:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	681b      	ldr	r3, [r3, #0]
 8011228:	69db      	ldr	r3, [r3, #28]
 801122a:	f003 0303 	and.w	r3, r3, #3
 801122e:	2b00      	cmp	r3, #0
 8011230:	d003      	beq.n	801123a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011232:	6878      	ldr	r0, [r7, #4]
 8011234:	f000 f961 	bl	80114fa <HAL_TIM_IC_CaptureCallback>
 8011238:	e005      	b.n	8011246 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801123a:	6878      	ldr	r0, [r7, #4]
 801123c:	f000 f953 	bl	80114e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011240:	6878      	ldr	r0, [r7, #4]
 8011242:	f000 f964 	bl	801150e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	2200      	movs	r2, #0
 801124a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	681b      	ldr	r3, [r3, #0]
 8011250:	691b      	ldr	r3, [r3, #16]
 8011252:	f003 0310 	and.w	r3, r3, #16
 8011256:	2b10      	cmp	r3, #16
 8011258:	d122      	bne.n	80112a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	681b      	ldr	r3, [r3, #0]
 801125e:	68db      	ldr	r3, [r3, #12]
 8011260:	f003 0310 	and.w	r3, r3, #16
 8011264:	2b10      	cmp	r3, #16
 8011266:	d11b      	bne.n	80112a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	f06f 0210 	mvn.w	r2, #16
 8011270:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	2208      	movs	r2, #8
 8011276:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	69db      	ldr	r3, [r3, #28]
 801127e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011282:	2b00      	cmp	r3, #0
 8011284:	d003      	beq.n	801128e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011286:	6878      	ldr	r0, [r7, #4]
 8011288:	f000 f937 	bl	80114fa <HAL_TIM_IC_CaptureCallback>
 801128c:	e005      	b.n	801129a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801128e:	6878      	ldr	r0, [r7, #4]
 8011290:	f000 f929 	bl	80114e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011294:	6878      	ldr	r0, [r7, #4]
 8011296:	f000 f93a 	bl	801150e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	2200      	movs	r2, #0
 801129e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	681b      	ldr	r3, [r3, #0]
 80112a4:	691b      	ldr	r3, [r3, #16]
 80112a6:	f003 0301 	and.w	r3, r3, #1
 80112aa:	2b01      	cmp	r3, #1
 80112ac:	d10e      	bne.n	80112cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	68db      	ldr	r3, [r3, #12]
 80112b4:	f003 0301 	and.w	r3, r3, #1
 80112b8:	2b01      	cmp	r3, #1
 80112ba:	d107      	bne.n	80112cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	681b      	ldr	r3, [r3, #0]
 80112c0:	f06f 0201 	mvn.w	r2, #1
 80112c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80112c6:	6878      	ldr	r0, [r7, #4]
 80112c8:	f7f8 fe00 	bl	8009ecc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	691b      	ldr	r3, [r3, #16]
 80112d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80112d6:	2b80      	cmp	r3, #128	; 0x80
 80112d8:	d10e      	bne.n	80112f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	68db      	ldr	r3, [r3, #12]
 80112e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80112e4:	2b80      	cmp	r3, #128	; 0x80
 80112e6:	d107      	bne.n	80112f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	681b      	ldr	r3, [r3, #0]
 80112ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80112f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80112f2:	6878      	ldr	r0, [r7, #4]
 80112f4:	f000 fae0 	bl	80118b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	691b      	ldr	r3, [r3, #16]
 80112fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011302:	2b40      	cmp	r3, #64	; 0x40
 8011304:	d10e      	bne.n	8011324 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	681b      	ldr	r3, [r3, #0]
 801130a:	68db      	ldr	r3, [r3, #12]
 801130c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011310:	2b40      	cmp	r3, #64	; 0x40
 8011312:	d107      	bne.n	8011324 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801131c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801131e:	6878      	ldr	r0, [r7, #4]
 8011320:	f000 f8ff 	bl	8011522 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	691b      	ldr	r3, [r3, #16]
 801132a:	f003 0320 	and.w	r3, r3, #32
 801132e:	2b20      	cmp	r3, #32
 8011330:	d10e      	bne.n	8011350 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	68db      	ldr	r3, [r3, #12]
 8011338:	f003 0320 	and.w	r3, r3, #32
 801133c:	2b20      	cmp	r3, #32
 801133e:	d107      	bne.n	8011350 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	f06f 0220 	mvn.w	r2, #32
 8011348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801134a:	6878      	ldr	r0, [r7, #4]
 801134c:	f000 faaa 	bl	80118a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8011350:	bf00      	nop
 8011352:	3708      	adds	r7, #8
 8011354:	46bd      	mov	sp, r7
 8011356:	bd80      	pop	{r7, pc}

08011358 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8011358:	b580      	push	{r7, lr}
 801135a:	b084      	sub	sp, #16
 801135c:	af00      	add	r7, sp, #0
 801135e:	6078      	str	r0, [r7, #4]
 8011360:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8011362:	2300      	movs	r3, #0
 8011364:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801136c:	2b01      	cmp	r3, #1
 801136e:	d101      	bne.n	8011374 <HAL_TIM_ConfigClockSource+0x1c>
 8011370:	2302      	movs	r3, #2
 8011372:	e0b4      	b.n	80114de <HAL_TIM_ConfigClockSource+0x186>
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	2201      	movs	r2, #1
 8011378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	2202      	movs	r2, #2
 8011380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	689b      	ldr	r3, [r3, #8]
 801138a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801138c:	68bb      	ldr	r3, [r7, #8]
 801138e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8011392:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011394:	68bb      	ldr	r3, [r7, #8]
 8011396:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801139a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	68ba      	ldr	r2, [r7, #8]
 80113a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80113a4:	683b      	ldr	r3, [r7, #0]
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80113ac:	d03e      	beq.n	801142c <HAL_TIM_ConfigClockSource+0xd4>
 80113ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80113b2:	f200 8087 	bhi.w	80114c4 <HAL_TIM_ConfigClockSource+0x16c>
 80113b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80113ba:	f000 8086 	beq.w	80114ca <HAL_TIM_ConfigClockSource+0x172>
 80113be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80113c2:	d87f      	bhi.n	80114c4 <HAL_TIM_ConfigClockSource+0x16c>
 80113c4:	2b70      	cmp	r3, #112	; 0x70
 80113c6:	d01a      	beq.n	80113fe <HAL_TIM_ConfigClockSource+0xa6>
 80113c8:	2b70      	cmp	r3, #112	; 0x70
 80113ca:	d87b      	bhi.n	80114c4 <HAL_TIM_ConfigClockSource+0x16c>
 80113cc:	2b60      	cmp	r3, #96	; 0x60
 80113ce:	d050      	beq.n	8011472 <HAL_TIM_ConfigClockSource+0x11a>
 80113d0:	2b60      	cmp	r3, #96	; 0x60
 80113d2:	d877      	bhi.n	80114c4 <HAL_TIM_ConfigClockSource+0x16c>
 80113d4:	2b50      	cmp	r3, #80	; 0x50
 80113d6:	d03c      	beq.n	8011452 <HAL_TIM_ConfigClockSource+0xfa>
 80113d8:	2b50      	cmp	r3, #80	; 0x50
 80113da:	d873      	bhi.n	80114c4 <HAL_TIM_ConfigClockSource+0x16c>
 80113dc:	2b40      	cmp	r3, #64	; 0x40
 80113de:	d058      	beq.n	8011492 <HAL_TIM_ConfigClockSource+0x13a>
 80113e0:	2b40      	cmp	r3, #64	; 0x40
 80113e2:	d86f      	bhi.n	80114c4 <HAL_TIM_ConfigClockSource+0x16c>
 80113e4:	2b30      	cmp	r3, #48	; 0x30
 80113e6:	d064      	beq.n	80114b2 <HAL_TIM_ConfigClockSource+0x15a>
 80113e8:	2b30      	cmp	r3, #48	; 0x30
 80113ea:	d86b      	bhi.n	80114c4 <HAL_TIM_ConfigClockSource+0x16c>
 80113ec:	2b20      	cmp	r3, #32
 80113ee:	d060      	beq.n	80114b2 <HAL_TIM_ConfigClockSource+0x15a>
 80113f0:	2b20      	cmp	r3, #32
 80113f2:	d867      	bhi.n	80114c4 <HAL_TIM_ConfigClockSource+0x16c>
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d05c      	beq.n	80114b2 <HAL_TIM_ConfigClockSource+0x15a>
 80113f8:	2b10      	cmp	r3, #16
 80113fa:	d05a      	beq.n	80114b2 <HAL_TIM_ConfigClockSource+0x15a>
 80113fc:	e062      	b.n	80114c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	6818      	ldr	r0, [r3, #0]
 8011402:	683b      	ldr	r3, [r7, #0]
 8011404:	6899      	ldr	r1, [r3, #8]
 8011406:	683b      	ldr	r3, [r7, #0]
 8011408:	685a      	ldr	r2, [r3, #4]
 801140a:	683b      	ldr	r3, [r7, #0]
 801140c:	68db      	ldr	r3, [r3, #12]
 801140e:	f000 f9ad 	bl	801176c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	689b      	ldr	r3, [r3, #8]
 8011418:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801141a:	68bb      	ldr	r3, [r7, #8]
 801141c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8011420:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	68ba      	ldr	r2, [r7, #8]
 8011428:	609a      	str	r2, [r3, #8]
      break;
 801142a:	e04f      	b.n	80114cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	6818      	ldr	r0, [r3, #0]
 8011430:	683b      	ldr	r3, [r7, #0]
 8011432:	6899      	ldr	r1, [r3, #8]
 8011434:	683b      	ldr	r3, [r7, #0]
 8011436:	685a      	ldr	r2, [r3, #4]
 8011438:	683b      	ldr	r3, [r7, #0]
 801143a:	68db      	ldr	r3, [r3, #12]
 801143c:	f000 f996 	bl	801176c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	689a      	ldr	r2, [r3, #8]
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801144e:	609a      	str	r2, [r3, #8]
      break;
 8011450:	e03c      	b.n	80114cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	6818      	ldr	r0, [r3, #0]
 8011456:	683b      	ldr	r3, [r7, #0]
 8011458:	6859      	ldr	r1, [r3, #4]
 801145a:	683b      	ldr	r3, [r7, #0]
 801145c:	68db      	ldr	r3, [r3, #12]
 801145e:	461a      	mov	r2, r3
 8011460:	f000 f90a 	bl	8011678 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	2150      	movs	r1, #80	; 0x50
 801146a:	4618      	mov	r0, r3
 801146c:	f000 f963 	bl	8011736 <TIM_ITRx_SetConfig>
      break;
 8011470:	e02c      	b.n	80114cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	6818      	ldr	r0, [r3, #0]
 8011476:	683b      	ldr	r3, [r7, #0]
 8011478:	6859      	ldr	r1, [r3, #4]
 801147a:	683b      	ldr	r3, [r7, #0]
 801147c:	68db      	ldr	r3, [r3, #12]
 801147e:	461a      	mov	r2, r3
 8011480:	f000 f929 	bl	80116d6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	2160      	movs	r1, #96	; 0x60
 801148a:	4618      	mov	r0, r3
 801148c:	f000 f953 	bl	8011736 <TIM_ITRx_SetConfig>
      break;
 8011490:	e01c      	b.n	80114cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	6818      	ldr	r0, [r3, #0]
 8011496:	683b      	ldr	r3, [r7, #0]
 8011498:	6859      	ldr	r1, [r3, #4]
 801149a:	683b      	ldr	r3, [r7, #0]
 801149c:	68db      	ldr	r3, [r3, #12]
 801149e:	461a      	mov	r2, r3
 80114a0:	f000 f8ea 	bl	8011678 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	681b      	ldr	r3, [r3, #0]
 80114a8:	2140      	movs	r1, #64	; 0x40
 80114aa:	4618      	mov	r0, r3
 80114ac:	f000 f943 	bl	8011736 <TIM_ITRx_SetConfig>
      break;
 80114b0:	e00c      	b.n	80114cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	681a      	ldr	r2, [r3, #0]
 80114b6:	683b      	ldr	r3, [r7, #0]
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	4619      	mov	r1, r3
 80114bc:	4610      	mov	r0, r2
 80114be:	f000 f93a 	bl	8011736 <TIM_ITRx_SetConfig>
      break;
 80114c2:	e003      	b.n	80114cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80114c4:	2301      	movs	r3, #1
 80114c6:	73fb      	strb	r3, [r7, #15]
      break;
 80114c8:	e000      	b.n	80114cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80114ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	2201      	movs	r2, #1
 80114d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	2200      	movs	r2, #0
 80114d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80114dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80114de:	4618      	mov	r0, r3
 80114e0:	3710      	adds	r7, #16
 80114e2:	46bd      	mov	sp, r7
 80114e4:	bd80      	pop	{r7, pc}

080114e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80114e6:	b480      	push	{r7}
 80114e8:	b083      	sub	sp, #12
 80114ea:	af00      	add	r7, sp, #0
 80114ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80114ee:	bf00      	nop
 80114f0:	370c      	adds	r7, #12
 80114f2:	46bd      	mov	sp, r7
 80114f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114f8:	4770      	bx	lr

080114fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80114fa:	b480      	push	{r7}
 80114fc:	b083      	sub	sp, #12
 80114fe:	af00      	add	r7, sp, #0
 8011500:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8011502:	bf00      	nop
 8011504:	370c      	adds	r7, #12
 8011506:	46bd      	mov	sp, r7
 8011508:	f85d 7b04 	ldr.w	r7, [sp], #4
 801150c:	4770      	bx	lr

0801150e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801150e:	b480      	push	{r7}
 8011510:	b083      	sub	sp, #12
 8011512:	af00      	add	r7, sp, #0
 8011514:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8011516:	bf00      	nop
 8011518:	370c      	adds	r7, #12
 801151a:	46bd      	mov	sp, r7
 801151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011520:	4770      	bx	lr

08011522 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8011522:	b480      	push	{r7}
 8011524:	b083      	sub	sp, #12
 8011526:	af00      	add	r7, sp, #0
 8011528:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801152a:	bf00      	nop
 801152c:	370c      	adds	r7, #12
 801152e:	46bd      	mov	sp, r7
 8011530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011534:	4770      	bx	lr
	...

08011538 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8011538:	b480      	push	{r7}
 801153a:	b085      	sub	sp, #20
 801153c:	af00      	add	r7, sp, #0
 801153e:	6078      	str	r0, [r7, #4]
 8011540:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	4a40      	ldr	r2, [pc, #256]	; (801164c <TIM_Base_SetConfig+0x114>)
 801154c:	4293      	cmp	r3, r2
 801154e:	d013      	beq.n	8011578 <TIM_Base_SetConfig+0x40>
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011556:	d00f      	beq.n	8011578 <TIM_Base_SetConfig+0x40>
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	4a3d      	ldr	r2, [pc, #244]	; (8011650 <TIM_Base_SetConfig+0x118>)
 801155c:	4293      	cmp	r3, r2
 801155e:	d00b      	beq.n	8011578 <TIM_Base_SetConfig+0x40>
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	4a3c      	ldr	r2, [pc, #240]	; (8011654 <TIM_Base_SetConfig+0x11c>)
 8011564:	4293      	cmp	r3, r2
 8011566:	d007      	beq.n	8011578 <TIM_Base_SetConfig+0x40>
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	4a3b      	ldr	r2, [pc, #236]	; (8011658 <TIM_Base_SetConfig+0x120>)
 801156c:	4293      	cmp	r3, r2
 801156e:	d003      	beq.n	8011578 <TIM_Base_SetConfig+0x40>
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	4a3a      	ldr	r2, [pc, #232]	; (801165c <TIM_Base_SetConfig+0x124>)
 8011574:	4293      	cmp	r3, r2
 8011576:	d108      	bne.n	801158a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011578:	68fb      	ldr	r3, [r7, #12]
 801157a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801157e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8011580:	683b      	ldr	r3, [r7, #0]
 8011582:	685b      	ldr	r3, [r3, #4]
 8011584:	68fa      	ldr	r2, [r7, #12]
 8011586:	4313      	orrs	r3, r2
 8011588:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	4a2f      	ldr	r2, [pc, #188]	; (801164c <TIM_Base_SetConfig+0x114>)
 801158e:	4293      	cmp	r3, r2
 8011590:	d02b      	beq.n	80115ea <TIM_Base_SetConfig+0xb2>
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011598:	d027      	beq.n	80115ea <TIM_Base_SetConfig+0xb2>
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	4a2c      	ldr	r2, [pc, #176]	; (8011650 <TIM_Base_SetConfig+0x118>)
 801159e:	4293      	cmp	r3, r2
 80115a0:	d023      	beq.n	80115ea <TIM_Base_SetConfig+0xb2>
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	4a2b      	ldr	r2, [pc, #172]	; (8011654 <TIM_Base_SetConfig+0x11c>)
 80115a6:	4293      	cmp	r3, r2
 80115a8:	d01f      	beq.n	80115ea <TIM_Base_SetConfig+0xb2>
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	4a2a      	ldr	r2, [pc, #168]	; (8011658 <TIM_Base_SetConfig+0x120>)
 80115ae:	4293      	cmp	r3, r2
 80115b0:	d01b      	beq.n	80115ea <TIM_Base_SetConfig+0xb2>
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	4a29      	ldr	r2, [pc, #164]	; (801165c <TIM_Base_SetConfig+0x124>)
 80115b6:	4293      	cmp	r3, r2
 80115b8:	d017      	beq.n	80115ea <TIM_Base_SetConfig+0xb2>
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	4a28      	ldr	r2, [pc, #160]	; (8011660 <TIM_Base_SetConfig+0x128>)
 80115be:	4293      	cmp	r3, r2
 80115c0:	d013      	beq.n	80115ea <TIM_Base_SetConfig+0xb2>
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	4a27      	ldr	r2, [pc, #156]	; (8011664 <TIM_Base_SetConfig+0x12c>)
 80115c6:	4293      	cmp	r3, r2
 80115c8:	d00f      	beq.n	80115ea <TIM_Base_SetConfig+0xb2>
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	4a26      	ldr	r2, [pc, #152]	; (8011668 <TIM_Base_SetConfig+0x130>)
 80115ce:	4293      	cmp	r3, r2
 80115d0:	d00b      	beq.n	80115ea <TIM_Base_SetConfig+0xb2>
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	4a25      	ldr	r2, [pc, #148]	; (801166c <TIM_Base_SetConfig+0x134>)
 80115d6:	4293      	cmp	r3, r2
 80115d8:	d007      	beq.n	80115ea <TIM_Base_SetConfig+0xb2>
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	4a24      	ldr	r2, [pc, #144]	; (8011670 <TIM_Base_SetConfig+0x138>)
 80115de:	4293      	cmp	r3, r2
 80115e0:	d003      	beq.n	80115ea <TIM_Base_SetConfig+0xb2>
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	4a23      	ldr	r2, [pc, #140]	; (8011674 <TIM_Base_SetConfig+0x13c>)
 80115e6:	4293      	cmp	r3, r2
 80115e8:	d108      	bne.n	80115fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80115ea:	68fb      	ldr	r3, [r7, #12]
 80115ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80115f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80115f2:	683b      	ldr	r3, [r7, #0]
 80115f4:	68db      	ldr	r3, [r3, #12]
 80115f6:	68fa      	ldr	r2, [r7, #12]
 80115f8:	4313      	orrs	r3, r2
 80115fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8011602:	683b      	ldr	r3, [r7, #0]
 8011604:	695b      	ldr	r3, [r3, #20]
 8011606:	4313      	orrs	r3, r2
 8011608:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	68fa      	ldr	r2, [r7, #12]
 801160e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011610:	683b      	ldr	r3, [r7, #0]
 8011612:	689a      	ldr	r2, [r3, #8]
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8011618:	683b      	ldr	r3, [r7, #0]
 801161a:	681a      	ldr	r2, [r3, #0]
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	4a0a      	ldr	r2, [pc, #40]	; (801164c <TIM_Base_SetConfig+0x114>)
 8011624:	4293      	cmp	r3, r2
 8011626:	d003      	beq.n	8011630 <TIM_Base_SetConfig+0xf8>
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	4a0c      	ldr	r2, [pc, #48]	; (801165c <TIM_Base_SetConfig+0x124>)
 801162c:	4293      	cmp	r3, r2
 801162e:	d103      	bne.n	8011638 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8011630:	683b      	ldr	r3, [r7, #0]
 8011632:	691a      	ldr	r2, [r3, #16]
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	2201      	movs	r2, #1
 801163c:	615a      	str	r2, [r3, #20]
}
 801163e:	bf00      	nop
 8011640:	3714      	adds	r7, #20
 8011642:	46bd      	mov	sp, r7
 8011644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011648:	4770      	bx	lr
 801164a:	bf00      	nop
 801164c:	40010000 	.word	0x40010000
 8011650:	40000400 	.word	0x40000400
 8011654:	40000800 	.word	0x40000800
 8011658:	40000c00 	.word	0x40000c00
 801165c:	40010400 	.word	0x40010400
 8011660:	40014000 	.word	0x40014000
 8011664:	40014400 	.word	0x40014400
 8011668:	40014800 	.word	0x40014800
 801166c:	40001800 	.word	0x40001800
 8011670:	40001c00 	.word	0x40001c00
 8011674:	40002000 	.word	0x40002000

08011678 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011678:	b480      	push	{r7}
 801167a:	b087      	sub	sp, #28
 801167c:	af00      	add	r7, sp, #0
 801167e:	60f8      	str	r0, [r7, #12]
 8011680:	60b9      	str	r1, [r7, #8]
 8011682:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8011684:	68fb      	ldr	r3, [r7, #12]
 8011686:	6a1b      	ldr	r3, [r3, #32]
 8011688:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801168a:	68fb      	ldr	r3, [r7, #12]
 801168c:	6a1b      	ldr	r3, [r3, #32]
 801168e:	f023 0201 	bic.w	r2, r3, #1
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011696:	68fb      	ldr	r3, [r7, #12]
 8011698:	699b      	ldr	r3, [r3, #24]
 801169a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801169c:	693b      	ldr	r3, [r7, #16]
 801169e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80116a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	011b      	lsls	r3, r3, #4
 80116a8:	693a      	ldr	r2, [r7, #16]
 80116aa:	4313      	orrs	r3, r2
 80116ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80116ae:	697b      	ldr	r3, [r7, #20]
 80116b0:	f023 030a 	bic.w	r3, r3, #10
 80116b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80116b6:	697a      	ldr	r2, [r7, #20]
 80116b8:	68bb      	ldr	r3, [r7, #8]
 80116ba:	4313      	orrs	r3, r2
 80116bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80116be:	68fb      	ldr	r3, [r7, #12]
 80116c0:	693a      	ldr	r2, [r7, #16]
 80116c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	697a      	ldr	r2, [r7, #20]
 80116c8:	621a      	str	r2, [r3, #32]
}
 80116ca:	bf00      	nop
 80116cc:	371c      	adds	r7, #28
 80116ce:	46bd      	mov	sp, r7
 80116d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116d4:	4770      	bx	lr

080116d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80116d6:	b480      	push	{r7}
 80116d8:	b087      	sub	sp, #28
 80116da:	af00      	add	r7, sp, #0
 80116dc:	60f8      	str	r0, [r7, #12]
 80116de:	60b9      	str	r1, [r7, #8]
 80116e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	6a1b      	ldr	r3, [r3, #32]
 80116e6:	f023 0210 	bic.w	r2, r3, #16
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	699b      	ldr	r3, [r3, #24]
 80116f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	6a1b      	ldr	r3, [r3, #32]
 80116f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80116fa:	697b      	ldr	r3, [r7, #20]
 80116fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8011700:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	031b      	lsls	r3, r3, #12
 8011706:	697a      	ldr	r2, [r7, #20]
 8011708:	4313      	orrs	r3, r2
 801170a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801170c:	693b      	ldr	r3, [r7, #16]
 801170e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8011712:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8011714:	68bb      	ldr	r3, [r7, #8]
 8011716:	011b      	lsls	r3, r3, #4
 8011718:	693a      	ldr	r2, [r7, #16]
 801171a:	4313      	orrs	r3, r2
 801171c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801171e:	68fb      	ldr	r3, [r7, #12]
 8011720:	697a      	ldr	r2, [r7, #20]
 8011722:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	693a      	ldr	r2, [r7, #16]
 8011728:	621a      	str	r2, [r3, #32]
}
 801172a:	bf00      	nop
 801172c:	371c      	adds	r7, #28
 801172e:	46bd      	mov	sp, r7
 8011730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011734:	4770      	bx	lr

08011736 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8011736:	b480      	push	{r7}
 8011738:	b085      	sub	sp, #20
 801173a:	af00      	add	r7, sp, #0
 801173c:	6078      	str	r0, [r7, #4]
 801173e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	689b      	ldr	r3, [r3, #8]
 8011744:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801174c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801174e:	683a      	ldr	r2, [r7, #0]
 8011750:	68fb      	ldr	r3, [r7, #12]
 8011752:	4313      	orrs	r3, r2
 8011754:	f043 0307 	orr.w	r3, r3, #7
 8011758:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	68fa      	ldr	r2, [r7, #12]
 801175e:	609a      	str	r2, [r3, #8]
}
 8011760:	bf00      	nop
 8011762:	3714      	adds	r7, #20
 8011764:	46bd      	mov	sp, r7
 8011766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801176a:	4770      	bx	lr

0801176c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801176c:	b480      	push	{r7}
 801176e:	b087      	sub	sp, #28
 8011770:	af00      	add	r7, sp, #0
 8011772:	60f8      	str	r0, [r7, #12]
 8011774:	60b9      	str	r1, [r7, #8]
 8011776:	607a      	str	r2, [r7, #4]
 8011778:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801177a:	68fb      	ldr	r3, [r7, #12]
 801177c:	689b      	ldr	r3, [r3, #8]
 801177e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011780:	697b      	ldr	r3, [r7, #20]
 8011782:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8011786:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8011788:	683b      	ldr	r3, [r7, #0]
 801178a:	021a      	lsls	r2, r3, #8
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	431a      	orrs	r2, r3
 8011790:	68bb      	ldr	r3, [r7, #8]
 8011792:	4313      	orrs	r3, r2
 8011794:	697a      	ldr	r2, [r7, #20]
 8011796:	4313      	orrs	r3, r2
 8011798:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801179a:	68fb      	ldr	r3, [r7, #12]
 801179c:	697a      	ldr	r2, [r7, #20]
 801179e:	609a      	str	r2, [r3, #8]
}
 80117a0:	bf00      	nop
 80117a2:	371c      	adds	r7, #28
 80117a4:	46bd      	mov	sp, r7
 80117a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117aa:	4770      	bx	lr

080117ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80117ac:	b480      	push	{r7}
 80117ae:	b085      	sub	sp, #20
 80117b0:	af00      	add	r7, sp, #0
 80117b2:	6078      	str	r0, [r7, #4]
 80117b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80117bc:	2b01      	cmp	r3, #1
 80117be:	d101      	bne.n	80117c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80117c0:	2302      	movs	r3, #2
 80117c2:	e05a      	b.n	801187a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	2201      	movs	r2, #1
 80117c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	2202      	movs	r2, #2
 80117d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	681b      	ldr	r3, [r3, #0]
 80117d8:	685b      	ldr	r3, [r3, #4]
 80117da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	689b      	ldr	r3, [r3, #8]
 80117e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80117e4:	68fb      	ldr	r3, [r7, #12]
 80117e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80117ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80117ec:	683b      	ldr	r3, [r7, #0]
 80117ee:	681b      	ldr	r3, [r3, #0]
 80117f0:	68fa      	ldr	r2, [r7, #12]
 80117f2:	4313      	orrs	r3, r2
 80117f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	681b      	ldr	r3, [r3, #0]
 80117fa:	68fa      	ldr	r2, [r7, #12]
 80117fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	681b      	ldr	r3, [r3, #0]
 8011802:	4a21      	ldr	r2, [pc, #132]	; (8011888 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8011804:	4293      	cmp	r3, r2
 8011806:	d022      	beq.n	801184e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	681b      	ldr	r3, [r3, #0]
 801180c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011810:	d01d      	beq.n	801184e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	4a1d      	ldr	r2, [pc, #116]	; (801188c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8011818:	4293      	cmp	r3, r2
 801181a:	d018      	beq.n	801184e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	4a1b      	ldr	r2, [pc, #108]	; (8011890 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8011822:	4293      	cmp	r3, r2
 8011824:	d013      	beq.n	801184e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	681b      	ldr	r3, [r3, #0]
 801182a:	4a1a      	ldr	r2, [pc, #104]	; (8011894 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 801182c:	4293      	cmp	r3, r2
 801182e:	d00e      	beq.n	801184e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	681b      	ldr	r3, [r3, #0]
 8011834:	4a18      	ldr	r2, [pc, #96]	; (8011898 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8011836:	4293      	cmp	r3, r2
 8011838:	d009      	beq.n	801184e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	681b      	ldr	r3, [r3, #0]
 801183e:	4a17      	ldr	r2, [pc, #92]	; (801189c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8011840:	4293      	cmp	r3, r2
 8011842:	d004      	beq.n	801184e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	681b      	ldr	r3, [r3, #0]
 8011848:	4a15      	ldr	r2, [pc, #84]	; (80118a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 801184a:	4293      	cmp	r3, r2
 801184c:	d10c      	bne.n	8011868 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801184e:	68bb      	ldr	r3, [r7, #8]
 8011850:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011854:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011856:	683b      	ldr	r3, [r7, #0]
 8011858:	685b      	ldr	r3, [r3, #4]
 801185a:	68ba      	ldr	r2, [r7, #8]
 801185c:	4313      	orrs	r3, r2
 801185e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	68ba      	ldr	r2, [r7, #8]
 8011866:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	2201      	movs	r2, #1
 801186c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	2200      	movs	r2, #0
 8011874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011878:	2300      	movs	r3, #0
}
 801187a:	4618      	mov	r0, r3
 801187c:	3714      	adds	r7, #20
 801187e:	46bd      	mov	sp, r7
 8011880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011884:	4770      	bx	lr
 8011886:	bf00      	nop
 8011888:	40010000 	.word	0x40010000
 801188c:	40000400 	.word	0x40000400
 8011890:	40000800 	.word	0x40000800
 8011894:	40000c00 	.word	0x40000c00
 8011898:	40010400 	.word	0x40010400
 801189c:	40014000 	.word	0x40014000
 80118a0:	40001800 	.word	0x40001800

080118a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80118a4:	b480      	push	{r7}
 80118a6:	b083      	sub	sp, #12
 80118a8:	af00      	add	r7, sp, #0
 80118aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80118ac:	bf00      	nop
 80118ae:	370c      	adds	r7, #12
 80118b0:	46bd      	mov	sp, r7
 80118b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118b6:	4770      	bx	lr

080118b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80118b8:	b480      	push	{r7}
 80118ba:	b083      	sub	sp, #12
 80118bc:	af00      	add	r7, sp, #0
 80118be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80118c0:	bf00      	nop
 80118c2:	370c      	adds	r7, #12
 80118c4:	46bd      	mov	sp, r7
 80118c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ca:	4770      	bx	lr

080118cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80118cc:	b580      	push	{r7, lr}
 80118ce:	b082      	sub	sp, #8
 80118d0:	af00      	add	r7, sp, #0
 80118d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d101      	bne.n	80118de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80118da:	2301      	movs	r3, #1
 80118dc:	e03f      	b.n	801195e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80118e4:	b2db      	uxtb	r3, r3
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d106      	bne.n	80118f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	2200      	movs	r2, #0
 80118ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80118f2:	6878      	ldr	r0, [r7, #4]
 80118f4:	f7f8 fd76 	bl	800a3e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	2224      	movs	r2, #36	; 0x24
 80118fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	68da      	ldr	r2, [r3, #12]
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	681b      	ldr	r3, [r3, #0]
 801190a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801190e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8011910:	6878      	ldr	r0, [r7, #4]
 8011912:	f000 f929 	bl	8011b68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	681b      	ldr	r3, [r3, #0]
 801191a:	691a      	ldr	r2, [r3, #16]
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	681b      	ldr	r3, [r3, #0]
 8011920:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8011924:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	681b      	ldr	r3, [r3, #0]
 801192a:	695a      	ldr	r2, [r3, #20]
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8011934:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	68da      	ldr	r2, [r3, #12]
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	681b      	ldr	r3, [r3, #0]
 8011940:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8011944:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	2200      	movs	r2, #0
 801194a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	2220      	movs	r2, #32
 8011950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	2220      	movs	r2, #32
 8011958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 801195c:	2300      	movs	r3, #0
}
 801195e:	4618      	mov	r0, r3
 8011960:	3708      	adds	r7, #8
 8011962:	46bd      	mov	sp, r7
 8011964:	bd80      	pop	{r7, pc}

08011966 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011966:	b580      	push	{r7, lr}
 8011968:	b08a      	sub	sp, #40	; 0x28
 801196a:	af02      	add	r7, sp, #8
 801196c:	60f8      	str	r0, [r7, #12]
 801196e:	60b9      	str	r1, [r7, #8]
 8011970:	603b      	str	r3, [r7, #0]
 8011972:	4613      	mov	r3, r2
 8011974:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8011976:	2300      	movs	r3, #0
 8011978:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801197a:	68fb      	ldr	r3, [r7, #12]
 801197c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011980:	b2db      	uxtb	r3, r3
 8011982:	2b20      	cmp	r3, #32
 8011984:	d17c      	bne.n	8011a80 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8011986:	68bb      	ldr	r3, [r7, #8]
 8011988:	2b00      	cmp	r3, #0
 801198a:	d002      	beq.n	8011992 <HAL_UART_Transmit+0x2c>
 801198c:	88fb      	ldrh	r3, [r7, #6]
 801198e:	2b00      	cmp	r3, #0
 8011990:	d101      	bne.n	8011996 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8011992:	2301      	movs	r3, #1
 8011994:	e075      	b.n	8011a82 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8011996:	68fb      	ldr	r3, [r7, #12]
 8011998:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801199c:	2b01      	cmp	r3, #1
 801199e:	d101      	bne.n	80119a4 <HAL_UART_Transmit+0x3e>
 80119a0:	2302      	movs	r3, #2
 80119a2:	e06e      	b.n	8011a82 <HAL_UART_Transmit+0x11c>
 80119a4:	68fb      	ldr	r3, [r7, #12]
 80119a6:	2201      	movs	r2, #1
 80119a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80119ac:	68fb      	ldr	r3, [r7, #12]
 80119ae:	2200      	movs	r2, #0
 80119b0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80119b2:	68fb      	ldr	r3, [r7, #12]
 80119b4:	2221      	movs	r2, #33	; 0x21
 80119b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80119ba:	f7f8 fe9b 	bl	800a6f4 <HAL_GetTick>
 80119be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80119c0:	68fb      	ldr	r3, [r7, #12]
 80119c2:	88fa      	ldrh	r2, [r7, #6]
 80119c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80119c6:	68fb      	ldr	r3, [r7, #12]
 80119c8:	88fa      	ldrh	r2, [r7, #6]
 80119ca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80119cc:	68fb      	ldr	r3, [r7, #12]
 80119ce:	689b      	ldr	r3, [r3, #8]
 80119d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80119d4:	d108      	bne.n	80119e8 <HAL_UART_Transmit+0x82>
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	691b      	ldr	r3, [r3, #16]
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d104      	bne.n	80119e8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80119de:	2300      	movs	r3, #0
 80119e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80119e2:	68bb      	ldr	r3, [r7, #8]
 80119e4:	61bb      	str	r3, [r7, #24]
 80119e6:	e003      	b.n	80119f0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80119e8:	68bb      	ldr	r3, [r7, #8]
 80119ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80119ec:	2300      	movs	r3, #0
 80119ee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80119f0:	68fb      	ldr	r3, [r7, #12]
 80119f2:	2200      	movs	r2, #0
 80119f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80119f8:	e02a      	b.n	8011a50 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80119fa:	683b      	ldr	r3, [r7, #0]
 80119fc:	9300      	str	r3, [sp, #0]
 80119fe:	697b      	ldr	r3, [r7, #20]
 8011a00:	2200      	movs	r2, #0
 8011a02:	2180      	movs	r1, #128	; 0x80
 8011a04:	68f8      	ldr	r0, [r7, #12]
 8011a06:	f000 f840 	bl	8011a8a <UART_WaitOnFlagUntilTimeout>
 8011a0a:	4603      	mov	r3, r0
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d001      	beq.n	8011a14 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8011a10:	2303      	movs	r3, #3
 8011a12:	e036      	b.n	8011a82 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8011a14:	69fb      	ldr	r3, [r7, #28]
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d10b      	bne.n	8011a32 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8011a1a:	69bb      	ldr	r3, [r7, #24]
 8011a1c:	881b      	ldrh	r3, [r3, #0]
 8011a1e:	461a      	mov	r2, r3
 8011a20:	68fb      	ldr	r3, [r7, #12]
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011a28:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8011a2a:	69bb      	ldr	r3, [r7, #24]
 8011a2c:	3302      	adds	r3, #2
 8011a2e:	61bb      	str	r3, [r7, #24]
 8011a30:	e007      	b.n	8011a42 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8011a32:	69fb      	ldr	r3, [r7, #28]
 8011a34:	781a      	ldrb	r2, [r3, #0]
 8011a36:	68fb      	ldr	r3, [r7, #12]
 8011a38:	681b      	ldr	r3, [r3, #0]
 8011a3a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8011a3c:	69fb      	ldr	r3, [r7, #28]
 8011a3e:	3301      	adds	r3, #1
 8011a40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8011a42:	68fb      	ldr	r3, [r7, #12]
 8011a44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8011a46:	b29b      	uxth	r3, r3
 8011a48:	3b01      	subs	r3, #1
 8011a4a:	b29a      	uxth	r2, r3
 8011a4c:	68fb      	ldr	r3, [r7, #12]
 8011a4e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8011a50:	68fb      	ldr	r3, [r7, #12]
 8011a52:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8011a54:	b29b      	uxth	r3, r3
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d1cf      	bne.n	80119fa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8011a5a:	683b      	ldr	r3, [r7, #0]
 8011a5c:	9300      	str	r3, [sp, #0]
 8011a5e:	697b      	ldr	r3, [r7, #20]
 8011a60:	2200      	movs	r2, #0
 8011a62:	2140      	movs	r1, #64	; 0x40
 8011a64:	68f8      	ldr	r0, [r7, #12]
 8011a66:	f000 f810 	bl	8011a8a <UART_WaitOnFlagUntilTimeout>
 8011a6a:	4603      	mov	r3, r0
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	d001      	beq.n	8011a74 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8011a70:	2303      	movs	r3, #3
 8011a72:	e006      	b.n	8011a82 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8011a74:	68fb      	ldr	r3, [r7, #12]
 8011a76:	2220      	movs	r2, #32
 8011a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8011a7c:	2300      	movs	r3, #0
 8011a7e:	e000      	b.n	8011a82 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8011a80:	2302      	movs	r3, #2
  }
}
 8011a82:	4618      	mov	r0, r3
 8011a84:	3720      	adds	r7, #32
 8011a86:	46bd      	mov	sp, r7
 8011a88:	bd80      	pop	{r7, pc}

08011a8a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8011a8a:	b580      	push	{r7, lr}
 8011a8c:	b090      	sub	sp, #64	; 0x40
 8011a8e:	af00      	add	r7, sp, #0
 8011a90:	60f8      	str	r0, [r7, #12]
 8011a92:	60b9      	str	r1, [r7, #8]
 8011a94:	603b      	str	r3, [r7, #0]
 8011a96:	4613      	mov	r3, r2
 8011a98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011a9a:	e050      	b.n	8011b3e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011a9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011aa2:	d04c      	beq.n	8011b3e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8011aa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d007      	beq.n	8011aba <UART_WaitOnFlagUntilTimeout+0x30>
 8011aaa:	f7f8 fe23 	bl	800a6f4 <HAL_GetTick>
 8011aae:	4602      	mov	r2, r0
 8011ab0:	683b      	ldr	r3, [r7, #0]
 8011ab2:	1ad3      	subs	r3, r2, r3
 8011ab4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011ab6:	429a      	cmp	r2, r3
 8011ab8:	d241      	bcs.n	8011b3e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8011aba:	68fb      	ldr	r3, [r7, #12]
 8011abc:	681b      	ldr	r3, [r3, #0]
 8011abe:	330c      	adds	r3, #12
 8011ac0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ac4:	e853 3f00 	ldrex	r3, [r3]
 8011ac8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011acc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8011ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011ad2:	68fb      	ldr	r3, [r7, #12]
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	330c      	adds	r3, #12
 8011ad8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011ada:	637a      	str	r2, [r7, #52]	; 0x34
 8011adc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ade:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011ae0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011ae2:	e841 2300 	strex	r3, r2, [r1]
 8011ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8011ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d1e5      	bne.n	8011aba <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011aee:	68fb      	ldr	r3, [r7, #12]
 8011af0:	681b      	ldr	r3, [r3, #0]
 8011af2:	3314      	adds	r3, #20
 8011af4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011af6:	697b      	ldr	r3, [r7, #20]
 8011af8:	e853 3f00 	ldrex	r3, [r3]
 8011afc:	613b      	str	r3, [r7, #16]
   return(result);
 8011afe:	693b      	ldr	r3, [r7, #16]
 8011b00:	f023 0301 	bic.w	r3, r3, #1
 8011b04:	63bb      	str	r3, [r7, #56]	; 0x38
 8011b06:	68fb      	ldr	r3, [r7, #12]
 8011b08:	681b      	ldr	r3, [r3, #0]
 8011b0a:	3314      	adds	r3, #20
 8011b0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011b0e:	623a      	str	r2, [r7, #32]
 8011b10:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b12:	69f9      	ldr	r1, [r7, #28]
 8011b14:	6a3a      	ldr	r2, [r7, #32]
 8011b16:	e841 2300 	strex	r3, r2, [r1]
 8011b1a:	61bb      	str	r3, [r7, #24]
   return(result);
 8011b1c:	69bb      	ldr	r3, [r7, #24]
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d1e5      	bne.n	8011aee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8011b22:	68fb      	ldr	r3, [r7, #12]
 8011b24:	2220      	movs	r2, #32
 8011b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	2220      	movs	r2, #32
 8011b2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8011b32:	68fb      	ldr	r3, [r7, #12]
 8011b34:	2200      	movs	r2, #0
 8011b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8011b3a:	2303      	movs	r3, #3
 8011b3c:	e00f      	b.n	8011b5e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011b3e:	68fb      	ldr	r3, [r7, #12]
 8011b40:	681b      	ldr	r3, [r3, #0]
 8011b42:	681a      	ldr	r2, [r3, #0]
 8011b44:	68bb      	ldr	r3, [r7, #8]
 8011b46:	4013      	ands	r3, r2
 8011b48:	68ba      	ldr	r2, [r7, #8]
 8011b4a:	429a      	cmp	r2, r3
 8011b4c:	bf0c      	ite	eq
 8011b4e:	2301      	moveq	r3, #1
 8011b50:	2300      	movne	r3, #0
 8011b52:	b2db      	uxtb	r3, r3
 8011b54:	461a      	mov	r2, r3
 8011b56:	79fb      	ldrb	r3, [r7, #7]
 8011b58:	429a      	cmp	r2, r3
 8011b5a:	d09f      	beq.n	8011a9c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8011b5c:	2300      	movs	r3, #0
}
 8011b5e:	4618      	mov	r0, r3
 8011b60:	3740      	adds	r7, #64	; 0x40
 8011b62:	46bd      	mov	sp, r7
 8011b64:	bd80      	pop	{r7, pc}
	...

08011b68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011b68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011b6c:	b0c0      	sub	sp, #256	; 0x100
 8011b6e:	af00      	add	r7, sp, #0
 8011b70:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	691b      	ldr	r3, [r3, #16]
 8011b7c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8011b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011b84:	68d9      	ldr	r1, [r3, #12]
 8011b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011b8a:	681a      	ldr	r2, [r3, #0]
 8011b8c:	ea40 0301 	orr.w	r3, r0, r1
 8011b90:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8011b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011b96:	689a      	ldr	r2, [r3, #8]
 8011b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011b9c:	691b      	ldr	r3, [r3, #16]
 8011b9e:	431a      	orrs	r2, r3
 8011ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011ba4:	695b      	ldr	r3, [r3, #20]
 8011ba6:	431a      	orrs	r2, r3
 8011ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011bac:	69db      	ldr	r3, [r3, #28]
 8011bae:	4313      	orrs	r3, r2
 8011bb0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8011bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011bb8:	681b      	ldr	r3, [r3, #0]
 8011bba:	68db      	ldr	r3, [r3, #12]
 8011bbc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8011bc0:	f021 010c 	bic.w	r1, r1, #12
 8011bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011bc8:	681a      	ldr	r2, [r3, #0]
 8011bca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011bce:	430b      	orrs	r3, r1
 8011bd0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8011bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011bd6:	681b      	ldr	r3, [r3, #0]
 8011bd8:	695b      	ldr	r3, [r3, #20]
 8011bda:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8011bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011be2:	6999      	ldr	r1, [r3, #24]
 8011be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011be8:	681a      	ldr	r2, [r3, #0]
 8011bea:	ea40 0301 	orr.w	r3, r0, r1
 8011bee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8011bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011bf4:	681a      	ldr	r2, [r3, #0]
 8011bf6:	4b8f      	ldr	r3, [pc, #572]	; (8011e34 <UART_SetConfig+0x2cc>)
 8011bf8:	429a      	cmp	r2, r3
 8011bfa:	d005      	beq.n	8011c08 <UART_SetConfig+0xa0>
 8011bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011c00:	681a      	ldr	r2, [r3, #0]
 8011c02:	4b8d      	ldr	r3, [pc, #564]	; (8011e38 <UART_SetConfig+0x2d0>)
 8011c04:	429a      	cmp	r2, r3
 8011c06:	d104      	bne.n	8011c12 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8011c08:	f7fd fc7a 	bl	800f500 <HAL_RCC_GetPCLK2Freq>
 8011c0c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8011c10:	e003      	b.n	8011c1a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8011c12:	f7fd fc61 	bl	800f4d8 <HAL_RCC_GetPCLK1Freq>
 8011c16:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011c1e:	69db      	ldr	r3, [r3, #28]
 8011c20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011c24:	f040 810c 	bne.w	8011e40 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8011c28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011c2c:	2200      	movs	r2, #0
 8011c2e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8011c32:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8011c36:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8011c3a:	4622      	mov	r2, r4
 8011c3c:	462b      	mov	r3, r5
 8011c3e:	1891      	adds	r1, r2, r2
 8011c40:	65b9      	str	r1, [r7, #88]	; 0x58
 8011c42:	415b      	adcs	r3, r3
 8011c44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011c46:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8011c4a:	4621      	mov	r1, r4
 8011c4c:	eb12 0801 	adds.w	r8, r2, r1
 8011c50:	4629      	mov	r1, r5
 8011c52:	eb43 0901 	adc.w	r9, r3, r1
 8011c56:	f04f 0200 	mov.w	r2, #0
 8011c5a:	f04f 0300 	mov.w	r3, #0
 8011c5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8011c62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8011c66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8011c6a:	4690      	mov	r8, r2
 8011c6c:	4699      	mov	r9, r3
 8011c6e:	4623      	mov	r3, r4
 8011c70:	eb18 0303 	adds.w	r3, r8, r3
 8011c74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8011c78:	462b      	mov	r3, r5
 8011c7a:	eb49 0303 	adc.w	r3, r9, r3
 8011c7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8011c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011c86:	685b      	ldr	r3, [r3, #4]
 8011c88:	2200      	movs	r2, #0
 8011c8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8011c8e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8011c92:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8011c96:	460b      	mov	r3, r1
 8011c98:	18db      	adds	r3, r3, r3
 8011c9a:	653b      	str	r3, [r7, #80]	; 0x50
 8011c9c:	4613      	mov	r3, r2
 8011c9e:	eb42 0303 	adc.w	r3, r2, r3
 8011ca2:	657b      	str	r3, [r7, #84]	; 0x54
 8011ca4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8011ca8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8011cac:	f7ef f80c 	bl	8000cc8 <__aeabi_uldivmod>
 8011cb0:	4602      	mov	r2, r0
 8011cb2:	460b      	mov	r3, r1
 8011cb4:	4b61      	ldr	r3, [pc, #388]	; (8011e3c <UART_SetConfig+0x2d4>)
 8011cb6:	fba3 2302 	umull	r2, r3, r3, r2
 8011cba:	095b      	lsrs	r3, r3, #5
 8011cbc:	011c      	lsls	r4, r3, #4
 8011cbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011cc2:	2200      	movs	r2, #0
 8011cc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8011cc8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8011ccc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8011cd0:	4642      	mov	r2, r8
 8011cd2:	464b      	mov	r3, r9
 8011cd4:	1891      	adds	r1, r2, r2
 8011cd6:	64b9      	str	r1, [r7, #72]	; 0x48
 8011cd8:	415b      	adcs	r3, r3
 8011cda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011cdc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8011ce0:	4641      	mov	r1, r8
 8011ce2:	eb12 0a01 	adds.w	sl, r2, r1
 8011ce6:	4649      	mov	r1, r9
 8011ce8:	eb43 0b01 	adc.w	fp, r3, r1
 8011cec:	f04f 0200 	mov.w	r2, #0
 8011cf0:	f04f 0300 	mov.w	r3, #0
 8011cf4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8011cf8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8011cfc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011d00:	4692      	mov	sl, r2
 8011d02:	469b      	mov	fp, r3
 8011d04:	4643      	mov	r3, r8
 8011d06:	eb1a 0303 	adds.w	r3, sl, r3
 8011d0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8011d0e:	464b      	mov	r3, r9
 8011d10:	eb4b 0303 	adc.w	r3, fp, r3
 8011d14:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8011d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011d1c:	685b      	ldr	r3, [r3, #4]
 8011d1e:	2200      	movs	r2, #0
 8011d20:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8011d24:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8011d28:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8011d2c:	460b      	mov	r3, r1
 8011d2e:	18db      	adds	r3, r3, r3
 8011d30:	643b      	str	r3, [r7, #64]	; 0x40
 8011d32:	4613      	mov	r3, r2
 8011d34:	eb42 0303 	adc.w	r3, r2, r3
 8011d38:	647b      	str	r3, [r7, #68]	; 0x44
 8011d3a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8011d3e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8011d42:	f7ee ffc1 	bl	8000cc8 <__aeabi_uldivmod>
 8011d46:	4602      	mov	r2, r0
 8011d48:	460b      	mov	r3, r1
 8011d4a:	4611      	mov	r1, r2
 8011d4c:	4b3b      	ldr	r3, [pc, #236]	; (8011e3c <UART_SetConfig+0x2d4>)
 8011d4e:	fba3 2301 	umull	r2, r3, r3, r1
 8011d52:	095b      	lsrs	r3, r3, #5
 8011d54:	2264      	movs	r2, #100	; 0x64
 8011d56:	fb02 f303 	mul.w	r3, r2, r3
 8011d5a:	1acb      	subs	r3, r1, r3
 8011d5c:	00db      	lsls	r3, r3, #3
 8011d5e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8011d62:	4b36      	ldr	r3, [pc, #216]	; (8011e3c <UART_SetConfig+0x2d4>)
 8011d64:	fba3 2302 	umull	r2, r3, r3, r2
 8011d68:	095b      	lsrs	r3, r3, #5
 8011d6a:	005b      	lsls	r3, r3, #1
 8011d6c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8011d70:	441c      	add	r4, r3
 8011d72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011d76:	2200      	movs	r2, #0
 8011d78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8011d7c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8011d80:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8011d84:	4642      	mov	r2, r8
 8011d86:	464b      	mov	r3, r9
 8011d88:	1891      	adds	r1, r2, r2
 8011d8a:	63b9      	str	r1, [r7, #56]	; 0x38
 8011d8c:	415b      	adcs	r3, r3
 8011d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011d90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8011d94:	4641      	mov	r1, r8
 8011d96:	1851      	adds	r1, r2, r1
 8011d98:	6339      	str	r1, [r7, #48]	; 0x30
 8011d9a:	4649      	mov	r1, r9
 8011d9c:	414b      	adcs	r3, r1
 8011d9e:	637b      	str	r3, [r7, #52]	; 0x34
 8011da0:	f04f 0200 	mov.w	r2, #0
 8011da4:	f04f 0300 	mov.w	r3, #0
 8011da8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8011dac:	4659      	mov	r1, fp
 8011dae:	00cb      	lsls	r3, r1, #3
 8011db0:	4651      	mov	r1, sl
 8011db2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011db6:	4651      	mov	r1, sl
 8011db8:	00ca      	lsls	r2, r1, #3
 8011dba:	4610      	mov	r0, r2
 8011dbc:	4619      	mov	r1, r3
 8011dbe:	4603      	mov	r3, r0
 8011dc0:	4642      	mov	r2, r8
 8011dc2:	189b      	adds	r3, r3, r2
 8011dc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8011dc8:	464b      	mov	r3, r9
 8011dca:	460a      	mov	r2, r1
 8011dcc:	eb42 0303 	adc.w	r3, r2, r3
 8011dd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8011dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011dd8:	685b      	ldr	r3, [r3, #4]
 8011dda:	2200      	movs	r2, #0
 8011ddc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8011de0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8011de4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8011de8:	460b      	mov	r3, r1
 8011dea:	18db      	adds	r3, r3, r3
 8011dec:	62bb      	str	r3, [r7, #40]	; 0x28
 8011dee:	4613      	mov	r3, r2
 8011df0:	eb42 0303 	adc.w	r3, r2, r3
 8011df4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011df6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8011dfa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8011dfe:	f7ee ff63 	bl	8000cc8 <__aeabi_uldivmod>
 8011e02:	4602      	mov	r2, r0
 8011e04:	460b      	mov	r3, r1
 8011e06:	4b0d      	ldr	r3, [pc, #52]	; (8011e3c <UART_SetConfig+0x2d4>)
 8011e08:	fba3 1302 	umull	r1, r3, r3, r2
 8011e0c:	095b      	lsrs	r3, r3, #5
 8011e0e:	2164      	movs	r1, #100	; 0x64
 8011e10:	fb01 f303 	mul.w	r3, r1, r3
 8011e14:	1ad3      	subs	r3, r2, r3
 8011e16:	00db      	lsls	r3, r3, #3
 8011e18:	3332      	adds	r3, #50	; 0x32
 8011e1a:	4a08      	ldr	r2, [pc, #32]	; (8011e3c <UART_SetConfig+0x2d4>)
 8011e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8011e20:	095b      	lsrs	r3, r3, #5
 8011e22:	f003 0207 	and.w	r2, r3, #7
 8011e26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011e2a:	681b      	ldr	r3, [r3, #0]
 8011e2c:	4422      	add	r2, r4
 8011e2e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8011e30:	e106      	b.n	8012040 <UART_SetConfig+0x4d8>
 8011e32:	bf00      	nop
 8011e34:	40011000 	.word	0x40011000
 8011e38:	40011400 	.word	0x40011400
 8011e3c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8011e40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011e44:	2200      	movs	r2, #0
 8011e46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8011e4a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8011e4e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8011e52:	4642      	mov	r2, r8
 8011e54:	464b      	mov	r3, r9
 8011e56:	1891      	adds	r1, r2, r2
 8011e58:	6239      	str	r1, [r7, #32]
 8011e5a:	415b      	adcs	r3, r3
 8011e5c:	627b      	str	r3, [r7, #36]	; 0x24
 8011e5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8011e62:	4641      	mov	r1, r8
 8011e64:	1854      	adds	r4, r2, r1
 8011e66:	4649      	mov	r1, r9
 8011e68:	eb43 0501 	adc.w	r5, r3, r1
 8011e6c:	f04f 0200 	mov.w	r2, #0
 8011e70:	f04f 0300 	mov.w	r3, #0
 8011e74:	00eb      	lsls	r3, r5, #3
 8011e76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8011e7a:	00e2      	lsls	r2, r4, #3
 8011e7c:	4614      	mov	r4, r2
 8011e7e:	461d      	mov	r5, r3
 8011e80:	4643      	mov	r3, r8
 8011e82:	18e3      	adds	r3, r4, r3
 8011e84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8011e88:	464b      	mov	r3, r9
 8011e8a:	eb45 0303 	adc.w	r3, r5, r3
 8011e8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8011e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011e96:	685b      	ldr	r3, [r3, #4]
 8011e98:	2200      	movs	r2, #0
 8011e9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8011e9e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8011ea2:	f04f 0200 	mov.w	r2, #0
 8011ea6:	f04f 0300 	mov.w	r3, #0
 8011eaa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8011eae:	4629      	mov	r1, r5
 8011eb0:	008b      	lsls	r3, r1, #2
 8011eb2:	4621      	mov	r1, r4
 8011eb4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011eb8:	4621      	mov	r1, r4
 8011eba:	008a      	lsls	r2, r1, #2
 8011ebc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8011ec0:	f7ee ff02 	bl	8000cc8 <__aeabi_uldivmod>
 8011ec4:	4602      	mov	r2, r0
 8011ec6:	460b      	mov	r3, r1
 8011ec8:	4b60      	ldr	r3, [pc, #384]	; (801204c <UART_SetConfig+0x4e4>)
 8011eca:	fba3 2302 	umull	r2, r3, r3, r2
 8011ece:	095b      	lsrs	r3, r3, #5
 8011ed0:	011c      	lsls	r4, r3, #4
 8011ed2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011ed6:	2200      	movs	r2, #0
 8011ed8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8011edc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8011ee0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8011ee4:	4642      	mov	r2, r8
 8011ee6:	464b      	mov	r3, r9
 8011ee8:	1891      	adds	r1, r2, r2
 8011eea:	61b9      	str	r1, [r7, #24]
 8011eec:	415b      	adcs	r3, r3
 8011eee:	61fb      	str	r3, [r7, #28]
 8011ef0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8011ef4:	4641      	mov	r1, r8
 8011ef6:	1851      	adds	r1, r2, r1
 8011ef8:	6139      	str	r1, [r7, #16]
 8011efa:	4649      	mov	r1, r9
 8011efc:	414b      	adcs	r3, r1
 8011efe:	617b      	str	r3, [r7, #20]
 8011f00:	f04f 0200 	mov.w	r2, #0
 8011f04:	f04f 0300 	mov.w	r3, #0
 8011f08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8011f0c:	4659      	mov	r1, fp
 8011f0e:	00cb      	lsls	r3, r1, #3
 8011f10:	4651      	mov	r1, sl
 8011f12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011f16:	4651      	mov	r1, sl
 8011f18:	00ca      	lsls	r2, r1, #3
 8011f1a:	4610      	mov	r0, r2
 8011f1c:	4619      	mov	r1, r3
 8011f1e:	4603      	mov	r3, r0
 8011f20:	4642      	mov	r2, r8
 8011f22:	189b      	adds	r3, r3, r2
 8011f24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011f28:	464b      	mov	r3, r9
 8011f2a:	460a      	mov	r2, r1
 8011f2c:	eb42 0303 	adc.w	r3, r2, r3
 8011f30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011f38:	685b      	ldr	r3, [r3, #4]
 8011f3a:	2200      	movs	r2, #0
 8011f3c:	67bb      	str	r3, [r7, #120]	; 0x78
 8011f3e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8011f40:	f04f 0200 	mov.w	r2, #0
 8011f44:	f04f 0300 	mov.w	r3, #0
 8011f48:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8011f4c:	4649      	mov	r1, r9
 8011f4e:	008b      	lsls	r3, r1, #2
 8011f50:	4641      	mov	r1, r8
 8011f52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011f56:	4641      	mov	r1, r8
 8011f58:	008a      	lsls	r2, r1, #2
 8011f5a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8011f5e:	f7ee feb3 	bl	8000cc8 <__aeabi_uldivmod>
 8011f62:	4602      	mov	r2, r0
 8011f64:	460b      	mov	r3, r1
 8011f66:	4611      	mov	r1, r2
 8011f68:	4b38      	ldr	r3, [pc, #224]	; (801204c <UART_SetConfig+0x4e4>)
 8011f6a:	fba3 2301 	umull	r2, r3, r3, r1
 8011f6e:	095b      	lsrs	r3, r3, #5
 8011f70:	2264      	movs	r2, #100	; 0x64
 8011f72:	fb02 f303 	mul.w	r3, r2, r3
 8011f76:	1acb      	subs	r3, r1, r3
 8011f78:	011b      	lsls	r3, r3, #4
 8011f7a:	3332      	adds	r3, #50	; 0x32
 8011f7c:	4a33      	ldr	r2, [pc, #204]	; (801204c <UART_SetConfig+0x4e4>)
 8011f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8011f82:	095b      	lsrs	r3, r3, #5
 8011f84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011f88:	441c      	add	r4, r3
 8011f8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011f8e:	2200      	movs	r2, #0
 8011f90:	673b      	str	r3, [r7, #112]	; 0x70
 8011f92:	677a      	str	r2, [r7, #116]	; 0x74
 8011f94:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8011f98:	4642      	mov	r2, r8
 8011f9a:	464b      	mov	r3, r9
 8011f9c:	1891      	adds	r1, r2, r2
 8011f9e:	60b9      	str	r1, [r7, #8]
 8011fa0:	415b      	adcs	r3, r3
 8011fa2:	60fb      	str	r3, [r7, #12]
 8011fa4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8011fa8:	4641      	mov	r1, r8
 8011faa:	1851      	adds	r1, r2, r1
 8011fac:	6039      	str	r1, [r7, #0]
 8011fae:	4649      	mov	r1, r9
 8011fb0:	414b      	adcs	r3, r1
 8011fb2:	607b      	str	r3, [r7, #4]
 8011fb4:	f04f 0200 	mov.w	r2, #0
 8011fb8:	f04f 0300 	mov.w	r3, #0
 8011fbc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8011fc0:	4659      	mov	r1, fp
 8011fc2:	00cb      	lsls	r3, r1, #3
 8011fc4:	4651      	mov	r1, sl
 8011fc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011fca:	4651      	mov	r1, sl
 8011fcc:	00ca      	lsls	r2, r1, #3
 8011fce:	4610      	mov	r0, r2
 8011fd0:	4619      	mov	r1, r3
 8011fd2:	4603      	mov	r3, r0
 8011fd4:	4642      	mov	r2, r8
 8011fd6:	189b      	adds	r3, r3, r2
 8011fd8:	66bb      	str	r3, [r7, #104]	; 0x68
 8011fda:	464b      	mov	r3, r9
 8011fdc:	460a      	mov	r2, r1
 8011fde:	eb42 0303 	adc.w	r3, r2, r3
 8011fe2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8011fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011fe8:	685b      	ldr	r3, [r3, #4]
 8011fea:	2200      	movs	r2, #0
 8011fec:	663b      	str	r3, [r7, #96]	; 0x60
 8011fee:	667a      	str	r2, [r7, #100]	; 0x64
 8011ff0:	f04f 0200 	mov.w	r2, #0
 8011ff4:	f04f 0300 	mov.w	r3, #0
 8011ff8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8011ffc:	4649      	mov	r1, r9
 8011ffe:	008b      	lsls	r3, r1, #2
 8012000:	4641      	mov	r1, r8
 8012002:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8012006:	4641      	mov	r1, r8
 8012008:	008a      	lsls	r2, r1, #2
 801200a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 801200e:	f7ee fe5b 	bl	8000cc8 <__aeabi_uldivmod>
 8012012:	4602      	mov	r2, r0
 8012014:	460b      	mov	r3, r1
 8012016:	4b0d      	ldr	r3, [pc, #52]	; (801204c <UART_SetConfig+0x4e4>)
 8012018:	fba3 1302 	umull	r1, r3, r3, r2
 801201c:	095b      	lsrs	r3, r3, #5
 801201e:	2164      	movs	r1, #100	; 0x64
 8012020:	fb01 f303 	mul.w	r3, r1, r3
 8012024:	1ad3      	subs	r3, r2, r3
 8012026:	011b      	lsls	r3, r3, #4
 8012028:	3332      	adds	r3, #50	; 0x32
 801202a:	4a08      	ldr	r2, [pc, #32]	; (801204c <UART_SetConfig+0x4e4>)
 801202c:	fba2 2303 	umull	r2, r3, r2, r3
 8012030:	095b      	lsrs	r3, r3, #5
 8012032:	f003 020f 	and.w	r2, r3, #15
 8012036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	4422      	add	r2, r4
 801203e:	609a      	str	r2, [r3, #8]
}
 8012040:	bf00      	nop
 8012042:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8012046:	46bd      	mov	sp, r7
 8012048:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801204c:	51eb851f 	.word	0x51eb851f

08012050 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012050:	b084      	sub	sp, #16
 8012052:	b580      	push	{r7, lr}
 8012054:	b084      	sub	sp, #16
 8012056:	af00      	add	r7, sp, #0
 8012058:	6078      	str	r0, [r7, #4]
 801205a:	f107 001c 	add.w	r0, r7, #28
 801205e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012064:	2b01      	cmp	r3, #1
 8012066:	d122      	bne.n	80120ae <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801206c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	68db      	ldr	r3, [r3, #12]
 8012078:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 801207c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012080:	687a      	ldr	r2, [r7, #4]
 8012082:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	68db      	ldr	r3, [r3, #12]
 8012088:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8012090:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012092:	2b01      	cmp	r3, #1
 8012094:	d105      	bne.n	80120a2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	68db      	ldr	r3, [r3, #12]
 801209a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80120a2:	6878      	ldr	r0, [r7, #4]
 80120a4:	f001 fbe8 	bl	8013878 <USB_CoreReset>
 80120a8:	4603      	mov	r3, r0
 80120aa:	73fb      	strb	r3, [r7, #15]
 80120ac:	e01a      	b.n	80120e4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	68db      	ldr	r3, [r3, #12]
 80120b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80120ba:	6878      	ldr	r0, [r7, #4]
 80120bc:	f001 fbdc 	bl	8013878 <USB_CoreReset>
 80120c0:	4603      	mov	r3, r0
 80120c2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80120c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d106      	bne.n	80120d8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80120ce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	639a      	str	r2, [r3, #56]	; 0x38
 80120d6:	e005      	b.n	80120e4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80120dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80120e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120e6:	2b01      	cmp	r3, #1
 80120e8:	d10b      	bne.n	8012102 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	689b      	ldr	r3, [r3, #8]
 80120ee:	f043 0206 	orr.w	r2, r3, #6
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	689b      	ldr	r3, [r3, #8]
 80120fa:	f043 0220 	orr.w	r2, r3, #32
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8012102:	7bfb      	ldrb	r3, [r7, #15]
}
 8012104:	4618      	mov	r0, r3
 8012106:	3710      	adds	r7, #16
 8012108:	46bd      	mov	sp, r7
 801210a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801210e:	b004      	add	sp, #16
 8012110:	4770      	bx	lr
	...

08012114 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8012114:	b480      	push	{r7}
 8012116:	b087      	sub	sp, #28
 8012118:	af00      	add	r7, sp, #0
 801211a:	60f8      	str	r0, [r7, #12]
 801211c:	60b9      	str	r1, [r7, #8]
 801211e:	4613      	mov	r3, r2
 8012120:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8012122:	79fb      	ldrb	r3, [r7, #7]
 8012124:	2b02      	cmp	r3, #2
 8012126:	d165      	bne.n	80121f4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8012128:	68bb      	ldr	r3, [r7, #8]
 801212a:	4a41      	ldr	r2, [pc, #260]	; (8012230 <USB_SetTurnaroundTime+0x11c>)
 801212c:	4293      	cmp	r3, r2
 801212e:	d906      	bls.n	801213e <USB_SetTurnaroundTime+0x2a>
 8012130:	68bb      	ldr	r3, [r7, #8]
 8012132:	4a40      	ldr	r2, [pc, #256]	; (8012234 <USB_SetTurnaroundTime+0x120>)
 8012134:	4293      	cmp	r3, r2
 8012136:	d202      	bcs.n	801213e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8012138:	230f      	movs	r3, #15
 801213a:	617b      	str	r3, [r7, #20]
 801213c:	e062      	b.n	8012204 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801213e:	68bb      	ldr	r3, [r7, #8]
 8012140:	4a3c      	ldr	r2, [pc, #240]	; (8012234 <USB_SetTurnaroundTime+0x120>)
 8012142:	4293      	cmp	r3, r2
 8012144:	d306      	bcc.n	8012154 <USB_SetTurnaroundTime+0x40>
 8012146:	68bb      	ldr	r3, [r7, #8]
 8012148:	4a3b      	ldr	r2, [pc, #236]	; (8012238 <USB_SetTurnaroundTime+0x124>)
 801214a:	4293      	cmp	r3, r2
 801214c:	d202      	bcs.n	8012154 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 801214e:	230e      	movs	r3, #14
 8012150:	617b      	str	r3, [r7, #20]
 8012152:	e057      	b.n	8012204 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8012154:	68bb      	ldr	r3, [r7, #8]
 8012156:	4a38      	ldr	r2, [pc, #224]	; (8012238 <USB_SetTurnaroundTime+0x124>)
 8012158:	4293      	cmp	r3, r2
 801215a:	d306      	bcc.n	801216a <USB_SetTurnaroundTime+0x56>
 801215c:	68bb      	ldr	r3, [r7, #8]
 801215e:	4a37      	ldr	r2, [pc, #220]	; (801223c <USB_SetTurnaroundTime+0x128>)
 8012160:	4293      	cmp	r3, r2
 8012162:	d202      	bcs.n	801216a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8012164:	230d      	movs	r3, #13
 8012166:	617b      	str	r3, [r7, #20]
 8012168:	e04c      	b.n	8012204 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 801216a:	68bb      	ldr	r3, [r7, #8]
 801216c:	4a33      	ldr	r2, [pc, #204]	; (801223c <USB_SetTurnaroundTime+0x128>)
 801216e:	4293      	cmp	r3, r2
 8012170:	d306      	bcc.n	8012180 <USB_SetTurnaroundTime+0x6c>
 8012172:	68bb      	ldr	r3, [r7, #8]
 8012174:	4a32      	ldr	r2, [pc, #200]	; (8012240 <USB_SetTurnaroundTime+0x12c>)
 8012176:	4293      	cmp	r3, r2
 8012178:	d802      	bhi.n	8012180 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 801217a:	230c      	movs	r3, #12
 801217c:	617b      	str	r3, [r7, #20]
 801217e:	e041      	b.n	8012204 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8012180:	68bb      	ldr	r3, [r7, #8]
 8012182:	4a2f      	ldr	r2, [pc, #188]	; (8012240 <USB_SetTurnaroundTime+0x12c>)
 8012184:	4293      	cmp	r3, r2
 8012186:	d906      	bls.n	8012196 <USB_SetTurnaroundTime+0x82>
 8012188:	68bb      	ldr	r3, [r7, #8]
 801218a:	4a2e      	ldr	r2, [pc, #184]	; (8012244 <USB_SetTurnaroundTime+0x130>)
 801218c:	4293      	cmp	r3, r2
 801218e:	d802      	bhi.n	8012196 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8012190:	230b      	movs	r3, #11
 8012192:	617b      	str	r3, [r7, #20]
 8012194:	e036      	b.n	8012204 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8012196:	68bb      	ldr	r3, [r7, #8]
 8012198:	4a2a      	ldr	r2, [pc, #168]	; (8012244 <USB_SetTurnaroundTime+0x130>)
 801219a:	4293      	cmp	r3, r2
 801219c:	d906      	bls.n	80121ac <USB_SetTurnaroundTime+0x98>
 801219e:	68bb      	ldr	r3, [r7, #8]
 80121a0:	4a29      	ldr	r2, [pc, #164]	; (8012248 <USB_SetTurnaroundTime+0x134>)
 80121a2:	4293      	cmp	r3, r2
 80121a4:	d802      	bhi.n	80121ac <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80121a6:	230a      	movs	r3, #10
 80121a8:	617b      	str	r3, [r7, #20]
 80121aa:	e02b      	b.n	8012204 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80121ac:	68bb      	ldr	r3, [r7, #8]
 80121ae:	4a26      	ldr	r2, [pc, #152]	; (8012248 <USB_SetTurnaroundTime+0x134>)
 80121b0:	4293      	cmp	r3, r2
 80121b2:	d906      	bls.n	80121c2 <USB_SetTurnaroundTime+0xae>
 80121b4:	68bb      	ldr	r3, [r7, #8]
 80121b6:	4a25      	ldr	r2, [pc, #148]	; (801224c <USB_SetTurnaroundTime+0x138>)
 80121b8:	4293      	cmp	r3, r2
 80121ba:	d202      	bcs.n	80121c2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80121bc:	2309      	movs	r3, #9
 80121be:	617b      	str	r3, [r7, #20]
 80121c0:	e020      	b.n	8012204 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80121c2:	68bb      	ldr	r3, [r7, #8]
 80121c4:	4a21      	ldr	r2, [pc, #132]	; (801224c <USB_SetTurnaroundTime+0x138>)
 80121c6:	4293      	cmp	r3, r2
 80121c8:	d306      	bcc.n	80121d8 <USB_SetTurnaroundTime+0xc4>
 80121ca:	68bb      	ldr	r3, [r7, #8]
 80121cc:	4a20      	ldr	r2, [pc, #128]	; (8012250 <USB_SetTurnaroundTime+0x13c>)
 80121ce:	4293      	cmp	r3, r2
 80121d0:	d802      	bhi.n	80121d8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80121d2:	2308      	movs	r3, #8
 80121d4:	617b      	str	r3, [r7, #20]
 80121d6:	e015      	b.n	8012204 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80121d8:	68bb      	ldr	r3, [r7, #8]
 80121da:	4a1d      	ldr	r2, [pc, #116]	; (8012250 <USB_SetTurnaroundTime+0x13c>)
 80121dc:	4293      	cmp	r3, r2
 80121de:	d906      	bls.n	80121ee <USB_SetTurnaroundTime+0xda>
 80121e0:	68bb      	ldr	r3, [r7, #8]
 80121e2:	4a1c      	ldr	r2, [pc, #112]	; (8012254 <USB_SetTurnaroundTime+0x140>)
 80121e4:	4293      	cmp	r3, r2
 80121e6:	d202      	bcs.n	80121ee <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80121e8:	2307      	movs	r3, #7
 80121ea:	617b      	str	r3, [r7, #20]
 80121ec:	e00a      	b.n	8012204 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80121ee:	2306      	movs	r3, #6
 80121f0:	617b      	str	r3, [r7, #20]
 80121f2:	e007      	b.n	8012204 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80121f4:	79fb      	ldrb	r3, [r7, #7]
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d102      	bne.n	8012200 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80121fa:	2309      	movs	r3, #9
 80121fc:	617b      	str	r3, [r7, #20]
 80121fe:	e001      	b.n	8012204 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8012200:	2309      	movs	r3, #9
 8012202:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	68db      	ldr	r3, [r3, #12]
 8012208:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 801220c:	68fb      	ldr	r3, [r7, #12]
 801220e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8012210:	68fb      	ldr	r3, [r7, #12]
 8012212:	68da      	ldr	r2, [r3, #12]
 8012214:	697b      	ldr	r3, [r7, #20]
 8012216:	029b      	lsls	r3, r3, #10
 8012218:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 801221c:	431a      	orrs	r2, r3
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8012222:	2300      	movs	r3, #0
}
 8012224:	4618      	mov	r0, r3
 8012226:	371c      	adds	r7, #28
 8012228:	46bd      	mov	sp, r7
 801222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801222e:	4770      	bx	lr
 8012230:	00d8acbf 	.word	0x00d8acbf
 8012234:	00e4e1c0 	.word	0x00e4e1c0
 8012238:	00f42400 	.word	0x00f42400
 801223c:	01067380 	.word	0x01067380
 8012240:	011a499f 	.word	0x011a499f
 8012244:	01312cff 	.word	0x01312cff
 8012248:	014ca43f 	.word	0x014ca43f
 801224c:	016e3600 	.word	0x016e3600
 8012250:	01a6ab1f 	.word	0x01a6ab1f
 8012254:	01e84800 	.word	0x01e84800

08012258 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012258:	b480      	push	{r7}
 801225a:	b083      	sub	sp, #12
 801225c:	af00      	add	r7, sp, #0
 801225e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	689b      	ldr	r3, [r3, #8]
 8012264:	f043 0201 	orr.w	r2, r3, #1
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801226c:	2300      	movs	r3, #0
}
 801226e:	4618      	mov	r0, r3
 8012270:	370c      	adds	r7, #12
 8012272:	46bd      	mov	sp, r7
 8012274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012278:	4770      	bx	lr

0801227a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801227a:	b480      	push	{r7}
 801227c:	b083      	sub	sp, #12
 801227e:	af00      	add	r7, sp, #0
 8012280:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	689b      	ldr	r3, [r3, #8]
 8012286:	f023 0201 	bic.w	r2, r3, #1
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801228e:	2300      	movs	r3, #0
}
 8012290:	4618      	mov	r0, r3
 8012292:	370c      	adds	r7, #12
 8012294:	46bd      	mov	sp, r7
 8012296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801229a:	4770      	bx	lr

0801229c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 801229c:	b580      	push	{r7, lr}
 801229e:	b084      	sub	sp, #16
 80122a0:	af00      	add	r7, sp, #0
 80122a2:	6078      	str	r0, [r7, #4]
 80122a4:	460b      	mov	r3, r1
 80122a6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80122a8:	2300      	movs	r3, #0
 80122aa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	68db      	ldr	r3, [r3, #12]
 80122b0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80122b8:	78fb      	ldrb	r3, [r7, #3]
 80122ba:	2b01      	cmp	r3, #1
 80122bc:	d115      	bne.n	80122ea <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	68db      	ldr	r3, [r3, #12]
 80122c2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80122ca:	2001      	movs	r0, #1
 80122cc:	f7f8 fa1e 	bl	800a70c <HAL_Delay>
      ms++;
 80122d0:	68fb      	ldr	r3, [r7, #12]
 80122d2:	3301      	adds	r3, #1
 80122d4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80122d6:	6878      	ldr	r0, [r7, #4]
 80122d8:	f001 fa3f 	bl	801375a <USB_GetMode>
 80122dc:	4603      	mov	r3, r0
 80122de:	2b01      	cmp	r3, #1
 80122e0:	d01e      	beq.n	8012320 <USB_SetCurrentMode+0x84>
 80122e2:	68fb      	ldr	r3, [r7, #12]
 80122e4:	2b31      	cmp	r3, #49	; 0x31
 80122e6:	d9f0      	bls.n	80122ca <USB_SetCurrentMode+0x2e>
 80122e8:	e01a      	b.n	8012320 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80122ea:	78fb      	ldrb	r3, [r7, #3]
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d115      	bne.n	801231c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	68db      	ldr	r3, [r3, #12]
 80122f4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80122fc:	2001      	movs	r0, #1
 80122fe:	f7f8 fa05 	bl	800a70c <HAL_Delay>
      ms++;
 8012302:	68fb      	ldr	r3, [r7, #12]
 8012304:	3301      	adds	r3, #1
 8012306:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8012308:	6878      	ldr	r0, [r7, #4]
 801230a:	f001 fa26 	bl	801375a <USB_GetMode>
 801230e:	4603      	mov	r3, r0
 8012310:	2b00      	cmp	r3, #0
 8012312:	d005      	beq.n	8012320 <USB_SetCurrentMode+0x84>
 8012314:	68fb      	ldr	r3, [r7, #12]
 8012316:	2b31      	cmp	r3, #49	; 0x31
 8012318:	d9f0      	bls.n	80122fc <USB_SetCurrentMode+0x60>
 801231a:	e001      	b.n	8012320 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 801231c:	2301      	movs	r3, #1
 801231e:	e005      	b.n	801232c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8012320:	68fb      	ldr	r3, [r7, #12]
 8012322:	2b32      	cmp	r3, #50	; 0x32
 8012324:	d101      	bne.n	801232a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8012326:	2301      	movs	r3, #1
 8012328:	e000      	b.n	801232c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 801232a:	2300      	movs	r3, #0
}
 801232c:	4618      	mov	r0, r3
 801232e:	3710      	adds	r7, #16
 8012330:	46bd      	mov	sp, r7
 8012332:	bd80      	pop	{r7, pc}

08012334 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012334:	b084      	sub	sp, #16
 8012336:	b580      	push	{r7, lr}
 8012338:	b086      	sub	sp, #24
 801233a:	af00      	add	r7, sp, #0
 801233c:	6078      	str	r0, [r7, #4]
 801233e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8012342:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8012346:	2300      	movs	r3, #0
 8012348:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801234e:	2300      	movs	r3, #0
 8012350:	613b      	str	r3, [r7, #16]
 8012352:	e009      	b.n	8012368 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8012354:	687a      	ldr	r2, [r7, #4]
 8012356:	693b      	ldr	r3, [r7, #16]
 8012358:	3340      	adds	r3, #64	; 0x40
 801235a:	009b      	lsls	r3, r3, #2
 801235c:	4413      	add	r3, r2
 801235e:	2200      	movs	r2, #0
 8012360:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8012362:	693b      	ldr	r3, [r7, #16]
 8012364:	3301      	adds	r3, #1
 8012366:	613b      	str	r3, [r7, #16]
 8012368:	693b      	ldr	r3, [r7, #16]
 801236a:	2b0e      	cmp	r3, #14
 801236c:	d9f2      	bls.n	8012354 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801236e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012370:	2b00      	cmp	r3, #0
 8012372:	d11c      	bne.n	80123ae <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8012374:	68fb      	ldr	r3, [r7, #12]
 8012376:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801237a:	685b      	ldr	r3, [r3, #4]
 801237c:	68fa      	ldr	r2, [r7, #12]
 801237e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012382:	f043 0302 	orr.w	r3, r3, #2
 8012386:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801238c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	681b      	ldr	r3, [r3, #0]
 8012398:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	681b      	ldr	r3, [r3, #0]
 80123a4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	601a      	str	r2, [r3, #0]
 80123ac:	e005      	b.n	80123ba <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80123b2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80123ba:	68fb      	ldr	r3, [r7, #12]
 80123bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80123c0:	461a      	mov	r2, r3
 80123c2:	2300      	movs	r3, #0
 80123c4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80123c6:	68fb      	ldr	r3, [r7, #12]
 80123c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80123cc:	4619      	mov	r1, r3
 80123ce:	68fb      	ldr	r3, [r7, #12]
 80123d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80123d4:	461a      	mov	r2, r3
 80123d6:	680b      	ldr	r3, [r1, #0]
 80123d8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80123da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123dc:	2b01      	cmp	r3, #1
 80123de:	d10c      	bne.n	80123fa <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80123e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d104      	bne.n	80123f0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80123e6:	2100      	movs	r1, #0
 80123e8:	6878      	ldr	r0, [r7, #4]
 80123ea:	f000 f965 	bl	80126b8 <USB_SetDevSpeed>
 80123ee:	e008      	b.n	8012402 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80123f0:	2101      	movs	r1, #1
 80123f2:	6878      	ldr	r0, [r7, #4]
 80123f4:	f000 f960 	bl	80126b8 <USB_SetDevSpeed>
 80123f8:	e003      	b.n	8012402 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80123fa:	2103      	movs	r1, #3
 80123fc:	6878      	ldr	r0, [r7, #4]
 80123fe:	f000 f95b 	bl	80126b8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8012402:	2110      	movs	r1, #16
 8012404:	6878      	ldr	r0, [r7, #4]
 8012406:	f000 f8f3 	bl	80125f0 <USB_FlushTxFifo>
 801240a:	4603      	mov	r3, r0
 801240c:	2b00      	cmp	r3, #0
 801240e:	d001      	beq.n	8012414 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8012410:	2301      	movs	r3, #1
 8012412:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8012414:	6878      	ldr	r0, [r7, #4]
 8012416:	f000 f91f 	bl	8012658 <USB_FlushRxFifo>
 801241a:	4603      	mov	r3, r0
 801241c:	2b00      	cmp	r3, #0
 801241e:	d001      	beq.n	8012424 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8012420:	2301      	movs	r3, #1
 8012422:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8012424:	68fb      	ldr	r3, [r7, #12]
 8012426:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801242a:	461a      	mov	r2, r3
 801242c:	2300      	movs	r3, #0
 801242e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8012430:	68fb      	ldr	r3, [r7, #12]
 8012432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012436:	461a      	mov	r2, r3
 8012438:	2300      	movs	r3, #0
 801243a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801243c:	68fb      	ldr	r3, [r7, #12]
 801243e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012442:	461a      	mov	r2, r3
 8012444:	2300      	movs	r3, #0
 8012446:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012448:	2300      	movs	r3, #0
 801244a:	613b      	str	r3, [r7, #16]
 801244c:	e043      	b.n	80124d6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801244e:	693b      	ldr	r3, [r7, #16]
 8012450:	015a      	lsls	r2, r3, #5
 8012452:	68fb      	ldr	r3, [r7, #12]
 8012454:	4413      	add	r3, r2
 8012456:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801245a:	681b      	ldr	r3, [r3, #0]
 801245c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012460:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012464:	d118      	bne.n	8012498 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8012466:	693b      	ldr	r3, [r7, #16]
 8012468:	2b00      	cmp	r3, #0
 801246a:	d10a      	bne.n	8012482 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 801246c:	693b      	ldr	r3, [r7, #16]
 801246e:	015a      	lsls	r2, r3, #5
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	4413      	add	r3, r2
 8012474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012478:	461a      	mov	r2, r3
 801247a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801247e:	6013      	str	r3, [r2, #0]
 8012480:	e013      	b.n	80124aa <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8012482:	693b      	ldr	r3, [r7, #16]
 8012484:	015a      	lsls	r2, r3, #5
 8012486:	68fb      	ldr	r3, [r7, #12]
 8012488:	4413      	add	r3, r2
 801248a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801248e:	461a      	mov	r2, r3
 8012490:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8012494:	6013      	str	r3, [r2, #0]
 8012496:	e008      	b.n	80124aa <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8012498:	693b      	ldr	r3, [r7, #16]
 801249a:	015a      	lsls	r2, r3, #5
 801249c:	68fb      	ldr	r3, [r7, #12]
 801249e:	4413      	add	r3, r2
 80124a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80124a4:	461a      	mov	r2, r3
 80124a6:	2300      	movs	r3, #0
 80124a8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80124aa:	693b      	ldr	r3, [r7, #16]
 80124ac:	015a      	lsls	r2, r3, #5
 80124ae:	68fb      	ldr	r3, [r7, #12]
 80124b0:	4413      	add	r3, r2
 80124b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80124b6:	461a      	mov	r2, r3
 80124b8:	2300      	movs	r3, #0
 80124ba:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80124bc:	693b      	ldr	r3, [r7, #16]
 80124be:	015a      	lsls	r2, r3, #5
 80124c0:	68fb      	ldr	r3, [r7, #12]
 80124c2:	4413      	add	r3, r2
 80124c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80124c8:	461a      	mov	r2, r3
 80124ca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80124ce:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80124d0:	693b      	ldr	r3, [r7, #16]
 80124d2:	3301      	adds	r3, #1
 80124d4:	613b      	str	r3, [r7, #16]
 80124d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124d8:	693a      	ldr	r2, [r7, #16]
 80124da:	429a      	cmp	r2, r3
 80124dc:	d3b7      	bcc.n	801244e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80124de:	2300      	movs	r3, #0
 80124e0:	613b      	str	r3, [r7, #16]
 80124e2:	e043      	b.n	801256c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80124e4:	693b      	ldr	r3, [r7, #16]
 80124e6:	015a      	lsls	r2, r3, #5
 80124e8:	68fb      	ldr	r3, [r7, #12]
 80124ea:	4413      	add	r3, r2
 80124ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80124f0:	681b      	ldr	r3, [r3, #0]
 80124f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80124f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80124fa:	d118      	bne.n	801252e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80124fc:	693b      	ldr	r3, [r7, #16]
 80124fe:	2b00      	cmp	r3, #0
 8012500:	d10a      	bne.n	8012518 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8012502:	693b      	ldr	r3, [r7, #16]
 8012504:	015a      	lsls	r2, r3, #5
 8012506:	68fb      	ldr	r3, [r7, #12]
 8012508:	4413      	add	r3, r2
 801250a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801250e:	461a      	mov	r2, r3
 8012510:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012514:	6013      	str	r3, [r2, #0]
 8012516:	e013      	b.n	8012540 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8012518:	693b      	ldr	r3, [r7, #16]
 801251a:	015a      	lsls	r2, r3, #5
 801251c:	68fb      	ldr	r3, [r7, #12]
 801251e:	4413      	add	r3, r2
 8012520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012524:	461a      	mov	r2, r3
 8012526:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801252a:	6013      	str	r3, [r2, #0]
 801252c:	e008      	b.n	8012540 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801252e:	693b      	ldr	r3, [r7, #16]
 8012530:	015a      	lsls	r2, r3, #5
 8012532:	68fb      	ldr	r3, [r7, #12]
 8012534:	4413      	add	r3, r2
 8012536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801253a:	461a      	mov	r2, r3
 801253c:	2300      	movs	r3, #0
 801253e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8012540:	693b      	ldr	r3, [r7, #16]
 8012542:	015a      	lsls	r2, r3, #5
 8012544:	68fb      	ldr	r3, [r7, #12]
 8012546:	4413      	add	r3, r2
 8012548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801254c:	461a      	mov	r2, r3
 801254e:	2300      	movs	r3, #0
 8012550:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8012552:	693b      	ldr	r3, [r7, #16]
 8012554:	015a      	lsls	r2, r3, #5
 8012556:	68fb      	ldr	r3, [r7, #12]
 8012558:	4413      	add	r3, r2
 801255a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801255e:	461a      	mov	r2, r3
 8012560:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012564:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012566:	693b      	ldr	r3, [r7, #16]
 8012568:	3301      	adds	r3, #1
 801256a:	613b      	str	r3, [r7, #16]
 801256c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801256e:	693a      	ldr	r2, [r7, #16]
 8012570:	429a      	cmp	r2, r3
 8012572:	d3b7      	bcc.n	80124e4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8012574:	68fb      	ldr	r3, [r7, #12]
 8012576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801257a:	691b      	ldr	r3, [r3, #16]
 801257c:	68fa      	ldr	r2, [r7, #12]
 801257e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012582:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012586:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	2200      	movs	r2, #0
 801258c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8012594:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8012596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012598:	2b00      	cmp	r3, #0
 801259a:	d105      	bne.n	80125a8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	699b      	ldr	r3, [r3, #24]
 80125a0:	f043 0210 	orr.w	r2, r3, #16
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	699a      	ldr	r2, [r3, #24]
 80125ac:	4b0f      	ldr	r3, [pc, #60]	; (80125ec <USB_DevInit+0x2b8>)
 80125ae:	4313      	orrs	r3, r2
 80125b0:	687a      	ldr	r2, [r7, #4]
 80125b2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80125b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d005      	beq.n	80125c6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	699b      	ldr	r3, [r3, #24]
 80125be:	f043 0208 	orr.w	r2, r3, #8
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80125c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80125c8:	2b01      	cmp	r3, #1
 80125ca:	d107      	bne.n	80125dc <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	699b      	ldr	r3, [r3, #24]
 80125d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80125d4:	f043 0304 	orr.w	r3, r3, #4
 80125d8:	687a      	ldr	r2, [r7, #4]
 80125da:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80125dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80125de:	4618      	mov	r0, r3
 80125e0:	3718      	adds	r7, #24
 80125e2:	46bd      	mov	sp, r7
 80125e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80125e8:	b004      	add	sp, #16
 80125ea:	4770      	bx	lr
 80125ec:	803c3800 	.word	0x803c3800

080125f0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80125f0:	b480      	push	{r7}
 80125f2:	b085      	sub	sp, #20
 80125f4:	af00      	add	r7, sp, #0
 80125f6:	6078      	str	r0, [r7, #4]
 80125f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80125fa:	2300      	movs	r3, #0
 80125fc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80125fe:	68fb      	ldr	r3, [r7, #12]
 8012600:	3301      	adds	r3, #1
 8012602:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012604:	68fb      	ldr	r3, [r7, #12]
 8012606:	4a13      	ldr	r2, [pc, #76]	; (8012654 <USB_FlushTxFifo+0x64>)
 8012608:	4293      	cmp	r3, r2
 801260a:	d901      	bls.n	8012610 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 801260c:	2303      	movs	r3, #3
 801260e:	e01b      	b.n	8012648 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	691b      	ldr	r3, [r3, #16]
 8012614:	2b00      	cmp	r3, #0
 8012616:	daf2      	bge.n	80125fe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8012618:	2300      	movs	r3, #0
 801261a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801261c:	683b      	ldr	r3, [r7, #0]
 801261e:	019b      	lsls	r3, r3, #6
 8012620:	f043 0220 	orr.w	r2, r3, #32
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012628:	68fb      	ldr	r3, [r7, #12]
 801262a:	3301      	adds	r3, #1
 801262c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801262e:	68fb      	ldr	r3, [r7, #12]
 8012630:	4a08      	ldr	r2, [pc, #32]	; (8012654 <USB_FlushTxFifo+0x64>)
 8012632:	4293      	cmp	r3, r2
 8012634:	d901      	bls.n	801263a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8012636:	2303      	movs	r3, #3
 8012638:	e006      	b.n	8012648 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	691b      	ldr	r3, [r3, #16]
 801263e:	f003 0320 	and.w	r3, r3, #32
 8012642:	2b20      	cmp	r3, #32
 8012644:	d0f0      	beq.n	8012628 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8012646:	2300      	movs	r3, #0
}
 8012648:	4618      	mov	r0, r3
 801264a:	3714      	adds	r7, #20
 801264c:	46bd      	mov	sp, r7
 801264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012652:	4770      	bx	lr
 8012654:	00030d40 	.word	0x00030d40

08012658 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8012658:	b480      	push	{r7}
 801265a:	b085      	sub	sp, #20
 801265c:	af00      	add	r7, sp, #0
 801265e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8012660:	2300      	movs	r3, #0
 8012662:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012664:	68fb      	ldr	r3, [r7, #12]
 8012666:	3301      	adds	r3, #1
 8012668:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801266a:	68fb      	ldr	r3, [r7, #12]
 801266c:	4a11      	ldr	r2, [pc, #68]	; (80126b4 <USB_FlushRxFifo+0x5c>)
 801266e:	4293      	cmp	r3, r2
 8012670:	d901      	bls.n	8012676 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8012672:	2303      	movs	r3, #3
 8012674:	e018      	b.n	80126a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	691b      	ldr	r3, [r3, #16]
 801267a:	2b00      	cmp	r3, #0
 801267c:	daf2      	bge.n	8012664 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 801267e:	2300      	movs	r3, #0
 8012680:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	2210      	movs	r2, #16
 8012686:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012688:	68fb      	ldr	r3, [r7, #12]
 801268a:	3301      	adds	r3, #1
 801268c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801268e:	68fb      	ldr	r3, [r7, #12]
 8012690:	4a08      	ldr	r2, [pc, #32]	; (80126b4 <USB_FlushRxFifo+0x5c>)
 8012692:	4293      	cmp	r3, r2
 8012694:	d901      	bls.n	801269a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8012696:	2303      	movs	r3, #3
 8012698:	e006      	b.n	80126a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	691b      	ldr	r3, [r3, #16]
 801269e:	f003 0310 	and.w	r3, r3, #16
 80126a2:	2b10      	cmp	r3, #16
 80126a4:	d0f0      	beq.n	8012688 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80126a6:	2300      	movs	r3, #0
}
 80126a8:	4618      	mov	r0, r3
 80126aa:	3714      	adds	r7, #20
 80126ac:	46bd      	mov	sp, r7
 80126ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126b2:	4770      	bx	lr
 80126b4:	00030d40 	.word	0x00030d40

080126b8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80126b8:	b480      	push	{r7}
 80126ba:	b085      	sub	sp, #20
 80126bc:	af00      	add	r7, sp, #0
 80126be:	6078      	str	r0, [r7, #4]
 80126c0:	460b      	mov	r3, r1
 80126c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80126c8:	68fb      	ldr	r3, [r7, #12]
 80126ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80126ce:	681a      	ldr	r2, [r3, #0]
 80126d0:	78fb      	ldrb	r3, [r7, #3]
 80126d2:	68f9      	ldr	r1, [r7, #12]
 80126d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80126d8:	4313      	orrs	r3, r2
 80126da:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80126dc:	2300      	movs	r3, #0
}
 80126de:	4618      	mov	r0, r3
 80126e0:	3714      	adds	r7, #20
 80126e2:	46bd      	mov	sp, r7
 80126e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126e8:	4770      	bx	lr

080126ea <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80126ea:	b480      	push	{r7}
 80126ec:	b087      	sub	sp, #28
 80126ee:	af00      	add	r7, sp, #0
 80126f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80126f6:	693b      	ldr	r3, [r7, #16]
 80126f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80126fc:	689b      	ldr	r3, [r3, #8]
 80126fe:	f003 0306 	and.w	r3, r3, #6
 8012702:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8012704:	68fb      	ldr	r3, [r7, #12]
 8012706:	2b00      	cmp	r3, #0
 8012708:	d102      	bne.n	8012710 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 801270a:	2300      	movs	r3, #0
 801270c:	75fb      	strb	r3, [r7, #23]
 801270e:	e00a      	b.n	8012726 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8012710:	68fb      	ldr	r3, [r7, #12]
 8012712:	2b02      	cmp	r3, #2
 8012714:	d002      	beq.n	801271c <USB_GetDevSpeed+0x32>
 8012716:	68fb      	ldr	r3, [r7, #12]
 8012718:	2b06      	cmp	r3, #6
 801271a:	d102      	bne.n	8012722 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 801271c:	2302      	movs	r3, #2
 801271e:	75fb      	strb	r3, [r7, #23]
 8012720:	e001      	b.n	8012726 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8012722:	230f      	movs	r3, #15
 8012724:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8012726:	7dfb      	ldrb	r3, [r7, #23]
}
 8012728:	4618      	mov	r0, r3
 801272a:	371c      	adds	r7, #28
 801272c:	46bd      	mov	sp, r7
 801272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012732:	4770      	bx	lr

08012734 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012734:	b480      	push	{r7}
 8012736:	b085      	sub	sp, #20
 8012738:	af00      	add	r7, sp, #0
 801273a:	6078      	str	r0, [r7, #4]
 801273c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012742:	683b      	ldr	r3, [r7, #0]
 8012744:	781b      	ldrb	r3, [r3, #0]
 8012746:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012748:	683b      	ldr	r3, [r7, #0]
 801274a:	785b      	ldrb	r3, [r3, #1]
 801274c:	2b01      	cmp	r3, #1
 801274e:	d13a      	bne.n	80127c6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8012750:	68fb      	ldr	r3, [r7, #12]
 8012752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012756:	69da      	ldr	r2, [r3, #28]
 8012758:	683b      	ldr	r3, [r7, #0]
 801275a:	781b      	ldrb	r3, [r3, #0]
 801275c:	f003 030f 	and.w	r3, r3, #15
 8012760:	2101      	movs	r1, #1
 8012762:	fa01 f303 	lsl.w	r3, r1, r3
 8012766:	b29b      	uxth	r3, r3
 8012768:	68f9      	ldr	r1, [r7, #12]
 801276a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801276e:	4313      	orrs	r3, r2
 8012770:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8012772:	68bb      	ldr	r3, [r7, #8]
 8012774:	015a      	lsls	r2, r3, #5
 8012776:	68fb      	ldr	r3, [r7, #12]
 8012778:	4413      	add	r3, r2
 801277a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801277e:	681b      	ldr	r3, [r3, #0]
 8012780:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012784:	2b00      	cmp	r3, #0
 8012786:	d155      	bne.n	8012834 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012788:	68bb      	ldr	r3, [r7, #8]
 801278a:	015a      	lsls	r2, r3, #5
 801278c:	68fb      	ldr	r3, [r7, #12]
 801278e:	4413      	add	r3, r2
 8012790:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012794:	681a      	ldr	r2, [r3, #0]
 8012796:	683b      	ldr	r3, [r7, #0]
 8012798:	68db      	ldr	r3, [r3, #12]
 801279a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801279e:	683b      	ldr	r3, [r7, #0]
 80127a0:	791b      	ldrb	r3, [r3, #4]
 80127a2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80127a4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80127a6:	68bb      	ldr	r3, [r7, #8]
 80127a8:	059b      	lsls	r3, r3, #22
 80127aa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80127ac:	4313      	orrs	r3, r2
 80127ae:	68ba      	ldr	r2, [r7, #8]
 80127b0:	0151      	lsls	r1, r2, #5
 80127b2:	68fa      	ldr	r2, [r7, #12]
 80127b4:	440a      	add	r2, r1
 80127b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80127ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80127be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80127c2:	6013      	str	r3, [r2, #0]
 80127c4:	e036      	b.n	8012834 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80127c6:	68fb      	ldr	r3, [r7, #12]
 80127c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80127cc:	69da      	ldr	r2, [r3, #28]
 80127ce:	683b      	ldr	r3, [r7, #0]
 80127d0:	781b      	ldrb	r3, [r3, #0]
 80127d2:	f003 030f 	and.w	r3, r3, #15
 80127d6:	2101      	movs	r1, #1
 80127d8:	fa01 f303 	lsl.w	r3, r1, r3
 80127dc:	041b      	lsls	r3, r3, #16
 80127de:	68f9      	ldr	r1, [r7, #12]
 80127e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80127e4:	4313      	orrs	r3, r2
 80127e6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80127e8:	68bb      	ldr	r3, [r7, #8]
 80127ea:	015a      	lsls	r2, r3, #5
 80127ec:	68fb      	ldr	r3, [r7, #12]
 80127ee:	4413      	add	r3, r2
 80127f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80127f4:	681b      	ldr	r3, [r3, #0]
 80127f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d11a      	bne.n	8012834 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80127fe:	68bb      	ldr	r3, [r7, #8]
 8012800:	015a      	lsls	r2, r3, #5
 8012802:	68fb      	ldr	r3, [r7, #12]
 8012804:	4413      	add	r3, r2
 8012806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801280a:	681a      	ldr	r2, [r3, #0]
 801280c:	683b      	ldr	r3, [r7, #0]
 801280e:	68db      	ldr	r3, [r3, #12]
 8012810:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8012814:	683b      	ldr	r3, [r7, #0]
 8012816:	791b      	ldrb	r3, [r3, #4]
 8012818:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801281a:	430b      	orrs	r3, r1
 801281c:	4313      	orrs	r3, r2
 801281e:	68ba      	ldr	r2, [r7, #8]
 8012820:	0151      	lsls	r1, r2, #5
 8012822:	68fa      	ldr	r2, [r7, #12]
 8012824:	440a      	add	r2, r1
 8012826:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801282a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801282e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012832:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8012834:	2300      	movs	r3, #0
}
 8012836:	4618      	mov	r0, r3
 8012838:	3714      	adds	r7, #20
 801283a:	46bd      	mov	sp, r7
 801283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012840:	4770      	bx	lr
	...

08012844 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012844:	b480      	push	{r7}
 8012846:	b085      	sub	sp, #20
 8012848:	af00      	add	r7, sp, #0
 801284a:	6078      	str	r0, [r7, #4]
 801284c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012852:	683b      	ldr	r3, [r7, #0]
 8012854:	781b      	ldrb	r3, [r3, #0]
 8012856:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8012858:	683b      	ldr	r3, [r7, #0]
 801285a:	785b      	ldrb	r3, [r3, #1]
 801285c:	2b01      	cmp	r3, #1
 801285e:	d161      	bne.n	8012924 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012860:	68bb      	ldr	r3, [r7, #8]
 8012862:	015a      	lsls	r2, r3, #5
 8012864:	68fb      	ldr	r3, [r7, #12]
 8012866:	4413      	add	r3, r2
 8012868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801286c:	681b      	ldr	r3, [r3, #0]
 801286e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012872:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012876:	d11f      	bne.n	80128b8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8012878:	68bb      	ldr	r3, [r7, #8]
 801287a:	015a      	lsls	r2, r3, #5
 801287c:	68fb      	ldr	r3, [r7, #12]
 801287e:	4413      	add	r3, r2
 8012880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012884:	681b      	ldr	r3, [r3, #0]
 8012886:	68ba      	ldr	r2, [r7, #8]
 8012888:	0151      	lsls	r1, r2, #5
 801288a:	68fa      	ldr	r2, [r7, #12]
 801288c:	440a      	add	r2, r1
 801288e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012892:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012896:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8012898:	68bb      	ldr	r3, [r7, #8]
 801289a:	015a      	lsls	r2, r3, #5
 801289c:	68fb      	ldr	r3, [r7, #12]
 801289e:	4413      	add	r3, r2
 80128a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80128a4:	681b      	ldr	r3, [r3, #0]
 80128a6:	68ba      	ldr	r2, [r7, #8]
 80128a8:	0151      	lsls	r1, r2, #5
 80128aa:	68fa      	ldr	r2, [r7, #12]
 80128ac:	440a      	add	r2, r1
 80128ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80128b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80128b6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80128b8:	68fb      	ldr	r3, [r7, #12]
 80128ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80128be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80128c0:	683b      	ldr	r3, [r7, #0]
 80128c2:	781b      	ldrb	r3, [r3, #0]
 80128c4:	f003 030f 	and.w	r3, r3, #15
 80128c8:	2101      	movs	r1, #1
 80128ca:	fa01 f303 	lsl.w	r3, r1, r3
 80128ce:	b29b      	uxth	r3, r3
 80128d0:	43db      	mvns	r3, r3
 80128d2:	68f9      	ldr	r1, [r7, #12]
 80128d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80128d8:	4013      	ands	r3, r2
 80128da:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80128dc:	68fb      	ldr	r3, [r7, #12]
 80128de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80128e2:	69da      	ldr	r2, [r3, #28]
 80128e4:	683b      	ldr	r3, [r7, #0]
 80128e6:	781b      	ldrb	r3, [r3, #0]
 80128e8:	f003 030f 	and.w	r3, r3, #15
 80128ec:	2101      	movs	r1, #1
 80128ee:	fa01 f303 	lsl.w	r3, r1, r3
 80128f2:	b29b      	uxth	r3, r3
 80128f4:	43db      	mvns	r3, r3
 80128f6:	68f9      	ldr	r1, [r7, #12]
 80128f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80128fc:	4013      	ands	r3, r2
 80128fe:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8012900:	68bb      	ldr	r3, [r7, #8]
 8012902:	015a      	lsls	r2, r3, #5
 8012904:	68fb      	ldr	r3, [r7, #12]
 8012906:	4413      	add	r3, r2
 8012908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801290c:	681a      	ldr	r2, [r3, #0]
 801290e:	68bb      	ldr	r3, [r7, #8]
 8012910:	0159      	lsls	r1, r3, #5
 8012912:	68fb      	ldr	r3, [r7, #12]
 8012914:	440b      	add	r3, r1
 8012916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801291a:	4619      	mov	r1, r3
 801291c:	4b35      	ldr	r3, [pc, #212]	; (80129f4 <USB_DeactivateEndpoint+0x1b0>)
 801291e:	4013      	ands	r3, r2
 8012920:	600b      	str	r3, [r1, #0]
 8012922:	e060      	b.n	80129e6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012924:	68bb      	ldr	r3, [r7, #8]
 8012926:	015a      	lsls	r2, r3, #5
 8012928:	68fb      	ldr	r3, [r7, #12]
 801292a:	4413      	add	r3, r2
 801292c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012930:	681b      	ldr	r3, [r3, #0]
 8012932:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012936:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801293a:	d11f      	bne.n	801297c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801293c:	68bb      	ldr	r3, [r7, #8]
 801293e:	015a      	lsls	r2, r3, #5
 8012940:	68fb      	ldr	r3, [r7, #12]
 8012942:	4413      	add	r3, r2
 8012944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012948:	681b      	ldr	r3, [r3, #0]
 801294a:	68ba      	ldr	r2, [r7, #8]
 801294c:	0151      	lsls	r1, r2, #5
 801294e:	68fa      	ldr	r2, [r7, #12]
 8012950:	440a      	add	r2, r1
 8012952:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012956:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801295a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 801295c:	68bb      	ldr	r3, [r7, #8]
 801295e:	015a      	lsls	r2, r3, #5
 8012960:	68fb      	ldr	r3, [r7, #12]
 8012962:	4413      	add	r3, r2
 8012964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012968:	681b      	ldr	r3, [r3, #0]
 801296a:	68ba      	ldr	r2, [r7, #8]
 801296c:	0151      	lsls	r1, r2, #5
 801296e:	68fa      	ldr	r2, [r7, #12]
 8012970:	440a      	add	r2, r1
 8012972:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012976:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801297a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801297c:	68fb      	ldr	r3, [r7, #12]
 801297e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012982:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012984:	683b      	ldr	r3, [r7, #0]
 8012986:	781b      	ldrb	r3, [r3, #0]
 8012988:	f003 030f 	and.w	r3, r3, #15
 801298c:	2101      	movs	r1, #1
 801298e:	fa01 f303 	lsl.w	r3, r1, r3
 8012992:	041b      	lsls	r3, r3, #16
 8012994:	43db      	mvns	r3, r3
 8012996:	68f9      	ldr	r1, [r7, #12]
 8012998:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801299c:	4013      	ands	r3, r2
 801299e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80129a0:	68fb      	ldr	r3, [r7, #12]
 80129a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80129a6:	69da      	ldr	r2, [r3, #28]
 80129a8:	683b      	ldr	r3, [r7, #0]
 80129aa:	781b      	ldrb	r3, [r3, #0]
 80129ac:	f003 030f 	and.w	r3, r3, #15
 80129b0:	2101      	movs	r1, #1
 80129b2:	fa01 f303 	lsl.w	r3, r1, r3
 80129b6:	041b      	lsls	r3, r3, #16
 80129b8:	43db      	mvns	r3, r3
 80129ba:	68f9      	ldr	r1, [r7, #12]
 80129bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80129c0:	4013      	ands	r3, r2
 80129c2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80129c4:	68bb      	ldr	r3, [r7, #8]
 80129c6:	015a      	lsls	r2, r3, #5
 80129c8:	68fb      	ldr	r3, [r7, #12]
 80129ca:	4413      	add	r3, r2
 80129cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80129d0:	681a      	ldr	r2, [r3, #0]
 80129d2:	68bb      	ldr	r3, [r7, #8]
 80129d4:	0159      	lsls	r1, r3, #5
 80129d6:	68fb      	ldr	r3, [r7, #12]
 80129d8:	440b      	add	r3, r1
 80129da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80129de:	4619      	mov	r1, r3
 80129e0:	4b05      	ldr	r3, [pc, #20]	; (80129f8 <USB_DeactivateEndpoint+0x1b4>)
 80129e2:	4013      	ands	r3, r2
 80129e4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80129e6:	2300      	movs	r3, #0
}
 80129e8:	4618      	mov	r0, r3
 80129ea:	3714      	adds	r7, #20
 80129ec:	46bd      	mov	sp, r7
 80129ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129f2:	4770      	bx	lr
 80129f4:	ec337800 	.word	0xec337800
 80129f8:	eff37800 	.word	0xeff37800

080129fc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80129fc:	b580      	push	{r7, lr}
 80129fe:	b08a      	sub	sp, #40	; 0x28
 8012a00:	af02      	add	r7, sp, #8
 8012a02:	60f8      	str	r0, [r7, #12]
 8012a04:	60b9      	str	r1, [r7, #8]
 8012a06:	4613      	mov	r3, r2
 8012a08:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012a0a:	68fb      	ldr	r3, [r7, #12]
 8012a0c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8012a0e:	68bb      	ldr	r3, [r7, #8]
 8012a10:	781b      	ldrb	r3, [r3, #0]
 8012a12:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8012a14:	68bb      	ldr	r3, [r7, #8]
 8012a16:	785b      	ldrb	r3, [r3, #1]
 8012a18:	2b01      	cmp	r3, #1
 8012a1a:	f040 815c 	bne.w	8012cd6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8012a1e:	68bb      	ldr	r3, [r7, #8]
 8012a20:	699b      	ldr	r3, [r3, #24]
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	d132      	bne.n	8012a8c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012a26:	69bb      	ldr	r3, [r7, #24]
 8012a28:	015a      	lsls	r2, r3, #5
 8012a2a:	69fb      	ldr	r3, [r7, #28]
 8012a2c:	4413      	add	r3, r2
 8012a2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a32:	691b      	ldr	r3, [r3, #16]
 8012a34:	69ba      	ldr	r2, [r7, #24]
 8012a36:	0151      	lsls	r1, r2, #5
 8012a38:	69fa      	ldr	r2, [r7, #28]
 8012a3a:	440a      	add	r2, r1
 8012a3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012a40:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8012a44:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8012a48:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012a4a:	69bb      	ldr	r3, [r7, #24]
 8012a4c:	015a      	lsls	r2, r3, #5
 8012a4e:	69fb      	ldr	r3, [r7, #28]
 8012a50:	4413      	add	r3, r2
 8012a52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a56:	691b      	ldr	r3, [r3, #16]
 8012a58:	69ba      	ldr	r2, [r7, #24]
 8012a5a:	0151      	lsls	r1, r2, #5
 8012a5c:	69fa      	ldr	r2, [r7, #28]
 8012a5e:	440a      	add	r2, r1
 8012a60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012a64:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012a68:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012a6a:	69bb      	ldr	r3, [r7, #24]
 8012a6c:	015a      	lsls	r2, r3, #5
 8012a6e:	69fb      	ldr	r3, [r7, #28]
 8012a70:	4413      	add	r3, r2
 8012a72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a76:	691b      	ldr	r3, [r3, #16]
 8012a78:	69ba      	ldr	r2, [r7, #24]
 8012a7a:	0151      	lsls	r1, r2, #5
 8012a7c:	69fa      	ldr	r2, [r7, #28]
 8012a7e:	440a      	add	r2, r1
 8012a80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012a84:	0cdb      	lsrs	r3, r3, #19
 8012a86:	04db      	lsls	r3, r3, #19
 8012a88:	6113      	str	r3, [r2, #16]
 8012a8a:	e074      	b.n	8012b76 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012a8c:	69bb      	ldr	r3, [r7, #24]
 8012a8e:	015a      	lsls	r2, r3, #5
 8012a90:	69fb      	ldr	r3, [r7, #28]
 8012a92:	4413      	add	r3, r2
 8012a94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a98:	691b      	ldr	r3, [r3, #16]
 8012a9a:	69ba      	ldr	r2, [r7, #24]
 8012a9c:	0151      	lsls	r1, r2, #5
 8012a9e:	69fa      	ldr	r2, [r7, #28]
 8012aa0:	440a      	add	r2, r1
 8012aa2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012aa6:	0cdb      	lsrs	r3, r3, #19
 8012aa8:	04db      	lsls	r3, r3, #19
 8012aaa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012aac:	69bb      	ldr	r3, [r7, #24]
 8012aae:	015a      	lsls	r2, r3, #5
 8012ab0:	69fb      	ldr	r3, [r7, #28]
 8012ab2:	4413      	add	r3, r2
 8012ab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ab8:	691b      	ldr	r3, [r3, #16]
 8012aba:	69ba      	ldr	r2, [r7, #24]
 8012abc:	0151      	lsls	r1, r2, #5
 8012abe:	69fa      	ldr	r2, [r7, #28]
 8012ac0:	440a      	add	r2, r1
 8012ac2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012ac6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8012aca:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8012ace:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8012ad0:	69bb      	ldr	r3, [r7, #24]
 8012ad2:	015a      	lsls	r2, r3, #5
 8012ad4:	69fb      	ldr	r3, [r7, #28]
 8012ad6:	4413      	add	r3, r2
 8012ad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012adc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8012ade:	68bb      	ldr	r3, [r7, #8]
 8012ae0:	6999      	ldr	r1, [r3, #24]
 8012ae2:	68bb      	ldr	r3, [r7, #8]
 8012ae4:	68db      	ldr	r3, [r3, #12]
 8012ae6:	440b      	add	r3, r1
 8012ae8:	1e59      	subs	r1, r3, #1
 8012aea:	68bb      	ldr	r3, [r7, #8]
 8012aec:	68db      	ldr	r3, [r3, #12]
 8012aee:	fbb1 f3f3 	udiv	r3, r1, r3
 8012af2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8012af4:	4b9d      	ldr	r3, [pc, #628]	; (8012d6c <USB_EPStartXfer+0x370>)
 8012af6:	400b      	ands	r3, r1
 8012af8:	69b9      	ldr	r1, [r7, #24]
 8012afa:	0148      	lsls	r0, r1, #5
 8012afc:	69f9      	ldr	r1, [r7, #28]
 8012afe:	4401      	add	r1, r0
 8012b00:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8012b04:	4313      	orrs	r3, r2
 8012b06:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8012b08:	69bb      	ldr	r3, [r7, #24]
 8012b0a:	015a      	lsls	r2, r3, #5
 8012b0c:	69fb      	ldr	r3, [r7, #28]
 8012b0e:	4413      	add	r3, r2
 8012b10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012b14:	691a      	ldr	r2, [r3, #16]
 8012b16:	68bb      	ldr	r3, [r7, #8]
 8012b18:	699b      	ldr	r3, [r3, #24]
 8012b1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012b1e:	69b9      	ldr	r1, [r7, #24]
 8012b20:	0148      	lsls	r0, r1, #5
 8012b22:	69f9      	ldr	r1, [r7, #28]
 8012b24:	4401      	add	r1, r0
 8012b26:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8012b2a:	4313      	orrs	r3, r2
 8012b2c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8012b2e:	68bb      	ldr	r3, [r7, #8]
 8012b30:	791b      	ldrb	r3, [r3, #4]
 8012b32:	2b01      	cmp	r3, #1
 8012b34:	d11f      	bne.n	8012b76 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8012b36:	69bb      	ldr	r3, [r7, #24]
 8012b38:	015a      	lsls	r2, r3, #5
 8012b3a:	69fb      	ldr	r3, [r7, #28]
 8012b3c:	4413      	add	r3, r2
 8012b3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012b42:	691b      	ldr	r3, [r3, #16]
 8012b44:	69ba      	ldr	r2, [r7, #24]
 8012b46:	0151      	lsls	r1, r2, #5
 8012b48:	69fa      	ldr	r2, [r7, #28]
 8012b4a:	440a      	add	r2, r1
 8012b4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012b50:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8012b54:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8012b56:	69bb      	ldr	r3, [r7, #24]
 8012b58:	015a      	lsls	r2, r3, #5
 8012b5a:	69fb      	ldr	r3, [r7, #28]
 8012b5c:	4413      	add	r3, r2
 8012b5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012b62:	691b      	ldr	r3, [r3, #16]
 8012b64:	69ba      	ldr	r2, [r7, #24]
 8012b66:	0151      	lsls	r1, r2, #5
 8012b68:	69fa      	ldr	r2, [r7, #28]
 8012b6a:	440a      	add	r2, r1
 8012b6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012b70:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012b74:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8012b76:	79fb      	ldrb	r3, [r7, #7]
 8012b78:	2b01      	cmp	r3, #1
 8012b7a:	d14b      	bne.n	8012c14 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8012b7c:	68bb      	ldr	r3, [r7, #8]
 8012b7e:	695b      	ldr	r3, [r3, #20]
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d009      	beq.n	8012b98 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8012b84:	69bb      	ldr	r3, [r7, #24]
 8012b86:	015a      	lsls	r2, r3, #5
 8012b88:	69fb      	ldr	r3, [r7, #28]
 8012b8a:	4413      	add	r3, r2
 8012b8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012b90:	461a      	mov	r2, r3
 8012b92:	68bb      	ldr	r3, [r7, #8]
 8012b94:	695b      	ldr	r3, [r3, #20]
 8012b96:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8012b98:	68bb      	ldr	r3, [r7, #8]
 8012b9a:	791b      	ldrb	r3, [r3, #4]
 8012b9c:	2b01      	cmp	r3, #1
 8012b9e:	d128      	bne.n	8012bf2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8012ba0:	69fb      	ldr	r3, [r7, #28]
 8012ba2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012ba6:	689b      	ldr	r3, [r3, #8]
 8012ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d110      	bne.n	8012bd2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8012bb0:	69bb      	ldr	r3, [r7, #24]
 8012bb2:	015a      	lsls	r2, r3, #5
 8012bb4:	69fb      	ldr	r3, [r7, #28]
 8012bb6:	4413      	add	r3, r2
 8012bb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012bbc:	681b      	ldr	r3, [r3, #0]
 8012bbe:	69ba      	ldr	r2, [r7, #24]
 8012bc0:	0151      	lsls	r1, r2, #5
 8012bc2:	69fa      	ldr	r2, [r7, #28]
 8012bc4:	440a      	add	r2, r1
 8012bc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012bca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012bce:	6013      	str	r3, [r2, #0]
 8012bd0:	e00f      	b.n	8012bf2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8012bd2:	69bb      	ldr	r3, [r7, #24]
 8012bd4:	015a      	lsls	r2, r3, #5
 8012bd6:	69fb      	ldr	r3, [r7, #28]
 8012bd8:	4413      	add	r3, r2
 8012bda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012bde:	681b      	ldr	r3, [r3, #0]
 8012be0:	69ba      	ldr	r2, [r7, #24]
 8012be2:	0151      	lsls	r1, r2, #5
 8012be4:	69fa      	ldr	r2, [r7, #28]
 8012be6:	440a      	add	r2, r1
 8012be8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012bf0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012bf2:	69bb      	ldr	r3, [r7, #24]
 8012bf4:	015a      	lsls	r2, r3, #5
 8012bf6:	69fb      	ldr	r3, [r7, #28]
 8012bf8:	4413      	add	r3, r2
 8012bfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012bfe:	681b      	ldr	r3, [r3, #0]
 8012c00:	69ba      	ldr	r2, [r7, #24]
 8012c02:	0151      	lsls	r1, r2, #5
 8012c04:	69fa      	ldr	r2, [r7, #28]
 8012c06:	440a      	add	r2, r1
 8012c08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012c0c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012c10:	6013      	str	r3, [r2, #0]
 8012c12:	e133      	b.n	8012e7c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012c14:	69bb      	ldr	r3, [r7, #24]
 8012c16:	015a      	lsls	r2, r3, #5
 8012c18:	69fb      	ldr	r3, [r7, #28]
 8012c1a:	4413      	add	r3, r2
 8012c1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012c20:	681b      	ldr	r3, [r3, #0]
 8012c22:	69ba      	ldr	r2, [r7, #24]
 8012c24:	0151      	lsls	r1, r2, #5
 8012c26:	69fa      	ldr	r2, [r7, #28]
 8012c28:	440a      	add	r2, r1
 8012c2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012c2e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012c32:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8012c34:	68bb      	ldr	r3, [r7, #8]
 8012c36:	791b      	ldrb	r3, [r3, #4]
 8012c38:	2b01      	cmp	r3, #1
 8012c3a:	d015      	beq.n	8012c68 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8012c3c:	68bb      	ldr	r3, [r7, #8]
 8012c3e:	699b      	ldr	r3, [r3, #24]
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	f000 811b 	beq.w	8012e7c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8012c46:	69fb      	ldr	r3, [r7, #28]
 8012c48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012c4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012c4e:	68bb      	ldr	r3, [r7, #8]
 8012c50:	781b      	ldrb	r3, [r3, #0]
 8012c52:	f003 030f 	and.w	r3, r3, #15
 8012c56:	2101      	movs	r1, #1
 8012c58:	fa01 f303 	lsl.w	r3, r1, r3
 8012c5c:	69f9      	ldr	r1, [r7, #28]
 8012c5e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012c62:	4313      	orrs	r3, r2
 8012c64:	634b      	str	r3, [r1, #52]	; 0x34
 8012c66:	e109      	b.n	8012e7c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8012c68:	69fb      	ldr	r3, [r7, #28]
 8012c6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012c6e:	689b      	ldr	r3, [r3, #8]
 8012c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d110      	bne.n	8012c9a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8012c78:	69bb      	ldr	r3, [r7, #24]
 8012c7a:	015a      	lsls	r2, r3, #5
 8012c7c:	69fb      	ldr	r3, [r7, #28]
 8012c7e:	4413      	add	r3, r2
 8012c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012c84:	681b      	ldr	r3, [r3, #0]
 8012c86:	69ba      	ldr	r2, [r7, #24]
 8012c88:	0151      	lsls	r1, r2, #5
 8012c8a:	69fa      	ldr	r2, [r7, #28]
 8012c8c:	440a      	add	r2, r1
 8012c8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012c92:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012c96:	6013      	str	r3, [r2, #0]
 8012c98:	e00f      	b.n	8012cba <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8012c9a:	69bb      	ldr	r3, [r7, #24]
 8012c9c:	015a      	lsls	r2, r3, #5
 8012c9e:	69fb      	ldr	r3, [r7, #28]
 8012ca0:	4413      	add	r3, r2
 8012ca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ca6:	681b      	ldr	r3, [r3, #0]
 8012ca8:	69ba      	ldr	r2, [r7, #24]
 8012caa:	0151      	lsls	r1, r2, #5
 8012cac:	69fa      	ldr	r2, [r7, #28]
 8012cae:	440a      	add	r2, r1
 8012cb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012cb8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8012cba:	68bb      	ldr	r3, [r7, #8]
 8012cbc:	6919      	ldr	r1, [r3, #16]
 8012cbe:	68bb      	ldr	r3, [r7, #8]
 8012cc0:	781a      	ldrb	r2, [r3, #0]
 8012cc2:	68bb      	ldr	r3, [r7, #8]
 8012cc4:	699b      	ldr	r3, [r3, #24]
 8012cc6:	b298      	uxth	r0, r3
 8012cc8:	79fb      	ldrb	r3, [r7, #7]
 8012cca:	9300      	str	r3, [sp, #0]
 8012ccc:	4603      	mov	r3, r0
 8012cce:	68f8      	ldr	r0, [r7, #12]
 8012cd0:	f000 fade 	bl	8013290 <USB_WritePacket>
 8012cd4:	e0d2      	b.n	8012e7c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8012cd6:	69bb      	ldr	r3, [r7, #24]
 8012cd8:	015a      	lsls	r2, r3, #5
 8012cda:	69fb      	ldr	r3, [r7, #28]
 8012cdc:	4413      	add	r3, r2
 8012cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012ce2:	691b      	ldr	r3, [r3, #16]
 8012ce4:	69ba      	ldr	r2, [r7, #24]
 8012ce6:	0151      	lsls	r1, r2, #5
 8012ce8:	69fa      	ldr	r2, [r7, #28]
 8012cea:	440a      	add	r2, r1
 8012cec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012cf0:	0cdb      	lsrs	r3, r3, #19
 8012cf2:	04db      	lsls	r3, r3, #19
 8012cf4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8012cf6:	69bb      	ldr	r3, [r7, #24]
 8012cf8:	015a      	lsls	r2, r3, #5
 8012cfa:	69fb      	ldr	r3, [r7, #28]
 8012cfc:	4413      	add	r3, r2
 8012cfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012d02:	691b      	ldr	r3, [r3, #16]
 8012d04:	69ba      	ldr	r2, [r7, #24]
 8012d06:	0151      	lsls	r1, r2, #5
 8012d08:	69fa      	ldr	r2, [r7, #28]
 8012d0a:	440a      	add	r2, r1
 8012d0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012d10:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8012d14:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8012d18:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8012d1a:	68bb      	ldr	r3, [r7, #8]
 8012d1c:	699b      	ldr	r3, [r3, #24]
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	d126      	bne.n	8012d70 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8012d22:	69bb      	ldr	r3, [r7, #24]
 8012d24:	015a      	lsls	r2, r3, #5
 8012d26:	69fb      	ldr	r3, [r7, #28]
 8012d28:	4413      	add	r3, r2
 8012d2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012d2e:	691a      	ldr	r2, [r3, #16]
 8012d30:	68bb      	ldr	r3, [r7, #8]
 8012d32:	68db      	ldr	r3, [r3, #12]
 8012d34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012d38:	69b9      	ldr	r1, [r7, #24]
 8012d3a:	0148      	lsls	r0, r1, #5
 8012d3c:	69f9      	ldr	r1, [r7, #28]
 8012d3e:	4401      	add	r1, r0
 8012d40:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8012d44:	4313      	orrs	r3, r2
 8012d46:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012d48:	69bb      	ldr	r3, [r7, #24]
 8012d4a:	015a      	lsls	r2, r3, #5
 8012d4c:	69fb      	ldr	r3, [r7, #28]
 8012d4e:	4413      	add	r3, r2
 8012d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012d54:	691b      	ldr	r3, [r3, #16]
 8012d56:	69ba      	ldr	r2, [r7, #24]
 8012d58:	0151      	lsls	r1, r2, #5
 8012d5a:	69fa      	ldr	r2, [r7, #28]
 8012d5c:	440a      	add	r2, r1
 8012d5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012d62:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012d66:	6113      	str	r3, [r2, #16]
 8012d68:	e03a      	b.n	8012de0 <USB_EPStartXfer+0x3e4>
 8012d6a:	bf00      	nop
 8012d6c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8012d70:	68bb      	ldr	r3, [r7, #8]
 8012d72:	699a      	ldr	r2, [r3, #24]
 8012d74:	68bb      	ldr	r3, [r7, #8]
 8012d76:	68db      	ldr	r3, [r3, #12]
 8012d78:	4413      	add	r3, r2
 8012d7a:	1e5a      	subs	r2, r3, #1
 8012d7c:	68bb      	ldr	r3, [r7, #8]
 8012d7e:	68db      	ldr	r3, [r3, #12]
 8012d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8012d84:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8012d86:	68bb      	ldr	r3, [r7, #8]
 8012d88:	68db      	ldr	r3, [r3, #12]
 8012d8a:	8afa      	ldrh	r2, [r7, #22]
 8012d8c:	fb03 f202 	mul.w	r2, r3, r2
 8012d90:	68bb      	ldr	r3, [r7, #8]
 8012d92:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8012d94:	69bb      	ldr	r3, [r7, #24]
 8012d96:	015a      	lsls	r2, r3, #5
 8012d98:	69fb      	ldr	r3, [r7, #28]
 8012d9a:	4413      	add	r3, r2
 8012d9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012da0:	691a      	ldr	r2, [r3, #16]
 8012da2:	8afb      	ldrh	r3, [r7, #22]
 8012da4:	04d9      	lsls	r1, r3, #19
 8012da6:	4b38      	ldr	r3, [pc, #224]	; (8012e88 <USB_EPStartXfer+0x48c>)
 8012da8:	400b      	ands	r3, r1
 8012daa:	69b9      	ldr	r1, [r7, #24]
 8012dac:	0148      	lsls	r0, r1, #5
 8012dae:	69f9      	ldr	r1, [r7, #28]
 8012db0:	4401      	add	r1, r0
 8012db2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8012db6:	4313      	orrs	r3, r2
 8012db8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8012dba:	69bb      	ldr	r3, [r7, #24]
 8012dbc:	015a      	lsls	r2, r3, #5
 8012dbe:	69fb      	ldr	r3, [r7, #28]
 8012dc0:	4413      	add	r3, r2
 8012dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012dc6:	691a      	ldr	r2, [r3, #16]
 8012dc8:	68bb      	ldr	r3, [r7, #8]
 8012dca:	69db      	ldr	r3, [r3, #28]
 8012dcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012dd0:	69b9      	ldr	r1, [r7, #24]
 8012dd2:	0148      	lsls	r0, r1, #5
 8012dd4:	69f9      	ldr	r1, [r7, #28]
 8012dd6:	4401      	add	r1, r0
 8012dd8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8012ddc:	4313      	orrs	r3, r2
 8012dde:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8012de0:	79fb      	ldrb	r3, [r7, #7]
 8012de2:	2b01      	cmp	r3, #1
 8012de4:	d10d      	bne.n	8012e02 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8012de6:	68bb      	ldr	r3, [r7, #8]
 8012de8:	691b      	ldr	r3, [r3, #16]
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d009      	beq.n	8012e02 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8012dee:	68bb      	ldr	r3, [r7, #8]
 8012df0:	6919      	ldr	r1, [r3, #16]
 8012df2:	69bb      	ldr	r3, [r7, #24]
 8012df4:	015a      	lsls	r2, r3, #5
 8012df6:	69fb      	ldr	r3, [r7, #28]
 8012df8:	4413      	add	r3, r2
 8012dfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012dfe:	460a      	mov	r2, r1
 8012e00:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8012e02:	68bb      	ldr	r3, [r7, #8]
 8012e04:	791b      	ldrb	r3, [r3, #4]
 8012e06:	2b01      	cmp	r3, #1
 8012e08:	d128      	bne.n	8012e5c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8012e0a:	69fb      	ldr	r3, [r7, #28]
 8012e0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012e10:	689b      	ldr	r3, [r3, #8]
 8012e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	d110      	bne.n	8012e3c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8012e1a:	69bb      	ldr	r3, [r7, #24]
 8012e1c:	015a      	lsls	r2, r3, #5
 8012e1e:	69fb      	ldr	r3, [r7, #28]
 8012e20:	4413      	add	r3, r2
 8012e22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012e26:	681b      	ldr	r3, [r3, #0]
 8012e28:	69ba      	ldr	r2, [r7, #24]
 8012e2a:	0151      	lsls	r1, r2, #5
 8012e2c:	69fa      	ldr	r2, [r7, #28]
 8012e2e:	440a      	add	r2, r1
 8012e30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012e34:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012e38:	6013      	str	r3, [r2, #0]
 8012e3a:	e00f      	b.n	8012e5c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8012e3c:	69bb      	ldr	r3, [r7, #24]
 8012e3e:	015a      	lsls	r2, r3, #5
 8012e40:	69fb      	ldr	r3, [r7, #28]
 8012e42:	4413      	add	r3, r2
 8012e44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012e48:	681b      	ldr	r3, [r3, #0]
 8012e4a:	69ba      	ldr	r2, [r7, #24]
 8012e4c:	0151      	lsls	r1, r2, #5
 8012e4e:	69fa      	ldr	r2, [r7, #28]
 8012e50:	440a      	add	r2, r1
 8012e52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012e56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012e5a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8012e5c:	69bb      	ldr	r3, [r7, #24]
 8012e5e:	015a      	lsls	r2, r3, #5
 8012e60:	69fb      	ldr	r3, [r7, #28]
 8012e62:	4413      	add	r3, r2
 8012e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012e68:	681b      	ldr	r3, [r3, #0]
 8012e6a:	69ba      	ldr	r2, [r7, #24]
 8012e6c:	0151      	lsls	r1, r2, #5
 8012e6e:	69fa      	ldr	r2, [r7, #28]
 8012e70:	440a      	add	r2, r1
 8012e72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012e76:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012e7a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012e7c:	2300      	movs	r3, #0
}
 8012e7e:	4618      	mov	r0, r3
 8012e80:	3720      	adds	r7, #32
 8012e82:	46bd      	mov	sp, r7
 8012e84:	bd80      	pop	{r7, pc}
 8012e86:	bf00      	nop
 8012e88:	1ff80000 	.word	0x1ff80000

08012e8c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8012e8c:	b480      	push	{r7}
 8012e8e:	b087      	sub	sp, #28
 8012e90:	af00      	add	r7, sp, #0
 8012e92:	60f8      	str	r0, [r7, #12]
 8012e94:	60b9      	str	r1, [r7, #8]
 8012e96:	4613      	mov	r3, r2
 8012e98:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012e9a:	68fb      	ldr	r3, [r7, #12]
 8012e9c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8012e9e:	68bb      	ldr	r3, [r7, #8]
 8012ea0:	781b      	ldrb	r3, [r3, #0]
 8012ea2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8012ea4:	68bb      	ldr	r3, [r7, #8]
 8012ea6:	785b      	ldrb	r3, [r3, #1]
 8012ea8:	2b01      	cmp	r3, #1
 8012eaa:	f040 80ce 	bne.w	801304a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8012eae:	68bb      	ldr	r3, [r7, #8]
 8012eb0:	699b      	ldr	r3, [r3, #24]
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	d132      	bne.n	8012f1c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012eb6:	693b      	ldr	r3, [r7, #16]
 8012eb8:	015a      	lsls	r2, r3, #5
 8012eba:	697b      	ldr	r3, [r7, #20]
 8012ebc:	4413      	add	r3, r2
 8012ebe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ec2:	691b      	ldr	r3, [r3, #16]
 8012ec4:	693a      	ldr	r2, [r7, #16]
 8012ec6:	0151      	lsls	r1, r2, #5
 8012ec8:	697a      	ldr	r2, [r7, #20]
 8012eca:	440a      	add	r2, r1
 8012ecc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012ed0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8012ed4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8012ed8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012eda:	693b      	ldr	r3, [r7, #16]
 8012edc:	015a      	lsls	r2, r3, #5
 8012ede:	697b      	ldr	r3, [r7, #20]
 8012ee0:	4413      	add	r3, r2
 8012ee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ee6:	691b      	ldr	r3, [r3, #16]
 8012ee8:	693a      	ldr	r2, [r7, #16]
 8012eea:	0151      	lsls	r1, r2, #5
 8012eec:	697a      	ldr	r2, [r7, #20]
 8012eee:	440a      	add	r2, r1
 8012ef0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012ef4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012ef8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012efa:	693b      	ldr	r3, [r7, #16]
 8012efc:	015a      	lsls	r2, r3, #5
 8012efe:	697b      	ldr	r3, [r7, #20]
 8012f00:	4413      	add	r3, r2
 8012f02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f06:	691b      	ldr	r3, [r3, #16]
 8012f08:	693a      	ldr	r2, [r7, #16]
 8012f0a:	0151      	lsls	r1, r2, #5
 8012f0c:	697a      	ldr	r2, [r7, #20]
 8012f0e:	440a      	add	r2, r1
 8012f10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012f14:	0cdb      	lsrs	r3, r3, #19
 8012f16:	04db      	lsls	r3, r3, #19
 8012f18:	6113      	str	r3, [r2, #16]
 8012f1a:	e04e      	b.n	8012fba <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012f1c:	693b      	ldr	r3, [r7, #16]
 8012f1e:	015a      	lsls	r2, r3, #5
 8012f20:	697b      	ldr	r3, [r7, #20]
 8012f22:	4413      	add	r3, r2
 8012f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f28:	691b      	ldr	r3, [r3, #16]
 8012f2a:	693a      	ldr	r2, [r7, #16]
 8012f2c:	0151      	lsls	r1, r2, #5
 8012f2e:	697a      	ldr	r2, [r7, #20]
 8012f30:	440a      	add	r2, r1
 8012f32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012f36:	0cdb      	lsrs	r3, r3, #19
 8012f38:	04db      	lsls	r3, r3, #19
 8012f3a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012f3c:	693b      	ldr	r3, [r7, #16]
 8012f3e:	015a      	lsls	r2, r3, #5
 8012f40:	697b      	ldr	r3, [r7, #20]
 8012f42:	4413      	add	r3, r2
 8012f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f48:	691b      	ldr	r3, [r3, #16]
 8012f4a:	693a      	ldr	r2, [r7, #16]
 8012f4c:	0151      	lsls	r1, r2, #5
 8012f4e:	697a      	ldr	r2, [r7, #20]
 8012f50:	440a      	add	r2, r1
 8012f52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012f56:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8012f5a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8012f5e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8012f60:	68bb      	ldr	r3, [r7, #8]
 8012f62:	699a      	ldr	r2, [r3, #24]
 8012f64:	68bb      	ldr	r3, [r7, #8]
 8012f66:	68db      	ldr	r3, [r3, #12]
 8012f68:	429a      	cmp	r2, r3
 8012f6a:	d903      	bls.n	8012f74 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8012f6c:	68bb      	ldr	r3, [r7, #8]
 8012f6e:	68da      	ldr	r2, [r3, #12]
 8012f70:	68bb      	ldr	r3, [r7, #8]
 8012f72:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012f74:	693b      	ldr	r3, [r7, #16]
 8012f76:	015a      	lsls	r2, r3, #5
 8012f78:	697b      	ldr	r3, [r7, #20]
 8012f7a:	4413      	add	r3, r2
 8012f7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f80:	691b      	ldr	r3, [r3, #16]
 8012f82:	693a      	ldr	r2, [r7, #16]
 8012f84:	0151      	lsls	r1, r2, #5
 8012f86:	697a      	ldr	r2, [r7, #20]
 8012f88:	440a      	add	r2, r1
 8012f8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012f8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012f92:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8012f94:	693b      	ldr	r3, [r7, #16]
 8012f96:	015a      	lsls	r2, r3, #5
 8012f98:	697b      	ldr	r3, [r7, #20]
 8012f9a:	4413      	add	r3, r2
 8012f9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012fa0:	691a      	ldr	r2, [r3, #16]
 8012fa2:	68bb      	ldr	r3, [r7, #8]
 8012fa4:	699b      	ldr	r3, [r3, #24]
 8012fa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012faa:	6939      	ldr	r1, [r7, #16]
 8012fac:	0148      	lsls	r0, r1, #5
 8012fae:	6979      	ldr	r1, [r7, #20]
 8012fb0:	4401      	add	r1, r0
 8012fb2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8012fb6:	4313      	orrs	r3, r2
 8012fb8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8012fba:	79fb      	ldrb	r3, [r7, #7]
 8012fbc:	2b01      	cmp	r3, #1
 8012fbe:	d11e      	bne.n	8012ffe <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8012fc0:	68bb      	ldr	r3, [r7, #8]
 8012fc2:	695b      	ldr	r3, [r3, #20]
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	d009      	beq.n	8012fdc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8012fc8:	693b      	ldr	r3, [r7, #16]
 8012fca:	015a      	lsls	r2, r3, #5
 8012fcc:	697b      	ldr	r3, [r7, #20]
 8012fce:	4413      	add	r3, r2
 8012fd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012fd4:	461a      	mov	r2, r3
 8012fd6:	68bb      	ldr	r3, [r7, #8]
 8012fd8:	695b      	ldr	r3, [r3, #20]
 8012fda:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012fdc:	693b      	ldr	r3, [r7, #16]
 8012fde:	015a      	lsls	r2, r3, #5
 8012fe0:	697b      	ldr	r3, [r7, #20]
 8012fe2:	4413      	add	r3, r2
 8012fe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012fe8:	681b      	ldr	r3, [r3, #0]
 8012fea:	693a      	ldr	r2, [r7, #16]
 8012fec:	0151      	lsls	r1, r2, #5
 8012fee:	697a      	ldr	r2, [r7, #20]
 8012ff0:	440a      	add	r2, r1
 8012ff2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012ff6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012ffa:	6013      	str	r3, [r2, #0]
 8012ffc:	e097      	b.n	801312e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012ffe:	693b      	ldr	r3, [r7, #16]
 8013000:	015a      	lsls	r2, r3, #5
 8013002:	697b      	ldr	r3, [r7, #20]
 8013004:	4413      	add	r3, r2
 8013006:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801300a:	681b      	ldr	r3, [r3, #0]
 801300c:	693a      	ldr	r2, [r7, #16]
 801300e:	0151      	lsls	r1, r2, #5
 8013010:	697a      	ldr	r2, [r7, #20]
 8013012:	440a      	add	r2, r1
 8013014:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013018:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801301c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 801301e:	68bb      	ldr	r3, [r7, #8]
 8013020:	699b      	ldr	r3, [r3, #24]
 8013022:	2b00      	cmp	r3, #0
 8013024:	f000 8083 	beq.w	801312e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8013028:	697b      	ldr	r3, [r7, #20]
 801302a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801302e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013030:	68bb      	ldr	r3, [r7, #8]
 8013032:	781b      	ldrb	r3, [r3, #0]
 8013034:	f003 030f 	and.w	r3, r3, #15
 8013038:	2101      	movs	r1, #1
 801303a:	fa01 f303 	lsl.w	r3, r1, r3
 801303e:	6979      	ldr	r1, [r7, #20]
 8013040:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013044:	4313      	orrs	r3, r2
 8013046:	634b      	str	r3, [r1, #52]	; 0x34
 8013048:	e071      	b.n	801312e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801304a:	693b      	ldr	r3, [r7, #16]
 801304c:	015a      	lsls	r2, r3, #5
 801304e:	697b      	ldr	r3, [r7, #20]
 8013050:	4413      	add	r3, r2
 8013052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013056:	691b      	ldr	r3, [r3, #16]
 8013058:	693a      	ldr	r2, [r7, #16]
 801305a:	0151      	lsls	r1, r2, #5
 801305c:	697a      	ldr	r2, [r7, #20]
 801305e:	440a      	add	r2, r1
 8013060:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013064:	0cdb      	lsrs	r3, r3, #19
 8013066:	04db      	lsls	r3, r3, #19
 8013068:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801306a:	693b      	ldr	r3, [r7, #16]
 801306c:	015a      	lsls	r2, r3, #5
 801306e:	697b      	ldr	r3, [r7, #20]
 8013070:	4413      	add	r3, r2
 8013072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013076:	691b      	ldr	r3, [r3, #16]
 8013078:	693a      	ldr	r2, [r7, #16]
 801307a:	0151      	lsls	r1, r2, #5
 801307c:	697a      	ldr	r2, [r7, #20]
 801307e:	440a      	add	r2, r1
 8013080:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013084:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8013088:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801308c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 801308e:	68bb      	ldr	r3, [r7, #8]
 8013090:	699b      	ldr	r3, [r3, #24]
 8013092:	2b00      	cmp	r3, #0
 8013094:	d003      	beq.n	801309e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8013096:	68bb      	ldr	r3, [r7, #8]
 8013098:	68da      	ldr	r2, [r3, #12]
 801309a:	68bb      	ldr	r3, [r7, #8]
 801309c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 801309e:	68bb      	ldr	r3, [r7, #8]
 80130a0:	68da      	ldr	r2, [r3, #12]
 80130a2:	68bb      	ldr	r3, [r7, #8]
 80130a4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80130a6:	693b      	ldr	r3, [r7, #16]
 80130a8:	015a      	lsls	r2, r3, #5
 80130aa:	697b      	ldr	r3, [r7, #20]
 80130ac:	4413      	add	r3, r2
 80130ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80130b2:	691b      	ldr	r3, [r3, #16]
 80130b4:	693a      	ldr	r2, [r7, #16]
 80130b6:	0151      	lsls	r1, r2, #5
 80130b8:	697a      	ldr	r2, [r7, #20]
 80130ba:	440a      	add	r2, r1
 80130bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80130c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80130c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80130c6:	693b      	ldr	r3, [r7, #16]
 80130c8:	015a      	lsls	r2, r3, #5
 80130ca:	697b      	ldr	r3, [r7, #20]
 80130cc:	4413      	add	r3, r2
 80130ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80130d2:	691a      	ldr	r2, [r3, #16]
 80130d4:	68bb      	ldr	r3, [r7, #8]
 80130d6:	69db      	ldr	r3, [r3, #28]
 80130d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80130dc:	6939      	ldr	r1, [r7, #16]
 80130de:	0148      	lsls	r0, r1, #5
 80130e0:	6979      	ldr	r1, [r7, #20]
 80130e2:	4401      	add	r1, r0
 80130e4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80130e8:	4313      	orrs	r3, r2
 80130ea:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80130ec:	79fb      	ldrb	r3, [r7, #7]
 80130ee:	2b01      	cmp	r3, #1
 80130f0:	d10d      	bne.n	801310e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80130f2:	68bb      	ldr	r3, [r7, #8]
 80130f4:	691b      	ldr	r3, [r3, #16]
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d009      	beq.n	801310e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80130fa:	68bb      	ldr	r3, [r7, #8]
 80130fc:	6919      	ldr	r1, [r3, #16]
 80130fe:	693b      	ldr	r3, [r7, #16]
 8013100:	015a      	lsls	r2, r3, #5
 8013102:	697b      	ldr	r3, [r7, #20]
 8013104:	4413      	add	r3, r2
 8013106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801310a:	460a      	mov	r2, r1
 801310c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801310e:	693b      	ldr	r3, [r7, #16]
 8013110:	015a      	lsls	r2, r3, #5
 8013112:	697b      	ldr	r3, [r7, #20]
 8013114:	4413      	add	r3, r2
 8013116:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801311a:	681b      	ldr	r3, [r3, #0]
 801311c:	693a      	ldr	r2, [r7, #16]
 801311e:	0151      	lsls	r1, r2, #5
 8013120:	697a      	ldr	r2, [r7, #20]
 8013122:	440a      	add	r2, r1
 8013124:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013128:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801312c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801312e:	2300      	movs	r3, #0
}
 8013130:	4618      	mov	r0, r3
 8013132:	371c      	adds	r7, #28
 8013134:	46bd      	mov	sp, r7
 8013136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801313a:	4770      	bx	lr

0801313c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801313c:	b480      	push	{r7}
 801313e:	b087      	sub	sp, #28
 8013140:	af00      	add	r7, sp, #0
 8013142:	6078      	str	r0, [r7, #4]
 8013144:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8013146:	2300      	movs	r3, #0
 8013148:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 801314a:	2300      	movs	r3, #0
 801314c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8013152:	683b      	ldr	r3, [r7, #0]
 8013154:	785b      	ldrb	r3, [r3, #1]
 8013156:	2b01      	cmp	r3, #1
 8013158:	d14a      	bne.n	80131f0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801315a:	683b      	ldr	r3, [r7, #0]
 801315c:	781b      	ldrb	r3, [r3, #0]
 801315e:	015a      	lsls	r2, r3, #5
 8013160:	693b      	ldr	r3, [r7, #16]
 8013162:	4413      	add	r3, r2
 8013164:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013168:	681b      	ldr	r3, [r3, #0]
 801316a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801316e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013172:	f040 8086 	bne.w	8013282 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8013176:	683b      	ldr	r3, [r7, #0]
 8013178:	781b      	ldrb	r3, [r3, #0]
 801317a:	015a      	lsls	r2, r3, #5
 801317c:	693b      	ldr	r3, [r7, #16]
 801317e:	4413      	add	r3, r2
 8013180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013184:	681b      	ldr	r3, [r3, #0]
 8013186:	683a      	ldr	r2, [r7, #0]
 8013188:	7812      	ldrb	r2, [r2, #0]
 801318a:	0151      	lsls	r1, r2, #5
 801318c:	693a      	ldr	r2, [r7, #16]
 801318e:	440a      	add	r2, r1
 8013190:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013194:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013198:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 801319a:	683b      	ldr	r3, [r7, #0]
 801319c:	781b      	ldrb	r3, [r3, #0]
 801319e:	015a      	lsls	r2, r3, #5
 80131a0:	693b      	ldr	r3, [r7, #16]
 80131a2:	4413      	add	r3, r2
 80131a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80131a8:	681b      	ldr	r3, [r3, #0]
 80131aa:	683a      	ldr	r2, [r7, #0]
 80131ac:	7812      	ldrb	r2, [r2, #0]
 80131ae:	0151      	lsls	r1, r2, #5
 80131b0:	693a      	ldr	r2, [r7, #16]
 80131b2:	440a      	add	r2, r1
 80131b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80131b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80131bc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80131be:	68fb      	ldr	r3, [r7, #12]
 80131c0:	3301      	adds	r3, #1
 80131c2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80131c4:	68fb      	ldr	r3, [r7, #12]
 80131c6:	f242 7210 	movw	r2, #10000	; 0x2710
 80131ca:	4293      	cmp	r3, r2
 80131cc:	d902      	bls.n	80131d4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80131ce:	2301      	movs	r3, #1
 80131d0:	75fb      	strb	r3, [r7, #23]
          break;
 80131d2:	e056      	b.n	8013282 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80131d4:	683b      	ldr	r3, [r7, #0]
 80131d6:	781b      	ldrb	r3, [r3, #0]
 80131d8:	015a      	lsls	r2, r3, #5
 80131da:	693b      	ldr	r3, [r7, #16]
 80131dc:	4413      	add	r3, r2
 80131de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80131e2:	681b      	ldr	r3, [r3, #0]
 80131e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80131e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80131ec:	d0e7      	beq.n	80131be <USB_EPStopXfer+0x82>
 80131ee:	e048      	b.n	8013282 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80131f0:	683b      	ldr	r3, [r7, #0]
 80131f2:	781b      	ldrb	r3, [r3, #0]
 80131f4:	015a      	lsls	r2, r3, #5
 80131f6:	693b      	ldr	r3, [r7, #16]
 80131f8:	4413      	add	r3, r2
 80131fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80131fe:	681b      	ldr	r3, [r3, #0]
 8013200:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013204:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013208:	d13b      	bne.n	8013282 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 801320a:	683b      	ldr	r3, [r7, #0]
 801320c:	781b      	ldrb	r3, [r3, #0]
 801320e:	015a      	lsls	r2, r3, #5
 8013210:	693b      	ldr	r3, [r7, #16]
 8013212:	4413      	add	r3, r2
 8013214:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013218:	681b      	ldr	r3, [r3, #0]
 801321a:	683a      	ldr	r2, [r7, #0]
 801321c:	7812      	ldrb	r2, [r2, #0]
 801321e:	0151      	lsls	r1, r2, #5
 8013220:	693a      	ldr	r2, [r7, #16]
 8013222:	440a      	add	r2, r1
 8013224:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013228:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801322c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 801322e:	683b      	ldr	r3, [r7, #0]
 8013230:	781b      	ldrb	r3, [r3, #0]
 8013232:	015a      	lsls	r2, r3, #5
 8013234:	693b      	ldr	r3, [r7, #16]
 8013236:	4413      	add	r3, r2
 8013238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801323c:	681b      	ldr	r3, [r3, #0]
 801323e:	683a      	ldr	r2, [r7, #0]
 8013240:	7812      	ldrb	r2, [r2, #0]
 8013242:	0151      	lsls	r1, r2, #5
 8013244:	693a      	ldr	r2, [r7, #16]
 8013246:	440a      	add	r2, r1
 8013248:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801324c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013250:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8013252:	68fb      	ldr	r3, [r7, #12]
 8013254:	3301      	adds	r3, #1
 8013256:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8013258:	68fb      	ldr	r3, [r7, #12]
 801325a:	f242 7210 	movw	r2, #10000	; 0x2710
 801325e:	4293      	cmp	r3, r2
 8013260:	d902      	bls.n	8013268 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8013262:	2301      	movs	r3, #1
 8013264:	75fb      	strb	r3, [r7, #23]
          break;
 8013266:	e00c      	b.n	8013282 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8013268:	683b      	ldr	r3, [r7, #0]
 801326a:	781b      	ldrb	r3, [r3, #0]
 801326c:	015a      	lsls	r2, r3, #5
 801326e:	693b      	ldr	r3, [r7, #16]
 8013270:	4413      	add	r3, r2
 8013272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013276:	681b      	ldr	r3, [r3, #0]
 8013278:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801327c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013280:	d0e7      	beq.n	8013252 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8013282:	7dfb      	ldrb	r3, [r7, #23]
}
 8013284:	4618      	mov	r0, r3
 8013286:	371c      	adds	r7, #28
 8013288:	46bd      	mov	sp, r7
 801328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801328e:	4770      	bx	lr

08013290 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8013290:	b480      	push	{r7}
 8013292:	b089      	sub	sp, #36	; 0x24
 8013294:	af00      	add	r7, sp, #0
 8013296:	60f8      	str	r0, [r7, #12]
 8013298:	60b9      	str	r1, [r7, #8]
 801329a:	4611      	mov	r1, r2
 801329c:	461a      	mov	r2, r3
 801329e:	460b      	mov	r3, r1
 80132a0:	71fb      	strb	r3, [r7, #7]
 80132a2:	4613      	mov	r3, r2
 80132a4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80132a6:	68fb      	ldr	r3, [r7, #12]
 80132a8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80132aa:	68bb      	ldr	r3, [r7, #8]
 80132ac:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80132ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d123      	bne.n	80132fe <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80132b6:	88bb      	ldrh	r3, [r7, #4]
 80132b8:	3303      	adds	r3, #3
 80132ba:	089b      	lsrs	r3, r3, #2
 80132bc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80132be:	2300      	movs	r3, #0
 80132c0:	61bb      	str	r3, [r7, #24]
 80132c2:	e018      	b.n	80132f6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80132c4:	79fb      	ldrb	r3, [r7, #7]
 80132c6:	031a      	lsls	r2, r3, #12
 80132c8:	697b      	ldr	r3, [r7, #20]
 80132ca:	4413      	add	r3, r2
 80132cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80132d0:	461a      	mov	r2, r3
 80132d2:	69fb      	ldr	r3, [r7, #28]
 80132d4:	681b      	ldr	r3, [r3, #0]
 80132d6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80132d8:	69fb      	ldr	r3, [r7, #28]
 80132da:	3301      	adds	r3, #1
 80132dc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80132de:	69fb      	ldr	r3, [r7, #28]
 80132e0:	3301      	adds	r3, #1
 80132e2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80132e4:	69fb      	ldr	r3, [r7, #28]
 80132e6:	3301      	adds	r3, #1
 80132e8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80132ea:	69fb      	ldr	r3, [r7, #28]
 80132ec:	3301      	adds	r3, #1
 80132ee:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80132f0:	69bb      	ldr	r3, [r7, #24]
 80132f2:	3301      	adds	r3, #1
 80132f4:	61bb      	str	r3, [r7, #24]
 80132f6:	69ba      	ldr	r2, [r7, #24]
 80132f8:	693b      	ldr	r3, [r7, #16]
 80132fa:	429a      	cmp	r2, r3
 80132fc:	d3e2      	bcc.n	80132c4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80132fe:	2300      	movs	r3, #0
}
 8013300:	4618      	mov	r0, r3
 8013302:	3724      	adds	r7, #36	; 0x24
 8013304:	46bd      	mov	sp, r7
 8013306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801330a:	4770      	bx	lr

0801330c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 801330c:	b480      	push	{r7}
 801330e:	b08b      	sub	sp, #44	; 0x2c
 8013310:	af00      	add	r7, sp, #0
 8013312:	60f8      	str	r0, [r7, #12]
 8013314:	60b9      	str	r1, [r7, #8]
 8013316:	4613      	mov	r3, r2
 8013318:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801331a:	68fb      	ldr	r3, [r7, #12]
 801331c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 801331e:	68bb      	ldr	r3, [r7, #8]
 8013320:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8013322:	88fb      	ldrh	r3, [r7, #6]
 8013324:	089b      	lsrs	r3, r3, #2
 8013326:	b29b      	uxth	r3, r3
 8013328:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801332a:	88fb      	ldrh	r3, [r7, #6]
 801332c:	f003 0303 	and.w	r3, r3, #3
 8013330:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8013332:	2300      	movs	r3, #0
 8013334:	623b      	str	r3, [r7, #32]
 8013336:	e014      	b.n	8013362 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8013338:	69bb      	ldr	r3, [r7, #24]
 801333a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801333e:	681a      	ldr	r2, [r3, #0]
 8013340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013342:	601a      	str	r2, [r3, #0]
    pDest++;
 8013344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013346:	3301      	adds	r3, #1
 8013348:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801334a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801334c:	3301      	adds	r3, #1
 801334e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013352:	3301      	adds	r3, #1
 8013354:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013358:	3301      	adds	r3, #1
 801335a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 801335c:	6a3b      	ldr	r3, [r7, #32]
 801335e:	3301      	adds	r3, #1
 8013360:	623b      	str	r3, [r7, #32]
 8013362:	6a3a      	ldr	r2, [r7, #32]
 8013364:	697b      	ldr	r3, [r7, #20]
 8013366:	429a      	cmp	r2, r3
 8013368:	d3e6      	bcc.n	8013338 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 801336a:	8bfb      	ldrh	r3, [r7, #30]
 801336c:	2b00      	cmp	r3, #0
 801336e:	d01e      	beq.n	80133ae <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8013370:	2300      	movs	r3, #0
 8013372:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8013374:	69bb      	ldr	r3, [r7, #24]
 8013376:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801337a:	461a      	mov	r2, r3
 801337c:	f107 0310 	add.w	r3, r7, #16
 8013380:	6812      	ldr	r2, [r2, #0]
 8013382:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8013384:	693a      	ldr	r2, [r7, #16]
 8013386:	6a3b      	ldr	r3, [r7, #32]
 8013388:	b2db      	uxtb	r3, r3
 801338a:	00db      	lsls	r3, r3, #3
 801338c:	fa22 f303 	lsr.w	r3, r2, r3
 8013390:	b2da      	uxtb	r2, r3
 8013392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013394:	701a      	strb	r2, [r3, #0]
      i++;
 8013396:	6a3b      	ldr	r3, [r7, #32]
 8013398:	3301      	adds	r3, #1
 801339a:	623b      	str	r3, [r7, #32]
      pDest++;
 801339c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801339e:	3301      	adds	r3, #1
 80133a0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80133a2:	8bfb      	ldrh	r3, [r7, #30]
 80133a4:	3b01      	subs	r3, #1
 80133a6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80133a8:	8bfb      	ldrh	r3, [r7, #30]
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	d1ea      	bne.n	8013384 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80133ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80133b0:	4618      	mov	r0, r3
 80133b2:	372c      	adds	r7, #44	; 0x2c
 80133b4:	46bd      	mov	sp, r7
 80133b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133ba:	4770      	bx	lr

080133bc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80133bc:	b480      	push	{r7}
 80133be:	b085      	sub	sp, #20
 80133c0:	af00      	add	r7, sp, #0
 80133c2:	6078      	str	r0, [r7, #4]
 80133c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80133ca:	683b      	ldr	r3, [r7, #0]
 80133cc:	781b      	ldrb	r3, [r3, #0]
 80133ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80133d0:	683b      	ldr	r3, [r7, #0]
 80133d2:	785b      	ldrb	r3, [r3, #1]
 80133d4:	2b01      	cmp	r3, #1
 80133d6:	d12c      	bne.n	8013432 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80133d8:	68bb      	ldr	r3, [r7, #8]
 80133da:	015a      	lsls	r2, r3, #5
 80133dc:	68fb      	ldr	r3, [r7, #12]
 80133de:	4413      	add	r3, r2
 80133e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80133e4:	681b      	ldr	r3, [r3, #0]
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	db12      	blt.n	8013410 <USB_EPSetStall+0x54>
 80133ea:	68bb      	ldr	r3, [r7, #8]
 80133ec:	2b00      	cmp	r3, #0
 80133ee:	d00f      	beq.n	8013410 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80133f0:	68bb      	ldr	r3, [r7, #8]
 80133f2:	015a      	lsls	r2, r3, #5
 80133f4:	68fb      	ldr	r3, [r7, #12]
 80133f6:	4413      	add	r3, r2
 80133f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80133fc:	681b      	ldr	r3, [r3, #0]
 80133fe:	68ba      	ldr	r2, [r7, #8]
 8013400:	0151      	lsls	r1, r2, #5
 8013402:	68fa      	ldr	r2, [r7, #12]
 8013404:	440a      	add	r2, r1
 8013406:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801340a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801340e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8013410:	68bb      	ldr	r3, [r7, #8]
 8013412:	015a      	lsls	r2, r3, #5
 8013414:	68fb      	ldr	r3, [r7, #12]
 8013416:	4413      	add	r3, r2
 8013418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801341c:	681b      	ldr	r3, [r3, #0]
 801341e:	68ba      	ldr	r2, [r7, #8]
 8013420:	0151      	lsls	r1, r2, #5
 8013422:	68fa      	ldr	r2, [r7, #12]
 8013424:	440a      	add	r2, r1
 8013426:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801342a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801342e:	6013      	str	r3, [r2, #0]
 8013430:	e02b      	b.n	801348a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013432:	68bb      	ldr	r3, [r7, #8]
 8013434:	015a      	lsls	r2, r3, #5
 8013436:	68fb      	ldr	r3, [r7, #12]
 8013438:	4413      	add	r3, r2
 801343a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801343e:	681b      	ldr	r3, [r3, #0]
 8013440:	2b00      	cmp	r3, #0
 8013442:	db12      	blt.n	801346a <USB_EPSetStall+0xae>
 8013444:	68bb      	ldr	r3, [r7, #8]
 8013446:	2b00      	cmp	r3, #0
 8013448:	d00f      	beq.n	801346a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801344a:	68bb      	ldr	r3, [r7, #8]
 801344c:	015a      	lsls	r2, r3, #5
 801344e:	68fb      	ldr	r3, [r7, #12]
 8013450:	4413      	add	r3, r2
 8013452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013456:	681b      	ldr	r3, [r3, #0]
 8013458:	68ba      	ldr	r2, [r7, #8]
 801345a:	0151      	lsls	r1, r2, #5
 801345c:	68fa      	ldr	r2, [r7, #12]
 801345e:	440a      	add	r2, r1
 8013460:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013464:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013468:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801346a:	68bb      	ldr	r3, [r7, #8]
 801346c:	015a      	lsls	r2, r3, #5
 801346e:	68fb      	ldr	r3, [r7, #12]
 8013470:	4413      	add	r3, r2
 8013472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013476:	681b      	ldr	r3, [r3, #0]
 8013478:	68ba      	ldr	r2, [r7, #8]
 801347a:	0151      	lsls	r1, r2, #5
 801347c:	68fa      	ldr	r2, [r7, #12]
 801347e:	440a      	add	r2, r1
 8013480:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013484:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013488:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801348a:	2300      	movs	r3, #0
}
 801348c:	4618      	mov	r0, r3
 801348e:	3714      	adds	r7, #20
 8013490:	46bd      	mov	sp, r7
 8013492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013496:	4770      	bx	lr

08013498 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013498:	b480      	push	{r7}
 801349a:	b085      	sub	sp, #20
 801349c:	af00      	add	r7, sp, #0
 801349e:	6078      	str	r0, [r7, #4]
 80134a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80134a6:	683b      	ldr	r3, [r7, #0]
 80134a8:	781b      	ldrb	r3, [r3, #0]
 80134aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80134ac:	683b      	ldr	r3, [r7, #0]
 80134ae:	785b      	ldrb	r3, [r3, #1]
 80134b0:	2b01      	cmp	r3, #1
 80134b2:	d128      	bne.n	8013506 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80134b4:	68bb      	ldr	r3, [r7, #8]
 80134b6:	015a      	lsls	r2, r3, #5
 80134b8:	68fb      	ldr	r3, [r7, #12]
 80134ba:	4413      	add	r3, r2
 80134bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80134c0:	681b      	ldr	r3, [r3, #0]
 80134c2:	68ba      	ldr	r2, [r7, #8]
 80134c4:	0151      	lsls	r1, r2, #5
 80134c6:	68fa      	ldr	r2, [r7, #12]
 80134c8:	440a      	add	r2, r1
 80134ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80134ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80134d2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80134d4:	683b      	ldr	r3, [r7, #0]
 80134d6:	791b      	ldrb	r3, [r3, #4]
 80134d8:	2b03      	cmp	r3, #3
 80134da:	d003      	beq.n	80134e4 <USB_EPClearStall+0x4c>
 80134dc:	683b      	ldr	r3, [r7, #0]
 80134de:	791b      	ldrb	r3, [r3, #4]
 80134e0:	2b02      	cmp	r3, #2
 80134e2:	d138      	bne.n	8013556 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80134e4:	68bb      	ldr	r3, [r7, #8]
 80134e6:	015a      	lsls	r2, r3, #5
 80134e8:	68fb      	ldr	r3, [r7, #12]
 80134ea:	4413      	add	r3, r2
 80134ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80134f0:	681b      	ldr	r3, [r3, #0]
 80134f2:	68ba      	ldr	r2, [r7, #8]
 80134f4:	0151      	lsls	r1, r2, #5
 80134f6:	68fa      	ldr	r2, [r7, #12]
 80134f8:	440a      	add	r2, r1
 80134fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80134fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013502:	6013      	str	r3, [r2, #0]
 8013504:	e027      	b.n	8013556 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8013506:	68bb      	ldr	r3, [r7, #8]
 8013508:	015a      	lsls	r2, r3, #5
 801350a:	68fb      	ldr	r3, [r7, #12]
 801350c:	4413      	add	r3, r2
 801350e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013512:	681b      	ldr	r3, [r3, #0]
 8013514:	68ba      	ldr	r2, [r7, #8]
 8013516:	0151      	lsls	r1, r2, #5
 8013518:	68fa      	ldr	r2, [r7, #12]
 801351a:	440a      	add	r2, r1
 801351c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013520:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013524:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013526:	683b      	ldr	r3, [r7, #0]
 8013528:	791b      	ldrb	r3, [r3, #4]
 801352a:	2b03      	cmp	r3, #3
 801352c:	d003      	beq.n	8013536 <USB_EPClearStall+0x9e>
 801352e:	683b      	ldr	r3, [r7, #0]
 8013530:	791b      	ldrb	r3, [r3, #4]
 8013532:	2b02      	cmp	r3, #2
 8013534:	d10f      	bne.n	8013556 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013536:	68bb      	ldr	r3, [r7, #8]
 8013538:	015a      	lsls	r2, r3, #5
 801353a:	68fb      	ldr	r3, [r7, #12]
 801353c:	4413      	add	r3, r2
 801353e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013542:	681b      	ldr	r3, [r3, #0]
 8013544:	68ba      	ldr	r2, [r7, #8]
 8013546:	0151      	lsls	r1, r2, #5
 8013548:	68fa      	ldr	r2, [r7, #12]
 801354a:	440a      	add	r2, r1
 801354c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013554:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8013556:	2300      	movs	r3, #0
}
 8013558:	4618      	mov	r0, r3
 801355a:	3714      	adds	r7, #20
 801355c:	46bd      	mov	sp, r7
 801355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013562:	4770      	bx	lr

08013564 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8013564:	b480      	push	{r7}
 8013566:	b085      	sub	sp, #20
 8013568:	af00      	add	r7, sp, #0
 801356a:	6078      	str	r0, [r7, #4]
 801356c:	460b      	mov	r3, r1
 801356e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8013574:	68fb      	ldr	r3, [r7, #12]
 8013576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801357a:	681b      	ldr	r3, [r3, #0]
 801357c:	68fa      	ldr	r2, [r7, #12]
 801357e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013582:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8013586:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8013588:	68fb      	ldr	r3, [r7, #12]
 801358a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801358e:	681a      	ldr	r2, [r3, #0]
 8013590:	78fb      	ldrb	r3, [r7, #3]
 8013592:	011b      	lsls	r3, r3, #4
 8013594:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8013598:	68f9      	ldr	r1, [r7, #12]
 801359a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801359e:	4313      	orrs	r3, r2
 80135a0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80135a2:	2300      	movs	r3, #0
}
 80135a4:	4618      	mov	r0, r3
 80135a6:	3714      	adds	r7, #20
 80135a8:	46bd      	mov	sp, r7
 80135aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ae:	4770      	bx	lr

080135b0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80135b0:	b480      	push	{r7}
 80135b2:	b085      	sub	sp, #20
 80135b4:	af00      	add	r7, sp, #0
 80135b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80135bc:	68fb      	ldr	r3, [r7, #12]
 80135be:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80135c2:	681b      	ldr	r3, [r3, #0]
 80135c4:	68fa      	ldr	r2, [r7, #12]
 80135c6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80135ca:	f023 0303 	bic.w	r3, r3, #3
 80135ce:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80135d0:	68fb      	ldr	r3, [r7, #12]
 80135d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80135d6:	685b      	ldr	r3, [r3, #4]
 80135d8:	68fa      	ldr	r2, [r7, #12]
 80135da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80135de:	f023 0302 	bic.w	r3, r3, #2
 80135e2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80135e4:	2300      	movs	r3, #0
}
 80135e6:	4618      	mov	r0, r3
 80135e8:	3714      	adds	r7, #20
 80135ea:	46bd      	mov	sp, r7
 80135ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135f0:	4770      	bx	lr

080135f2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80135f2:	b480      	push	{r7}
 80135f4:	b085      	sub	sp, #20
 80135f6:	af00      	add	r7, sp, #0
 80135f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80135fe:	68fb      	ldr	r3, [r7, #12]
 8013600:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013604:	681b      	ldr	r3, [r3, #0]
 8013606:	68fa      	ldr	r2, [r7, #12]
 8013608:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801360c:	f023 0303 	bic.w	r3, r3, #3
 8013610:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013612:	68fb      	ldr	r3, [r7, #12]
 8013614:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013618:	685b      	ldr	r3, [r3, #4]
 801361a:	68fa      	ldr	r2, [r7, #12]
 801361c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013620:	f043 0302 	orr.w	r3, r3, #2
 8013624:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013626:	2300      	movs	r3, #0
}
 8013628:	4618      	mov	r0, r3
 801362a:	3714      	adds	r7, #20
 801362c:	46bd      	mov	sp, r7
 801362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013632:	4770      	bx	lr

08013634 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8013634:	b480      	push	{r7}
 8013636:	b085      	sub	sp, #20
 8013638:	af00      	add	r7, sp, #0
 801363a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	695b      	ldr	r3, [r3, #20]
 8013640:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	699b      	ldr	r3, [r3, #24]
 8013646:	68fa      	ldr	r2, [r7, #12]
 8013648:	4013      	ands	r3, r2
 801364a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 801364c:	68fb      	ldr	r3, [r7, #12]
}
 801364e:	4618      	mov	r0, r3
 8013650:	3714      	adds	r7, #20
 8013652:	46bd      	mov	sp, r7
 8013654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013658:	4770      	bx	lr

0801365a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801365a:	b480      	push	{r7}
 801365c:	b085      	sub	sp, #20
 801365e:	af00      	add	r7, sp, #0
 8013660:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8013666:	68fb      	ldr	r3, [r7, #12]
 8013668:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801366c:	699b      	ldr	r3, [r3, #24]
 801366e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013670:	68fb      	ldr	r3, [r7, #12]
 8013672:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013676:	69db      	ldr	r3, [r3, #28]
 8013678:	68ba      	ldr	r2, [r7, #8]
 801367a:	4013      	ands	r3, r2
 801367c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801367e:	68bb      	ldr	r3, [r7, #8]
 8013680:	0c1b      	lsrs	r3, r3, #16
}
 8013682:	4618      	mov	r0, r3
 8013684:	3714      	adds	r7, #20
 8013686:	46bd      	mov	sp, r7
 8013688:	f85d 7b04 	ldr.w	r7, [sp], #4
 801368c:	4770      	bx	lr

0801368e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801368e:	b480      	push	{r7}
 8013690:	b085      	sub	sp, #20
 8013692:	af00      	add	r7, sp, #0
 8013694:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801369a:	68fb      	ldr	r3, [r7, #12]
 801369c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80136a0:	699b      	ldr	r3, [r3, #24]
 80136a2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80136a4:	68fb      	ldr	r3, [r7, #12]
 80136a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80136aa:	69db      	ldr	r3, [r3, #28]
 80136ac:	68ba      	ldr	r2, [r7, #8]
 80136ae:	4013      	ands	r3, r2
 80136b0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80136b2:	68bb      	ldr	r3, [r7, #8]
 80136b4:	b29b      	uxth	r3, r3
}
 80136b6:	4618      	mov	r0, r3
 80136b8:	3714      	adds	r7, #20
 80136ba:	46bd      	mov	sp, r7
 80136bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136c0:	4770      	bx	lr

080136c2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80136c2:	b480      	push	{r7}
 80136c4:	b085      	sub	sp, #20
 80136c6:	af00      	add	r7, sp, #0
 80136c8:	6078      	str	r0, [r7, #4]
 80136ca:	460b      	mov	r3, r1
 80136cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80136d2:	78fb      	ldrb	r3, [r7, #3]
 80136d4:	015a      	lsls	r2, r3, #5
 80136d6:	68fb      	ldr	r3, [r7, #12]
 80136d8:	4413      	add	r3, r2
 80136da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80136de:	689b      	ldr	r3, [r3, #8]
 80136e0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80136e2:	68fb      	ldr	r3, [r7, #12]
 80136e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80136e8:	695b      	ldr	r3, [r3, #20]
 80136ea:	68ba      	ldr	r2, [r7, #8]
 80136ec:	4013      	ands	r3, r2
 80136ee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80136f0:	68bb      	ldr	r3, [r7, #8]
}
 80136f2:	4618      	mov	r0, r3
 80136f4:	3714      	adds	r7, #20
 80136f6:	46bd      	mov	sp, r7
 80136f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136fc:	4770      	bx	lr

080136fe <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80136fe:	b480      	push	{r7}
 8013700:	b087      	sub	sp, #28
 8013702:	af00      	add	r7, sp, #0
 8013704:	6078      	str	r0, [r7, #4]
 8013706:	460b      	mov	r3, r1
 8013708:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 801370e:	697b      	ldr	r3, [r7, #20]
 8013710:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013714:	691b      	ldr	r3, [r3, #16]
 8013716:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8013718:	697b      	ldr	r3, [r7, #20]
 801371a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801371e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013720:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8013722:	78fb      	ldrb	r3, [r7, #3]
 8013724:	f003 030f 	and.w	r3, r3, #15
 8013728:	68fa      	ldr	r2, [r7, #12]
 801372a:	fa22 f303 	lsr.w	r3, r2, r3
 801372e:	01db      	lsls	r3, r3, #7
 8013730:	b2db      	uxtb	r3, r3
 8013732:	693a      	ldr	r2, [r7, #16]
 8013734:	4313      	orrs	r3, r2
 8013736:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8013738:	78fb      	ldrb	r3, [r7, #3]
 801373a:	015a      	lsls	r2, r3, #5
 801373c:	697b      	ldr	r3, [r7, #20]
 801373e:	4413      	add	r3, r2
 8013740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013744:	689b      	ldr	r3, [r3, #8]
 8013746:	693a      	ldr	r2, [r7, #16]
 8013748:	4013      	ands	r3, r2
 801374a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801374c:	68bb      	ldr	r3, [r7, #8]
}
 801374e:	4618      	mov	r0, r3
 8013750:	371c      	adds	r7, #28
 8013752:	46bd      	mov	sp, r7
 8013754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013758:	4770      	bx	lr

0801375a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 801375a:	b480      	push	{r7}
 801375c:	b083      	sub	sp, #12
 801375e:	af00      	add	r7, sp, #0
 8013760:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	695b      	ldr	r3, [r3, #20]
 8013766:	f003 0301 	and.w	r3, r3, #1
}
 801376a:	4618      	mov	r0, r3
 801376c:	370c      	adds	r7, #12
 801376e:	46bd      	mov	sp, r7
 8013770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013774:	4770      	bx	lr

08013776 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8013776:	b480      	push	{r7}
 8013778:	b085      	sub	sp, #20
 801377a:	af00      	add	r7, sp, #0
 801377c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8013782:	68fb      	ldr	r3, [r7, #12]
 8013784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013788:	681b      	ldr	r3, [r3, #0]
 801378a:	68fa      	ldr	r2, [r7, #12]
 801378c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013790:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8013794:	f023 0307 	bic.w	r3, r3, #7
 8013798:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801379a:	68fb      	ldr	r3, [r7, #12]
 801379c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80137a0:	685b      	ldr	r3, [r3, #4]
 80137a2:	68fa      	ldr	r2, [r7, #12]
 80137a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80137a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80137ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80137ae:	2300      	movs	r3, #0
}
 80137b0:	4618      	mov	r0, r3
 80137b2:	3714      	adds	r7, #20
 80137b4:	46bd      	mov	sp, r7
 80137b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137ba:	4770      	bx	lr

080137bc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80137bc:	b480      	push	{r7}
 80137be:	b087      	sub	sp, #28
 80137c0:	af00      	add	r7, sp, #0
 80137c2:	60f8      	str	r0, [r7, #12]
 80137c4:	460b      	mov	r3, r1
 80137c6:	607a      	str	r2, [r7, #4]
 80137c8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80137ca:	68fb      	ldr	r3, [r7, #12]
 80137cc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80137ce:	68fb      	ldr	r3, [r7, #12]
 80137d0:	333c      	adds	r3, #60	; 0x3c
 80137d2:	3304      	adds	r3, #4
 80137d4:	681b      	ldr	r3, [r3, #0]
 80137d6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80137d8:	693b      	ldr	r3, [r7, #16]
 80137da:	4a26      	ldr	r2, [pc, #152]	; (8013874 <USB_EP0_OutStart+0xb8>)
 80137dc:	4293      	cmp	r3, r2
 80137de:	d90a      	bls.n	80137f6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80137e0:	697b      	ldr	r3, [r7, #20]
 80137e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80137e6:	681b      	ldr	r3, [r3, #0]
 80137e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80137ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80137f0:	d101      	bne.n	80137f6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80137f2:	2300      	movs	r3, #0
 80137f4:	e037      	b.n	8013866 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80137f6:	697b      	ldr	r3, [r7, #20]
 80137f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80137fc:	461a      	mov	r2, r3
 80137fe:	2300      	movs	r3, #0
 8013800:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013802:	697b      	ldr	r3, [r7, #20]
 8013804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013808:	691b      	ldr	r3, [r3, #16]
 801380a:	697a      	ldr	r2, [r7, #20]
 801380c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013810:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013814:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8013816:	697b      	ldr	r3, [r7, #20]
 8013818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801381c:	691b      	ldr	r3, [r3, #16]
 801381e:	697a      	ldr	r2, [r7, #20]
 8013820:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013824:	f043 0318 	orr.w	r3, r3, #24
 8013828:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801382a:	697b      	ldr	r3, [r7, #20]
 801382c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013830:	691b      	ldr	r3, [r3, #16]
 8013832:	697a      	ldr	r2, [r7, #20]
 8013834:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013838:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 801383c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801383e:	7afb      	ldrb	r3, [r7, #11]
 8013840:	2b01      	cmp	r3, #1
 8013842:	d10f      	bne.n	8013864 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8013844:	697b      	ldr	r3, [r7, #20]
 8013846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801384a:	461a      	mov	r2, r3
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8013850:	697b      	ldr	r3, [r7, #20]
 8013852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013856:	681b      	ldr	r3, [r3, #0]
 8013858:	697a      	ldr	r2, [r7, #20]
 801385a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801385e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8013862:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013864:	2300      	movs	r3, #0
}
 8013866:	4618      	mov	r0, r3
 8013868:	371c      	adds	r7, #28
 801386a:	46bd      	mov	sp, r7
 801386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013870:	4770      	bx	lr
 8013872:	bf00      	nop
 8013874:	4f54300a 	.word	0x4f54300a

08013878 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8013878:	b480      	push	{r7}
 801387a:	b085      	sub	sp, #20
 801387c:	af00      	add	r7, sp, #0
 801387e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8013880:	2300      	movs	r3, #0
 8013882:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013884:	68fb      	ldr	r3, [r7, #12]
 8013886:	3301      	adds	r3, #1
 8013888:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801388a:	68fb      	ldr	r3, [r7, #12]
 801388c:	4a13      	ldr	r2, [pc, #76]	; (80138dc <USB_CoreReset+0x64>)
 801388e:	4293      	cmp	r3, r2
 8013890:	d901      	bls.n	8013896 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8013892:	2303      	movs	r3, #3
 8013894:	e01b      	b.n	80138ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	691b      	ldr	r3, [r3, #16]
 801389a:	2b00      	cmp	r3, #0
 801389c:	daf2      	bge.n	8013884 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801389e:	2300      	movs	r3, #0
 80138a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	691b      	ldr	r3, [r3, #16]
 80138a6:	f043 0201 	orr.w	r2, r3, #1
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80138ae:	68fb      	ldr	r3, [r7, #12]
 80138b0:	3301      	adds	r3, #1
 80138b2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80138b4:	68fb      	ldr	r3, [r7, #12]
 80138b6:	4a09      	ldr	r2, [pc, #36]	; (80138dc <USB_CoreReset+0x64>)
 80138b8:	4293      	cmp	r3, r2
 80138ba:	d901      	bls.n	80138c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80138bc:	2303      	movs	r3, #3
 80138be:	e006      	b.n	80138ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	691b      	ldr	r3, [r3, #16]
 80138c4:	f003 0301 	and.w	r3, r3, #1
 80138c8:	2b01      	cmp	r3, #1
 80138ca:	d0f0      	beq.n	80138ae <USB_CoreReset+0x36>

  return HAL_OK;
 80138cc:	2300      	movs	r3, #0
}
 80138ce:	4618      	mov	r0, r3
 80138d0:	3714      	adds	r7, #20
 80138d2:	46bd      	mov	sp, r7
 80138d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138d8:	4770      	bx	lr
 80138da:	bf00      	nop
 80138dc:	00030d40 	.word	0x00030d40

080138e0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80138e0:	b580      	push	{r7, lr}
 80138e2:	b084      	sub	sp, #16
 80138e4:	af00      	add	r7, sp, #0
 80138e6:	6078      	str	r0, [r7, #4]
 80138e8:	460b      	mov	r3, r1
 80138ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80138ec:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80138f0:	f006 f9c0 	bl	8019c74 <USBD_static_malloc>
 80138f4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80138f6:	68fb      	ldr	r3, [r7, #12]
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	d109      	bne.n	8013910 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	32b0      	adds	r2, #176	; 0xb0
 8013906:	2100      	movs	r1, #0
 8013908:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 801390c:	2302      	movs	r3, #2
 801390e:	e0d4      	b.n	8013aba <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8013910:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8013914:	2100      	movs	r1, #0
 8013916:	68f8      	ldr	r0, [r7, #12]
 8013918:	f007 ff74 	bl	801b804 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	32b0      	adds	r2, #176	; 0xb0
 8013926:	68f9      	ldr	r1, [r7, #12]
 8013928:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	32b0      	adds	r2, #176	; 0xb0
 8013936:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	7c1b      	ldrb	r3, [r3, #16]
 8013944:	2b00      	cmp	r3, #0
 8013946:	d138      	bne.n	80139ba <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8013948:	4b5e      	ldr	r3, [pc, #376]	; (8013ac4 <USBD_CDC_Init+0x1e4>)
 801394a:	7819      	ldrb	r1, [r3, #0]
 801394c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013950:	2202      	movs	r2, #2
 8013952:	6878      	ldr	r0, [r7, #4]
 8013954:	f006 f81d 	bl	8019992 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8013958:	4b5a      	ldr	r3, [pc, #360]	; (8013ac4 <USBD_CDC_Init+0x1e4>)
 801395a:	781b      	ldrb	r3, [r3, #0]
 801395c:	f003 020f 	and.w	r2, r3, #15
 8013960:	6879      	ldr	r1, [r7, #4]
 8013962:	4613      	mov	r3, r2
 8013964:	009b      	lsls	r3, r3, #2
 8013966:	4413      	add	r3, r2
 8013968:	009b      	lsls	r3, r3, #2
 801396a:	440b      	add	r3, r1
 801396c:	3324      	adds	r3, #36	; 0x24
 801396e:	2201      	movs	r2, #1
 8013970:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8013972:	4b55      	ldr	r3, [pc, #340]	; (8013ac8 <USBD_CDC_Init+0x1e8>)
 8013974:	7819      	ldrb	r1, [r3, #0]
 8013976:	f44f 7300 	mov.w	r3, #512	; 0x200
 801397a:	2202      	movs	r2, #2
 801397c:	6878      	ldr	r0, [r7, #4]
 801397e:	f006 f808 	bl	8019992 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8013982:	4b51      	ldr	r3, [pc, #324]	; (8013ac8 <USBD_CDC_Init+0x1e8>)
 8013984:	781b      	ldrb	r3, [r3, #0]
 8013986:	f003 020f 	and.w	r2, r3, #15
 801398a:	6879      	ldr	r1, [r7, #4]
 801398c:	4613      	mov	r3, r2
 801398e:	009b      	lsls	r3, r3, #2
 8013990:	4413      	add	r3, r2
 8013992:	009b      	lsls	r3, r3, #2
 8013994:	440b      	add	r3, r1
 8013996:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801399a:	2201      	movs	r2, #1
 801399c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 801399e:	4b4b      	ldr	r3, [pc, #300]	; (8013acc <USBD_CDC_Init+0x1ec>)
 80139a0:	781b      	ldrb	r3, [r3, #0]
 80139a2:	f003 020f 	and.w	r2, r3, #15
 80139a6:	6879      	ldr	r1, [r7, #4]
 80139a8:	4613      	mov	r3, r2
 80139aa:	009b      	lsls	r3, r3, #2
 80139ac:	4413      	add	r3, r2
 80139ae:	009b      	lsls	r3, r3, #2
 80139b0:	440b      	add	r3, r1
 80139b2:	3326      	adds	r3, #38	; 0x26
 80139b4:	2210      	movs	r2, #16
 80139b6:	801a      	strh	r2, [r3, #0]
 80139b8:	e035      	b.n	8013a26 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80139ba:	4b42      	ldr	r3, [pc, #264]	; (8013ac4 <USBD_CDC_Init+0x1e4>)
 80139bc:	7819      	ldrb	r1, [r3, #0]
 80139be:	2340      	movs	r3, #64	; 0x40
 80139c0:	2202      	movs	r2, #2
 80139c2:	6878      	ldr	r0, [r7, #4]
 80139c4:	f005 ffe5 	bl	8019992 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80139c8:	4b3e      	ldr	r3, [pc, #248]	; (8013ac4 <USBD_CDC_Init+0x1e4>)
 80139ca:	781b      	ldrb	r3, [r3, #0]
 80139cc:	f003 020f 	and.w	r2, r3, #15
 80139d0:	6879      	ldr	r1, [r7, #4]
 80139d2:	4613      	mov	r3, r2
 80139d4:	009b      	lsls	r3, r3, #2
 80139d6:	4413      	add	r3, r2
 80139d8:	009b      	lsls	r3, r3, #2
 80139da:	440b      	add	r3, r1
 80139dc:	3324      	adds	r3, #36	; 0x24
 80139de:	2201      	movs	r2, #1
 80139e0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80139e2:	4b39      	ldr	r3, [pc, #228]	; (8013ac8 <USBD_CDC_Init+0x1e8>)
 80139e4:	7819      	ldrb	r1, [r3, #0]
 80139e6:	2340      	movs	r3, #64	; 0x40
 80139e8:	2202      	movs	r2, #2
 80139ea:	6878      	ldr	r0, [r7, #4]
 80139ec:	f005 ffd1 	bl	8019992 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80139f0:	4b35      	ldr	r3, [pc, #212]	; (8013ac8 <USBD_CDC_Init+0x1e8>)
 80139f2:	781b      	ldrb	r3, [r3, #0]
 80139f4:	f003 020f 	and.w	r2, r3, #15
 80139f8:	6879      	ldr	r1, [r7, #4]
 80139fa:	4613      	mov	r3, r2
 80139fc:	009b      	lsls	r3, r3, #2
 80139fe:	4413      	add	r3, r2
 8013a00:	009b      	lsls	r3, r3, #2
 8013a02:	440b      	add	r3, r1
 8013a04:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8013a08:	2201      	movs	r2, #1
 8013a0a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8013a0c:	4b2f      	ldr	r3, [pc, #188]	; (8013acc <USBD_CDC_Init+0x1ec>)
 8013a0e:	781b      	ldrb	r3, [r3, #0]
 8013a10:	f003 020f 	and.w	r2, r3, #15
 8013a14:	6879      	ldr	r1, [r7, #4]
 8013a16:	4613      	mov	r3, r2
 8013a18:	009b      	lsls	r3, r3, #2
 8013a1a:	4413      	add	r3, r2
 8013a1c:	009b      	lsls	r3, r3, #2
 8013a1e:	440b      	add	r3, r1
 8013a20:	3326      	adds	r3, #38	; 0x26
 8013a22:	2210      	movs	r2, #16
 8013a24:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8013a26:	4b29      	ldr	r3, [pc, #164]	; (8013acc <USBD_CDC_Init+0x1ec>)
 8013a28:	7819      	ldrb	r1, [r3, #0]
 8013a2a:	2308      	movs	r3, #8
 8013a2c:	2203      	movs	r2, #3
 8013a2e:	6878      	ldr	r0, [r7, #4]
 8013a30:	f005 ffaf 	bl	8019992 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8013a34:	4b25      	ldr	r3, [pc, #148]	; (8013acc <USBD_CDC_Init+0x1ec>)
 8013a36:	781b      	ldrb	r3, [r3, #0]
 8013a38:	f003 020f 	and.w	r2, r3, #15
 8013a3c:	6879      	ldr	r1, [r7, #4]
 8013a3e:	4613      	mov	r3, r2
 8013a40:	009b      	lsls	r3, r3, #2
 8013a42:	4413      	add	r3, r2
 8013a44:	009b      	lsls	r3, r3, #2
 8013a46:	440b      	add	r3, r1
 8013a48:	3324      	adds	r3, #36	; 0x24
 8013a4a:	2201      	movs	r2, #1
 8013a4c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8013a4e:	68fb      	ldr	r3, [r7, #12]
 8013a50:	2200      	movs	r2, #0
 8013a52:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013a5c:	687a      	ldr	r2, [r7, #4]
 8013a5e:	33b0      	adds	r3, #176	; 0xb0
 8013a60:	009b      	lsls	r3, r3, #2
 8013a62:	4413      	add	r3, r2
 8013a64:	685b      	ldr	r3, [r3, #4]
 8013a66:	681b      	ldr	r3, [r3, #0]
 8013a68:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8013a6a:	68fb      	ldr	r3, [r7, #12]
 8013a6c:	2200      	movs	r2, #0
 8013a6e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8013a72:	68fb      	ldr	r3, [r7, #12]
 8013a74:	2200      	movs	r2, #0
 8013a76:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8013a7a:	68fb      	ldr	r3, [r7, #12]
 8013a7c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d101      	bne.n	8013a88 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8013a84:	2302      	movs	r3, #2
 8013a86:	e018      	b.n	8013aba <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	7c1b      	ldrb	r3, [r3, #16]
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	d10a      	bne.n	8013aa6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013a90:	4b0d      	ldr	r3, [pc, #52]	; (8013ac8 <USBD_CDC_Init+0x1e8>)
 8013a92:	7819      	ldrb	r1, [r3, #0]
 8013a94:	68fb      	ldr	r3, [r7, #12]
 8013a96:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013a9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013a9e:	6878      	ldr	r0, [r7, #4]
 8013aa0:	f006 f866 	bl	8019b70 <USBD_LL_PrepareReceive>
 8013aa4:	e008      	b.n	8013ab8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013aa6:	4b08      	ldr	r3, [pc, #32]	; (8013ac8 <USBD_CDC_Init+0x1e8>)
 8013aa8:	7819      	ldrb	r1, [r3, #0]
 8013aaa:	68fb      	ldr	r3, [r7, #12]
 8013aac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013ab0:	2340      	movs	r3, #64	; 0x40
 8013ab2:	6878      	ldr	r0, [r7, #4]
 8013ab4:	f006 f85c 	bl	8019b70 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8013ab8:	2300      	movs	r3, #0
}
 8013aba:	4618      	mov	r0, r3
 8013abc:	3710      	adds	r7, #16
 8013abe:	46bd      	mov	sp, r7
 8013ac0:	bd80      	pop	{r7, pc}
 8013ac2:	bf00      	nop
 8013ac4:	200000e7 	.word	0x200000e7
 8013ac8:	200000e8 	.word	0x200000e8
 8013acc:	200000e9 	.word	0x200000e9

08013ad0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013ad0:	b580      	push	{r7, lr}
 8013ad2:	b082      	sub	sp, #8
 8013ad4:	af00      	add	r7, sp, #0
 8013ad6:	6078      	str	r0, [r7, #4]
 8013ad8:	460b      	mov	r3, r1
 8013ada:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8013adc:	4b3a      	ldr	r3, [pc, #232]	; (8013bc8 <USBD_CDC_DeInit+0xf8>)
 8013ade:	781b      	ldrb	r3, [r3, #0]
 8013ae0:	4619      	mov	r1, r3
 8013ae2:	6878      	ldr	r0, [r7, #4]
 8013ae4:	f005 ff7b 	bl	80199de <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8013ae8:	4b37      	ldr	r3, [pc, #220]	; (8013bc8 <USBD_CDC_DeInit+0xf8>)
 8013aea:	781b      	ldrb	r3, [r3, #0]
 8013aec:	f003 020f 	and.w	r2, r3, #15
 8013af0:	6879      	ldr	r1, [r7, #4]
 8013af2:	4613      	mov	r3, r2
 8013af4:	009b      	lsls	r3, r3, #2
 8013af6:	4413      	add	r3, r2
 8013af8:	009b      	lsls	r3, r3, #2
 8013afa:	440b      	add	r3, r1
 8013afc:	3324      	adds	r3, #36	; 0x24
 8013afe:	2200      	movs	r2, #0
 8013b00:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8013b02:	4b32      	ldr	r3, [pc, #200]	; (8013bcc <USBD_CDC_DeInit+0xfc>)
 8013b04:	781b      	ldrb	r3, [r3, #0]
 8013b06:	4619      	mov	r1, r3
 8013b08:	6878      	ldr	r0, [r7, #4]
 8013b0a:	f005 ff68 	bl	80199de <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8013b0e:	4b2f      	ldr	r3, [pc, #188]	; (8013bcc <USBD_CDC_DeInit+0xfc>)
 8013b10:	781b      	ldrb	r3, [r3, #0]
 8013b12:	f003 020f 	and.w	r2, r3, #15
 8013b16:	6879      	ldr	r1, [r7, #4]
 8013b18:	4613      	mov	r3, r2
 8013b1a:	009b      	lsls	r3, r3, #2
 8013b1c:	4413      	add	r3, r2
 8013b1e:	009b      	lsls	r3, r3, #2
 8013b20:	440b      	add	r3, r1
 8013b22:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8013b26:	2200      	movs	r2, #0
 8013b28:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8013b2a:	4b29      	ldr	r3, [pc, #164]	; (8013bd0 <USBD_CDC_DeInit+0x100>)
 8013b2c:	781b      	ldrb	r3, [r3, #0]
 8013b2e:	4619      	mov	r1, r3
 8013b30:	6878      	ldr	r0, [r7, #4]
 8013b32:	f005 ff54 	bl	80199de <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8013b36:	4b26      	ldr	r3, [pc, #152]	; (8013bd0 <USBD_CDC_DeInit+0x100>)
 8013b38:	781b      	ldrb	r3, [r3, #0]
 8013b3a:	f003 020f 	and.w	r2, r3, #15
 8013b3e:	6879      	ldr	r1, [r7, #4]
 8013b40:	4613      	mov	r3, r2
 8013b42:	009b      	lsls	r3, r3, #2
 8013b44:	4413      	add	r3, r2
 8013b46:	009b      	lsls	r3, r3, #2
 8013b48:	440b      	add	r3, r1
 8013b4a:	3324      	adds	r3, #36	; 0x24
 8013b4c:	2200      	movs	r2, #0
 8013b4e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8013b50:	4b1f      	ldr	r3, [pc, #124]	; (8013bd0 <USBD_CDC_DeInit+0x100>)
 8013b52:	781b      	ldrb	r3, [r3, #0]
 8013b54:	f003 020f 	and.w	r2, r3, #15
 8013b58:	6879      	ldr	r1, [r7, #4]
 8013b5a:	4613      	mov	r3, r2
 8013b5c:	009b      	lsls	r3, r3, #2
 8013b5e:	4413      	add	r3, r2
 8013b60:	009b      	lsls	r3, r3, #2
 8013b62:	440b      	add	r3, r1
 8013b64:	3326      	adds	r3, #38	; 0x26
 8013b66:	2200      	movs	r2, #0
 8013b68:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	32b0      	adds	r2, #176	; 0xb0
 8013b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d01f      	beq.n	8013bbc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013b82:	687a      	ldr	r2, [r7, #4]
 8013b84:	33b0      	adds	r3, #176	; 0xb0
 8013b86:	009b      	lsls	r3, r3, #2
 8013b88:	4413      	add	r3, r2
 8013b8a:	685b      	ldr	r3, [r3, #4]
 8013b8c:	685b      	ldr	r3, [r3, #4]
 8013b8e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	32b0      	adds	r2, #176	; 0xb0
 8013b9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b9e:	4618      	mov	r0, r3
 8013ba0:	f006 f876 	bl	8019c90 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	32b0      	adds	r2, #176	; 0xb0
 8013bae:	2100      	movs	r1, #0
 8013bb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	2200      	movs	r2, #0
 8013bb8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8013bbc:	2300      	movs	r3, #0
}
 8013bbe:	4618      	mov	r0, r3
 8013bc0:	3708      	adds	r7, #8
 8013bc2:	46bd      	mov	sp, r7
 8013bc4:	bd80      	pop	{r7, pc}
 8013bc6:	bf00      	nop
 8013bc8:	200000e7 	.word	0x200000e7
 8013bcc:	200000e8 	.word	0x200000e8
 8013bd0:	200000e9 	.word	0x200000e9

08013bd4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8013bd4:	b580      	push	{r7, lr}
 8013bd6:	b086      	sub	sp, #24
 8013bd8:	af00      	add	r7, sp, #0
 8013bda:	6078      	str	r0, [r7, #4]
 8013bdc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	32b0      	adds	r2, #176	; 0xb0
 8013be8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013bec:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8013bee:	2300      	movs	r3, #0
 8013bf0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8013bf2:	2300      	movs	r3, #0
 8013bf4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8013bf6:	2300      	movs	r3, #0
 8013bf8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8013bfa:	693b      	ldr	r3, [r7, #16]
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	d101      	bne.n	8013c04 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8013c00:	2303      	movs	r3, #3
 8013c02:	e0bf      	b.n	8013d84 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013c04:	683b      	ldr	r3, [r7, #0]
 8013c06:	781b      	ldrb	r3, [r3, #0]
 8013c08:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	d050      	beq.n	8013cb2 <USBD_CDC_Setup+0xde>
 8013c10:	2b20      	cmp	r3, #32
 8013c12:	f040 80af 	bne.w	8013d74 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8013c16:	683b      	ldr	r3, [r7, #0]
 8013c18:	88db      	ldrh	r3, [r3, #6]
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	d03a      	beq.n	8013c94 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8013c1e:	683b      	ldr	r3, [r7, #0]
 8013c20:	781b      	ldrb	r3, [r3, #0]
 8013c22:	b25b      	sxtb	r3, r3
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	da1b      	bge.n	8013c60 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013c2e:	687a      	ldr	r2, [r7, #4]
 8013c30:	33b0      	adds	r3, #176	; 0xb0
 8013c32:	009b      	lsls	r3, r3, #2
 8013c34:	4413      	add	r3, r2
 8013c36:	685b      	ldr	r3, [r3, #4]
 8013c38:	689b      	ldr	r3, [r3, #8]
 8013c3a:	683a      	ldr	r2, [r7, #0]
 8013c3c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8013c3e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8013c40:	683a      	ldr	r2, [r7, #0]
 8013c42:	88d2      	ldrh	r2, [r2, #6]
 8013c44:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8013c46:	683b      	ldr	r3, [r7, #0]
 8013c48:	88db      	ldrh	r3, [r3, #6]
 8013c4a:	2b07      	cmp	r3, #7
 8013c4c:	bf28      	it	cs
 8013c4e:	2307      	movcs	r3, #7
 8013c50:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8013c52:	693b      	ldr	r3, [r7, #16]
 8013c54:	89fa      	ldrh	r2, [r7, #14]
 8013c56:	4619      	mov	r1, r3
 8013c58:	6878      	ldr	r0, [r7, #4]
 8013c5a:	f001 fdb3 	bl	80157c4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8013c5e:	e090      	b.n	8013d82 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8013c60:	683b      	ldr	r3, [r7, #0]
 8013c62:	785a      	ldrb	r2, [r3, #1]
 8013c64:	693b      	ldr	r3, [r7, #16]
 8013c66:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8013c6a:	683b      	ldr	r3, [r7, #0]
 8013c6c:	88db      	ldrh	r3, [r3, #6]
 8013c6e:	2b3f      	cmp	r3, #63	; 0x3f
 8013c70:	d803      	bhi.n	8013c7a <USBD_CDC_Setup+0xa6>
 8013c72:	683b      	ldr	r3, [r7, #0]
 8013c74:	88db      	ldrh	r3, [r3, #6]
 8013c76:	b2da      	uxtb	r2, r3
 8013c78:	e000      	b.n	8013c7c <USBD_CDC_Setup+0xa8>
 8013c7a:	2240      	movs	r2, #64	; 0x40
 8013c7c:	693b      	ldr	r3, [r7, #16]
 8013c7e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8013c82:	6939      	ldr	r1, [r7, #16]
 8013c84:	693b      	ldr	r3, [r7, #16]
 8013c86:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8013c8a:	461a      	mov	r2, r3
 8013c8c:	6878      	ldr	r0, [r7, #4]
 8013c8e:	f001 fdc5 	bl	801581c <USBD_CtlPrepareRx>
      break;
 8013c92:	e076      	b.n	8013d82 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013c9a:	687a      	ldr	r2, [r7, #4]
 8013c9c:	33b0      	adds	r3, #176	; 0xb0
 8013c9e:	009b      	lsls	r3, r3, #2
 8013ca0:	4413      	add	r3, r2
 8013ca2:	685b      	ldr	r3, [r3, #4]
 8013ca4:	689b      	ldr	r3, [r3, #8]
 8013ca6:	683a      	ldr	r2, [r7, #0]
 8013ca8:	7850      	ldrb	r0, [r2, #1]
 8013caa:	2200      	movs	r2, #0
 8013cac:	6839      	ldr	r1, [r7, #0]
 8013cae:	4798      	blx	r3
      break;
 8013cb0:	e067      	b.n	8013d82 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013cb2:	683b      	ldr	r3, [r7, #0]
 8013cb4:	785b      	ldrb	r3, [r3, #1]
 8013cb6:	2b0b      	cmp	r3, #11
 8013cb8:	d851      	bhi.n	8013d5e <USBD_CDC_Setup+0x18a>
 8013cba:	a201      	add	r2, pc, #4	; (adr r2, 8013cc0 <USBD_CDC_Setup+0xec>)
 8013cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013cc0:	08013cf1 	.word	0x08013cf1
 8013cc4:	08013d6d 	.word	0x08013d6d
 8013cc8:	08013d5f 	.word	0x08013d5f
 8013ccc:	08013d5f 	.word	0x08013d5f
 8013cd0:	08013d5f 	.word	0x08013d5f
 8013cd4:	08013d5f 	.word	0x08013d5f
 8013cd8:	08013d5f 	.word	0x08013d5f
 8013cdc:	08013d5f 	.word	0x08013d5f
 8013ce0:	08013d5f 	.word	0x08013d5f
 8013ce4:	08013d5f 	.word	0x08013d5f
 8013ce8:	08013d1b 	.word	0x08013d1b
 8013cec:	08013d45 	.word	0x08013d45
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013cf6:	b2db      	uxtb	r3, r3
 8013cf8:	2b03      	cmp	r3, #3
 8013cfa:	d107      	bne.n	8013d0c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8013cfc:	f107 030a 	add.w	r3, r7, #10
 8013d00:	2202      	movs	r2, #2
 8013d02:	4619      	mov	r1, r3
 8013d04:	6878      	ldr	r0, [r7, #4]
 8013d06:	f001 fd5d 	bl	80157c4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013d0a:	e032      	b.n	8013d72 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8013d0c:	6839      	ldr	r1, [r7, #0]
 8013d0e:	6878      	ldr	r0, [r7, #4]
 8013d10:	f001 fce7 	bl	80156e2 <USBD_CtlError>
            ret = USBD_FAIL;
 8013d14:	2303      	movs	r3, #3
 8013d16:	75fb      	strb	r3, [r7, #23]
          break;
 8013d18:	e02b      	b.n	8013d72 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013d20:	b2db      	uxtb	r3, r3
 8013d22:	2b03      	cmp	r3, #3
 8013d24:	d107      	bne.n	8013d36 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8013d26:	f107 030d 	add.w	r3, r7, #13
 8013d2a:	2201      	movs	r2, #1
 8013d2c:	4619      	mov	r1, r3
 8013d2e:	6878      	ldr	r0, [r7, #4]
 8013d30:	f001 fd48 	bl	80157c4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013d34:	e01d      	b.n	8013d72 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8013d36:	6839      	ldr	r1, [r7, #0]
 8013d38:	6878      	ldr	r0, [r7, #4]
 8013d3a:	f001 fcd2 	bl	80156e2 <USBD_CtlError>
            ret = USBD_FAIL;
 8013d3e:	2303      	movs	r3, #3
 8013d40:	75fb      	strb	r3, [r7, #23]
          break;
 8013d42:	e016      	b.n	8013d72 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013d4a:	b2db      	uxtb	r3, r3
 8013d4c:	2b03      	cmp	r3, #3
 8013d4e:	d00f      	beq.n	8013d70 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8013d50:	6839      	ldr	r1, [r7, #0]
 8013d52:	6878      	ldr	r0, [r7, #4]
 8013d54:	f001 fcc5 	bl	80156e2 <USBD_CtlError>
            ret = USBD_FAIL;
 8013d58:	2303      	movs	r3, #3
 8013d5a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8013d5c:	e008      	b.n	8013d70 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8013d5e:	6839      	ldr	r1, [r7, #0]
 8013d60:	6878      	ldr	r0, [r7, #4]
 8013d62:	f001 fcbe 	bl	80156e2 <USBD_CtlError>
          ret = USBD_FAIL;
 8013d66:	2303      	movs	r3, #3
 8013d68:	75fb      	strb	r3, [r7, #23]
          break;
 8013d6a:	e002      	b.n	8013d72 <USBD_CDC_Setup+0x19e>
          break;
 8013d6c:	bf00      	nop
 8013d6e:	e008      	b.n	8013d82 <USBD_CDC_Setup+0x1ae>
          break;
 8013d70:	bf00      	nop
      }
      break;
 8013d72:	e006      	b.n	8013d82 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8013d74:	6839      	ldr	r1, [r7, #0]
 8013d76:	6878      	ldr	r0, [r7, #4]
 8013d78:	f001 fcb3 	bl	80156e2 <USBD_CtlError>
      ret = USBD_FAIL;
 8013d7c:	2303      	movs	r3, #3
 8013d7e:	75fb      	strb	r3, [r7, #23]
      break;
 8013d80:	bf00      	nop
  }

  return (uint8_t)ret;
 8013d82:	7dfb      	ldrb	r3, [r7, #23]
}
 8013d84:	4618      	mov	r0, r3
 8013d86:	3718      	adds	r7, #24
 8013d88:	46bd      	mov	sp, r7
 8013d8a:	bd80      	pop	{r7, pc}

08013d8c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013d8c:	b580      	push	{r7, lr}
 8013d8e:	b084      	sub	sp, #16
 8013d90:	af00      	add	r7, sp, #0
 8013d92:	6078      	str	r0, [r7, #4]
 8013d94:	460b      	mov	r3, r1
 8013d96:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013d9e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	32b0      	adds	r2, #176	; 0xb0
 8013daa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	d101      	bne.n	8013db6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8013db2:	2303      	movs	r3, #3
 8013db4:	e065      	b.n	8013e82 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	32b0      	adds	r2, #176	; 0xb0
 8013dc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013dc4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8013dc6:	78fb      	ldrb	r3, [r7, #3]
 8013dc8:	f003 020f 	and.w	r2, r3, #15
 8013dcc:	6879      	ldr	r1, [r7, #4]
 8013dce:	4613      	mov	r3, r2
 8013dd0:	009b      	lsls	r3, r3, #2
 8013dd2:	4413      	add	r3, r2
 8013dd4:	009b      	lsls	r3, r3, #2
 8013dd6:	440b      	add	r3, r1
 8013dd8:	3318      	adds	r3, #24
 8013dda:	681b      	ldr	r3, [r3, #0]
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	d02f      	beq.n	8013e40 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8013de0:	78fb      	ldrb	r3, [r7, #3]
 8013de2:	f003 020f 	and.w	r2, r3, #15
 8013de6:	6879      	ldr	r1, [r7, #4]
 8013de8:	4613      	mov	r3, r2
 8013dea:	009b      	lsls	r3, r3, #2
 8013dec:	4413      	add	r3, r2
 8013dee:	009b      	lsls	r3, r3, #2
 8013df0:	440b      	add	r3, r1
 8013df2:	3318      	adds	r3, #24
 8013df4:	681a      	ldr	r2, [r3, #0]
 8013df6:	78fb      	ldrb	r3, [r7, #3]
 8013df8:	f003 010f 	and.w	r1, r3, #15
 8013dfc:	68f8      	ldr	r0, [r7, #12]
 8013dfe:	460b      	mov	r3, r1
 8013e00:	00db      	lsls	r3, r3, #3
 8013e02:	440b      	add	r3, r1
 8013e04:	009b      	lsls	r3, r3, #2
 8013e06:	4403      	add	r3, r0
 8013e08:	3348      	adds	r3, #72	; 0x48
 8013e0a:	681b      	ldr	r3, [r3, #0]
 8013e0c:	fbb2 f1f3 	udiv	r1, r2, r3
 8013e10:	fb01 f303 	mul.w	r3, r1, r3
 8013e14:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8013e16:	2b00      	cmp	r3, #0
 8013e18:	d112      	bne.n	8013e40 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8013e1a:	78fb      	ldrb	r3, [r7, #3]
 8013e1c:	f003 020f 	and.w	r2, r3, #15
 8013e20:	6879      	ldr	r1, [r7, #4]
 8013e22:	4613      	mov	r3, r2
 8013e24:	009b      	lsls	r3, r3, #2
 8013e26:	4413      	add	r3, r2
 8013e28:	009b      	lsls	r3, r3, #2
 8013e2a:	440b      	add	r3, r1
 8013e2c:	3318      	adds	r3, #24
 8013e2e:	2200      	movs	r2, #0
 8013e30:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8013e32:	78f9      	ldrb	r1, [r7, #3]
 8013e34:	2300      	movs	r3, #0
 8013e36:	2200      	movs	r2, #0
 8013e38:	6878      	ldr	r0, [r7, #4]
 8013e3a:	f005 fe78 	bl	8019b2e <USBD_LL_Transmit>
 8013e3e:	e01f      	b.n	8013e80 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8013e40:	68bb      	ldr	r3, [r7, #8]
 8013e42:	2200      	movs	r2, #0
 8013e44:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013e4e:	687a      	ldr	r2, [r7, #4]
 8013e50:	33b0      	adds	r3, #176	; 0xb0
 8013e52:	009b      	lsls	r3, r3, #2
 8013e54:	4413      	add	r3, r2
 8013e56:	685b      	ldr	r3, [r3, #4]
 8013e58:	691b      	ldr	r3, [r3, #16]
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d010      	beq.n	8013e80 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013e64:	687a      	ldr	r2, [r7, #4]
 8013e66:	33b0      	adds	r3, #176	; 0xb0
 8013e68:	009b      	lsls	r3, r3, #2
 8013e6a:	4413      	add	r3, r2
 8013e6c:	685b      	ldr	r3, [r3, #4]
 8013e6e:	691b      	ldr	r3, [r3, #16]
 8013e70:	68ba      	ldr	r2, [r7, #8]
 8013e72:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8013e76:	68ba      	ldr	r2, [r7, #8]
 8013e78:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8013e7c:	78fa      	ldrb	r2, [r7, #3]
 8013e7e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8013e80:	2300      	movs	r3, #0
}
 8013e82:	4618      	mov	r0, r3
 8013e84:	3710      	adds	r7, #16
 8013e86:	46bd      	mov	sp, r7
 8013e88:	bd80      	pop	{r7, pc}

08013e8a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013e8a:	b580      	push	{r7, lr}
 8013e8c:	b084      	sub	sp, #16
 8013e8e:	af00      	add	r7, sp, #0
 8013e90:	6078      	str	r0, [r7, #4]
 8013e92:	460b      	mov	r3, r1
 8013e94:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	32b0      	adds	r2, #176	; 0xb0
 8013ea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ea4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	32b0      	adds	r2, #176	; 0xb0
 8013eb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013eb4:	2b00      	cmp	r3, #0
 8013eb6:	d101      	bne.n	8013ebc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8013eb8:	2303      	movs	r3, #3
 8013eba:	e01a      	b.n	8013ef2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8013ebc:	78fb      	ldrb	r3, [r7, #3]
 8013ebe:	4619      	mov	r1, r3
 8013ec0:	6878      	ldr	r0, [r7, #4]
 8013ec2:	f005 fe76 	bl	8019bb2 <USBD_LL_GetRxDataSize>
 8013ec6:	4602      	mov	r2, r0
 8013ec8:	68fb      	ldr	r3, [r7, #12]
 8013eca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013ed4:	687a      	ldr	r2, [r7, #4]
 8013ed6:	33b0      	adds	r3, #176	; 0xb0
 8013ed8:	009b      	lsls	r3, r3, #2
 8013eda:	4413      	add	r3, r2
 8013edc:	685b      	ldr	r3, [r3, #4]
 8013ede:	68db      	ldr	r3, [r3, #12]
 8013ee0:	68fa      	ldr	r2, [r7, #12]
 8013ee2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8013ee6:	68fa      	ldr	r2, [r7, #12]
 8013ee8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8013eec:	4611      	mov	r1, r2
 8013eee:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8013ef0:	2300      	movs	r3, #0
}
 8013ef2:	4618      	mov	r0, r3
 8013ef4:	3710      	adds	r7, #16
 8013ef6:	46bd      	mov	sp, r7
 8013ef8:	bd80      	pop	{r7, pc}

08013efa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8013efa:	b580      	push	{r7, lr}
 8013efc:	b084      	sub	sp, #16
 8013efe:	af00      	add	r7, sp, #0
 8013f00:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013f02:	687b      	ldr	r3, [r7, #4]
 8013f04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	32b0      	adds	r2, #176	; 0xb0
 8013f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013f10:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8013f12:	68fb      	ldr	r3, [r7, #12]
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	d101      	bne.n	8013f1c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8013f18:	2303      	movs	r3, #3
 8013f1a:	e025      	b.n	8013f68 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013f22:	687a      	ldr	r2, [r7, #4]
 8013f24:	33b0      	adds	r3, #176	; 0xb0
 8013f26:	009b      	lsls	r3, r3, #2
 8013f28:	4413      	add	r3, r2
 8013f2a:	685b      	ldr	r3, [r3, #4]
 8013f2c:	2b00      	cmp	r3, #0
 8013f2e:	d01a      	beq.n	8013f66 <USBD_CDC_EP0_RxReady+0x6c>
 8013f30:	68fb      	ldr	r3, [r7, #12]
 8013f32:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8013f36:	2bff      	cmp	r3, #255	; 0xff
 8013f38:	d015      	beq.n	8013f66 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013f40:	687a      	ldr	r2, [r7, #4]
 8013f42:	33b0      	adds	r3, #176	; 0xb0
 8013f44:	009b      	lsls	r3, r3, #2
 8013f46:	4413      	add	r3, r2
 8013f48:	685b      	ldr	r3, [r3, #4]
 8013f4a:	689b      	ldr	r3, [r3, #8]
 8013f4c:	68fa      	ldr	r2, [r7, #12]
 8013f4e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8013f52:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8013f54:	68fa      	ldr	r2, [r7, #12]
 8013f56:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8013f5a:	b292      	uxth	r2, r2
 8013f5c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8013f5e:	68fb      	ldr	r3, [r7, #12]
 8013f60:	22ff      	movs	r2, #255	; 0xff
 8013f62:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8013f66:	2300      	movs	r3, #0
}
 8013f68:	4618      	mov	r0, r3
 8013f6a:	3710      	adds	r7, #16
 8013f6c:	46bd      	mov	sp, r7
 8013f6e:	bd80      	pop	{r7, pc}

08013f70 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8013f70:	b580      	push	{r7, lr}
 8013f72:	b086      	sub	sp, #24
 8013f74:	af00      	add	r7, sp, #0
 8013f76:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8013f78:	2182      	movs	r1, #130	; 0x82
 8013f7a:	4818      	ldr	r0, [pc, #96]	; (8013fdc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8013f7c:	f000 fd4f 	bl	8014a1e <USBD_GetEpDesc>
 8013f80:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8013f82:	2101      	movs	r1, #1
 8013f84:	4815      	ldr	r0, [pc, #84]	; (8013fdc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8013f86:	f000 fd4a 	bl	8014a1e <USBD_GetEpDesc>
 8013f8a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8013f8c:	2181      	movs	r1, #129	; 0x81
 8013f8e:	4813      	ldr	r0, [pc, #76]	; (8013fdc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8013f90:	f000 fd45 	bl	8014a1e <USBD_GetEpDesc>
 8013f94:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8013f96:	697b      	ldr	r3, [r7, #20]
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d002      	beq.n	8013fa2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8013f9c:	697b      	ldr	r3, [r7, #20]
 8013f9e:	2210      	movs	r2, #16
 8013fa0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8013fa2:	693b      	ldr	r3, [r7, #16]
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	d006      	beq.n	8013fb6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013fa8:	693b      	ldr	r3, [r7, #16]
 8013faa:	2200      	movs	r2, #0
 8013fac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013fb0:	711a      	strb	r2, [r3, #4]
 8013fb2:	2200      	movs	r2, #0
 8013fb4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8013fb6:	68fb      	ldr	r3, [r7, #12]
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	d006      	beq.n	8013fca <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013fbc:	68fb      	ldr	r3, [r7, #12]
 8013fbe:	2200      	movs	r2, #0
 8013fc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013fc4:	711a      	strb	r2, [r3, #4]
 8013fc6:	2200      	movs	r2, #0
 8013fc8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	2243      	movs	r2, #67	; 0x43
 8013fce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8013fd0:	4b02      	ldr	r3, [pc, #8]	; (8013fdc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8013fd2:	4618      	mov	r0, r3
 8013fd4:	3718      	adds	r7, #24
 8013fd6:	46bd      	mov	sp, r7
 8013fd8:	bd80      	pop	{r7, pc}
 8013fda:	bf00      	nop
 8013fdc:	200000a4 	.word	0x200000a4

08013fe0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8013fe0:	b580      	push	{r7, lr}
 8013fe2:	b086      	sub	sp, #24
 8013fe4:	af00      	add	r7, sp, #0
 8013fe6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8013fe8:	2182      	movs	r1, #130	; 0x82
 8013fea:	4818      	ldr	r0, [pc, #96]	; (801404c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8013fec:	f000 fd17 	bl	8014a1e <USBD_GetEpDesc>
 8013ff0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8013ff2:	2101      	movs	r1, #1
 8013ff4:	4815      	ldr	r0, [pc, #84]	; (801404c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8013ff6:	f000 fd12 	bl	8014a1e <USBD_GetEpDesc>
 8013ffa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8013ffc:	2181      	movs	r1, #129	; 0x81
 8013ffe:	4813      	ldr	r0, [pc, #76]	; (801404c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014000:	f000 fd0d 	bl	8014a1e <USBD_GetEpDesc>
 8014004:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014006:	697b      	ldr	r3, [r7, #20]
 8014008:	2b00      	cmp	r3, #0
 801400a:	d002      	beq.n	8014012 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 801400c:	697b      	ldr	r3, [r7, #20]
 801400e:	2210      	movs	r2, #16
 8014010:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014012:	693b      	ldr	r3, [r7, #16]
 8014014:	2b00      	cmp	r3, #0
 8014016:	d006      	beq.n	8014026 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8014018:	693b      	ldr	r3, [r7, #16]
 801401a:	2200      	movs	r2, #0
 801401c:	711a      	strb	r2, [r3, #4]
 801401e:	2200      	movs	r2, #0
 8014020:	f042 0202 	orr.w	r2, r2, #2
 8014024:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014026:	68fb      	ldr	r3, [r7, #12]
 8014028:	2b00      	cmp	r3, #0
 801402a:	d006      	beq.n	801403a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 801402c:	68fb      	ldr	r3, [r7, #12]
 801402e:	2200      	movs	r2, #0
 8014030:	711a      	strb	r2, [r3, #4]
 8014032:	2200      	movs	r2, #0
 8014034:	f042 0202 	orr.w	r2, r2, #2
 8014038:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	2243      	movs	r2, #67	; 0x43
 801403e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014040:	4b02      	ldr	r3, [pc, #8]	; (801404c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8014042:	4618      	mov	r0, r3
 8014044:	3718      	adds	r7, #24
 8014046:	46bd      	mov	sp, r7
 8014048:	bd80      	pop	{r7, pc}
 801404a:	bf00      	nop
 801404c:	200000a4 	.word	0x200000a4

08014050 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8014050:	b580      	push	{r7, lr}
 8014052:	b086      	sub	sp, #24
 8014054:	af00      	add	r7, sp, #0
 8014056:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014058:	2182      	movs	r1, #130	; 0x82
 801405a:	4818      	ldr	r0, [pc, #96]	; (80140bc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801405c:	f000 fcdf 	bl	8014a1e <USBD_GetEpDesc>
 8014060:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014062:	2101      	movs	r1, #1
 8014064:	4815      	ldr	r0, [pc, #84]	; (80140bc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014066:	f000 fcda 	bl	8014a1e <USBD_GetEpDesc>
 801406a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801406c:	2181      	movs	r1, #129	; 0x81
 801406e:	4813      	ldr	r0, [pc, #76]	; (80140bc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014070:	f000 fcd5 	bl	8014a1e <USBD_GetEpDesc>
 8014074:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014076:	697b      	ldr	r3, [r7, #20]
 8014078:	2b00      	cmp	r3, #0
 801407a:	d002      	beq.n	8014082 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 801407c:	697b      	ldr	r3, [r7, #20]
 801407e:	2210      	movs	r2, #16
 8014080:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014082:	693b      	ldr	r3, [r7, #16]
 8014084:	2b00      	cmp	r3, #0
 8014086:	d006      	beq.n	8014096 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014088:	693b      	ldr	r3, [r7, #16]
 801408a:	2200      	movs	r2, #0
 801408c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014090:	711a      	strb	r2, [r3, #4]
 8014092:	2200      	movs	r2, #0
 8014094:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014096:	68fb      	ldr	r3, [r7, #12]
 8014098:	2b00      	cmp	r3, #0
 801409a:	d006      	beq.n	80140aa <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801409c:	68fb      	ldr	r3, [r7, #12]
 801409e:	2200      	movs	r2, #0
 80140a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80140a4:	711a      	strb	r2, [r3, #4]
 80140a6:	2200      	movs	r2, #0
 80140a8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	2243      	movs	r2, #67	; 0x43
 80140ae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80140b0:	4b02      	ldr	r3, [pc, #8]	; (80140bc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80140b2:	4618      	mov	r0, r3
 80140b4:	3718      	adds	r7, #24
 80140b6:	46bd      	mov	sp, r7
 80140b8:	bd80      	pop	{r7, pc}
 80140ba:	bf00      	nop
 80140bc:	200000a4 	.word	0x200000a4

080140c0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80140c0:	b480      	push	{r7}
 80140c2:	b083      	sub	sp, #12
 80140c4:	af00      	add	r7, sp, #0
 80140c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	220a      	movs	r2, #10
 80140cc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80140ce:	4b03      	ldr	r3, [pc, #12]	; (80140dc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80140d0:	4618      	mov	r0, r3
 80140d2:	370c      	adds	r7, #12
 80140d4:	46bd      	mov	sp, r7
 80140d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140da:	4770      	bx	lr
 80140dc:	20000060 	.word	0x20000060

080140e0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80140e0:	b480      	push	{r7}
 80140e2:	b083      	sub	sp, #12
 80140e4:	af00      	add	r7, sp, #0
 80140e6:	6078      	str	r0, [r7, #4]
 80140e8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80140ea:	683b      	ldr	r3, [r7, #0]
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	d101      	bne.n	80140f4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80140f0:	2303      	movs	r3, #3
 80140f2:	e009      	b.n	8014108 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80140fa:	687a      	ldr	r2, [r7, #4]
 80140fc:	33b0      	adds	r3, #176	; 0xb0
 80140fe:	009b      	lsls	r3, r3, #2
 8014100:	4413      	add	r3, r2
 8014102:	683a      	ldr	r2, [r7, #0]
 8014104:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8014106:	2300      	movs	r3, #0
}
 8014108:	4618      	mov	r0, r3
 801410a:	370c      	adds	r7, #12
 801410c:	46bd      	mov	sp, r7
 801410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014112:	4770      	bx	lr

08014114 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8014114:	b480      	push	{r7}
 8014116:	b087      	sub	sp, #28
 8014118:	af00      	add	r7, sp, #0
 801411a:	60f8      	str	r0, [r7, #12]
 801411c:	60b9      	str	r1, [r7, #8]
 801411e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014120:	68fb      	ldr	r3, [r7, #12]
 8014122:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014126:	68fb      	ldr	r3, [r7, #12]
 8014128:	32b0      	adds	r2, #176	; 0xb0
 801412a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801412e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8014130:	697b      	ldr	r3, [r7, #20]
 8014132:	2b00      	cmp	r3, #0
 8014134:	d101      	bne.n	801413a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8014136:	2303      	movs	r3, #3
 8014138:	e008      	b.n	801414c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 801413a:	697b      	ldr	r3, [r7, #20]
 801413c:	68ba      	ldr	r2, [r7, #8]
 801413e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8014142:	697b      	ldr	r3, [r7, #20]
 8014144:	687a      	ldr	r2, [r7, #4]
 8014146:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 801414a:	2300      	movs	r3, #0
}
 801414c:	4618      	mov	r0, r3
 801414e:	371c      	adds	r7, #28
 8014150:	46bd      	mov	sp, r7
 8014152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014156:	4770      	bx	lr

08014158 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8014158:	b480      	push	{r7}
 801415a:	b085      	sub	sp, #20
 801415c:	af00      	add	r7, sp, #0
 801415e:	6078      	str	r0, [r7, #4]
 8014160:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	32b0      	adds	r2, #176	; 0xb0
 801416c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014170:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014172:	68fb      	ldr	r3, [r7, #12]
 8014174:	2b00      	cmp	r3, #0
 8014176:	d101      	bne.n	801417c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8014178:	2303      	movs	r3, #3
 801417a:	e004      	b.n	8014186 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 801417c:	68fb      	ldr	r3, [r7, #12]
 801417e:	683a      	ldr	r2, [r7, #0]
 8014180:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8014184:	2300      	movs	r3, #0
}
 8014186:	4618      	mov	r0, r3
 8014188:	3714      	adds	r7, #20
 801418a:	46bd      	mov	sp, r7
 801418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014190:	4770      	bx	lr
	...

08014194 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8014194:	b580      	push	{r7, lr}
 8014196:	b084      	sub	sp, #16
 8014198:	af00      	add	r7, sp, #0
 801419a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	32b0      	adds	r2, #176	; 0xb0
 80141a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80141aa:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80141ac:	2301      	movs	r3, #1
 80141ae:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	32b0      	adds	r2, #176	; 0xb0
 80141ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80141be:	2b00      	cmp	r3, #0
 80141c0:	d101      	bne.n	80141c6 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80141c2:	2303      	movs	r3, #3
 80141c4:	e025      	b.n	8014212 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80141c6:	68bb      	ldr	r3, [r7, #8]
 80141c8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d11f      	bne.n	8014210 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80141d0:	68bb      	ldr	r3, [r7, #8]
 80141d2:	2201      	movs	r2, #1
 80141d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80141d8:	4b10      	ldr	r3, [pc, #64]	; (801421c <USBD_CDC_TransmitPacket+0x88>)
 80141da:	781b      	ldrb	r3, [r3, #0]
 80141dc:	f003 020f 	and.w	r2, r3, #15
 80141e0:	68bb      	ldr	r3, [r7, #8]
 80141e2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80141e6:	6878      	ldr	r0, [r7, #4]
 80141e8:	4613      	mov	r3, r2
 80141ea:	009b      	lsls	r3, r3, #2
 80141ec:	4413      	add	r3, r2
 80141ee:	009b      	lsls	r3, r3, #2
 80141f0:	4403      	add	r3, r0
 80141f2:	3318      	adds	r3, #24
 80141f4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80141f6:	4b09      	ldr	r3, [pc, #36]	; (801421c <USBD_CDC_TransmitPacket+0x88>)
 80141f8:	7819      	ldrb	r1, [r3, #0]
 80141fa:	68bb      	ldr	r3, [r7, #8]
 80141fc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8014200:	68bb      	ldr	r3, [r7, #8]
 8014202:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8014206:	6878      	ldr	r0, [r7, #4]
 8014208:	f005 fc91 	bl	8019b2e <USBD_LL_Transmit>

    ret = USBD_OK;
 801420c:	2300      	movs	r3, #0
 801420e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8014210:	7bfb      	ldrb	r3, [r7, #15]
}
 8014212:	4618      	mov	r0, r3
 8014214:	3710      	adds	r7, #16
 8014216:	46bd      	mov	sp, r7
 8014218:	bd80      	pop	{r7, pc}
 801421a:	bf00      	nop
 801421c:	200000e7 	.word	0x200000e7

08014220 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8014220:	b580      	push	{r7, lr}
 8014222:	b084      	sub	sp, #16
 8014224:	af00      	add	r7, sp, #0
 8014226:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	32b0      	adds	r2, #176	; 0xb0
 8014232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014236:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	32b0      	adds	r2, #176	; 0xb0
 8014242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014246:	2b00      	cmp	r3, #0
 8014248:	d101      	bne.n	801424e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 801424a:	2303      	movs	r3, #3
 801424c:	e018      	b.n	8014280 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	7c1b      	ldrb	r3, [r3, #16]
 8014252:	2b00      	cmp	r3, #0
 8014254:	d10a      	bne.n	801426c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014256:	4b0c      	ldr	r3, [pc, #48]	; (8014288 <USBD_CDC_ReceivePacket+0x68>)
 8014258:	7819      	ldrb	r1, [r3, #0]
 801425a:	68fb      	ldr	r3, [r7, #12]
 801425c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014260:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014264:	6878      	ldr	r0, [r7, #4]
 8014266:	f005 fc83 	bl	8019b70 <USBD_LL_PrepareReceive>
 801426a:	e008      	b.n	801427e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801426c:	4b06      	ldr	r3, [pc, #24]	; (8014288 <USBD_CDC_ReceivePacket+0x68>)
 801426e:	7819      	ldrb	r1, [r3, #0]
 8014270:	68fb      	ldr	r3, [r7, #12]
 8014272:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014276:	2340      	movs	r3, #64	; 0x40
 8014278:	6878      	ldr	r0, [r7, #4]
 801427a:	f005 fc79 	bl	8019b70 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801427e:	2300      	movs	r3, #0
}
 8014280:	4618      	mov	r0, r3
 8014282:	3710      	adds	r7, #16
 8014284:	46bd      	mov	sp, r7
 8014286:	bd80      	pop	{r7, pc}
 8014288:	200000e8 	.word	0x200000e8

0801428c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801428c:	b580      	push	{r7, lr}
 801428e:	b086      	sub	sp, #24
 8014290:	af00      	add	r7, sp, #0
 8014292:	60f8      	str	r0, [r7, #12]
 8014294:	60b9      	str	r1, [r7, #8]
 8014296:	4613      	mov	r3, r2
 8014298:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801429a:	68fb      	ldr	r3, [r7, #12]
 801429c:	2b00      	cmp	r3, #0
 801429e:	d101      	bne.n	80142a4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80142a0:	2303      	movs	r3, #3
 80142a2:	e01f      	b.n	80142e4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80142a4:	68fb      	ldr	r3, [r7, #12]
 80142a6:	2200      	movs	r2, #0
 80142a8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80142ac:	68fb      	ldr	r3, [r7, #12]
 80142ae:	2200      	movs	r2, #0
 80142b0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80142b4:	68fb      	ldr	r3, [r7, #12]
 80142b6:	2200      	movs	r2, #0
 80142b8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80142bc:	68bb      	ldr	r3, [r7, #8]
 80142be:	2b00      	cmp	r3, #0
 80142c0:	d003      	beq.n	80142ca <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80142c2:	68fb      	ldr	r3, [r7, #12]
 80142c4:	68ba      	ldr	r2, [r7, #8]
 80142c6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80142ca:	68fb      	ldr	r3, [r7, #12]
 80142cc:	2201      	movs	r2, #1
 80142ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80142d2:	68fb      	ldr	r3, [r7, #12]
 80142d4:	79fa      	ldrb	r2, [r7, #7]
 80142d6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80142d8:	68f8      	ldr	r0, [r7, #12]
 80142da:	f005 faf3 	bl	80198c4 <USBD_LL_Init>
 80142de:	4603      	mov	r3, r0
 80142e0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80142e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80142e4:	4618      	mov	r0, r3
 80142e6:	3718      	adds	r7, #24
 80142e8:	46bd      	mov	sp, r7
 80142ea:	bd80      	pop	{r7, pc}

080142ec <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80142ec:	b580      	push	{r7, lr}
 80142ee:	b084      	sub	sp, #16
 80142f0:	af00      	add	r7, sp, #0
 80142f2:	6078      	str	r0, [r7, #4]
 80142f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80142f6:	2300      	movs	r3, #0
 80142f8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80142fa:	683b      	ldr	r3, [r7, #0]
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	d101      	bne.n	8014304 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8014300:	2303      	movs	r3, #3
 8014302:	e025      	b.n	8014350 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	683a      	ldr	r2, [r7, #0]
 8014308:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	32ae      	adds	r2, #174	; 0xae
 8014316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801431a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801431c:	2b00      	cmp	r3, #0
 801431e:	d00f      	beq.n	8014340 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	32ae      	adds	r2, #174	; 0xae
 801432a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801432e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014330:	f107 020e 	add.w	r2, r7, #14
 8014334:	4610      	mov	r0, r2
 8014336:	4798      	blx	r3
 8014338:	4602      	mov	r2, r0
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8014346:	1c5a      	adds	r2, r3, #1
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 801434e:	2300      	movs	r3, #0
}
 8014350:	4618      	mov	r0, r3
 8014352:	3710      	adds	r7, #16
 8014354:	46bd      	mov	sp, r7
 8014356:	bd80      	pop	{r7, pc}

08014358 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8014358:	b580      	push	{r7, lr}
 801435a:	b082      	sub	sp, #8
 801435c:	af00      	add	r7, sp, #0
 801435e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8014360:	6878      	ldr	r0, [r7, #4]
 8014362:	f005 fafb 	bl	801995c <USBD_LL_Start>
 8014366:	4603      	mov	r3, r0
}
 8014368:	4618      	mov	r0, r3
 801436a:	3708      	adds	r7, #8
 801436c:	46bd      	mov	sp, r7
 801436e:	bd80      	pop	{r7, pc}

08014370 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8014370:	b480      	push	{r7}
 8014372:	b083      	sub	sp, #12
 8014374:	af00      	add	r7, sp, #0
 8014376:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8014378:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 801437a:	4618      	mov	r0, r3
 801437c:	370c      	adds	r7, #12
 801437e:	46bd      	mov	sp, r7
 8014380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014384:	4770      	bx	lr

08014386 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014386:	b580      	push	{r7, lr}
 8014388:	b084      	sub	sp, #16
 801438a:	af00      	add	r7, sp, #0
 801438c:	6078      	str	r0, [r7, #4]
 801438e:	460b      	mov	r3, r1
 8014390:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8014392:	2300      	movs	r3, #0
 8014394:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801439c:	2b00      	cmp	r3, #0
 801439e:	d009      	beq.n	80143b4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80143a6:	681b      	ldr	r3, [r3, #0]
 80143a8:	78fa      	ldrb	r2, [r7, #3]
 80143aa:	4611      	mov	r1, r2
 80143ac:	6878      	ldr	r0, [r7, #4]
 80143ae:	4798      	blx	r3
 80143b0:	4603      	mov	r3, r0
 80143b2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80143b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80143b6:	4618      	mov	r0, r3
 80143b8:	3710      	adds	r7, #16
 80143ba:	46bd      	mov	sp, r7
 80143bc:	bd80      	pop	{r7, pc}

080143be <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80143be:	b580      	push	{r7, lr}
 80143c0:	b084      	sub	sp, #16
 80143c2:	af00      	add	r7, sp, #0
 80143c4:	6078      	str	r0, [r7, #4]
 80143c6:	460b      	mov	r3, r1
 80143c8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80143ca:	2300      	movs	r3, #0
 80143cc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80143d4:	685b      	ldr	r3, [r3, #4]
 80143d6:	78fa      	ldrb	r2, [r7, #3]
 80143d8:	4611      	mov	r1, r2
 80143da:	6878      	ldr	r0, [r7, #4]
 80143dc:	4798      	blx	r3
 80143de:	4603      	mov	r3, r0
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d001      	beq.n	80143e8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80143e4:	2303      	movs	r3, #3
 80143e6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80143e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80143ea:	4618      	mov	r0, r3
 80143ec:	3710      	adds	r7, #16
 80143ee:	46bd      	mov	sp, r7
 80143f0:	bd80      	pop	{r7, pc}

080143f2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80143f2:	b580      	push	{r7, lr}
 80143f4:	b084      	sub	sp, #16
 80143f6:	af00      	add	r7, sp, #0
 80143f8:	6078      	str	r0, [r7, #4]
 80143fa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014402:	6839      	ldr	r1, [r7, #0]
 8014404:	4618      	mov	r0, r3
 8014406:	f001 f932 	bl	801566e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	2201      	movs	r2, #1
 801440e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8014418:	461a      	mov	r2, r3
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8014426:	f003 031f 	and.w	r3, r3, #31
 801442a:	2b02      	cmp	r3, #2
 801442c:	d01a      	beq.n	8014464 <USBD_LL_SetupStage+0x72>
 801442e:	2b02      	cmp	r3, #2
 8014430:	d822      	bhi.n	8014478 <USBD_LL_SetupStage+0x86>
 8014432:	2b00      	cmp	r3, #0
 8014434:	d002      	beq.n	801443c <USBD_LL_SetupStage+0x4a>
 8014436:	2b01      	cmp	r3, #1
 8014438:	d00a      	beq.n	8014450 <USBD_LL_SetupStage+0x5e>
 801443a:	e01d      	b.n	8014478 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014442:	4619      	mov	r1, r3
 8014444:	6878      	ldr	r0, [r7, #4]
 8014446:	f000 fb5f 	bl	8014b08 <USBD_StdDevReq>
 801444a:	4603      	mov	r3, r0
 801444c:	73fb      	strb	r3, [r7, #15]
      break;
 801444e:	e020      	b.n	8014492 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014456:	4619      	mov	r1, r3
 8014458:	6878      	ldr	r0, [r7, #4]
 801445a:	f000 fbc7 	bl	8014bec <USBD_StdItfReq>
 801445e:	4603      	mov	r3, r0
 8014460:	73fb      	strb	r3, [r7, #15]
      break;
 8014462:	e016      	b.n	8014492 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801446a:	4619      	mov	r1, r3
 801446c:	6878      	ldr	r0, [r7, #4]
 801446e:	f000 fc29 	bl	8014cc4 <USBD_StdEPReq>
 8014472:	4603      	mov	r3, r0
 8014474:	73fb      	strb	r3, [r7, #15]
      break;
 8014476:	e00c      	b.n	8014492 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801447e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8014482:	b2db      	uxtb	r3, r3
 8014484:	4619      	mov	r1, r3
 8014486:	6878      	ldr	r0, [r7, #4]
 8014488:	f005 fac8 	bl	8019a1c <USBD_LL_StallEP>
 801448c:	4603      	mov	r3, r0
 801448e:	73fb      	strb	r3, [r7, #15]
      break;
 8014490:	bf00      	nop
  }

  return ret;
 8014492:	7bfb      	ldrb	r3, [r7, #15]
}
 8014494:	4618      	mov	r0, r3
 8014496:	3710      	adds	r7, #16
 8014498:	46bd      	mov	sp, r7
 801449a:	bd80      	pop	{r7, pc}

0801449c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801449c:	b580      	push	{r7, lr}
 801449e:	b086      	sub	sp, #24
 80144a0:	af00      	add	r7, sp, #0
 80144a2:	60f8      	str	r0, [r7, #12]
 80144a4:	460b      	mov	r3, r1
 80144a6:	607a      	str	r2, [r7, #4]
 80144a8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80144aa:	2300      	movs	r3, #0
 80144ac:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80144ae:	7afb      	ldrb	r3, [r7, #11]
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	d16e      	bne.n	8014592 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80144b4:	68fb      	ldr	r3, [r7, #12]
 80144b6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80144ba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80144bc:	68fb      	ldr	r3, [r7, #12]
 80144be:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80144c2:	2b03      	cmp	r3, #3
 80144c4:	f040 8098 	bne.w	80145f8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80144c8:	693b      	ldr	r3, [r7, #16]
 80144ca:	689a      	ldr	r2, [r3, #8]
 80144cc:	693b      	ldr	r3, [r7, #16]
 80144ce:	68db      	ldr	r3, [r3, #12]
 80144d0:	429a      	cmp	r2, r3
 80144d2:	d913      	bls.n	80144fc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80144d4:	693b      	ldr	r3, [r7, #16]
 80144d6:	689a      	ldr	r2, [r3, #8]
 80144d8:	693b      	ldr	r3, [r7, #16]
 80144da:	68db      	ldr	r3, [r3, #12]
 80144dc:	1ad2      	subs	r2, r2, r3
 80144de:	693b      	ldr	r3, [r7, #16]
 80144e0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80144e2:	693b      	ldr	r3, [r7, #16]
 80144e4:	68da      	ldr	r2, [r3, #12]
 80144e6:	693b      	ldr	r3, [r7, #16]
 80144e8:	689b      	ldr	r3, [r3, #8]
 80144ea:	4293      	cmp	r3, r2
 80144ec:	bf28      	it	cs
 80144ee:	4613      	movcs	r3, r2
 80144f0:	461a      	mov	r2, r3
 80144f2:	6879      	ldr	r1, [r7, #4]
 80144f4:	68f8      	ldr	r0, [r7, #12]
 80144f6:	f001 f9ae 	bl	8015856 <USBD_CtlContinueRx>
 80144fa:	e07d      	b.n	80145f8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80144fc:	68fb      	ldr	r3, [r7, #12]
 80144fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8014502:	f003 031f 	and.w	r3, r3, #31
 8014506:	2b02      	cmp	r3, #2
 8014508:	d014      	beq.n	8014534 <USBD_LL_DataOutStage+0x98>
 801450a:	2b02      	cmp	r3, #2
 801450c:	d81d      	bhi.n	801454a <USBD_LL_DataOutStage+0xae>
 801450e:	2b00      	cmp	r3, #0
 8014510:	d002      	beq.n	8014518 <USBD_LL_DataOutStage+0x7c>
 8014512:	2b01      	cmp	r3, #1
 8014514:	d003      	beq.n	801451e <USBD_LL_DataOutStage+0x82>
 8014516:	e018      	b.n	801454a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8014518:	2300      	movs	r3, #0
 801451a:	75bb      	strb	r3, [r7, #22]
            break;
 801451c:	e018      	b.n	8014550 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801451e:	68fb      	ldr	r3, [r7, #12]
 8014520:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8014524:	b2db      	uxtb	r3, r3
 8014526:	4619      	mov	r1, r3
 8014528:	68f8      	ldr	r0, [r7, #12]
 801452a:	f000 fa5e 	bl	80149ea <USBD_CoreFindIF>
 801452e:	4603      	mov	r3, r0
 8014530:	75bb      	strb	r3, [r7, #22]
            break;
 8014532:	e00d      	b.n	8014550 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8014534:	68fb      	ldr	r3, [r7, #12]
 8014536:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 801453a:	b2db      	uxtb	r3, r3
 801453c:	4619      	mov	r1, r3
 801453e:	68f8      	ldr	r0, [r7, #12]
 8014540:	f000 fa60 	bl	8014a04 <USBD_CoreFindEP>
 8014544:	4603      	mov	r3, r0
 8014546:	75bb      	strb	r3, [r7, #22]
            break;
 8014548:	e002      	b.n	8014550 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 801454a:	2300      	movs	r3, #0
 801454c:	75bb      	strb	r3, [r7, #22]
            break;
 801454e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8014550:	7dbb      	ldrb	r3, [r7, #22]
 8014552:	2b00      	cmp	r3, #0
 8014554:	d119      	bne.n	801458a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014556:	68fb      	ldr	r3, [r7, #12]
 8014558:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801455c:	b2db      	uxtb	r3, r3
 801455e:	2b03      	cmp	r3, #3
 8014560:	d113      	bne.n	801458a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8014562:	7dba      	ldrb	r2, [r7, #22]
 8014564:	68fb      	ldr	r3, [r7, #12]
 8014566:	32ae      	adds	r2, #174	; 0xae
 8014568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801456c:	691b      	ldr	r3, [r3, #16]
 801456e:	2b00      	cmp	r3, #0
 8014570:	d00b      	beq.n	801458a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8014572:	7dba      	ldrb	r2, [r7, #22]
 8014574:	68fb      	ldr	r3, [r7, #12]
 8014576:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 801457a:	7dba      	ldrb	r2, [r7, #22]
 801457c:	68fb      	ldr	r3, [r7, #12]
 801457e:	32ae      	adds	r2, #174	; 0xae
 8014580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014584:	691b      	ldr	r3, [r3, #16]
 8014586:	68f8      	ldr	r0, [r7, #12]
 8014588:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801458a:	68f8      	ldr	r0, [r7, #12]
 801458c:	f001 f974 	bl	8015878 <USBD_CtlSendStatus>
 8014590:	e032      	b.n	80145f8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8014592:	7afb      	ldrb	r3, [r7, #11]
 8014594:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014598:	b2db      	uxtb	r3, r3
 801459a:	4619      	mov	r1, r3
 801459c:	68f8      	ldr	r0, [r7, #12]
 801459e:	f000 fa31 	bl	8014a04 <USBD_CoreFindEP>
 80145a2:	4603      	mov	r3, r0
 80145a4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80145a6:	7dbb      	ldrb	r3, [r7, #22]
 80145a8:	2bff      	cmp	r3, #255	; 0xff
 80145aa:	d025      	beq.n	80145f8 <USBD_LL_DataOutStage+0x15c>
 80145ac:	7dbb      	ldrb	r3, [r7, #22]
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	d122      	bne.n	80145f8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80145b2:	68fb      	ldr	r3, [r7, #12]
 80145b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80145b8:	b2db      	uxtb	r3, r3
 80145ba:	2b03      	cmp	r3, #3
 80145bc:	d117      	bne.n	80145ee <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80145be:	7dba      	ldrb	r2, [r7, #22]
 80145c0:	68fb      	ldr	r3, [r7, #12]
 80145c2:	32ae      	adds	r2, #174	; 0xae
 80145c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80145c8:	699b      	ldr	r3, [r3, #24]
 80145ca:	2b00      	cmp	r3, #0
 80145cc:	d00f      	beq.n	80145ee <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80145ce:	7dba      	ldrb	r2, [r7, #22]
 80145d0:	68fb      	ldr	r3, [r7, #12]
 80145d2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80145d6:	7dba      	ldrb	r2, [r7, #22]
 80145d8:	68fb      	ldr	r3, [r7, #12]
 80145da:	32ae      	adds	r2, #174	; 0xae
 80145dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80145e0:	699b      	ldr	r3, [r3, #24]
 80145e2:	7afa      	ldrb	r2, [r7, #11]
 80145e4:	4611      	mov	r1, r2
 80145e6:	68f8      	ldr	r0, [r7, #12]
 80145e8:	4798      	blx	r3
 80145ea:	4603      	mov	r3, r0
 80145ec:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80145ee:	7dfb      	ldrb	r3, [r7, #23]
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	d001      	beq.n	80145f8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80145f4:	7dfb      	ldrb	r3, [r7, #23]
 80145f6:	e000      	b.n	80145fa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80145f8:	2300      	movs	r3, #0
}
 80145fa:	4618      	mov	r0, r3
 80145fc:	3718      	adds	r7, #24
 80145fe:	46bd      	mov	sp, r7
 8014600:	bd80      	pop	{r7, pc}

08014602 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8014602:	b580      	push	{r7, lr}
 8014604:	b086      	sub	sp, #24
 8014606:	af00      	add	r7, sp, #0
 8014608:	60f8      	str	r0, [r7, #12]
 801460a:	460b      	mov	r3, r1
 801460c:	607a      	str	r2, [r7, #4]
 801460e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8014610:	7afb      	ldrb	r3, [r7, #11]
 8014612:	2b00      	cmp	r3, #0
 8014614:	d16f      	bne.n	80146f6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8014616:	68fb      	ldr	r3, [r7, #12]
 8014618:	3314      	adds	r3, #20
 801461a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801461c:	68fb      	ldr	r3, [r7, #12]
 801461e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8014622:	2b02      	cmp	r3, #2
 8014624:	d15a      	bne.n	80146dc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8014626:	693b      	ldr	r3, [r7, #16]
 8014628:	689a      	ldr	r2, [r3, #8]
 801462a:	693b      	ldr	r3, [r7, #16]
 801462c:	68db      	ldr	r3, [r3, #12]
 801462e:	429a      	cmp	r2, r3
 8014630:	d914      	bls.n	801465c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8014632:	693b      	ldr	r3, [r7, #16]
 8014634:	689a      	ldr	r2, [r3, #8]
 8014636:	693b      	ldr	r3, [r7, #16]
 8014638:	68db      	ldr	r3, [r3, #12]
 801463a:	1ad2      	subs	r2, r2, r3
 801463c:	693b      	ldr	r3, [r7, #16]
 801463e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8014640:	693b      	ldr	r3, [r7, #16]
 8014642:	689b      	ldr	r3, [r3, #8]
 8014644:	461a      	mov	r2, r3
 8014646:	6879      	ldr	r1, [r7, #4]
 8014648:	68f8      	ldr	r0, [r7, #12]
 801464a:	f001 f8d6 	bl	80157fa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801464e:	2300      	movs	r3, #0
 8014650:	2200      	movs	r2, #0
 8014652:	2100      	movs	r1, #0
 8014654:	68f8      	ldr	r0, [r7, #12]
 8014656:	f005 fa8b 	bl	8019b70 <USBD_LL_PrepareReceive>
 801465a:	e03f      	b.n	80146dc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801465c:	693b      	ldr	r3, [r7, #16]
 801465e:	68da      	ldr	r2, [r3, #12]
 8014660:	693b      	ldr	r3, [r7, #16]
 8014662:	689b      	ldr	r3, [r3, #8]
 8014664:	429a      	cmp	r2, r3
 8014666:	d11c      	bne.n	80146a2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8014668:	693b      	ldr	r3, [r7, #16]
 801466a:	685a      	ldr	r2, [r3, #4]
 801466c:	693b      	ldr	r3, [r7, #16]
 801466e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8014670:	429a      	cmp	r2, r3
 8014672:	d316      	bcc.n	80146a2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8014674:	693b      	ldr	r3, [r7, #16]
 8014676:	685a      	ldr	r2, [r3, #4]
 8014678:	68fb      	ldr	r3, [r7, #12]
 801467a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 801467e:	429a      	cmp	r2, r3
 8014680:	d20f      	bcs.n	80146a2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8014682:	2200      	movs	r2, #0
 8014684:	2100      	movs	r1, #0
 8014686:	68f8      	ldr	r0, [r7, #12]
 8014688:	f001 f8b7 	bl	80157fa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801468c:	68fb      	ldr	r3, [r7, #12]
 801468e:	2200      	movs	r2, #0
 8014690:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014694:	2300      	movs	r3, #0
 8014696:	2200      	movs	r2, #0
 8014698:	2100      	movs	r1, #0
 801469a:	68f8      	ldr	r0, [r7, #12]
 801469c:	f005 fa68 	bl	8019b70 <USBD_LL_PrepareReceive>
 80146a0:	e01c      	b.n	80146dc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80146a2:	68fb      	ldr	r3, [r7, #12]
 80146a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80146a8:	b2db      	uxtb	r3, r3
 80146aa:	2b03      	cmp	r3, #3
 80146ac:	d10f      	bne.n	80146ce <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80146ae:	68fb      	ldr	r3, [r7, #12]
 80146b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80146b4:	68db      	ldr	r3, [r3, #12]
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	d009      	beq.n	80146ce <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80146ba:	68fb      	ldr	r3, [r7, #12]
 80146bc:	2200      	movs	r2, #0
 80146be:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80146c2:	68fb      	ldr	r3, [r7, #12]
 80146c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80146c8:	68db      	ldr	r3, [r3, #12]
 80146ca:	68f8      	ldr	r0, [r7, #12]
 80146cc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80146ce:	2180      	movs	r1, #128	; 0x80
 80146d0:	68f8      	ldr	r0, [r7, #12]
 80146d2:	f005 f9a3 	bl	8019a1c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80146d6:	68f8      	ldr	r0, [r7, #12]
 80146d8:	f001 f8e1 	bl	801589e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80146dc:	68fb      	ldr	r3, [r7, #12]
 80146de:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	d03a      	beq.n	801475c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80146e6:	68f8      	ldr	r0, [r7, #12]
 80146e8:	f7ff fe42 	bl	8014370 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80146ec:	68fb      	ldr	r3, [r7, #12]
 80146ee:	2200      	movs	r2, #0
 80146f0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80146f4:	e032      	b.n	801475c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80146f6:	7afb      	ldrb	r3, [r7, #11]
 80146f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80146fc:	b2db      	uxtb	r3, r3
 80146fe:	4619      	mov	r1, r3
 8014700:	68f8      	ldr	r0, [r7, #12]
 8014702:	f000 f97f 	bl	8014a04 <USBD_CoreFindEP>
 8014706:	4603      	mov	r3, r0
 8014708:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801470a:	7dfb      	ldrb	r3, [r7, #23]
 801470c:	2bff      	cmp	r3, #255	; 0xff
 801470e:	d025      	beq.n	801475c <USBD_LL_DataInStage+0x15a>
 8014710:	7dfb      	ldrb	r3, [r7, #23]
 8014712:	2b00      	cmp	r3, #0
 8014714:	d122      	bne.n	801475c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014716:	68fb      	ldr	r3, [r7, #12]
 8014718:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801471c:	b2db      	uxtb	r3, r3
 801471e:	2b03      	cmp	r3, #3
 8014720:	d11c      	bne.n	801475c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8014722:	7dfa      	ldrb	r2, [r7, #23]
 8014724:	68fb      	ldr	r3, [r7, #12]
 8014726:	32ae      	adds	r2, #174	; 0xae
 8014728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801472c:	695b      	ldr	r3, [r3, #20]
 801472e:	2b00      	cmp	r3, #0
 8014730:	d014      	beq.n	801475c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8014732:	7dfa      	ldrb	r2, [r7, #23]
 8014734:	68fb      	ldr	r3, [r7, #12]
 8014736:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 801473a:	7dfa      	ldrb	r2, [r7, #23]
 801473c:	68fb      	ldr	r3, [r7, #12]
 801473e:	32ae      	adds	r2, #174	; 0xae
 8014740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014744:	695b      	ldr	r3, [r3, #20]
 8014746:	7afa      	ldrb	r2, [r7, #11]
 8014748:	4611      	mov	r1, r2
 801474a:	68f8      	ldr	r0, [r7, #12]
 801474c:	4798      	blx	r3
 801474e:	4603      	mov	r3, r0
 8014750:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8014752:	7dbb      	ldrb	r3, [r7, #22]
 8014754:	2b00      	cmp	r3, #0
 8014756:	d001      	beq.n	801475c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8014758:	7dbb      	ldrb	r3, [r7, #22]
 801475a:	e000      	b.n	801475e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 801475c:	2300      	movs	r3, #0
}
 801475e:	4618      	mov	r0, r3
 8014760:	3718      	adds	r7, #24
 8014762:	46bd      	mov	sp, r7
 8014764:	bd80      	pop	{r7, pc}

08014766 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8014766:	b580      	push	{r7, lr}
 8014768:	b084      	sub	sp, #16
 801476a:	af00      	add	r7, sp, #0
 801476c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801476e:	2300      	movs	r3, #0
 8014770:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014772:	687b      	ldr	r3, [r7, #4]
 8014774:	2201      	movs	r2, #1
 8014776:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801477a:	687b      	ldr	r3, [r7, #4]
 801477c:	2200      	movs	r2, #0
 801477e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	2200      	movs	r2, #0
 8014786:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	2200      	movs	r2, #0
 801478c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	2200      	movs	r2, #0
 8014794:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801479e:	2b00      	cmp	r3, #0
 80147a0:	d014      	beq.n	80147cc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80147a8:	685b      	ldr	r3, [r3, #4]
 80147aa:	2b00      	cmp	r3, #0
 80147ac:	d00e      	beq.n	80147cc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80147b4:	685b      	ldr	r3, [r3, #4]
 80147b6:	687a      	ldr	r2, [r7, #4]
 80147b8:	6852      	ldr	r2, [r2, #4]
 80147ba:	b2d2      	uxtb	r2, r2
 80147bc:	4611      	mov	r1, r2
 80147be:	6878      	ldr	r0, [r7, #4]
 80147c0:	4798      	blx	r3
 80147c2:	4603      	mov	r3, r0
 80147c4:	2b00      	cmp	r3, #0
 80147c6:	d001      	beq.n	80147cc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80147c8:	2303      	movs	r3, #3
 80147ca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80147cc:	2340      	movs	r3, #64	; 0x40
 80147ce:	2200      	movs	r2, #0
 80147d0:	2100      	movs	r1, #0
 80147d2:	6878      	ldr	r0, [r7, #4]
 80147d4:	f005 f8dd 	bl	8019992 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	2201      	movs	r2, #1
 80147dc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	2240      	movs	r2, #64	; 0x40
 80147e4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80147e8:	2340      	movs	r3, #64	; 0x40
 80147ea:	2200      	movs	r2, #0
 80147ec:	2180      	movs	r1, #128	; 0x80
 80147ee:	6878      	ldr	r0, [r7, #4]
 80147f0:	f005 f8cf 	bl	8019992 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	2201      	movs	r2, #1
 80147f8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	2240      	movs	r2, #64	; 0x40
 80147fe:	621a      	str	r2, [r3, #32]

  return ret;
 8014800:	7bfb      	ldrb	r3, [r7, #15]
}
 8014802:	4618      	mov	r0, r3
 8014804:	3710      	adds	r7, #16
 8014806:	46bd      	mov	sp, r7
 8014808:	bd80      	pop	{r7, pc}

0801480a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801480a:	b480      	push	{r7}
 801480c:	b083      	sub	sp, #12
 801480e:	af00      	add	r7, sp, #0
 8014810:	6078      	str	r0, [r7, #4]
 8014812:	460b      	mov	r3, r1
 8014814:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	78fa      	ldrb	r2, [r7, #3]
 801481a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801481c:	2300      	movs	r3, #0
}
 801481e:	4618      	mov	r0, r3
 8014820:	370c      	adds	r7, #12
 8014822:	46bd      	mov	sp, r7
 8014824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014828:	4770      	bx	lr

0801482a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801482a:	b480      	push	{r7}
 801482c:	b083      	sub	sp, #12
 801482e:	af00      	add	r7, sp, #0
 8014830:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014838:	b2da      	uxtb	r2, r3
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	2204      	movs	r2, #4
 8014844:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8014848:	2300      	movs	r3, #0
}
 801484a:	4618      	mov	r0, r3
 801484c:	370c      	adds	r7, #12
 801484e:	46bd      	mov	sp, r7
 8014850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014854:	4770      	bx	lr

08014856 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8014856:	b480      	push	{r7}
 8014858:	b083      	sub	sp, #12
 801485a:	af00      	add	r7, sp, #0
 801485c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014864:	b2db      	uxtb	r3, r3
 8014866:	2b04      	cmp	r3, #4
 8014868:	d106      	bne.n	8014878 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8014870:	b2da      	uxtb	r2, r3
 8014872:	687b      	ldr	r3, [r7, #4]
 8014874:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8014878:	2300      	movs	r3, #0
}
 801487a:	4618      	mov	r0, r3
 801487c:	370c      	adds	r7, #12
 801487e:	46bd      	mov	sp, r7
 8014880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014884:	4770      	bx	lr

08014886 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8014886:	b580      	push	{r7, lr}
 8014888:	b082      	sub	sp, #8
 801488a:	af00      	add	r7, sp, #0
 801488c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014894:	b2db      	uxtb	r3, r3
 8014896:	2b03      	cmp	r3, #3
 8014898:	d110      	bne.n	80148bc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	d00b      	beq.n	80148bc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80148aa:	69db      	ldr	r3, [r3, #28]
 80148ac:	2b00      	cmp	r3, #0
 80148ae:	d005      	beq.n	80148bc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80148b6:	69db      	ldr	r3, [r3, #28]
 80148b8:	6878      	ldr	r0, [r7, #4]
 80148ba:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80148bc:	2300      	movs	r3, #0
}
 80148be:	4618      	mov	r0, r3
 80148c0:	3708      	adds	r7, #8
 80148c2:	46bd      	mov	sp, r7
 80148c4:	bd80      	pop	{r7, pc}

080148c6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80148c6:	b580      	push	{r7, lr}
 80148c8:	b082      	sub	sp, #8
 80148ca:	af00      	add	r7, sp, #0
 80148cc:	6078      	str	r0, [r7, #4]
 80148ce:	460b      	mov	r3, r1
 80148d0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	32ae      	adds	r2, #174	; 0xae
 80148dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	d101      	bne.n	80148e8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80148e4:	2303      	movs	r3, #3
 80148e6:	e01c      	b.n	8014922 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80148ee:	b2db      	uxtb	r3, r3
 80148f0:	2b03      	cmp	r3, #3
 80148f2:	d115      	bne.n	8014920 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	32ae      	adds	r2, #174	; 0xae
 80148fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014902:	6a1b      	ldr	r3, [r3, #32]
 8014904:	2b00      	cmp	r3, #0
 8014906:	d00b      	beq.n	8014920 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	32ae      	adds	r2, #174	; 0xae
 8014912:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014916:	6a1b      	ldr	r3, [r3, #32]
 8014918:	78fa      	ldrb	r2, [r7, #3]
 801491a:	4611      	mov	r1, r2
 801491c:	6878      	ldr	r0, [r7, #4]
 801491e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8014920:	2300      	movs	r3, #0
}
 8014922:	4618      	mov	r0, r3
 8014924:	3708      	adds	r7, #8
 8014926:	46bd      	mov	sp, r7
 8014928:	bd80      	pop	{r7, pc}

0801492a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801492a:	b580      	push	{r7, lr}
 801492c:	b082      	sub	sp, #8
 801492e:	af00      	add	r7, sp, #0
 8014930:	6078      	str	r0, [r7, #4]
 8014932:	460b      	mov	r3, r1
 8014934:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8014936:	687b      	ldr	r3, [r7, #4]
 8014938:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	32ae      	adds	r2, #174	; 0xae
 8014940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014944:	2b00      	cmp	r3, #0
 8014946:	d101      	bne.n	801494c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8014948:	2303      	movs	r3, #3
 801494a:	e01c      	b.n	8014986 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014952:	b2db      	uxtb	r3, r3
 8014954:	2b03      	cmp	r3, #3
 8014956:	d115      	bne.n	8014984 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	32ae      	adds	r2, #174	; 0xae
 8014962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014968:	2b00      	cmp	r3, #0
 801496a:	d00b      	beq.n	8014984 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	32ae      	adds	r2, #174	; 0xae
 8014976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801497a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801497c:	78fa      	ldrb	r2, [r7, #3]
 801497e:	4611      	mov	r1, r2
 8014980:	6878      	ldr	r0, [r7, #4]
 8014982:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8014984:	2300      	movs	r3, #0
}
 8014986:	4618      	mov	r0, r3
 8014988:	3708      	adds	r7, #8
 801498a:	46bd      	mov	sp, r7
 801498c:	bd80      	pop	{r7, pc}

0801498e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801498e:	b480      	push	{r7}
 8014990:	b083      	sub	sp, #12
 8014992:	af00      	add	r7, sp, #0
 8014994:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8014996:	2300      	movs	r3, #0
}
 8014998:	4618      	mov	r0, r3
 801499a:	370c      	adds	r7, #12
 801499c:	46bd      	mov	sp, r7
 801499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149a2:	4770      	bx	lr

080149a4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80149a4:	b580      	push	{r7, lr}
 80149a6:	b084      	sub	sp, #16
 80149a8:	af00      	add	r7, sp, #0
 80149aa:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80149ac:	2300      	movs	r3, #0
 80149ae:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	2201      	movs	r2, #1
 80149b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80149be:	2b00      	cmp	r3, #0
 80149c0:	d00e      	beq.n	80149e0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80149c8:	685b      	ldr	r3, [r3, #4]
 80149ca:	687a      	ldr	r2, [r7, #4]
 80149cc:	6852      	ldr	r2, [r2, #4]
 80149ce:	b2d2      	uxtb	r2, r2
 80149d0:	4611      	mov	r1, r2
 80149d2:	6878      	ldr	r0, [r7, #4]
 80149d4:	4798      	blx	r3
 80149d6:	4603      	mov	r3, r0
 80149d8:	2b00      	cmp	r3, #0
 80149da:	d001      	beq.n	80149e0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80149dc:	2303      	movs	r3, #3
 80149de:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80149e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80149e2:	4618      	mov	r0, r3
 80149e4:	3710      	adds	r7, #16
 80149e6:	46bd      	mov	sp, r7
 80149e8:	bd80      	pop	{r7, pc}

080149ea <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80149ea:	b480      	push	{r7}
 80149ec:	b083      	sub	sp, #12
 80149ee:	af00      	add	r7, sp, #0
 80149f0:	6078      	str	r0, [r7, #4]
 80149f2:	460b      	mov	r3, r1
 80149f4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80149f6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80149f8:	4618      	mov	r0, r3
 80149fa:	370c      	adds	r7, #12
 80149fc:	46bd      	mov	sp, r7
 80149fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a02:	4770      	bx	lr

08014a04 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8014a04:	b480      	push	{r7}
 8014a06:	b083      	sub	sp, #12
 8014a08:	af00      	add	r7, sp, #0
 8014a0a:	6078      	str	r0, [r7, #4]
 8014a0c:	460b      	mov	r3, r1
 8014a0e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8014a10:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8014a12:	4618      	mov	r0, r3
 8014a14:	370c      	adds	r7, #12
 8014a16:	46bd      	mov	sp, r7
 8014a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a1c:	4770      	bx	lr

08014a1e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8014a1e:	b580      	push	{r7, lr}
 8014a20:	b086      	sub	sp, #24
 8014a22:	af00      	add	r7, sp, #0
 8014a24:	6078      	str	r0, [r7, #4]
 8014a26:	460b      	mov	r3, r1
 8014a28:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8014a2a:	687b      	ldr	r3, [r7, #4]
 8014a2c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8014a32:	2300      	movs	r3, #0
 8014a34:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8014a36:	68fb      	ldr	r3, [r7, #12]
 8014a38:	885b      	ldrh	r3, [r3, #2]
 8014a3a:	b29a      	uxth	r2, r3
 8014a3c:	68fb      	ldr	r3, [r7, #12]
 8014a3e:	781b      	ldrb	r3, [r3, #0]
 8014a40:	b29b      	uxth	r3, r3
 8014a42:	429a      	cmp	r2, r3
 8014a44:	d920      	bls.n	8014a88 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8014a46:	68fb      	ldr	r3, [r7, #12]
 8014a48:	781b      	ldrb	r3, [r3, #0]
 8014a4a:	b29b      	uxth	r3, r3
 8014a4c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8014a4e:	e013      	b.n	8014a78 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8014a50:	f107 030a 	add.w	r3, r7, #10
 8014a54:	4619      	mov	r1, r3
 8014a56:	6978      	ldr	r0, [r7, #20]
 8014a58:	f000 f81b 	bl	8014a92 <USBD_GetNextDesc>
 8014a5c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8014a5e:	697b      	ldr	r3, [r7, #20]
 8014a60:	785b      	ldrb	r3, [r3, #1]
 8014a62:	2b05      	cmp	r3, #5
 8014a64:	d108      	bne.n	8014a78 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8014a66:	697b      	ldr	r3, [r7, #20]
 8014a68:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8014a6a:	693b      	ldr	r3, [r7, #16]
 8014a6c:	789b      	ldrb	r3, [r3, #2]
 8014a6e:	78fa      	ldrb	r2, [r7, #3]
 8014a70:	429a      	cmp	r2, r3
 8014a72:	d008      	beq.n	8014a86 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8014a74:	2300      	movs	r3, #0
 8014a76:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8014a78:	68fb      	ldr	r3, [r7, #12]
 8014a7a:	885b      	ldrh	r3, [r3, #2]
 8014a7c:	b29a      	uxth	r2, r3
 8014a7e:	897b      	ldrh	r3, [r7, #10]
 8014a80:	429a      	cmp	r2, r3
 8014a82:	d8e5      	bhi.n	8014a50 <USBD_GetEpDesc+0x32>
 8014a84:	e000      	b.n	8014a88 <USBD_GetEpDesc+0x6a>
          break;
 8014a86:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8014a88:	693b      	ldr	r3, [r7, #16]
}
 8014a8a:	4618      	mov	r0, r3
 8014a8c:	3718      	adds	r7, #24
 8014a8e:	46bd      	mov	sp, r7
 8014a90:	bd80      	pop	{r7, pc}

08014a92 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8014a92:	b480      	push	{r7}
 8014a94:	b085      	sub	sp, #20
 8014a96:	af00      	add	r7, sp, #0
 8014a98:	6078      	str	r0, [r7, #4]
 8014a9a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8014aa0:	683b      	ldr	r3, [r7, #0]
 8014aa2:	881a      	ldrh	r2, [r3, #0]
 8014aa4:	68fb      	ldr	r3, [r7, #12]
 8014aa6:	781b      	ldrb	r3, [r3, #0]
 8014aa8:	b29b      	uxth	r3, r3
 8014aaa:	4413      	add	r3, r2
 8014aac:	b29a      	uxth	r2, r3
 8014aae:	683b      	ldr	r3, [r7, #0]
 8014ab0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8014ab2:	68fb      	ldr	r3, [r7, #12]
 8014ab4:	781b      	ldrb	r3, [r3, #0]
 8014ab6:	461a      	mov	r2, r3
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	4413      	add	r3, r2
 8014abc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8014abe:	68fb      	ldr	r3, [r7, #12]
}
 8014ac0:	4618      	mov	r0, r3
 8014ac2:	3714      	adds	r7, #20
 8014ac4:	46bd      	mov	sp, r7
 8014ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aca:	4770      	bx	lr

08014acc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8014acc:	b480      	push	{r7}
 8014ace:	b087      	sub	sp, #28
 8014ad0:	af00      	add	r7, sp, #0
 8014ad2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8014ad8:	697b      	ldr	r3, [r7, #20]
 8014ada:	781b      	ldrb	r3, [r3, #0]
 8014adc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8014ade:	697b      	ldr	r3, [r7, #20]
 8014ae0:	3301      	adds	r3, #1
 8014ae2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8014ae4:	697b      	ldr	r3, [r7, #20]
 8014ae6:	781b      	ldrb	r3, [r3, #0]
 8014ae8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8014aea:	8a3b      	ldrh	r3, [r7, #16]
 8014aec:	021b      	lsls	r3, r3, #8
 8014aee:	b21a      	sxth	r2, r3
 8014af0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014af4:	4313      	orrs	r3, r2
 8014af6:	b21b      	sxth	r3, r3
 8014af8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8014afa:	89fb      	ldrh	r3, [r7, #14]
}
 8014afc:	4618      	mov	r0, r3
 8014afe:	371c      	adds	r7, #28
 8014b00:	46bd      	mov	sp, r7
 8014b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b06:	4770      	bx	lr

08014b08 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014b08:	b580      	push	{r7, lr}
 8014b0a:	b084      	sub	sp, #16
 8014b0c:	af00      	add	r7, sp, #0
 8014b0e:	6078      	str	r0, [r7, #4]
 8014b10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014b12:	2300      	movs	r3, #0
 8014b14:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014b16:	683b      	ldr	r3, [r7, #0]
 8014b18:	781b      	ldrb	r3, [r3, #0]
 8014b1a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014b1e:	2b40      	cmp	r3, #64	; 0x40
 8014b20:	d005      	beq.n	8014b2e <USBD_StdDevReq+0x26>
 8014b22:	2b40      	cmp	r3, #64	; 0x40
 8014b24:	d857      	bhi.n	8014bd6 <USBD_StdDevReq+0xce>
 8014b26:	2b00      	cmp	r3, #0
 8014b28:	d00f      	beq.n	8014b4a <USBD_StdDevReq+0x42>
 8014b2a:	2b20      	cmp	r3, #32
 8014b2c:	d153      	bne.n	8014bd6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8014b2e:	687b      	ldr	r3, [r7, #4]
 8014b30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	32ae      	adds	r2, #174	; 0xae
 8014b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b3c:	689b      	ldr	r3, [r3, #8]
 8014b3e:	6839      	ldr	r1, [r7, #0]
 8014b40:	6878      	ldr	r0, [r7, #4]
 8014b42:	4798      	blx	r3
 8014b44:	4603      	mov	r3, r0
 8014b46:	73fb      	strb	r3, [r7, #15]
      break;
 8014b48:	e04a      	b.n	8014be0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014b4a:	683b      	ldr	r3, [r7, #0]
 8014b4c:	785b      	ldrb	r3, [r3, #1]
 8014b4e:	2b09      	cmp	r3, #9
 8014b50:	d83b      	bhi.n	8014bca <USBD_StdDevReq+0xc2>
 8014b52:	a201      	add	r2, pc, #4	; (adr r2, 8014b58 <USBD_StdDevReq+0x50>)
 8014b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014b58:	08014bad 	.word	0x08014bad
 8014b5c:	08014bc1 	.word	0x08014bc1
 8014b60:	08014bcb 	.word	0x08014bcb
 8014b64:	08014bb7 	.word	0x08014bb7
 8014b68:	08014bcb 	.word	0x08014bcb
 8014b6c:	08014b8b 	.word	0x08014b8b
 8014b70:	08014b81 	.word	0x08014b81
 8014b74:	08014bcb 	.word	0x08014bcb
 8014b78:	08014ba3 	.word	0x08014ba3
 8014b7c:	08014b95 	.word	0x08014b95
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8014b80:	6839      	ldr	r1, [r7, #0]
 8014b82:	6878      	ldr	r0, [r7, #4]
 8014b84:	f000 fa3c 	bl	8015000 <USBD_GetDescriptor>
          break;
 8014b88:	e024      	b.n	8014bd4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8014b8a:	6839      	ldr	r1, [r7, #0]
 8014b8c:	6878      	ldr	r0, [r7, #4]
 8014b8e:	f000 fbcb 	bl	8015328 <USBD_SetAddress>
          break;
 8014b92:	e01f      	b.n	8014bd4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8014b94:	6839      	ldr	r1, [r7, #0]
 8014b96:	6878      	ldr	r0, [r7, #4]
 8014b98:	f000 fc0a 	bl	80153b0 <USBD_SetConfig>
 8014b9c:	4603      	mov	r3, r0
 8014b9e:	73fb      	strb	r3, [r7, #15]
          break;
 8014ba0:	e018      	b.n	8014bd4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8014ba2:	6839      	ldr	r1, [r7, #0]
 8014ba4:	6878      	ldr	r0, [r7, #4]
 8014ba6:	f000 fcad 	bl	8015504 <USBD_GetConfig>
          break;
 8014baa:	e013      	b.n	8014bd4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8014bac:	6839      	ldr	r1, [r7, #0]
 8014bae:	6878      	ldr	r0, [r7, #4]
 8014bb0:	f000 fcde 	bl	8015570 <USBD_GetStatus>
          break;
 8014bb4:	e00e      	b.n	8014bd4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8014bb6:	6839      	ldr	r1, [r7, #0]
 8014bb8:	6878      	ldr	r0, [r7, #4]
 8014bba:	f000 fd0d 	bl	80155d8 <USBD_SetFeature>
          break;
 8014bbe:	e009      	b.n	8014bd4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8014bc0:	6839      	ldr	r1, [r7, #0]
 8014bc2:	6878      	ldr	r0, [r7, #4]
 8014bc4:	f000 fd31 	bl	801562a <USBD_ClrFeature>
          break;
 8014bc8:	e004      	b.n	8014bd4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8014bca:	6839      	ldr	r1, [r7, #0]
 8014bcc:	6878      	ldr	r0, [r7, #4]
 8014bce:	f000 fd88 	bl	80156e2 <USBD_CtlError>
          break;
 8014bd2:	bf00      	nop
      }
      break;
 8014bd4:	e004      	b.n	8014be0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8014bd6:	6839      	ldr	r1, [r7, #0]
 8014bd8:	6878      	ldr	r0, [r7, #4]
 8014bda:	f000 fd82 	bl	80156e2 <USBD_CtlError>
      break;
 8014bde:	bf00      	nop
  }

  return ret;
 8014be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8014be2:	4618      	mov	r0, r3
 8014be4:	3710      	adds	r7, #16
 8014be6:	46bd      	mov	sp, r7
 8014be8:	bd80      	pop	{r7, pc}
 8014bea:	bf00      	nop

08014bec <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014bec:	b580      	push	{r7, lr}
 8014bee:	b084      	sub	sp, #16
 8014bf0:	af00      	add	r7, sp, #0
 8014bf2:	6078      	str	r0, [r7, #4]
 8014bf4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014bf6:	2300      	movs	r3, #0
 8014bf8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014bfa:	683b      	ldr	r3, [r7, #0]
 8014bfc:	781b      	ldrb	r3, [r3, #0]
 8014bfe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014c02:	2b40      	cmp	r3, #64	; 0x40
 8014c04:	d005      	beq.n	8014c12 <USBD_StdItfReq+0x26>
 8014c06:	2b40      	cmp	r3, #64	; 0x40
 8014c08:	d852      	bhi.n	8014cb0 <USBD_StdItfReq+0xc4>
 8014c0a:	2b00      	cmp	r3, #0
 8014c0c:	d001      	beq.n	8014c12 <USBD_StdItfReq+0x26>
 8014c0e:	2b20      	cmp	r3, #32
 8014c10:	d14e      	bne.n	8014cb0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8014c12:	687b      	ldr	r3, [r7, #4]
 8014c14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014c18:	b2db      	uxtb	r3, r3
 8014c1a:	3b01      	subs	r3, #1
 8014c1c:	2b02      	cmp	r3, #2
 8014c1e:	d840      	bhi.n	8014ca2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8014c20:	683b      	ldr	r3, [r7, #0]
 8014c22:	889b      	ldrh	r3, [r3, #4]
 8014c24:	b2db      	uxtb	r3, r3
 8014c26:	2b01      	cmp	r3, #1
 8014c28:	d836      	bhi.n	8014c98 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8014c2a:	683b      	ldr	r3, [r7, #0]
 8014c2c:	889b      	ldrh	r3, [r3, #4]
 8014c2e:	b2db      	uxtb	r3, r3
 8014c30:	4619      	mov	r1, r3
 8014c32:	6878      	ldr	r0, [r7, #4]
 8014c34:	f7ff fed9 	bl	80149ea <USBD_CoreFindIF>
 8014c38:	4603      	mov	r3, r0
 8014c3a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014c3c:	7bbb      	ldrb	r3, [r7, #14]
 8014c3e:	2bff      	cmp	r3, #255	; 0xff
 8014c40:	d01d      	beq.n	8014c7e <USBD_StdItfReq+0x92>
 8014c42:	7bbb      	ldrb	r3, [r7, #14]
 8014c44:	2b00      	cmp	r3, #0
 8014c46:	d11a      	bne.n	8014c7e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8014c48:	7bba      	ldrb	r2, [r7, #14]
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	32ae      	adds	r2, #174	; 0xae
 8014c4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014c52:	689b      	ldr	r3, [r3, #8]
 8014c54:	2b00      	cmp	r3, #0
 8014c56:	d00f      	beq.n	8014c78 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8014c58:	7bba      	ldrb	r2, [r7, #14]
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8014c60:	7bba      	ldrb	r2, [r7, #14]
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	32ae      	adds	r2, #174	; 0xae
 8014c66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014c6a:	689b      	ldr	r3, [r3, #8]
 8014c6c:	6839      	ldr	r1, [r7, #0]
 8014c6e:	6878      	ldr	r0, [r7, #4]
 8014c70:	4798      	blx	r3
 8014c72:	4603      	mov	r3, r0
 8014c74:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8014c76:	e004      	b.n	8014c82 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8014c78:	2303      	movs	r3, #3
 8014c7a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8014c7c:	e001      	b.n	8014c82 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8014c7e:	2303      	movs	r3, #3
 8014c80:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8014c82:	683b      	ldr	r3, [r7, #0]
 8014c84:	88db      	ldrh	r3, [r3, #6]
 8014c86:	2b00      	cmp	r3, #0
 8014c88:	d110      	bne.n	8014cac <USBD_StdItfReq+0xc0>
 8014c8a:	7bfb      	ldrb	r3, [r7, #15]
 8014c8c:	2b00      	cmp	r3, #0
 8014c8e:	d10d      	bne.n	8014cac <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8014c90:	6878      	ldr	r0, [r7, #4]
 8014c92:	f000 fdf1 	bl	8015878 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8014c96:	e009      	b.n	8014cac <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8014c98:	6839      	ldr	r1, [r7, #0]
 8014c9a:	6878      	ldr	r0, [r7, #4]
 8014c9c:	f000 fd21 	bl	80156e2 <USBD_CtlError>
          break;
 8014ca0:	e004      	b.n	8014cac <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8014ca2:	6839      	ldr	r1, [r7, #0]
 8014ca4:	6878      	ldr	r0, [r7, #4]
 8014ca6:	f000 fd1c 	bl	80156e2 <USBD_CtlError>
          break;
 8014caa:	e000      	b.n	8014cae <USBD_StdItfReq+0xc2>
          break;
 8014cac:	bf00      	nop
      }
      break;
 8014cae:	e004      	b.n	8014cba <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8014cb0:	6839      	ldr	r1, [r7, #0]
 8014cb2:	6878      	ldr	r0, [r7, #4]
 8014cb4:	f000 fd15 	bl	80156e2 <USBD_CtlError>
      break;
 8014cb8:	bf00      	nop
  }

  return ret;
 8014cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8014cbc:	4618      	mov	r0, r3
 8014cbe:	3710      	adds	r7, #16
 8014cc0:	46bd      	mov	sp, r7
 8014cc2:	bd80      	pop	{r7, pc}

08014cc4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014cc4:	b580      	push	{r7, lr}
 8014cc6:	b084      	sub	sp, #16
 8014cc8:	af00      	add	r7, sp, #0
 8014cca:	6078      	str	r0, [r7, #4]
 8014ccc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8014cce:	2300      	movs	r3, #0
 8014cd0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8014cd2:	683b      	ldr	r3, [r7, #0]
 8014cd4:	889b      	ldrh	r3, [r3, #4]
 8014cd6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014cd8:	683b      	ldr	r3, [r7, #0]
 8014cda:	781b      	ldrb	r3, [r3, #0]
 8014cdc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014ce0:	2b40      	cmp	r3, #64	; 0x40
 8014ce2:	d007      	beq.n	8014cf4 <USBD_StdEPReq+0x30>
 8014ce4:	2b40      	cmp	r3, #64	; 0x40
 8014ce6:	f200 817f 	bhi.w	8014fe8 <USBD_StdEPReq+0x324>
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	d02a      	beq.n	8014d44 <USBD_StdEPReq+0x80>
 8014cee:	2b20      	cmp	r3, #32
 8014cf0:	f040 817a 	bne.w	8014fe8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8014cf4:	7bbb      	ldrb	r3, [r7, #14]
 8014cf6:	4619      	mov	r1, r3
 8014cf8:	6878      	ldr	r0, [r7, #4]
 8014cfa:	f7ff fe83 	bl	8014a04 <USBD_CoreFindEP>
 8014cfe:	4603      	mov	r3, r0
 8014d00:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014d02:	7b7b      	ldrb	r3, [r7, #13]
 8014d04:	2bff      	cmp	r3, #255	; 0xff
 8014d06:	f000 8174 	beq.w	8014ff2 <USBD_StdEPReq+0x32e>
 8014d0a:	7b7b      	ldrb	r3, [r7, #13]
 8014d0c:	2b00      	cmp	r3, #0
 8014d0e:	f040 8170 	bne.w	8014ff2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8014d12:	7b7a      	ldrb	r2, [r7, #13]
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8014d1a:	7b7a      	ldrb	r2, [r7, #13]
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	32ae      	adds	r2, #174	; 0xae
 8014d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014d24:	689b      	ldr	r3, [r3, #8]
 8014d26:	2b00      	cmp	r3, #0
 8014d28:	f000 8163 	beq.w	8014ff2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8014d2c:	7b7a      	ldrb	r2, [r7, #13]
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	32ae      	adds	r2, #174	; 0xae
 8014d32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014d36:	689b      	ldr	r3, [r3, #8]
 8014d38:	6839      	ldr	r1, [r7, #0]
 8014d3a:	6878      	ldr	r0, [r7, #4]
 8014d3c:	4798      	blx	r3
 8014d3e:	4603      	mov	r3, r0
 8014d40:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8014d42:	e156      	b.n	8014ff2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014d44:	683b      	ldr	r3, [r7, #0]
 8014d46:	785b      	ldrb	r3, [r3, #1]
 8014d48:	2b03      	cmp	r3, #3
 8014d4a:	d008      	beq.n	8014d5e <USBD_StdEPReq+0x9a>
 8014d4c:	2b03      	cmp	r3, #3
 8014d4e:	f300 8145 	bgt.w	8014fdc <USBD_StdEPReq+0x318>
 8014d52:	2b00      	cmp	r3, #0
 8014d54:	f000 809b 	beq.w	8014e8e <USBD_StdEPReq+0x1ca>
 8014d58:	2b01      	cmp	r3, #1
 8014d5a:	d03c      	beq.n	8014dd6 <USBD_StdEPReq+0x112>
 8014d5c:	e13e      	b.n	8014fdc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8014d5e:	687b      	ldr	r3, [r7, #4]
 8014d60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014d64:	b2db      	uxtb	r3, r3
 8014d66:	2b02      	cmp	r3, #2
 8014d68:	d002      	beq.n	8014d70 <USBD_StdEPReq+0xac>
 8014d6a:	2b03      	cmp	r3, #3
 8014d6c:	d016      	beq.n	8014d9c <USBD_StdEPReq+0xd8>
 8014d6e:	e02c      	b.n	8014dca <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014d70:	7bbb      	ldrb	r3, [r7, #14]
 8014d72:	2b00      	cmp	r3, #0
 8014d74:	d00d      	beq.n	8014d92 <USBD_StdEPReq+0xce>
 8014d76:	7bbb      	ldrb	r3, [r7, #14]
 8014d78:	2b80      	cmp	r3, #128	; 0x80
 8014d7a:	d00a      	beq.n	8014d92 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014d7c:	7bbb      	ldrb	r3, [r7, #14]
 8014d7e:	4619      	mov	r1, r3
 8014d80:	6878      	ldr	r0, [r7, #4]
 8014d82:	f004 fe4b 	bl	8019a1c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8014d86:	2180      	movs	r1, #128	; 0x80
 8014d88:	6878      	ldr	r0, [r7, #4]
 8014d8a:	f004 fe47 	bl	8019a1c <USBD_LL_StallEP>
 8014d8e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014d90:	e020      	b.n	8014dd4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8014d92:	6839      	ldr	r1, [r7, #0]
 8014d94:	6878      	ldr	r0, [r7, #4]
 8014d96:	f000 fca4 	bl	80156e2 <USBD_CtlError>
              break;
 8014d9a:	e01b      	b.n	8014dd4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014d9c:	683b      	ldr	r3, [r7, #0]
 8014d9e:	885b      	ldrh	r3, [r3, #2]
 8014da0:	2b00      	cmp	r3, #0
 8014da2:	d10e      	bne.n	8014dc2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8014da4:	7bbb      	ldrb	r3, [r7, #14]
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	d00b      	beq.n	8014dc2 <USBD_StdEPReq+0xfe>
 8014daa:	7bbb      	ldrb	r3, [r7, #14]
 8014dac:	2b80      	cmp	r3, #128	; 0x80
 8014dae:	d008      	beq.n	8014dc2 <USBD_StdEPReq+0xfe>
 8014db0:	683b      	ldr	r3, [r7, #0]
 8014db2:	88db      	ldrh	r3, [r3, #6]
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	d104      	bne.n	8014dc2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8014db8:	7bbb      	ldrb	r3, [r7, #14]
 8014dba:	4619      	mov	r1, r3
 8014dbc:	6878      	ldr	r0, [r7, #4]
 8014dbe:	f004 fe2d 	bl	8019a1c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8014dc2:	6878      	ldr	r0, [r7, #4]
 8014dc4:	f000 fd58 	bl	8015878 <USBD_CtlSendStatus>

              break;
 8014dc8:	e004      	b.n	8014dd4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8014dca:	6839      	ldr	r1, [r7, #0]
 8014dcc:	6878      	ldr	r0, [r7, #4]
 8014dce:	f000 fc88 	bl	80156e2 <USBD_CtlError>
              break;
 8014dd2:	bf00      	nop
          }
          break;
 8014dd4:	e107      	b.n	8014fe6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8014dd6:	687b      	ldr	r3, [r7, #4]
 8014dd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014ddc:	b2db      	uxtb	r3, r3
 8014dde:	2b02      	cmp	r3, #2
 8014de0:	d002      	beq.n	8014de8 <USBD_StdEPReq+0x124>
 8014de2:	2b03      	cmp	r3, #3
 8014de4:	d016      	beq.n	8014e14 <USBD_StdEPReq+0x150>
 8014de6:	e04b      	b.n	8014e80 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014de8:	7bbb      	ldrb	r3, [r7, #14]
 8014dea:	2b00      	cmp	r3, #0
 8014dec:	d00d      	beq.n	8014e0a <USBD_StdEPReq+0x146>
 8014dee:	7bbb      	ldrb	r3, [r7, #14]
 8014df0:	2b80      	cmp	r3, #128	; 0x80
 8014df2:	d00a      	beq.n	8014e0a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014df4:	7bbb      	ldrb	r3, [r7, #14]
 8014df6:	4619      	mov	r1, r3
 8014df8:	6878      	ldr	r0, [r7, #4]
 8014dfa:	f004 fe0f 	bl	8019a1c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8014dfe:	2180      	movs	r1, #128	; 0x80
 8014e00:	6878      	ldr	r0, [r7, #4]
 8014e02:	f004 fe0b 	bl	8019a1c <USBD_LL_StallEP>
 8014e06:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014e08:	e040      	b.n	8014e8c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8014e0a:	6839      	ldr	r1, [r7, #0]
 8014e0c:	6878      	ldr	r0, [r7, #4]
 8014e0e:	f000 fc68 	bl	80156e2 <USBD_CtlError>
              break;
 8014e12:	e03b      	b.n	8014e8c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014e14:	683b      	ldr	r3, [r7, #0]
 8014e16:	885b      	ldrh	r3, [r3, #2]
 8014e18:	2b00      	cmp	r3, #0
 8014e1a:	d136      	bne.n	8014e8a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8014e1c:	7bbb      	ldrb	r3, [r7, #14]
 8014e1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014e22:	2b00      	cmp	r3, #0
 8014e24:	d004      	beq.n	8014e30 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8014e26:	7bbb      	ldrb	r3, [r7, #14]
 8014e28:	4619      	mov	r1, r3
 8014e2a:	6878      	ldr	r0, [r7, #4]
 8014e2c:	f004 fe15 	bl	8019a5a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8014e30:	6878      	ldr	r0, [r7, #4]
 8014e32:	f000 fd21 	bl	8015878 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8014e36:	7bbb      	ldrb	r3, [r7, #14]
 8014e38:	4619      	mov	r1, r3
 8014e3a:	6878      	ldr	r0, [r7, #4]
 8014e3c:	f7ff fde2 	bl	8014a04 <USBD_CoreFindEP>
 8014e40:	4603      	mov	r3, r0
 8014e42:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014e44:	7b7b      	ldrb	r3, [r7, #13]
 8014e46:	2bff      	cmp	r3, #255	; 0xff
 8014e48:	d01f      	beq.n	8014e8a <USBD_StdEPReq+0x1c6>
 8014e4a:	7b7b      	ldrb	r3, [r7, #13]
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	d11c      	bne.n	8014e8a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8014e50:	7b7a      	ldrb	r2, [r7, #13]
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8014e58:	7b7a      	ldrb	r2, [r7, #13]
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	32ae      	adds	r2, #174	; 0xae
 8014e5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e62:	689b      	ldr	r3, [r3, #8]
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	d010      	beq.n	8014e8a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8014e68:	7b7a      	ldrb	r2, [r7, #13]
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	32ae      	adds	r2, #174	; 0xae
 8014e6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e72:	689b      	ldr	r3, [r3, #8]
 8014e74:	6839      	ldr	r1, [r7, #0]
 8014e76:	6878      	ldr	r0, [r7, #4]
 8014e78:	4798      	blx	r3
 8014e7a:	4603      	mov	r3, r0
 8014e7c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8014e7e:	e004      	b.n	8014e8a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8014e80:	6839      	ldr	r1, [r7, #0]
 8014e82:	6878      	ldr	r0, [r7, #4]
 8014e84:	f000 fc2d 	bl	80156e2 <USBD_CtlError>
              break;
 8014e88:	e000      	b.n	8014e8c <USBD_StdEPReq+0x1c8>
              break;
 8014e8a:	bf00      	nop
          }
          break;
 8014e8c:	e0ab      	b.n	8014fe6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014e94:	b2db      	uxtb	r3, r3
 8014e96:	2b02      	cmp	r3, #2
 8014e98:	d002      	beq.n	8014ea0 <USBD_StdEPReq+0x1dc>
 8014e9a:	2b03      	cmp	r3, #3
 8014e9c:	d032      	beq.n	8014f04 <USBD_StdEPReq+0x240>
 8014e9e:	e097      	b.n	8014fd0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014ea0:	7bbb      	ldrb	r3, [r7, #14]
 8014ea2:	2b00      	cmp	r3, #0
 8014ea4:	d007      	beq.n	8014eb6 <USBD_StdEPReq+0x1f2>
 8014ea6:	7bbb      	ldrb	r3, [r7, #14]
 8014ea8:	2b80      	cmp	r3, #128	; 0x80
 8014eaa:	d004      	beq.n	8014eb6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8014eac:	6839      	ldr	r1, [r7, #0]
 8014eae:	6878      	ldr	r0, [r7, #4]
 8014eb0:	f000 fc17 	bl	80156e2 <USBD_CtlError>
                break;
 8014eb4:	e091      	b.n	8014fda <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014eb6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014eba:	2b00      	cmp	r3, #0
 8014ebc:	da0b      	bge.n	8014ed6 <USBD_StdEPReq+0x212>
 8014ebe:	7bbb      	ldrb	r3, [r7, #14]
 8014ec0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014ec4:	4613      	mov	r3, r2
 8014ec6:	009b      	lsls	r3, r3, #2
 8014ec8:	4413      	add	r3, r2
 8014eca:	009b      	lsls	r3, r3, #2
 8014ecc:	3310      	adds	r3, #16
 8014ece:	687a      	ldr	r2, [r7, #4]
 8014ed0:	4413      	add	r3, r2
 8014ed2:	3304      	adds	r3, #4
 8014ed4:	e00b      	b.n	8014eee <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014ed6:	7bbb      	ldrb	r3, [r7, #14]
 8014ed8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014edc:	4613      	mov	r3, r2
 8014ede:	009b      	lsls	r3, r3, #2
 8014ee0:	4413      	add	r3, r2
 8014ee2:	009b      	lsls	r3, r3, #2
 8014ee4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8014ee8:	687a      	ldr	r2, [r7, #4]
 8014eea:	4413      	add	r3, r2
 8014eec:	3304      	adds	r3, #4
 8014eee:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8014ef0:	68bb      	ldr	r3, [r7, #8]
 8014ef2:	2200      	movs	r2, #0
 8014ef4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014ef6:	68bb      	ldr	r3, [r7, #8]
 8014ef8:	2202      	movs	r2, #2
 8014efa:	4619      	mov	r1, r3
 8014efc:	6878      	ldr	r0, [r7, #4]
 8014efe:	f000 fc61 	bl	80157c4 <USBD_CtlSendData>
              break;
 8014f02:	e06a      	b.n	8014fda <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8014f04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014f08:	2b00      	cmp	r3, #0
 8014f0a:	da11      	bge.n	8014f30 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8014f0c:	7bbb      	ldrb	r3, [r7, #14]
 8014f0e:	f003 020f 	and.w	r2, r3, #15
 8014f12:	6879      	ldr	r1, [r7, #4]
 8014f14:	4613      	mov	r3, r2
 8014f16:	009b      	lsls	r3, r3, #2
 8014f18:	4413      	add	r3, r2
 8014f1a:	009b      	lsls	r3, r3, #2
 8014f1c:	440b      	add	r3, r1
 8014f1e:	3324      	adds	r3, #36	; 0x24
 8014f20:	881b      	ldrh	r3, [r3, #0]
 8014f22:	2b00      	cmp	r3, #0
 8014f24:	d117      	bne.n	8014f56 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8014f26:	6839      	ldr	r1, [r7, #0]
 8014f28:	6878      	ldr	r0, [r7, #4]
 8014f2a:	f000 fbda 	bl	80156e2 <USBD_CtlError>
                  break;
 8014f2e:	e054      	b.n	8014fda <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8014f30:	7bbb      	ldrb	r3, [r7, #14]
 8014f32:	f003 020f 	and.w	r2, r3, #15
 8014f36:	6879      	ldr	r1, [r7, #4]
 8014f38:	4613      	mov	r3, r2
 8014f3a:	009b      	lsls	r3, r3, #2
 8014f3c:	4413      	add	r3, r2
 8014f3e:	009b      	lsls	r3, r3, #2
 8014f40:	440b      	add	r3, r1
 8014f42:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014f46:	881b      	ldrh	r3, [r3, #0]
 8014f48:	2b00      	cmp	r3, #0
 8014f4a:	d104      	bne.n	8014f56 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8014f4c:	6839      	ldr	r1, [r7, #0]
 8014f4e:	6878      	ldr	r0, [r7, #4]
 8014f50:	f000 fbc7 	bl	80156e2 <USBD_CtlError>
                  break;
 8014f54:	e041      	b.n	8014fda <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014f56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014f5a:	2b00      	cmp	r3, #0
 8014f5c:	da0b      	bge.n	8014f76 <USBD_StdEPReq+0x2b2>
 8014f5e:	7bbb      	ldrb	r3, [r7, #14]
 8014f60:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014f64:	4613      	mov	r3, r2
 8014f66:	009b      	lsls	r3, r3, #2
 8014f68:	4413      	add	r3, r2
 8014f6a:	009b      	lsls	r3, r3, #2
 8014f6c:	3310      	adds	r3, #16
 8014f6e:	687a      	ldr	r2, [r7, #4]
 8014f70:	4413      	add	r3, r2
 8014f72:	3304      	adds	r3, #4
 8014f74:	e00b      	b.n	8014f8e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014f76:	7bbb      	ldrb	r3, [r7, #14]
 8014f78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014f7c:	4613      	mov	r3, r2
 8014f7e:	009b      	lsls	r3, r3, #2
 8014f80:	4413      	add	r3, r2
 8014f82:	009b      	lsls	r3, r3, #2
 8014f84:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8014f88:	687a      	ldr	r2, [r7, #4]
 8014f8a:	4413      	add	r3, r2
 8014f8c:	3304      	adds	r3, #4
 8014f8e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8014f90:	7bbb      	ldrb	r3, [r7, #14]
 8014f92:	2b00      	cmp	r3, #0
 8014f94:	d002      	beq.n	8014f9c <USBD_StdEPReq+0x2d8>
 8014f96:	7bbb      	ldrb	r3, [r7, #14]
 8014f98:	2b80      	cmp	r3, #128	; 0x80
 8014f9a:	d103      	bne.n	8014fa4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8014f9c:	68bb      	ldr	r3, [r7, #8]
 8014f9e:	2200      	movs	r2, #0
 8014fa0:	601a      	str	r2, [r3, #0]
 8014fa2:	e00e      	b.n	8014fc2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8014fa4:	7bbb      	ldrb	r3, [r7, #14]
 8014fa6:	4619      	mov	r1, r3
 8014fa8:	6878      	ldr	r0, [r7, #4]
 8014faa:	f004 fd75 	bl	8019a98 <USBD_LL_IsStallEP>
 8014fae:	4603      	mov	r3, r0
 8014fb0:	2b00      	cmp	r3, #0
 8014fb2:	d003      	beq.n	8014fbc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8014fb4:	68bb      	ldr	r3, [r7, #8]
 8014fb6:	2201      	movs	r2, #1
 8014fb8:	601a      	str	r2, [r3, #0]
 8014fba:	e002      	b.n	8014fc2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8014fbc:	68bb      	ldr	r3, [r7, #8]
 8014fbe:	2200      	movs	r2, #0
 8014fc0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014fc2:	68bb      	ldr	r3, [r7, #8]
 8014fc4:	2202      	movs	r2, #2
 8014fc6:	4619      	mov	r1, r3
 8014fc8:	6878      	ldr	r0, [r7, #4]
 8014fca:	f000 fbfb 	bl	80157c4 <USBD_CtlSendData>
              break;
 8014fce:	e004      	b.n	8014fda <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8014fd0:	6839      	ldr	r1, [r7, #0]
 8014fd2:	6878      	ldr	r0, [r7, #4]
 8014fd4:	f000 fb85 	bl	80156e2 <USBD_CtlError>
              break;
 8014fd8:	bf00      	nop
          }
          break;
 8014fda:	e004      	b.n	8014fe6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8014fdc:	6839      	ldr	r1, [r7, #0]
 8014fde:	6878      	ldr	r0, [r7, #4]
 8014fe0:	f000 fb7f 	bl	80156e2 <USBD_CtlError>
          break;
 8014fe4:	bf00      	nop
      }
      break;
 8014fe6:	e005      	b.n	8014ff4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8014fe8:	6839      	ldr	r1, [r7, #0]
 8014fea:	6878      	ldr	r0, [r7, #4]
 8014fec:	f000 fb79 	bl	80156e2 <USBD_CtlError>
      break;
 8014ff0:	e000      	b.n	8014ff4 <USBD_StdEPReq+0x330>
      break;
 8014ff2:	bf00      	nop
  }

  return ret;
 8014ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8014ff6:	4618      	mov	r0, r3
 8014ff8:	3710      	adds	r7, #16
 8014ffa:	46bd      	mov	sp, r7
 8014ffc:	bd80      	pop	{r7, pc}
	...

08015000 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015000:	b580      	push	{r7, lr}
 8015002:	b084      	sub	sp, #16
 8015004:	af00      	add	r7, sp, #0
 8015006:	6078      	str	r0, [r7, #4]
 8015008:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801500a:	2300      	movs	r3, #0
 801500c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801500e:	2300      	movs	r3, #0
 8015010:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8015012:	2300      	movs	r3, #0
 8015014:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8015016:	683b      	ldr	r3, [r7, #0]
 8015018:	885b      	ldrh	r3, [r3, #2]
 801501a:	0a1b      	lsrs	r3, r3, #8
 801501c:	b29b      	uxth	r3, r3
 801501e:	3b01      	subs	r3, #1
 8015020:	2b0e      	cmp	r3, #14
 8015022:	f200 8152 	bhi.w	80152ca <USBD_GetDescriptor+0x2ca>
 8015026:	a201      	add	r2, pc, #4	; (adr r2, 801502c <USBD_GetDescriptor+0x2c>)
 8015028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801502c:	0801509d 	.word	0x0801509d
 8015030:	080150b5 	.word	0x080150b5
 8015034:	080150f5 	.word	0x080150f5
 8015038:	080152cb 	.word	0x080152cb
 801503c:	080152cb 	.word	0x080152cb
 8015040:	0801526b 	.word	0x0801526b
 8015044:	08015297 	.word	0x08015297
 8015048:	080152cb 	.word	0x080152cb
 801504c:	080152cb 	.word	0x080152cb
 8015050:	080152cb 	.word	0x080152cb
 8015054:	080152cb 	.word	0x080152cb
 8015058:	080152cb 	.word	0x080152cb
 801505c:	080152cb 	.word	0x080152cb
 8015060:	080152cb 	.word	0x080152cb
 8015064:	08015069 	.word	0x08015069
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801506e:	69db      	ldr	r3, [r3, #28]
 8015070:	2b00      	cmp	r3, #0
 8015072:	d00b      	beq.n	801508c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801507a:	69db      	ldr	r3, [r3, #28]
 801507c:	687a      	ldr	r2, [r7, #4]
 801507e:	7c12      	ldrb	r2, [r2, #16]
 8015080:	f107 0108 	add.w	r1, r7, #8
 8015084:	4610      	mov	r0, r2
 8015086:	4798      	blx	r3
 8015088:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801508a:	e126      	b.n	80152da <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801508c:	6839      	ldr	r1, [r7, #0]
 801508e:	6878      	ldr	r0, [r7, #4]
 8015090:	f000 fb27 	bl	80156e2 <USBD_CtlError>
        err++;
 8015094:	7afb      	ldrb	r3, [r7, #11]
 8015096:	3301      	adds	r3, #1
 8015098:	72fb      	strb	r3, [r7, #11]
      break;
 801509a:	e11e      	b.n	80152da <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80150a2:	681b      	ldr	r3, [r3, #0]
 80150a4:	687a      	ldr	r2, [r7, #4]
 80150a6:	7c12      	ldrb	r2, [r2, #16]
 80150a8:	f107 0108 	add.w	r1, r7, #8
 80150ac:	4610      	mov	r0, r2
 80150ae:	4798      	blx	r3
 80150b0:	60f8      	str	r0, [r7, #12]
      break;
 80150b2:	e112      	b.n	80152da <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	7c1b      	ldrb	r3, [r3, #16]
 80150b8:	2b00      	cmp	r3, #0
 80150ba:	d10d      	bne.n	80150d8 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80150c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80150c4:	f107 0208 	add.w	r2, r7, #8
 80150c8:	4610      	mov	r0, r2
 80150ca:	4798      	blx	r3
 80150cc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80150ce:	68fb      	ldr	r3, [r7, #12]
 80150d0:	3301      	adds	r3, #1
 80150d2:	2202      	movs	r2, #2
 80150d4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80150d6:	e100      	b.n	80152da <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80150de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150e0:	f107 0208 	add.w	r2, r7, #8
 80150e4:	4610      	mov	r0, r2
 80150e6:	4798      	blx	r3
 80150e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80150ea:	68fb      	ldr	r3, [r7, #12]
 80150ec:	3301      	adds	r3, #1
 80150ee:	2202      	movs	r2, #2
 80150f0:	701a      	strb	r2, [r3, #0]
      break;
 80150f2:	e0f2      	b.n	80152da <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80150f4:	683b      	ldr	r3, [r7, #0]
 80150f6:	885b      	ldrh	r3, [r3, #2]
 80150f8:	b2db      	uxtb	r3, r3
 80150fa:	2b05      	cmp	r3, #5
 80150fc:	f200 80ac 	bhi.w	8015258 <USBD_GetDescriptor+0x258>
 8015100:	a201      	add	r2, pc, #4	; (adr r2, 8015108 <USBD_GetDescriptor+0x108>)
 8015102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015106:	bf00      	nop
 8015108:	08015121 	.word	0x08015121
 801510c:	08015155 	.word	0x08015155
 8015110:	08015189 	.word	0x08015189
 8015114:	080151bd 	.word	0x080151bd
 8015118:	080151f1 	.word	0x080151f1
 801511c:	08015225 	.word	0x08015225
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015126:	685b      	ldr	r3, [r3, #4]
 8015128:	2b00      	cmp	r3, #0
 801512a:	d00b      	beq.n	8015144 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015132:	685b      	ldr	r3, [r3, #4]
 8015134:	687a      	ldr	r2, [r7, #4]
 8015136:	7c12      	ldrb	r2, [r2, #16]
 8015138:	f107 0108 	add.w	r1, r7, #8
 801513c:	4610      	mov	r0, r2
 801513e:	4798      	blx	r3
 8015140:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015142:	e091      	b.n	8015268 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8015144:	6839      	ldr	r1, [r7, #0]
 8015146:	6878      	ldr	r0, [r7, #4]
 8015148:	f000 facb 	bl	80156e2 <USBD_CtlError>
            err++;
 801514c:	7afb      	ldrb	r3, [r7, #11]
 801514e:	3301      	adds	r3, #1
 8015150:	72fb      	strb	r3, [r7, #11]
          break;
 8015152:	e089      	b.n	8015268 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801515a:	689b      	ldr	r3, [r3, #8]
 801515c:	2b00      	cmp	r3, #0
 801515e:	d00b      	beq.n	8015178 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015166:	689b      	ldr	r3, [r3, #8]
 8015168:	687a      	ldr	r2, [r7, #4]
 801516a:	7c12      	ldrb	r2, [r2, #16]
 801516c:	f107 0108 	add.w	r1, r7, #8
 8015170:	4610      	mov	r0, r2
 8015172:	4798      	blx	r3
 8015174:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015176:	e077      	b.n	8015268 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8015178:	6839      	ldr	r1, [r7, #0]
 801517a:	6878      	ldr	r0, [r7, #4]
 801517c:	f000 fab1 	bl	80156e2 <USBD_CtlError>
            err++;
 8015180:	7afb      	ldrb	r3, [r7, #11]
 8015182:	3301      	adds	r3, #1
 8015184:	72fb      	strb	r3, [r7, #11]
          break;
 8015186:	e06f      	b.n	8015268 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801518e:	68db      	ldr	r3, [r3, #12]
 8015190:	2b00      	cmp	r3, #0
 8015192:	d00b      	beq.n	80151ac <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801519a:	68db      	ldr	r3, [r3, #12]
 801519c:	687a      	ldr	r2, [r7, #4]
 801519e:	7c12      	ldrb	r2, [r2, #16]
 80151a0:	f107 0108 	add.w	r1, r7, #8
 80151a4:	4610      	mov	r0, r2
 80151a6:	4798      	blx	r3
 80151a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80151aa:	e05d      	b.n	8015268 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80151ac:	6839      	ldr	r1, [r7, #0]
 80151ae:	6878      	ldr	r0, [r7, #4]
 80151b0:	f000 fa97 	bl	80156e2 <USBD_CtlError>
            err++;
 80151b4:	7afb      	ldrb	r3, [r7, #11]
 80151b6:	3301      	adds	r3, #1
 80151b8:	72fb      	strb	r3, [r7, #11]
          break;
 80151ba:	e055      	b.n	8015268 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80151bc:	687b      	ldr	r3, [r7, #4]
 80151be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80151c2:	691b      	ldr	r3, [r3, #16]
 80151c4:	2b00      	cmp	r3, #0
 80151c6:	d00b      	beq.n	80151e0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80151ce:	691b      	ldr	r3, [r3, #16]
 80151d0:	687a      	ldr	r2, [r7, #4]
 80151d2:	7c12      	ldrb	r2, [r2, #16]
 80151d4:	f107 0108 	add.w	r1, r7, #8
 80151d8:	4610      	mov	r0, r2
 80151da:	4798      	blx	r3
 80151dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80151de:	e043      	b.n	8015268 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80151e0:	6839      	ldr	r1, [r7, #0]
 80151e2:	6878      	ldr	r0, [r7, #4]
 80151e4:	f000 fa7d 	bl	80156e2 <USBD_CtlError>
            err++;
 80151e8:	7afb      	ldrb	r3, [r7, #11]
 80151ea:	3301      	adds	r3, #1
 80151ec:	72fb      	strb	r3, [r7, #11]
          break;
 80151ee:	e03b      	b.n	8015268 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80151f0:	687b      	ldr	r3, [r7, #4]
 80151f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80151f6:	695b      	ldr	r3, [r3, #20]
 80151f8:	2b00      	cmp	r3, #0
 80151fa:	d00b      	beq.n	8015214 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80151fc:	687b      	ldr	r3, [r7, #4]
 80151fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015202:	695b      	ldr	r3, [r3, #20]
 8015204:	687a      	ldr	r2, [r7, #4]
 8015206:	7c12      	ldrb	r2, [r2, #16]
 8015208:	f107 0108 	add.w	r1, r7, #8
 801520c:	4610      	mov	r0, r2
 801520e:	4798      	blx	r3
 8015210:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015212:	e029      	b.n	8015268 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8015214:	6839      	ldr	r1, [r7, #0]
 8015216:	6878      	ldr	r0, [r7, #4]
 8015218:	f000 fa63 	bl	80156e2 <USBD_CtlError>
            err++;
 801521c:	7afb      	ldrb	r3, [r7, #11]
 801521e:	3301      	adds	r3, #1
 8015220:	72fb      	strb	r3, [r7, #11]
          break;
 8015222:	e021      	b.n	8015268 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801522a:	699b      	ldr	r3, [r3, #24]
 801522c:	2b00      	cmp	r3, #0
 801522e:	d00b      	beq.n	8015248 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015236:	699b      	ldr	r3, [r3, #24]
 8015238:	687a      	ldr	r2, [r7, #4]
 801523a:	7c12      	ldrb	r2, [r2, #16]
 801523c:	f107 0108 	add.w	r1, r7, #8
 8015240:	4610      	mov	r0, r2
 8015242:	4798      	blx	r3
 8015244:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015246:	e00f      	b.n	8015268 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8015248:	6839      	ldr	r1, [r7, #0]
 801524a:	6878      	ldr	r0, [r7, #4]
 801524c:	f000 fa49 	bl	80156e2 <USBD_CtlError>
            err++;
 8015250:	7afb      	ldrb	r3, [r7, #11]
 8015252:	3301      	adds	r3, #1
 8015254:	72fb      	strb	r3, [r7, #11]
          break;
 8015256:	e007      	b.n	8015268 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8015258:	6839      	ldr	r1, [r7, #0]
 801525a:	6878      	ldr	r0, [r7, #4]
 801525c:	f000 fa41 	bl	80156e2 <USBD_CtlError>
          err++;
 8015260:	7afb      	ldrb	r3, [r7, #11]
 8015262:	3301      	adds	r3, #1
 8015264:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8015266:	bf00      	nop
      }
      break;
 8015268:	e037      	b.n	80152da <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	7c1b      	ldrb	r3, [r3, #16]
 801526e:	2b00      	cmp	r3, #0
 8015270:	d109      	bne.n	8015286 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801527a:	f107 0208 	add.w	r2, r7, #8
 801527e:	4610      	mov	r0, r2
 8015280:	4798      	blx	r3
 8015282:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015284:	e029      	b.n	80152da <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8015286:	6839      	ldr	r1, [r7, #0]
 8015288:	6878      	ldr	r0, [r7, #4]
 801528a:	f000 fa2a 	bl	80156e2 <USBD_CtlError>
        err++;
 801528e:	7afb      	ldrb	r3, [r7, #11]
 8015290:	3301      	adds	r3, #1
 8015292:	72fb      	strb	r3, [r7, #11]
      break;
 8015294:	e021      	b.n	80152da <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015296:	687b      	ldr	r3, [r7, #4]
 8015298:	7c1b      	ldrb	r3, [r3, #16]
 801529a:	2b00      	cmp	r3, #0
 801529c:	d10d      	bne.n	80152ba <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801529e:	687b      	ldr	r3, [r7, #4]
 80152a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80152a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80152a6:	f107 0208 	add.w	r2, r7, #8
 80152aa:	4610      	mov	r0, r2
 80152ac:	4798      	blx	r3
 80152ae:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80152b0:	68fb      	ldr	r3, [r7, #12]
 80152b2:	3301      	adds	r3, #1
 80152b4:	2207      	movs	r2, #7
 80152b6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80152b8:	e00f      	b.n	80152da <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80152ba:	6839      	ldr	r1, [r7, #0]
 80152bc:	6878      	ldr	r0, [r7, #4]
 80152be:	f000 fa10 	bl	80156e2 <USBD_CtlError>
        err++;
 80152c2:	7afb      	ldrb	r3, [r7, #11]
 80152c4:	3301      	adds	r3, #1
 80152c6:	72fb      	strb	r3, [r7, #11]
      break;
 80152c8:	e007      	b.n	80152da <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80152ca:	6839      	ldr	r1, [r7, #0]
 80152cc:	6878      	ldr	r0, [r7, #4]
 80152ce:	f000 fa08 	bl	80156e2 <USBD_CtlError>
      err++;
 80152d2:	7afb      	ldrb	r3, [r7, #11]
 80152d4:	3301      	adds	r3, #1
 80152d6:	72fb      	strb	r3, [r7, #11]
      break;
 80152d8:	bf00      	nop
  }

  if (err != 0U)
 80152da:	7afb      	ldrb	r3, [r7, #11]
 80152dc:	2b00      	cmp	r3, #0
 80152de:	d11e      	bne.n	801531e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80152e0:	683b      	ldr	r3, [r7, #0]
 80152e2:	88db      	ldrh	r3, [r3, #6]
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	d016      	beq.n	8015316 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80152e8:	893b      	ldrh	r3, [r7, #8]
 80152ea:	2b00      	cmp	r3, #0
 80152ec:	d00e      	beq.n	801530c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80152ee:	683b      	ldr	r3, [r7, #0]
 80152f0:	88da      	ldrh	r2, [r3, #6]
 80152f2:	893b      	ldrh	r3, [r7, #8]
 80152f4:	4293      	cmp	r3, r2
 80152f6:	bf28      	it	cs
 80152f8:	4613      	movcs	r3, r2
 80152fa:	b29b      	uxth	r3, r3
 80152fc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80152fe:	893b      	ldrh	r3, [r7, #8]
 8015300:	461a      	mov	r2, r3
 8015302:	68f9      	ldr	r1, [r7, #12]
 8015304:	6878      	ldr	r0, [r7, #4]
 8015306:	f000 fa5d 	bl	80157c4 <USBD_CtlSendData>
 801530a:	e009      	b.n	8015320 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 801530c:	6839      	ldr	r1, [r7, #0]
 801530e:	6878      	ldr	r0, [r7, #4]
 8015310:	f000 f9e7 	bl	80156e2 <USBD_CtlError>
 8015314:	e004      	b.n	8015320 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8015316:	6878      	ldr	r0, [r7, #4]
 8015318:	f000 faae 	bl	8015878 <USBD_CtlSendStatus>
 801531c:	e000      	b.n	8015320 <USBD_GetDescriptor+0x320>
    return;
 801531e:	bf00      	nop
  }
}
 8015320:	3710      	adds	r7, #16
 8015322:	46bd      	mov	sp, r7
 8015324:	bd80      	pop	{r7, pc}
 8015326:	bf00      	nop

08015328 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015328:	b580      	push	{r7, lr}
 801532a:	b084      	sub	sp, #16
 801532c:	af00      	add	r7, sp, #0
 801532e:	6078      	str	r0, [r7, #4]
 8015330:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8015332:	683b      	ldr	r3, [r7, #0]
 8015334:	889b      	ldrh	r3, [r3, #4]
 8015336:	2b00      	cmp	r3, #0
 8015338:	d131      	bne.n	801539e <USBD_SetAddress+0x76>
 801533a:	683b      	ldr	r3, [r7, #0]
 801533c:	88db      	ldrh	r3, [r3, #6]
 801533e:	2b00      	cmp	r3, #0
 8015340:	d12d      	bne.n	801539e <USBD_SetAddress+0x76>
 8015342:	683b      	ldr	r3, [r7, #0]
 8015344:	885b      	ldrh	r3, [r3, #2]
 8015346:	2b7f      	cmp	r3, #127	; 0x7f
 8015348:	d829      	bhi.n	801539e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801534a:	683b      	ldr	r3, [r7, #0]
 801534c:	885b      	ldrh	r3, [r3, #2]
 801534e:	b2db      	uxtb	r3, r3
 8015350:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015354:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801535c:	b2db      	uxtb	r3, r3
 801535e:	2b03      	cmp	r3, #3
 8015360:	d104      	bne.n	801536c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8015362:	6839      	ldr	r1, [r7, #0]
 8015364:	6878      	ldr	r0, [r7, #4]
 8015366:	f000 f9bc 	bl	80156e2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801536a:	e01d      	b.n	80153a8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801536c:	687b      	ldr	r3, [r7, #4]
 801536e:	7bfa      	ldrb	r2, [r7, #15]
 8015370:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8015374:	7bfb      	ldrb	r3, [r7, #15]
 8015376:	4619      	mov	r1, r3
 8015378:	6878      	ldr	r0, [r7, #4]
 801537a:	f004 fbb9 	bl	8019af0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801537e:	6878      	ldr	r0, [r7, #4]
 8015380:	f000 fa7a 	bl	8015878 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8015384:	7bfb      	ldrb	r3, [r7, #15]
 8015386:	2b00      	cmp	r3, #0
 8015388:	d004      	beq.n	8015394 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801538a:	687b      	ldr	r3, [r7, #4]
 801538c:	2202      	movs	r2, #2
 801538e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015392:	e009      	b.n	80153a8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	2201      	movs	r2, #1
 8015398:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801539c:	e004      	b.n	80153a8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801539e:	6839      	ldr	r1, [r7, #0]
 80153a0:	6878      	ldr	r0, [r7, #4]
 80153a2:	f000 f99e 	bl	80156e2 <USBD_CtlError>
  }
}
 80153a6:	bf00      	nop
 80153a8:	bf00      	nop
 80153aa:	3710      	adds	r7, #16
 80153ac:	46bd      	mov	sp, r7
 80153ae:	bd80      	pop	{r7, pc}

080153b0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80153b0:	b580      	push	{r7, lr}
 80153b2:	b084      	sub	sp, #16
 80153b4:	af00      	add	r7, sp, #0
 80153b6:	6078      	str	r0, [r7, #4]
 80153b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80153ba:	2300      	movs	r3, #0
 80153bc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80153be:	683b      	ldr	r3, [r7, #0]
 80153c0:	885b      	ldrh	r3, [r3, #2]
 80153c2:	b2da      	uxtb	r2, r3
 80153c4:	4b4e      	ldr	r3, [pc, #312]	; (8015500 <USBD_SetConfig+0x150>)
 80153c6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80153c8:	4b4d      	ldr	r3, [pc, #308]	; (8015500 <USBD_SetConfig+0x150>)
 80153ca:	781b      	ldrb	r3, [r3, #0]
 80153cc:	2b01      	cmp	r3, #1
 80153ce:	d905      	bls.n	80153dc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80153d0:	6839      	ldr	r1, [r7, #0]
 80153d2:	6878      	ldr	r0, [r7, #4]
 80153d4:	f000 f985 	bl	80156e2 <USBD_CtlError>
    return USBD_FAIL;
 80153d8:	2303      	movs	r3, #3
 80153da:	e08c      	b.n	80154f6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80153dc:	687b      	ldr	r3, [r7, #4]
 80153de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80153e2:	b2db      	uxtb	r3, r3
 80153e4:	2b02      	cmp	r3, #2
 80153e6:	d002      	beq.n	80153ee <USBD_SetConfig+0x3e>
 80153e8:	2b03      	cmp	r3, #3
 80153ea:	d029      	beq.n	8015440 <USBD_SetConfig+0x90>
 80153ec:	e075      	b.n	80154da <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80153ee:	4b44      	ldr	r3, [pc, #272]	; (8015500 <USBD_SetConfig+0x150>)
 80153f0:	781b      	ldrb	r3, [r3, #0]
 80153f2:	2b00      	cmp	r3, #0
 80153f4:	d020      	beq.n	8015438 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80153f6:	4b42      	ldr	r3, [pc, #264]	; (8015500 <USBD_SetConfig+0x150>)
 80153f8:	781b      	ldrb	r3, [r3, #0]
 80153fa:	461a      	mov	r2, r3
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8015400:	4b3f      	ldr	r3, [pc, #252]	; (8015500 <USBD_SetConfig+0x150>)
 8015402:	781b      	ldrb	r3, [r3, #0]
 8015404:	4619      	mov	r1, r3
 8015406:	6878      	ldr	r0, [r7, #4]
 8015408:	f7fe ffbd 	bl	8014386 <USBD_SetClassConfig>
 801540c:	4603      	mov	r3, r0
 801540e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8015410:	7bfb      	ldrb	r3, [r7, #15]
 8015412:	2b00      	cmp	r3, #0
 8015414:	d008      	beq.n	8015428 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8015416:	6839      	ldr	r1, [r7, #0]
 8015418:	6878      	ldr	r0, [r7, #4]
 801541a:	f000 f962 	bl	80156e2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801541e:	687b      	ldr	r3, [r7, #4]
 8015420:	2202      	movs	r2, #2
 8015422:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8015426:	e065      	b.n	80154f4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8015428:	6878      	ldr	r0, [r7, #4]
 801542a:	f000 fa25 	bl	8015878 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801542e:	687b      	ldr	r3, [r7, #4]
 8015430:	2203      	movs	r2, #3
 8015432:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8015436:	e05d      	b.n	80154f4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8015438:	6878      	ldr	r0, [r7, #4]
 801543a:	f000 fa1d 	bl	8015878 <USBD_CtlSendStatus>
      break;
 801543e:	e059      	b.n	80154f4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8015440:	4b2f      	ldr	r3, [pc, #188]	; (8015500 <USBD_SetConfig+0x150>)
 8015442:	781b      	ldrb	r3, [r3, #0]
 8015444:	2b00      	cmp	r3, #0
 8015446:	d112      	bne.n	801546e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	2202      	movs	r2, #2
 801544c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8015450:	4b2b      	ldr	r3, [pc, #172]	; (8015500 <USBD_SetConfig+0x150>)
 8015452:	781b      	ldrb	r3, [r3, #0]
 8015454:	461a      	mov	r2, r3
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801545a:	4b29      	ldr	r3, [pc, #164]	; (8015500 <USBD_SetConfig+0x150>)
 801545c:	781b      	ldrb	r3, [r3, #0]
 801545e:	4619      	mov	r1, r3
 8015460:	6878      	ldr	r0, [r7, #4]
 8015462:	f7fe ffac 	bl	80143be <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8015466:	6878      	ldr	r0, [r7, #4]
 8015468:	f000 fa06 	bl	8015878 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801546c:	e042      	b.n	80154f4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801546e:	4b24      	ldr	r3, [pc, #144]	; (8015500 <USBD_SetConfig+0x150>)
 8015470:	781b      	ldrb	r3, [r3, #0]
 8015472:	461a      	mov	r2, r3
 8015474:	687b      	ldr	r3, [r7, #4]
 8015476:	685b      	ldr	r3, [r3, #4]
 8015478:	429a      	cmp	r2, r3
 801547a:	d02a      	beq.n	80154d2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	685b      	ldr	r3, [r3, #4]
 8015480:	b2db      	uxtb	r3, r3
 8015482:	4619      	mov	r1, r3
 8015484:	6878      	ldr	r0, [r7, #4]
 8015486:	f7fe ff9a 	bl	80143be <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801548a:	4b1d      	ldr	r3, [pc, #116]	; (8015500 <USBD_SetConfig+0x150>)
 801548c:	781b      	ldrb	r3, [r3, #0]
 801548e:	461a      	mov	r2, r3
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8015494:	4b1a      	ldr	r3, [pc, #104]	; (8015500 <USBD_SetConfig+0x150>)
 8015496:	781b      	ldrb	r3, [r3, #0]
 8015498:	4619      	mov	r1, r3
 801549a:	6878      	ldr	r0, [r7, #4]
 801549c:	f7fe ff73 	bl	8014386 <USBD_SetClassConfig>
 80154a0:	4603      	mov	r3, r0
 80154a2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80154a4:	7bfb      	ldrb	r3, [r7, #15]
 80154a6:	2b00      	cmp	r3, #0
 80154a8:	d00f      	beq.n	80154ca <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80154aa:	6839      	ldr	r1, [r7, #0]
 80154ac:	6878      	ldr	r0, [r7, #4]
 80154ae:	f000 f918 	bl	80156e2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80154b2:	687b      	ldr	r3, [r7, #4]
 80154b4:	685b      	ldr	r3, [r3, #4]
 80154b6:	b2db      	uxtb	r3, r3
 80154b8:	4619      	mov	r1, r3
 80154ba:	6878      	ldr	r0, [r7, #4]
 80154bc:	f7fe ff7f 	bl	80143be <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	2202      	movs	r2, #2
 80154c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80154c8:	e014      	b.n	80154f4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80154ca:	6878      	ldr	r0, [r7, #4]
 80154cc:	f000 f9d4 	bl	8015878 <USBD_CtlSendStatus>
      break;
 80154d0:	e010      	b.n	80154f4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80154d2:	6878      	ldr	r0, [r7, #4]
 80154d4:	f000 f9d0 	bl	8015878 <USBD_CtlSendStatus>
      break;
 80154d8:	e00c      	b.n	80154f4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80154da:	6839      	ldr	r1, [r7, #0]
 80154dc:	6878      	ldr	r0, [r7, #4]
 80154de:	f000 f900 	bl	80156e2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80154e2:	4b07      	ldr	r3, [pc, #28]	; (8015500 <USBD_SetConfig+0x150>)
 80154e4:	781b      	ldrb	r3, [r3, #0]
 80154e6:	4619      	mov	r1, r3
 80154e8:	6878      	ldr	r0, [r7, #4]
 80154ea:	f7fe ff68 	bl	80143be <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80154ee:	2303      	movs	r3, #3
 80154f0:	73fb      	strb	r3, [r7, #15]
      break;
 80154f2:	bf00      	nop
  }

  return ret;
 80154f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80154f6:	4618      	mov	r0, r3
 80154f8:	3710      	adds	r7, #16
 80154fa:	46bd      	mov	sp, r7
 80154fc:	bd80      	pop	{r7, pc}
 80154fe:	bf00      	nop
 8015500:	200025c0 	.word	0x200025c0

08015504 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015504:	b580      	push	{r7, lr}
 8015506:	b082      	sub	sp, #8
 8015508:	af00      	add	r7, sp, #0
 801550a:	6078      	str	r0, [r7, #4]
 801550c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801550e:	683b      	ldr	r3, [r7, #0]
 8015510:	88db      	ldrh	r3, [r3, #6]
 8015512:	2b01      	cmp	r3, #1
 8015514:	d004      	beq.n	8015520 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8015516:	6839      	ldr	r1, [r7, #0]
 8015518:	6878      	ldr	r0, [r7, #4]
 801551a:	f000 f8e2 	bl	80156e2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801551e:	e023      	b.n	8015568 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015526:	b2db      	uxtb	r3, r3
 8015528:	2b02      	cmp	r3, #2
 801552a:	dc02      	bgt.n	8015532 <USBD_GetConfig+0x2e>
 801552c:	2b00      	cmp	r3, #0
 801552e:	dc03      	bgt.n	8015538 <USBD_GetConfig+0x34>
 8015530:	e015      	b.n	801555e <USBD_GetConfig+0x5a>
 8015532:	2b03      	cmp	r3, #3
 8015534:	d00b      	beq.n	801554e <USBD_GetConfig+0x4a>
 8015536:	e012      	b.n	801555e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	2200      	movs	r2, #0
 801553c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	3308      	adds	r3, #8
 8015542:	2201      	movs	r2, #1
 8015544:	4619      	mov	r1, r3
 8015546:	6878      	ldr	r0, [r7, #4]
 8015548:	f000 f93c 	bl	80157c4 <USBD_CtlSendData>
        break;
 801554c:	e00c      	b.n	8015568 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	3304      	adds	r3, #4
 8015552:	2201      	movs	r2, #1
 8015554:	4619      	mov	r1, r3
 8015556:	6878      	ldr	r0, [r7, #4]
 8015558:	f000 f934 	bl	80157c4 <USBD_CtlSendData>
        break;
 801555c:	e004      	b.n	8015568 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801555e:	6839      	ldr	r1, [r7, #0]
 8015560:	6878      	ldr	r0, [r7, #4]
 8015562:	f000 f8be 	bl	80156e2 <USBD_CtlError>
        break;
 8015566:	bf00      	nop
}
 8015568:	bf00      	nop
 801556a:	3708      	adds	r7, #8
 801556c:	46bd      	mov	sp, r7
 801556e:	bd80      	pop	{r7, pc}

08015570 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015570:	b580      	push	{r7, lr}
 8015572:	b082      	sub	sp, #8
 8015574:	af00      	add	r7, sp, #0
 8015576:	6078      	str	r0, [r7, #4]
 8015578:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015580:	b2db      	uxtb	r3, r3
 8015582:	3b01      	subs	r3, #1
 8015584:	2b02      	cmp	r3, #2
 8015586:	d81e      	bhi.n	80155c6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8015588:	683b      	ldr	r3, [r7, #0]
 801558a:	88db      	ldrh	r3, [r3, #6]
 801558c:	2b02      	cmp	r3, #2
 801558e:	d004      	beq.n	801559a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8015590:	6839      	ldr	r1, [r7, #0]
 8015592:	6878      	ldr	r0, [r7, #4]
 8015594:	f000 f8a5 	bl	80156e2 <USBD_CtlError>
        break;
 8015598:	e01a      	b.n	80155d0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	2201      	movs	r2, #1
 801559e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80155a6:	2b00      	cmp	r3, #0
 80155a8:	d005      	beq.n	80155b6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	68db      	ldr	r3, [r3, #12]
 80155ae:	f043 0202 	orr.w	r2, r3, #2
 80155b2:	687b      	ldr	r3, [r7, #4]
 80155b4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	330c      	adds	r3, #12
 80155ba:	2202      	movs	r2, #2
 80155bc:	4619      	mov	r1, r3
 80155be:	6878      	ldr	r0, [r7, #4]
 80155c0:	f000 f900 	bl	80157c4 <USBD_CtlSendData>
      break;
 80155c4:	e004      	b.n	80155d0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80155c6:	6839      	ldr	r1, [r7, #0]
 80155c8:	6878      	ldr	r0, [r7, #4]
 80155ca:	f000 f88a 	bl	80156e2 <USBD_CtlError>
      break;
 80155ce:	bf00      	nop
  }
}
 80155d0:	bf00      	nop
 80155d2:	3708      	adds	r7, #8
 80155d4:	46bd      	mov	sp, r7
 80155d6:	bd80      	pop	{r7, pc}

080155d8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80155d8:	b580      	push	{r7, lr}
 80155da:	b082      	sub	sp, #8
 80155dc:	af00      	add	r7, sp, #0
 80155de:	6078      	str	r0, [r7, #4]
 80155e0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80155e2:	683b      	ldr	r3, [r7, #0]
 80155e4:	885b      	ldrh	r3, [r3, #2]
 80155e6:	2b01      	cmp	r3, #1
 80155e8:	d107      	bne.n	80155fa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	2201      	movs	r2, #1
 80155ee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80155f2:	6878      	ldr	r0, [r7, #4]
 80155f4:	f000 f940 	bl	8015878 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80155f8:	e013      	b.n	8015622 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80155fa:	683b      	ldr	r3, [r7, #0]
 80155fc:	885b      	ldrh	r3, [r3, #2]
 80155fe:	2b02      	cmp	r3, #2
 8015600:	d10b      	bne.n	801561a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8015602:	683b      	ldr	r3, [r7, #0]
 8015604:	889b      	ldrh	r3, [r3, #4]
 8015606:	0a1b      	lsrs	r3, r3, #8
 8015608:	b29b      	uxth	r3, r3
 801560a:	b2da      	uxtb	r2, r3
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8015612:	6878      	ldr	r0, [r7, #4]
 8015614:	f000 f930 	bl	8015878 <USBD_CtlSendStatus>
}
 8015618:	e003      	b.n	8015622 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801561a:	6839      	ldr	r1, [r7, #0]
 801561c:	6878      	ldr	r0, [r7, #4]
 801561e:	f000 f860 	bl	80156e2 <USBD_CtlError>
}
 8015622:	bf00      	nop
 8015624:	3708      	adds	r7, #8
 8015626:	46bd      	mov	sp, r7
 8015628:	bd80      	pop	{r7, pc}

0801562a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801562a:	b580      	push	{r7, lr}
 801562c:	b082      	sub	sp, #8
 801562e:	af00      	add	r7, sp, #0
 8015630:	6078      	str	r0, [r7, #4]
 8015632:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801563a:	b2db      	uxtb	r3, r3
 801563c:	3b01      	subs	r3, #1
 801563e:	2b02      	cmp	r3, #2
 8015640:	d80b      	bhi.n	801565a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8015642:	683b      	ldr	r3, [r7, #0]
 8015644:	885b      	ldrh	r3, [r3, #2]
 8015646:	2b01      	cmp	r3, #1
 8015648:	d10c      	bne.n	8015664 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	2200      	movs	r2, #0
 801564e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8015652:	6878      	ldr	r0, [r7, #4]
 8015654:	f000 f910 	bl	8015878 <USBD_CtlSendStatus>
      }
      break;
 8015658:	e004      	b.n	8015664 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801565a:	6839      	ldr	r1, [r7, #0]
 801565c:	6878      	ldr	r0, [r7, #4]
 801565e:	f000 f840 	bl	80156e2 <USBD_CtlError>
      break;
 8015662:	e000      	b.n	8015666 <USBD_ClrFeature+0x3c>
      break;
 8015664:	bf00      	nop
  }
}
 8015666:	bf00      	nop
 8015668:	3708      	adds	r7, #8
 801566a:	46bd      	mov	sp, r7
 801566c:	bd80      	pop	{r7, pc}

0801566e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801566e:	b580      	push	{r7, lr}
 8015670:	b084      	sub	sp, #16
 8015672:	af00      	add	r7, sp, #0
 8015674:	6078      	str	r0, [r7, #4]
 8015676:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8015678:	683b      	ldr	r3, [r7, #0]
 801567a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801567c:	68fb      	ldr	r3, [r7, #12]
 801567e:	781a      	ldrb	r2, [r3, #0]
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8015684:	68fb      	ldr	r3, [r7, #12]
 8015686:	3301      	adds	r3, #1
 8015688:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801568a:	68fb      	ldr	r3, [r7, #12]
 801568c:	781a      	ldrb	r2, [r3, #0]
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8015692:	68fb      	ldr	r3, [r7, #12]
 8015694:	3301      	adds	r3, #1
 8015696:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8015698:	68f8      	ldr	r0, [r7, #12]
 801569a:	f7ff fa17 	bl	8014acc <SWAPBYTE>
 801569e:	4603      	mov	r3, r0
 80156a0:	461a      	mov	r2, r3
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80156a6:	68fb      	ldr	r3, [r7, #12]
 80156a8:	3301      	adds	r3, #1
 80156aa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80156ac:	68fb      	ldr	r3, [r7, #12]
 80156ae:	3301      	adds	r3, #1
 80156b0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80156b2:	68f8      	ldr	r0, [r7, #12]
 80156b4:	f7ff fa0a 	bl	8014acc <SWAPBYTE>
 80156b8:	4603      	mov	r3, r0
 80156ba:	461a      	mov	r2, r3
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80156c0:	68fb      	ldr	r3, [r7, #12]
 80156c2:	3301      	adds	r3, #1
 80156c4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80156c6:	68fb      	ldr	r3, [r7, #12]
 80156c8:	3301      	adds	r3, #1
 80156ca:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80156cc:	68f8      	ldr	r0, [r7, #12]
 80156ce:	f7ff f9fd 	bl	8014acc <SWAPBYTE>
 80156d2:	4603      	mov	r3, r0
 80156d4:	461a      	mov	r2, r3
 80156d6:	687b      	ldr	r3, [r7, #4]
 80156d8:	80da      	strh	r2, [r3, #6]
}
 80156da:	bf00      	nop
 80156dc:	3710      	adds	r7, #16
 80156de:	46bd      	mov	sp, r7
 80156e0:	bd80      	pop	{r7, pc}

080156e2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80156e2:	b580      	push	{r7, lr}
 80156e4:	b082      	sub	sp, #8
 80156e6:	af00      	add	r7, sp, #0
 80156e8:	6078      	str	r0, [r7, #4]
 80156ea:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80156ec:	2180      	movs	r1, #128	; 0x80
 80156ee:	6878      	ldr	r0, [r7, #4]
 80156f0:	f004 f994 	bl	8019a1c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80156f4:	2100      	movs	r1, #0
 80156f6:	6878      	ldr	r0, [r7, #4]
 80156f8:	f004 f990 	bl	8019a1c <USBD_LL_StallEP>
}
 80156fc:	bf00      	nop
 80156fe:	3708      	adds	r7, #8
 8015700:	46bd      	mov	sp, r7
 8015702:	bd80      	pop	{r7, pc}

08015704 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8015704:	b580      	push	{r7, lr}
 8015706:	b086      	sub	sp, #24
 8015708:	af00      	add	r7, sp, #0
 801570a:	60f8      	str	r0, [r7, #12]
 801570c:	60b9      	str	r1, [r7, #8]
 801570e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8015710:	2300      	movs	r3, #0
 8015712:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8015714:	68fb      	ldr	r3, [r7, #12]
 8015716:	2b00      	cmp	r3, #0
 8015718:	d036      	beq.n	8015788 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801571a:	68fb      	ldr	r3, [r7, #12]
 801571c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801571e:	6938      	ldr	r0, [r7, #16]
 8015720:	f000 f836 	bl	8015790 <USBD_GetLen>
 8015724:	4603      	mov	r3, r0
 8015726:	3301      	adds	r3, #1
 8015728:	b29b      	uxth	r3, r3
 801572a:	005b      	lsls	r3, r3, #1
 801572c:	b29a      	uxth	r2, r3
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8015732:	7dfb      	ldrb	r3, [r7, #23]
 8015734:	68ba      	ldr	r2, [r7, #8]
 8015736:	4413      	add	r3, r2
 8015738:	687a      	ldr	r2, [r7, #4]
 801573a:	7812      	ldrb	r2, [r2, #0]
 801573c:	701a      	strb	r2, [r3, #0]
  idx++;
 801573e:	7dfb      	ldrb	r3, [r7, #23]
 8015740:	3301      	adds	r3, #1
 8015742:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8015744:	7dfb      	ldrb	r3, [r7, #23]
 8015746:	68ba      	ldr	r2, [r7, #8]
 8015748:	4413      	add	r3, r2
 801574a:	2203      	movs	r2, #3
 801574c:	701a      	strb	r2, [r3, #0]
  idx++;
 801574e:	7dfb      	ldrb	r3, [r7, #23]
 8015750:	3301      	adds	r3, #1
 8015752:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8015754:	e013      	b.n	801577e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8015756:	7dfb      	ldrb	r3, [r7, #23]
 8015758:	68ba      	ldr	r2, [r7, #8]
 801575a:	4413      	add	r3, r2
 801575c:	693a      	ldr	r2, [r7, #16]
 801575e:	7812      	ldrb	r2, [r2, #0]
 8015760:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8015762:	693b      	ldr	r3, [r7, #16]
 8015764:	3301      	adds	r3, #1
 8015766:	613b      	str	r3, [r7, #16]
    idx++;
 8015768:	7dfb      	ldrb	r3, [r7, #23]
 801576a:	3301      	adds	r3, #1
 801576c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801576e:	7dfb      	ldrb	r3, [r7, #23]
 8015770:	68ba      	ldr	r2, [r7, #8]
 8015772:	4413      	add	r3, r2
 8015774:	2200      	movs	r2, #0
 8015776:	701a      	strb	r2, [r3, #0]
    idx++;
 8015778:	7dfb      	ldrb	r3, [r7, #23]
 801577a:	3301      	adds	r3, #1
 801577c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801577e:	693b      	ldr	r3, [r7, #16]
 8015780:	781b      	ldrb	r3, [r3, #0]
 8015782:	2b00      	cmp	r3, #0
 8015784:	d1e7      	bne.n	8015756 <USBD_GetString+0x52>
 8015786:	e000      	b.n	801578a <USBD_GetString+0x86>
    return;
 8015788:	bf00      	nop
  }
}
 801578a:	3718      	adds	r7, #24
 801578c:	46bd      	mov	sp, r7
 801578e:	bd80      	pop	{r7, pc}

08015790 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8015790:	b480      	push	{r7}
 8015792:	b085      	sub	sp, #20
 8015794:	af00      	add	r7, sp, #0
 8015796:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8015798:	2300      	movs	r3, #0
 801579a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80157a0:	e005      	b.n	80157ae <USBD_GetLen+0x1e>
  {
    len++;
 80157a2:	7bfb      	ldrb	r3, [r7, #15]
 80157a4:	3301      	adds	r3, #1
 80157a6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80157a8:	68bb      	ldr	r3, [r7, #8]
 80157aa:	3301      	adds	r3, #1
 80157ac:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80157ae:	68bb      	ldr	r3, [r7, #8]
 80157b0:	781b      	ldrb	r3, [r3, #0]
 80157b2:	2b00      	cmp	r3, #0
 80157b4:	d1f5      	bne.n	80157a2 <USBD_GetLen+0x12>
  }

  return len;
 80157b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80157b8:	4618      	mov	r0, r3
 80157ba:	3714      	adds	r7, #20
 80157bc:	46bd      	mov	sp, r7
 80157be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157c2:	4770      	bx	lr

080157c4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80157c4:	b580      	push	{r7, lr}
 80157c6:	b084      	sub	sp, #16
 80157c8:	af00      	add	r7, sp, #0
 80157ca:	60f8      	str	r0, [r7, #12]
 80157cc:	60b9      	str	r1, [r7, #8]
 80157ce:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80157d0:	68fb      	ldr	r3, [r7, #12]
 80157d2:	2202      	movs	r2, #2
 80157d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80157d8:	68fb      	ldr	r3, [r7, #12]
 80157da:	687a      	ldr	r2, [r7, #4]
 80157dc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80157de:	68fb      	ldr	r3, [r7, #12]
 80157e0:	687a      	ldr	r2, [r7, #4]
 80157e2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	68ba      	ldr	r2, [r7, #8]
 80157e8:	2100      	movs	r1, #0
 80157ea:	68f8      	ldr	r0, [r7, #12]
 80157ec:	f004 f99f 	bl	8019b2e <USBD_LL_Transmit>

  return USBD_OK;
 80157f0:	2300      	movs	r3, #0
}
 80157f2:	4618      	mov	r0, r3
 80157f4:	3710      	adds	r7, #16
 80157f6:	46bd      	mov	sp, r7
 80157f8:	bd80      	pop	{r7, pc}

080157fa <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80157fa:	b580      	push	{r7, lr}
 80157fc:	b084      	sub	sp, #16
 80157fe:	af00      	add	r7, sp, #0
 8015800:	60f8      	str	r0, [r7, #12]
 8015802:	60b9      	str	r1, [r7, #8]
 8015804:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	68ba      	ldr	r2, [r7, #8]
 801580a:	2100      	movs	r1, #0
 801580c:	68f8      	ldr	r0, [r7, #12]
 801580e:	f004 f98e 	bl	8019b2e <USBD_LL_Transmit>

  return USBD_OK;
 8015812:	2300      	movs	r3, #0
}
 8015814:	4618      	mov	r0, r3
 8015816:	3710      	adds	r7, #16
 8015818:	46bd      	mov	sp, r7
 801581a:	bd80      	pop	{r7, pc}

0801581c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801581c:	b580      	push	{r7, lr}
 801581e:	b084      	sub	sp, #16
 8015820:	af00      	add	r7, sp, #0
 8015822:	60f8      	str	r0, [r7, #12]
 8015824:	60b9      	str	r1, [r7, #8]
 8015826:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8015828:	68fb      	ldr	r3, [r7, #12]
 801582a:	2203      	movs	r2, #3
 801582c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8015830:	68fb      	ldr	r3, [r7, #12]
 8015832:	687a      	ldr	r2, [r7, #4]
 8015834:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8015838:	68fb      	ldr	r3, [r7, #12]
 801583a:	687a      	ldr	r2, [r7, #4]
 801583c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8015840:	687b      	ldr	r3, [r7, #4]
 8015842:	68ba      	ldr	r2, [r7, #8]
 8015844:	2100      	movs	r1, #0
 8015846:	68f8      	ldr	r0, [r7, #12]
 8015848:	f004 f992 	bl	8019b70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801584c:	2300      	movs	r3, #0
}
 801584e:	4618      	mov	r0, r3
 8015850:	3710      	adds	r7, #16
 8015852:	46bd      	mov	sp, r7
 8015854:	bd80      	pop	{r7, pc}

08015856 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8015856:	b580      	push	{r7, lr}
 8015858:	b084      	sub	sp, #16
 801585a:	af00      	add	r7, sp, #0
 801585c:	60f8      	str	r0, [r7, #12]
 801585e:	60b9      	str	r1, [r7, #8]
 8015860:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8015862:	687b      	ldr	r3, [r7, #4]
 8015864:	68ba      	ldr	r2, [r7, #8]
 8015866:	2100      	movs	r1, #0
 8015868:	68f8      	ldr	r0, [r7, #12]
 801586a:	f004 f981 	bl	8019b70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801586e:	2300      	movs	r3, #0
}
 8015870:	4618      	mov	r0, r3
 8015872:	3710      	adds	r7, #16
 8015874:	46bd      	mov	sp, r7
 8015876:	bd80      	pop	{r7, pc}

08015878 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8015878:	b580      	push	{r7, lr}
 801587a:	b082      	sub	sp, #8
 801587c:	af00      	add	r7, sp, #0
 801587e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	2204      	movs	r2, #4
 8015884:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8015888:	2300      	movs	r3, #0
 801588a:	2200      	movs	r2, #0
 801588c:	2100      	movs	r1, #0
 801588e:	6878      	ldr	r0, [r7, #4]
 8015890:	f004 f94d 	bl	8019b2e <USBD_LL_Transmit>

  return USBD_OK;
 8015894:	2300      	movs	r3, #0
}
 8015896:	4618      	mov	r0, r3
 8015898:	3708      	adds	r7, #8
 801589a:	46bd      	mov	sp, r7
 801589c:	bd80      	pop	{r7, pc}

0801589e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801589e:	b580      	push	{r7, lr}
 80158a0:	b082      	sub	sp, #8
 80158a2:	af00      	add	r7, sp, #0
 80158a4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80158a6:	687b      	ldr	r3, [r7, #4]
 80158a8:	2205      	movs	r2, #5
 80158aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80158ae:	2300      	movs	r3, #0
 80158b0:	2200      	movs	r2, #0
 80158b2:	2100      	movs	r1, #0
 80158b4:	6878      	ldr	r0, [r7, #4]
 80158b6:	f004 f95b 	bl	8019b70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80158ba:	2300      	movs	r3, #0
}
 80158bc:	4618      	mov	r0, r3
 80158be:	3708      	adds	r7, #8
 80158c0:	46bd      	mov	sp, r7
 80158c2:	bd80      	pop	{r7, pc}

080158c4 <look2_binlx>:
  bp1[], const real_T table[], const uint32_T maxIndex[], uint32_T stride);
static real_T look1_binlx(real_T u0, const real_T bp0[], const real_T table[],
  uint32_T maxIndex);
static real_T look2_binlx(real_T u0, real_T u1, const real_T bp0[], const real_T
  bp1[], const real_T table[], const uint32_T maxIndex[], uint32_T stride)
{
 80158c4:	b5b0      	push	{r4, r5, r7, lr}
 80158c6:	b098      	sub	sp, #96	; 0x60
 80158c8:	af00      	add	r7, sp, #0
 80158ca:	ed87 0b06 	vstr	d0, [r7, #24]
 80158ce:	ed87 1b04 	vstr	d1, [r7, #16]
 80158d2:	60f8      	str	r0, [r7, #12]
 80158d4:	60b9      	str	r1, [r7, #8]
 80158d6:	607a      	str	r2, [r7, #4]
 80158d8:	603b      	str	r3, [r7, #0]
     Extrapolation method: 'Linear'
     Use previous index: 'off'
     Use last breakpoint for index at or above upper limit: 'off'
     Remove protection against out-of-range input in generated code: 'off'
   */
  if (u0 <= bp0[0U]) {
 80158da:	68fb      	ldr	r3, [r7, #12]
 80158dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158e0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80158e4:	f7eb f924 	bl	8000b30 <__aeabi_dcmple>
 80158e8:	4603      	mov	r3, r0
 80158ea:	2b00      	cmp	r3, #0
 80158ec:	d020      	beq.n	8015930 <look2_binlx+0x6c>
    iLeft = 0U;
 80158ee:	2300      	movs	r3, #0
 80158f0:	653b      	str	r3, [r7, #80]	; 0x50
    frac = (u0 - bp0[0U]) / (bp0[1U] - bp0[0U]);
 80158f2:	68fb      	ldr	r3, [r7, #12]
 80158f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158f8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80158fc:	f7ea fce4 	bl	80002c8 <__aeabi_dsub>
 8015900:	4602      	mov	r2, r0
 8015902:	460b      	mov	r3, r1
 8015904:	4614      	mov	r4, r2
 8015906:	461d      	mov	r5, r3
 8015908:	68fb      	ldr	r3, [r7, #12]
 801590a:	3308      	adds	r3, #8
 801590c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015910:	68fb      	ldr	r3, [r7, #12]
 8015912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015916:	f7ea fcd7 	bl	80002c8 <__aeabi_dsub>
 801591a:	4602      	mov	r2, r0
 801591c:	460b      	mov	r3, r1
 801591e:	4620      	mov	r0, r4
 8015920:	4629      	mov	r1, r5
 8015922:	f7ea ffb3 	bl	800088c <__aeabi_ddiv>
 8015926:	4602      	mov	r2, r0
 8015928:	460b      	mov	r3, r1
 801592a:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 801592e:	e08e      	b.n	8015a4e <look2_binlx+0x18a>
  } else if (u0 < bp0[maxIndex[0U]]) {
 8015930:	683b      	ldr	r3, [r7, #0]
 8015932:	681b      	ldr	r3, [r3, #0]
 8015934:	00db      	lsls	r3, r3, #3
 8015936:	68fa      	ldr	r2, [r7, #12]
 8015938:	4413      	add	r3, r2
 801593a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801593e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8015942:	f7eb f8eb 	bl	8000b1c <__aeabi_dcmplt>
 8015946:	4603      	mov	r3, r0
 8015948:	2b00      	cmp	r3, #0
 801594a:	d04d      	beq.n	80159e8 <look2_binlx+0x124>
    /* Binary Search */
    bpIdx = maxIndex[0U] >> 1U;
 801594c:	683b      	ldr	r3, [r7, #0]
 801594e:	681b      	ldr	r3, [r3, #0]
 8015950:	085b      	lsrs	r3, r3, #1
 8015952:	657b      	str	r3, [r7, #84]	; 0x54
    iLeft = 0U;
 8015954:	2300      	movs	r3, #0
 8015956:	653b      	str	r3, [r7, #80]	; 0x50
    iRght = maxIndex[0U];
 8015958:	683b      	ldr	r3, [r7, #0]
 801595a:	681b      	ldr	r3, [r3, #0]
 801595c:	64fb      	str	r3, [r7, #76]	; 0x4c
    while (iRght - iLeft > 1U) {
 801595e:	e016      	b.n	801598e <look2_binlx+0xca>
      if (u0 < bp0[bpIdx]) {
 8015960:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015962:	00db      	lsls	r3, r3, #3
 8015964:	68fa      	ldr	r2, [r7, #12]
 8015966:	4413      	add	r3, r2
 8015968:	e9d3 2300 	ldrd	r2, r3, [r3]
 801596c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8015970:	f7eb f8d4 	bl	8000b1c <__aeabi_dcmplt>
 8015974:	4603      	mov	r3, r0
 8015976:	2b00      	cmp	r3, #0
 8015978:	d002      	beq.n	8015980 <look2_binlx+0xbc>
        iRght = bpIdx;
 801597a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801597c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801597e:	e001      	b.n	8015984 <look2_binlx+0xc0>
      } else {
        iLeft = bpIdx;
 8015980:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015982:	653b      	str	r3, [r7, #80]	; 0x50
      }

      bpIdx = (iRght + iLeft) >> 1U;
 8015984:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015986:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015988:	4413      	add	r3, r2
 801598a:	085b      	lsrs	r3, r3, #1
 801598c:	657b      	str	r3, [r7, #84]	; 0x54
    while (iRght - iLeft > 1U) {
 801598e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015990:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015992:	1ad3      	subs	r3, r2, r3
 8015994:	2b01      	cmp	r3, #1
 8015996:	d8e3      	bhi.n	8015960 <look2_binlx+0x9c>
    }

    frac = (u0 - bp0[iLeft]) / (bp0[iLeft + 1U] - bp0[iLeft]);
 8015998:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801599a:	00db      	lsls	r3, r3, #3
 801599c:	68fa      	ldr	r2, [r7, #12]
 801599e:	4413      	add	r3, r2
 80159a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159a4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80159a8:	f7ea fc8e 	bl	80002c8 <__aeabi_dsub>
 80159ac:	4602      	mov	r2, r0
 80159ae:	460b      	mov	r3, r1
 80159b0:	4614      	mov	r4, r2
 80159b2:	461d      	mov	r5, r3
 80159b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80159b6:	3301      	adds	r3, #1
 80159b8:	00db      	lsls	r3, r3, #3
 80159ba:	68fa      	ldr	r2, [r7, #12]
 80159bc:	4413      	add	r3, r2
 80159be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80159c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80159c4:	00db      	lsls	r3, r3, #3
 80159c6:	68fa      	ldr	r2, [r7, #12]
 80159c8:	4413      	add	r3, r2
 80159ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159ce:	f7ea fc7b 	bl	80002c8 <__aeabi_dsub>
 80159d2:	4602      	mov	r2, r0
 80159d4:	460b      	mov	r3, r1
 80159d6:	4620      	mov	r0, r4
 80159d8:	4629      	mov	r1, r5
 80159da:	f7ea ff57 	bl	800088c <__aeabi_ddiv>
 80159de:	4602      	mov	r2, r0
 80159e0:	460b      	mov	r3, r1
 80159e2:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 80159e6:	e032      	b.n	8015a4e <look2_binlx+0x18a>
  } else {
    iLeft = maxIndex[0U] - 1U;
 80159e8:	683b      	ldr	r3, [r7, #0]
 80159ea:	681b      	ldr	r3, [r3, #0]
 80159ec:	3b01      	subs	r3, #1
 80159ee:	653b      	str	r3, [r7, #80]	; 0x50
    frac = (u0 - bp0[maxIndex[0U] - 1U]) / (bp0[maxIndex[0U]] - bp0[maxIndex[0U]
 80159f0:	683b      	ldr	r3, [r7, #0]
 80159f2:	681b      	ldr	r3, [r3, #0]
 80159f4:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80159f8:	3b01      	subs	r3, #1
 80159fa:	00db      	lsls	r3, r3, #3
 80159fc:	68fa      	ldr	r2, [r7, #12]
 80159fe:	4413      	add	r3, r2
 8015a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a04:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8015a08:	f7ea fc5e 	bl	80002c8 <__aeabi_dsub>
 8015a0c:	4602      	mov	r2, r0
 8015a0e:	460b      	mov	r3, r1
 8015a10:	4614      	mov	r4, r2
 8015a12:	461d      	mov	r5, r3
 8015a14:	683b      	ldr	r3, [r7, #0]
 8015a16:	681b      	ldr	r3, [r3, #0]
 8015a18:	00db      	lsls	r3, r3, #3
 8015a1a:	68fa      	ldr	r2, [r7, #12]
 8015a1c:	4413      	add	r3, r2
 8015a1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015a22:	683b      	ldr	r3, [r7, #0]
 8015a24:	681b      	ldr	r3, [r3, #0]
 8015a26:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8015a2a:	3b01      	subs	r3, #1
 8015a2c:	00db      	lsls	r3, r3, #3
 8015a2e:	68fa      	ldr	r2, [r7, #12]
 8015a30:	4413      	add	r3, r2
 8015a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a36:	f7ea fc47 	bl	80002c8 <__aeabi_dsub>
 8015a3a:	4602      	mov	r2, r0
 8015a3c:	460b      	mov	r3, r1
 8015a3e:	4620      	mov	r0, r4
 8015a40:	4629      	mov	r1, r5
 8015a42:	f7ea ff23 	bl	800088c <__aeabi_ddiv>
 8015a46:	4602      	mov	r2, r0
 8015a48:	460b      	mov	r3, r1
 8015a4a:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
      - 1U]);
  }

  fractions[0U] = frac;
 8015a4e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8015a52:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  bpIndices[0U] = iLeft;
 8015a56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015a58:	623b      	str	r3, [r7, #32]
     Extrapolation method: 'Linear'
     Use previous index: 'off'
     Use last breakpoint for index at or above upper limit: 'off'
     Remove protection against out-of-range input in generated code: 'off'
   */
  if (u1 <= bp1[0U]) {
 8015a5a:	68bb      	ldr	r3, [r7, #8]
 8015a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a60:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8015a64:	f7eb f864 	bl	8000b30 <__aeabi_dcmple>
 8015a68:	4603      	mov	r3, r0
 8015a6a:	2b00      	cmp	r3, #0
 8015a6c:	d020      	beq.n	8015ab0 <look2_binlx+0x1ec>
    iLeft = 0U;
 8015a6e:	2300      	movs	r3, #0
 8015a70:	653b      	str	r3, [r7, #80]	; 0x50
    frac = (u1 - bp1[0U]) / (bp1[1U] - bp1[0U]);
 8015a72:	68bb      	ldr	r3, [r7, #8]
 8015a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a78:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8015a7c:	f7ea fc24 	bl	80002c8 <__aeabi_dsub>
 8015a80:	4602      	mov	r2, r0
 8015a82:	460b      	mov	r3, r1
 8015a84:	4614      	mov	r4, r2
 8015a86:	461d      	mov	r5, r3
 8015a88:	68bb      	ldr	r3, [r7, #8]
 8015a8a:	3308      	adds	r3, #8
 8015a8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015a90:	68bb      	ldr	r3, [r7, #8]
 8015a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a96:	f7ea fc17 	bl	80002c8 <__aeabi_dsub>
 8015a9a:	4602      	mov	r2, r0
 8015a9c:	460b      	mov	r3, r1
 8015a9e:	4620      	mov	r0, r4
 8015aa0:	4629      	mov	r1, r5
 8015aa2:	f7ea fef3 	bl	800088c <__aeabi_ddiv>
 8015aa6:	4602      	mov	r2, r0
 8015aa8:	460b      	mov	r3, r1
 8015aaa:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8015aae:	e095      	b.n	8015bdc <look2_binlx+0x318>
  } else if (u1 < bp1[maxIndex[1U]]) {
 8015ab0:	683b      	ldr	r3, [r7, #0]
 8015ab2:	3304      	adds	r3, #4
 8015ab4:	681b      	ldr	r3, [r3, #0]
 8015ab6:	00db      	lsls	r3, r3, #3
 8015ab8:	68ba      	ldr	r2, [r7, #8]
 8015aba:	4413      	add	r3, r2
 8015abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ac0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8015ac4:	f7eb f82a 	bl	8000b1c <__aeabi_dcmplt>
 8015ac8:	4603      	mov	r3, r0
 8015aca:	2b00      	cmp	r3, #0
 8015acc:	d04f      	beq.n	8015b6e <look2_binlx+0x2aa>
    /* Binary Search */
    bpIdx = maxIndex[1U] >> 1U;
 8015ace:	683b      	ldr	r3, [r7, #0]
 8015ad0:	3304      	adds	r3, #4
 8015ad2:	681b      	ldr	r3, [r3, #0]
 8015ad4:	085b      	lsrs	r3, r3, #1
 8015ad6:	657b      	str	r3, [r7, #84]	; 0x54
    iLeft = 0U;
 8015ad8:	2300      	movs	r3, #0
 8015ada:	653b      	str	r3, [r7, #80]	; 0x50
    iRght = maxIndex[1U];
 8015adc:	683b      	ldr	r3, [r7, #0]
 8015ade:	3304      	adds	r3, #4
 8015ae0:	681b      	ldr	r3, [r3, #0]
 8015ae2:	64fb      	str	r3, [r7, #76]	; 0x4c
    while (iRght - iLeft > 1U) {
 8015ae4:	e016      	b.n	8015b14 <look2_binlx+0x250>
      if (u1 < bp1[bpIdx]) {
 8015ae6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015ae8:	00db      	lsls	r3, r3, #3
 8015aea:	68ba      	ldr	r2, [r7, #8]
 8015aec:	4413      	add	r3, r2
 8015aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015af2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8015af6:	f7eb f811 	bl	8000b1c <__aeabi_dcmplt>
 8015afa:	4603      	mov	r3, r0
 8015afc:	2b00      	cmp	r3, #0
 8015afe:	d002      	beq.n	8015b06 <look2_binlx+0x242>
        iRght = bpIdx;
 8015b00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015b02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015b04:	e001      	b.n	8015b0a <look2_binlx+0x246>
      } else {
        iLeft = bpIdx;
 8015b06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015b08:	653b      	str	r3, [r7, #80]	; 0x50
      }

      bpIdx = (iRght + iLeft) >> 1U;
 8015b0a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015b0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015b0e:	4413      	add	r3, r2
 8015b10:	085b      	lsrs	r3, r3, #1
 8015b12:	657b      	str	r3, [r7, #84]	; 0x54
    while (iRght - iLeft > 1U) {
 8015b14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015b16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015b18:	1ad3      	subs	r3, r2, r3
 8015b1a:	2b01      	cmp	r3, #1
 8015b1c:	d8e3      	bhi.n	8015ae6 <look2_binlx+0x222>
    }

    frac = (u1 - bp1[iLeft]) / (bp1[iLeft + 1U] - bp1[iLeft]);
 8015b1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015b20:	00db      	lsls	r3, r3, #3
 8015b22:	68ba      	ldr	r2, [r7, #8]
 8015b24:	4413      	add	r3, r2
 8015b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b2a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8015b2e:	f7ea fbcb 	bl	80002c8 <__aeabi_dsub>
 8015b32:	4602      	mov	r2, r0
 8015b34:	460b      	mov	r3, r1
 8015b36:	4614      	mov	r4, r2
 8015b38:	461d      	mov	r5, r3
 8015b3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015b3c:	3301      	adds	r3, #1
 8015b3e:	00db      	lsls	r3, r3, #3
 8015b40:	68ba      	ldr	r2, [r7, #8]
 8015b42:	4413      	add	r3, r2
 8015b44:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015b48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015b4a:	00db      	lsls	r3, r3, #3
 8015b4c:	68ba      	ldr	r2, [r7, #8]
 8015b4e:	4413      	add	r3, r2
 8015b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b54:	f7ea fbb8 	bl	80002c8 <__aeabi_dsub>
 8015b58:	4602      	mov	r2, r0
 8015b5a:	460b      	mov	r3, r1
 8015b5c:	4620      	mov	r0, r4
 8015b5e:	4629      	mov	r1, r5
 8015b60:	f7ea fe94 	bl	800088c <__aeabi_ddiv>
 8015b64:	4602      	mov	r2, r0
 8015b66:	460b      	mov	r3, r1
 8015b68:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8015b6c:	e036      	b.n	8015bdc <look2_binlx+0x318>
  } else {
    iLeft = maxIndex[1U] - 1U;
 8015b6e:	683b      	ldr	r3, [r7, #0]
 8015b70:	3304      	adds	r3, #4
 8015b72:	681b      	ldr	r3, [r3, #0]
 8015b74:	3b01      	subs	r3, #1
 8015b76:	653b      	str	r3, [r7, #80]	; 0x50
    frac = (u1 - bp1[maxIndex[1U] - 1U]) / (bp1[maxIndex[1U]] - bp1[maxIndex[1U]
 8015b78:	683b      	ldr	r3, [r7, #0]
 8015b7a:	3304      	adds	r3, #4
 8015b7c:	681b      	ldr	r3, [r3, #0]
 8015b7e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8015b82:	3b01      	subs	r3, #1
 8015b84:	00db      	lsls	r3, r3, #3
 8015b86:	68ba      	ldr	r2, [r7, #8]
 8015b88:	4413      	add	r3, r2
 8015b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b8e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8015b92:	f7ea fb99 	bl	80002c8 <__aeabi_dsub>
 8015b96:	4602      	mov	r2, r0
 8015b98:	460b      	mov	r3, r1
 8015b9a:	4614      	mov	r4, r2
 8015b9c:	461d      	mov	r5, r3
 8015b9e:	683b      	ldr	r3, [r7, #0]
 8015ba0:	3304      	adds	r3, #4
 8015ba2:	681b      	ldr	r3, [r3, #0]
 8015ba4:	00db      	lsls	r3, r3, #3
 8015ba6:	68ba      	ldr	r2, [r7, #8]
 8015ba8:	4413      	add	r3, r2
 8015baa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015bae:	683b      	ldr	r3, [r7, #0]
 8015bb0:	3304      	adds	r3, #4
 8015bb2:	681b      	ldr	r3, [r3, #0]
 8015bb4:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8015bb8:	3b01      	subs	r3, #1
 8015bba:	00db      	lsls	r3, r3, #3
 8015bbc:	68ba      	ldr	r2, [r7, #8]
 8015bbe:	4413      	add	r3, r2
 8015bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bc4:	f7ea fb80 	bl	80002c8 <__aeabi_dsub>
 8015bc8:	4602      	mov	r2, r0
 8015bca:	460b      	mov	r3, r1
 8015bcc:	4620      	mov	r0, r4
 8015bce:	4629      	mov	r1, r5
 8015bd0:	f7ea fe5c 	bl	800088c <__aeabi_ddiv>
 8015bd4:	4602      	mov	r2, r0
 8015bd6:	460b      	mov	r3, r1
 8015bd8:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
  /* Column-major Interpolation 2-D
     Interpolation method: 'Linear point-slope'
     Use last breakpoint for index at or above upper limit: 'off'
     Overflow mode: 'wrapping'
   */
  bpIdx = iLeft * stride + bpIndices[0U];
 8015bdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015bde:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8015be0:	fb03 f202 	mul.w	r2, r3, r2
 8015be4:	6a3b      	ldr	r3, [r7, #32]
 8015be6:	4413      	add	r3, r2
 8015be8:	657b      	str	r3, [r7, #84]	; 0x54
  yL_0d0 = table[bpIdx];
 8015bea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015bec:	00db      	lsls	r3, r3, #3
 8015bee:	687a      	ldr	r2, [r7, #4]
 8015bf0:	4413      	add	r3, r2
 8015bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bf6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  yL_0d0 += (table[bpIdx + 1U] - yL_0d0) * fractions[0U];
 8015bfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015bfc:	3301      	adds	r3, #1
 8015bfe:	00db      	lsls	r3, r3, #3
 8015c00:	687a      	ldr	r2, [r7, #4]
 8015c02:	4413      	add	r3, r2
 8015c04:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015c08:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8015c0c:	f7ea fb5c 	bl	80002c8 <__aeabi_dsub>
 8015c10:	4602      	mov	r2, r0
 8015c12:	460b      	mov	r3, r1
 8015c14:	4610      	mov	r0, r2
 8015c16:	4619      	mov	r1, r3
 8015c18:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8015c1c:	f7ea fd0c 	bl	8000638 <__aeabi_dmul>
 8015c20:	4602      	mov	r2, r0
 8015c22:	460b      	mov	r3, r1
 8015c24:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8015c28:	f7ea fb50 	bl	80002cc <__adddf3>
 8015c2c:	4602      	mov	r2, r0
 8015c2e:	460b      	mov	r3, r1
 8015c30:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  bpIdx += stride;
 8015c34:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015c36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015c38:	4413      	add	r3, r2
 8015c3a:	657b      	str	r3, [r7, #84]	; 0x54
  yL_0d1 = table[bpIdx];
 8015c3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015c3e:	00db      	lsls	r3, r3, #3
 8015c40:	687a      	ldr	r2, [r7, #4]
 8015c42:	4413      	add	r3, r2
 8015c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c48:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  return (((table[bpIdx + 1U] - yL_0d1) * fractions[0U] + yL_0d1) - yL_0d0) *
 8015c4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015c4e:	3301      	adds	r3, #1
 8015c50:	00db      	lsls	r3, r3, #3
 8015c52:	687a      	ldr	r2, [r7, #4]
 8015c54:	4413      	add	r3, r2
 8015c56:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015c5a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8015c5e:	f7ea fb33 	bl	80002c8 <__aeabi_dsub>
 8015c62:	4602      	mov	r2, r0
 8015c64:	460b      	mov	r3, r1
 8015c66:	4610      	mov	r0, r2
 8015c68:	4619      	mov	r1, r3
 8015c6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8015c6e:	f7ea fce3 	bl	8000638 <__aeabi_dmul>
 8015c72:	4602      	mov	r2, r0
 8015c74:	460b      	mov	r3, r1
 8015c76:	4610      	mov	r0, r2
 8015c78:	4619      	mov	r1, r3
 8015c7a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8015c7e:	f7ea fb25 	bl	80002cc <__adddf3>
 8015c82:	4602      	mov	r2, r0
 8015c84:	460b      	mov	r3, r1
 8015c86:	4610      	mov	r0, r2
 8015c88:	4619      	mov	r1, r3
 8015c8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8015c8e:	f7ea fb1b 	bl	80002c8 <__aeabi_dsub>
 8015c92:	4602      	mov	r2, r0
 8015c94:	460b      	mov	r3, r1
 8015c96:	4610      	mov	r0, r2
 8015c98:	4619      	mov	r1, r3
 8015c9a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8015c9e:	f7ea fccb 	bl	8000638 <__aeabi_dmul>
 8015ca2:	4602      	mov	r2, r0
 8015ca4:	460b      	mov	r3, r1
 8015ca6:	4610      	mov	r0, r2
 8015ca8:	4619      	mov	r1, r3
    frac + yL_0d0;
 8015caa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8015cae:	f7ea fb0d 	bl	80002cc <__adddf3>
 8015cb2:	4602      	mov	r2, r0
 8015cb4:	460b      	mov	r3, r1
 8015cb6:	ec43 2b17 	vmov	d7, r2, r3
}
 8015cba:	eeb0 0a47 	vmov.f32	s0, s14
 8015cbe:	eef0 0a67 	vmov.f32	s1, s15
 8015cc2:	3760      	adds	r7, #96	; 0x60
 8015cc4:	46bd      	mov	sp, r7
 8015cc6:	bdb0      	pop	{r4, r5, r7, pc}

08015cc8 <look1_binlx>:

static real_T look1_binlx(real_T u0, const real_T bp0[], const real_T table[],
  uint32_T maxIndex)
{
 8015cc8:	b5b0      	push	{r4, r5, r7, lr}
 8015cca:	b08e      	sub	sp, #56	; 0x38
 8015ccc:	af00      	add	r7, sp, #0
 8015cce:	ed87 0b04 	vstr	d0, [r7, #16]
 8015cd2:	60f8      	str	r0, [r7, #12]
 8015cd4:	60b9      	str	r1, [r7, #8]
 8015cd6:	607a      	str	r2, [r7, #4]
     Extrapolation method: 'Linear'
     Use previous index: 'off'
     Use last breakpoint for index at or above upper limit: 'off'
     Remove protection against out-of-range input in generated code: 'off'
   */
  if (u0 <= bp0[0U]) {
 8015cd8:	68fb      	ldr	r3, [r7, #12]
 8015cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cde:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8015ce2:	f7ea ff25 	bl	8000b30 <__aeabi_dcmple>
 8015ce6:	4603      	mov	r3, r0
 8015ce8:	2b00      	cmp	r3, #0
 8015cea:	d020      	beq.n	8015d2e <look1_binlx+0x66>
    iLeft = 0U;
 8015cec:	2300      	movs	r3, #0
 8015cee:	62fb      	str	r3, [r7, #44]	; 0x2c
    frac = (u0 - bp0[0U]) / (bp0[1U] - bp0[0U]);
 8015cf0:	68fb      	ldr	r3, [r7, #12]
 8015cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cf6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8015cfa:	f7ea fae5 	bl	80002c8 <__aeabi_dsub>
 8015cfe:	4602      	mov	r2, r0
 8015d00:	460b      	mov	r3, r1
 8015d02:	4614      	mov	r4, r2
 8015d04:	461d      	mov	r5, r3
 8015d06:	68fb      	ldr	r3, [r7, #12]
 8015d08:	3308      	adds	r3, #8
 8015d0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015d0e:	68fb      	ldr	r3, [r7, #12]
 8015d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d14:	f7ea fad8 	bl	80002c8 <__aeabi_dsub>
 8015d18:	4602      	mov	r2, r0
 8015d1a:	460b      	mov	r3, r1
 8015d1c:	4620      	mov	r0, r4
 8015d1e:	4629      	mov	r1, r5
 8015d20:	f7ea fdb4 	bl	800088c <__aeabi_ddiv>
 8015d24:	4602      	mov	r2, r0
 8015d26:	460b      	mov	r3, r1
 8015d28:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8015d2c:	e087      	b.n	8015e3e <look1_binlx+0x176>
  } else if (u0 < bp0[maxIndex]) {
 8015d2e:	687b      	ldr	r3, [r7, #4]
 8015d30:	00db      	lsls	r3, r3, #3
 8015d32:	68fa      	ldr	r2, [r7, #12]
 8015d34:	4413      	add	r3, r2
 8015d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d3a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8015d3e:	f7ea feed 	bl	8000b1c <__aeabi_dcmplt>
 8015d42:	4603      	mov	r3, r0
 8015d44:	2b00      	cmp	r3, #0
 8015d46:	d04b      	beq.n	8015de0 <look1_binlx+0x118>
    uint32_T bpIdx;
    uint32_T iRght;

    /* Binary Search */
    bpIdx = maxIndex >> 1U;
 8015d48:	687b      	ldr	r3, [r7, #4]
 8015d4a:	085b      	lsrs	r3, r3, #1
 8015d4c:	62bb      	str	r3, [r7, #40]	; 0x28
    iLeft = 0U;
 8015d4e:	2300      	movs	r3, #0
 8015d50:	62fb      	str	r3, [r7, #44]	; 0x2c
    iRght = maxIndex;
 8015d52:	687b      	ldr	r3, [r7, #4]
 8015d54:	627b      	str	r3, [r7, #36]	; 0x24
    while (iRght - iLeft > 1U) {
 8015d56:	e016      	b.n	8015d86 <look1_binlx+0xbe>
      if (u0 < bp0[bpIdx]) {
 8015d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d5a:	00db      	lsls	r3, r3, #3
 8015d5c:	68fa      	ldr	r2, [r7, #12]
 8015d5e:	4413      	add	r3, r2
 8015d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d64:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8015d68:	f7ea fed8 	bl	8000b1c <__aeabi_dcmplt>
 8015d6c:	4603      	mov	r3, r0
 8015d6e:	2b00      	cmp	r3, #0
 8015d70:	d002      	beq.n	8015d78 <look1_binlx+0xb0>
        iRght = bpIdx;
 8015d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d74:	627b      	str	r3, [r7, #36]	; 0x24
 8015d76:	e001      	b.n	8015d7c <look1_binlx+0xb4>
      } else {
        iLeft = bpIdx;
 8015d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      bpIdx = (iRght + iLeft) >> 1U;
 8015d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d80:	4413      	add	r3, r2
 8015d82:	085b      	lsrs	r3, r3, #1
 8015d84:	62bb      	str	r3, [r7, #40]	; 0x28
    while (iRght - iLeft > 1U) {
 8015d86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d8a:	1ad3      	subs	r3, r2, r3
 8015d8c:	2b01      	cmp	r3, #1
 8015d8e:	d8e3      	bhi.n	8015d58 <look1_binlx+0x90>
    }

    frac = (u0 - bp0[iLeft]) / (bp0[iLeft + 1U] - bp0[iLeft]);
 8015d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d92:	00db      	lsls	r3, r3, #3
 8015d94:	68fa      	ldr	r2, [r7, #12]
 8015d96:	4413      	add	r3, r2
 8015d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d9c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8015da0:	f7ea fa92 	bl	80002c8 <__aeabi_dsub>
 8015da4:	4602      	mov	r2, r0
 8015da6:	460b      	mov	r3, r1
 8015da8:	4614      	mov	r4, r2
 8015daa:	461d      	mov	r5, r3
 8015dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015dae:	3301      	adds	r3, #1
 8015db0:	00db      	lsls	r3, r3, #3
 8015db2:	68fa      	ldr	r2, [r7, #12]
 8015db4:	4413      	add	r3, r2
 8015db6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015dbc:	00db      	lsls	r3, r3, #3
 8015dbe:	68fa      	ldr	r2, [r7, #12]
 8015dc0:	4413      	add	r3, r2
 8015dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015dc6:	f7ea fa7f 	bl	80002c8 <__aeabi_dsub>
 8015dca:	4602      	mov	r2, r0
 8015dcc:	460b      	mov	r3, r1
 8015dce:	4620      	mov	r0, r4
 8015dd0:	4629      	mov	r1, r5
 8015dd2:	f7ea fd5b 	bl	800088c <__aeabi_ddiv>
 8015dd6:	4602      	mov	r2, r0
 8015dd8:	460b      	mov	r3, r1
 8015dda:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8015dde:	e02e      	b.n	8015e3e <look1_binlx+0x176>
  } else {
    iLeft = maxIndex - 1U;
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	3b01      	subs	r3, #1
 8015de4:	62fb      	str	r3, [r7, #44]	; 0x2c
    frac = (u0 - bp0[maxIndex - 1U]) / (bp0[maxIndex] - bp0[maxIndex - 1U]);
 8015de6:	687b      	ldr	r3, [r7, #4]
 8015de8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8015dec:	3b01      	subs	r3, #1
 8015dee:	00db      	lsls	r3, r3, #3
 8015df0:	68fa      	ldr	r2, [r7, #12]
 8015df2:	4413      	add	r3, r2
 8015df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015df8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8015dfc:	f7ea fa64 	bl	80002c8 <__aeabi_dsub>
 8015e00:	4602      	mov	r2, r0
 8015e02:	460b      	mov	r3, r1
 8015e04:	4614      	mov	r4, r2
 8015e06:	461d      	mov	r5, r3
 8015e08:	687b      	ldr	r3, [r7, #4]
 8015e0a:	00db      	lsls	r3, r3, #3
 8015e0c:	68fa      	ldr	r2, [r7, #12]
 8015e0e:	4413      	add	r3, r2
 8015e10:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015e14:	687b      	ldr	r3, [r7, #4]
 8015e16:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8015e1a:	3b01      	subs	r3, #1
 8015e1c:	00db      	lsls	r3, r3, #3
 8015e1e:	68fa      	ldr	r2, [r7, #12]
 8015e20:	4413      	add	r3, r2
 8015e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e26:	f7ea fa4f 	bl	80002c8 <__aeabi_dsub>
 8015e2a:	4602      	mov	r2, r0
 8015e2c:	460b      	mov	r3, r1
 8015e2e:	4620      	mov	r0, r4
 8015e30:	4629      	mov	r1, r5
 8015e32:	f7ea fd2b 	bl	800088c <__aeabi_ddiv>
 8015e36:	4602      	mov	r2, r0
 8015e38:	460b      	mov	r3, r1
 8015e3a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  /* Column-major Interpolation 1-D
     Interpolation method: 'Linear point-slope'
     Use last breakpoint for index at or above upper limit: 'off'
     Overflow mode: 'wrapping'
   */
  yL_0d0 = table[iLeft];
 8015e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e40:	00db      	lsls	r3, r3, #3
 8015e42:	68ba      	ldr	r2, [r7, #8]
 8015e44:	4413      	add	r3, r2
 8015e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e4a:	e9c7 2306 	strd	r2, r3, [r7, #24]
  return (table[iLeft + 1U] - yL_0d0) * frac + yL_0d0;
 8015e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e50:	3301      	adds	r3, #1
 8015e52:	00db      	lsls	r3, r3, #3
 8015e54:	68ba      	ldr	r2, [r7, #8]
 8015e56:	4413      	add	r3, r2
 8015e58:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015e5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8015e60:	f7ea fa32 	bl	80002c8 <__aeabi_dsub>
 8015e64:	4602      	mov	r2, r0
 8015e66:	460b      	mov	r3, r1
 8015e68:	4610      	mov	r0, r2
 8015e6a:	4619      	mov	r1, r3
 8015e6c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8015e70:	f7ea fbe2 	bl	8000638 <__aeabi_dmul>
 8015e74:	4602      	mov	r2, r0
 8015e76:	460b      	mov	r3, r1
 8015e78:	4610      	mov	r0, r2
 8015e7a:	4619      	mov	r1, r3
 8015e7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8015e80:	f7ea fa24 	bl	80002cc <__adddf3>
 8015e84:	4602      	mov	r2, r0
 8015e86:	460b      	mov	r3, r1
 8015e88:	ec43 2b17 	vmov	d7, r2, r3
}
 8015e8c:	eeb0 0a47 	vmov.f32	s0, s14
 8015e90:	eef0 0a67 	vmov.f32	s1, s15
 8015e94:	3738      	adds	r7, #56	; 0x38
 8015e96:	46bd      	mov	sp, r7
 8015e98:	bdb0      	pop	{r4, r5, r7, pc}
 8015e9a:	0000      	movs	r0, r0
 8015e9c:	0000      	movs	r0, r0
	...

08015ea0 <BatterySOCEstimationV2_step>:

/* Model step function */
void BatterySOCEstimationV2_step(void)
{
 8015ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ea4:	b099      	sub	sp, #100	; 0x64
 8015ea6:	af02      	add	r7, sp, #8
  int32_T rtb_Sum1_n_tmp;

  /* Switch: '<Root>/Switch' incorporates:
   *  Inport: '<Root>/Temperature'
   */
  if (rtU.Temperature > 35.0) {
 8015ea8:	4b98      	ldr	r3, [pc, #608]	; (801610c <BatterySOCEstimationV2_step+0x26c>)
 8015eaa:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8015eae:	f04f 0200 	mov.w	r2, #0
 8015eb2:	4b97      	ldr	r3, [pc, #604]	; (8016110 <BatterySOCEstimationV2_step+0x270>)
 8015eb4:	f7ea fe50 	bl	8000b58 <__aeabi_dcmpgt>
 8015eb8:	4603      	mov	r3, r0
 8015eba:	2b00      	cmp	r3, #0
 8015ebc:	d00e      	beq.n	8015edc <BatterySOCEstimationV2_step+0x3c>
    /* Switch: '<Root>/Switch' incorporates:
     *  Inport: '<Root>/OCV'
     *  Lookup_n-D: '<Root>/45derece_SoC_OCV1'
     */
    Switch = look1_binlx(rtU.OCV, rtConstP.u5derece_SoC_OCV1_bp01Data,
 8015ebe:	4b93      	ldr	r3, [pc, #588]	; (801610c <BatterySOCEstimationV2_step+0x26c>)
 8015ec0:	ed93 7b06 	vldr	d7, [r3, #24]
 8015ec4:	22c8      	movs	r2, #200	; 0xc8
 8015ec6:	4993      	ldr	r1, [pc, #588]	; (8016114 <BatterySOCEstimationV2_step+0x274>)
 8015ec8:	4893      	ldr	r0, [pc, #588]	; (8016118 <BatterySOCEstimationV2_step+0x278>)
 8015eca:	eeb0 0a47 	vmov.f32	s0, s14
 8015ece:	eef0 0a67 	vmov.f32	s1, s15
 8015ed2:	f7ff fef9 	bl	8015cc8 <look1_binlx>
 8015ed6:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
 8015eda:	e00d      	b.n	8015ef8 <BatterySOCEstimationV2_step+0x58>
  } else {
    /* Switch: '<Root>/Switch' incorporates:
     *  Inport: '<Root>/OCV'
     *  Lookup_n-D: '<Root>/25derece_SoC_OCV1'
     */
    Switch = look1_binlx(rtU.OCV, rtConstP.u5derece_SoC_OCV1_bp01Data_b,
 8015edc:	4b8b      	ldr	r3, [pc, #556]	; (801610c <BatterySOCEstimationV2_step+0x26c>)
 8015ede:	ed93 7b06 	vldr	d7, [r3, #24]
 8015ee2:	22c8      	movs	r2, #200	; 0xc8
 8015ee4:	498b      	ldr	r1, [pc, #556]	; (8016114 <BatterySOCEstimationV2_step+0x274>)
 8015ee6:	488d      	ldr	r0, [pc, #564]	; (801611c <BatterySOCEstimationV2_step+0x27c>)
 8015ee8:	eeb0 0a47 	vmov.f32	s0, s14
 8015eec:	eef0 0a67 	vmov.f32	s1, s15
 8015ef0:	f7ff feea 	bl	8015cc8 <look1_binlx>
 8015ef4:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
   */
  /* Delay: '<S5>/Delay' incorporates:
   *  Constant: '<S5>/Constant1'
   *  ForEachSliceSelector generated from: '<S1>/InitialSOC'
   */
  if (rtDW.CoreSubsys[0].icLoad) {
 8015ef8:	4b89      	ldr	r3, [pc, #548]	; (8016120 <BatterySOCEstimationV2_step+0x280>)
 8015efa:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8015efe:	2b00      	cmp	r3, #0
 8015f00:	d012      	beq.n	8015f28 <BatterySOCEstimationV2_step+0x88>
    rtDW.CoreSubsys[0].Delay_DSTATE[0] = Switch;
 8015f02:	4987      	ldr	r1, [pc, #540]	; (8016120 <BatterySOCEstimationV2_step+0x280>)
 8015f04:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8015f08:	e9c1 2304 	strd	r2, r3, [r1, #16]
    rtDW.CoreSubsys[0].Delay_DSTATE[1] = 0.0;
 8015f0c:	4984      	ldr	r1, [pc, #528]	; (8016120 <BatterySOCEstimationV2_step+0x280>)
 8015f0e:	f04f 0200 	mov.w	r2, #0
 8015f12:	f04f 0300 	mov.w	r3, #0
 8015f16:	e9c1 2306 	strd	r2, r3, [r1, #24]
    rtDW.CoreSubsys[0].Delay_DSTATE[2] = 0.0;
 8015f1a:	4981      	ldr	r1, [pc, #516]	; (8016120 <BatterySOCEstimationV2_step+0x280>)
 8015f1c:	f04f 0200 	mov.w	r2, #0
 8015f20:	f04f 0300 	mov.w	r3, #0
 8015f24:	e9c1 2308 	strd	r2, r3, [r1, #32]
   *  Constant: '<S6>/Constant4'
   *  Delay: '<S5>/Delay'
   *  Inport: '<Root>/Temperature'
   *  Lookup_n-D: '<S6>/2-D Lookup Table OCV1'
   */
  rtDW.Product3_e[0] = look2_binlx(rtDW.CoreSubsys[0].Delay_DSTATE[0],
 8015f28:	4b7d      	ldr	r3, [pc, #500]	; (8016120 <BatterySOCEstimationV2_step+0x280>)
 8015f2a:	ed93 7b04 	vldr	d7, [r3, #16]
 8015f2e:	4b77      	ldr	r3, [pc, #476]	; (801610c <BatterySOCEstimationV2_step+0x26c>)
 8015f30:	ed93 6b04 	vldr	d6, [r3, #16]
 8015f34:	2365      	movs	r3, #101	; 0x65
 8015f36:	9300      	str	r3, [sp, #0]
 8015f38:	4b7a      	ldr	r3, [pc, #488]	; (8016124 <BatterySOCEstimationV2_step+0x284>)
 8015f3a:	4a7b      	ldr	r2, [pc, #492]	; (8016128 <BatterySOCEstimationV2_step+0x288>)
 8015f3c:	497b      	ldr	r1, [pc, #492]	; (801612c <BatterySOCEstimationV2_step+0x28c>)
 8015f3e:	487c      	ldr	r0, [pc, #496]	; (8016130 <BatterySOCEstimationV2_step+0x290>)
 8015f40:	eeb0 1a46 	vmov.f32	s2, s12
 8015f44:	eef0 1a66 	vmov.f32	s3, s13
 8015f48:	eeb0 0a47 	vmov.f32	s0, s14
 8015f4c:	eef0 0a67 	vmov.f32	s1, s15
 8015f50:	f7ff fcb8 	bl	80158c4 <look2_binlx>
 8015f54:	eeb0 7a40 	vmov.f32	s14, s0
 8015f58:	eef0 7a60 	vmov.f32	s15, s1
 8015f5c:	4b70      	ldr	r3, [pc, #448]	; (8016120 <BatterySOCEstimationV2_step+0x280>)
 8015f5e:	ed83 7b54 	vstr	d7, [r3, #336]	; 0x150
    rtU.Temperature, rtConstP.uDLookupTableOCV1_bp01Data,
    rtConstP.uDLookupTableOCV1_bp02Data, rtConstP.uDLookupTableOCV1_tableData,
    rtConstP.pooled4, 101U);
  rtDW.Product3_e[1] = -1.0;
 8015f62:	496f      	ldr	r1, [pc, #444]	; (8016120 <BatterySOCEstimationV2_step+0x280>)
 8015f64:	f04f 0200 	mov.w	r2, #0
 8015f68:	4b72      	ldr	r3, [pc, #456]	; (8016134 <BatterySOCEstimationV2_step+0x294>)
 8015f6a:	e9c1 2356 	strd	r2, r3, [r1, #344]	; 0x158
  rtDW.Product3_e[2] = -1.0;
 8015f6e:	496c      	ldr	r1, [pc, #432]	; (8016120 <BatterySOCEstimationV2_step+0x280>)
 8015f70:	f04f 0200 	mov.w	r2, #0
 8015f74:	4b6f      	ldr	r3, [pc, #444]	; (8016134 <BatterySOCEstimationV2_step+0x294>)
 8015f76:	e9c1 2358 	strd	r2, r3, [r1, #352]	; 0x160

  /* Lookup_n-D: '<S6>/2-D Lookup Table R2' incorporates:
   *  Delay: '<S5>/Delay'
   *  Inport: '<Root>/Temperature'
   */
  rtDW.uDLookupTableR2 = look2_binlx(rtDW.CoreSubsys[0].Delay_DSTATE[0],
 8015f7a:	4b69      	ldr	r3, [pc, #420]	; (8016120 <BatterySOCEstimationV2_step+0x280>)
 8015f7c:	ed93 7b04 	vldr	d7, [r3, #16]
 8015f80:	4b62      	ldr	r3, [pc, #392]	; (801610c <BatterySOCEstimationV2_step+0x26c>)
 8015f82:	ed93 6b04 	vldr	d6, [r3, #16]
 8015f86:	2365      	movs	r3, #101	; 0x65
 8015f88:	9300      	str	r3, [sp, #0]
 8015f8a:	4b66      	ldr	r3, [pc, #408]	; (8016124 <BatterySOCEstimationV2_step+0x284>)
 8015f8c:	4a6a      	ldr	r2, [pc, #424]	; (8016138 <BatterySOCEstimationV2_step+0x298>)
 8015f8e:	496b      	ldr	r1, [pc, #428]	; (801613c <BatterySOCEstimationV2_step+0x29c>)
 8015f90:	486b      	ldr	r0, [pc, #428]	; (8016140 <BatterySOCEstimationV2_step+0x2a0>)
 8015f92:	eeb0 1a46 	vmov.f32	s2, s12
 8015f96:	eef0 1a66 	vmov.f32	s3, s13
 8015f9a:	eeb0 0a47 	vmov.f32	s0, s14
 8015f9e:	eef0 0a67 	vmov.f32	s1, s15
 8015fa2:	f7ff fc8f 	bl	80158c4 <look2_binlx>
 8015fa6:	eeb0 7a40 	vmov.f32	s14, s0
 8015faa:	eef0 7a60 	vmov.f32	s15, s1
 8015fae:	4b5c      	ldr	r3, [pc, #368]	; (8016120 <BatterySOCEstimationV2_step+0x280>)
 8015fb0:	ed83 7b6c 	vstr	d7, [r3, #432]	; 0x1b0
   *  Product: '<S6>/Product3'
   *
   * About '<S6>/Math Function1':
   *  Operator: exp
   */
  rtDW.MathFunction1 = exp(-rtDW.CoreSubsys[0].Probe[0] / (rtDW.uDLookupTableR2 *
 8015fb4:	4b5a      	ldr	r3, [pc, #360]	; (8016120 <BatterySOCEstimationV2_step+0x280>)
 8015fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fba:	4690      	mov	r8, r2
 8015fbc:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8015fc0:	4b57      	ldr	r3, [pc, #348]	; (8016120 <BatterySOCEstimationV2_step+0x280>)
 8015fc2:	e9d3 456c 	ldrd	r4, r5, [r3, #432]	; 0x1b0
    look2_binlx(rtDW.CoreSubsys[0].Delay_DSTATE[0], rtU.Temperature,
 8015fc6:	4b56      	ldr	r3, [pc, #344]	; (8016120 <BatterySOCEstimationV2_step+0x280>)
 8015fc8:	ed93 7b04 	vldr	d7, [r3, #16]
 8015fcc:	4b4f      	ldr	r3, [pc, #316]	; (801610c <BatterySOCEstimationV2_step+0x26c>)
 8015fce:	ed93 6b04 	vldr	d6, [r3, #16]
 8015fd2:	2365      	movs	r3, #101	; 0x65
 8015fd4:	9300      	str	r3, [sp, #0]
 8015fd6:	4b53      	ldr	r3, [pc, #332]	; (8016124 <BatterySOCEstimationV2_step+0x284>)
 8015fd8:	4a5a      	ldr	r2, [pc, #360]	; (8016144 <BatterySOCEstimationV2_step+0x2a4>)
 8015fda:	495b      	ldr	r1, [pc, #364]	; (8016148 <BatterySOCEstimationV2_step+0x2a8>)
 8015fdc:	485b      	ldr	r0, [pc, #364]	; (801614c <BatterySOCEstimationV2_step+0x2ac>)
 8015fde:	eeb0 1a46 	vmov.f32	s2, s12
 8015fe2:	eef0 1a66 	vmov.f32	s3, s13
 8015fe6:	eeb0 0a47 	vmov.f32	s0, s14
 8015fea:	eef0 0a67 	vmov.f32	s1, s15
 8015fee:	f7ff fc69 	bl	80158c4 <look2_binlx>
 8015ff2:	ec53 2b10 	vmov	r2, r3, d0
  rtDW.MathFunction1 = exp(-rtDW.CoreSubsys[0].Probe[0] / (rtDW.uDLookupTableR2 *
 8015ff6:	4620      	mov	r0, r4
 8015ff8:	4629      	mov	r1, r5
 8015ffa:	f7ea fb1d 	bl	8000638 <__aeabi_dmul>
 8015ffe:	4602      	mov	r2, r0
 8016000:	460b      	mov	r3, r1
 8016002:	4640      	mov	r0, r8
 8016004:	4649      	mov	r1, r9
 8016006:	f7ea fc41 	bl	800088c <__aeabi_ddiv>
 801600a:	4602      	mov	r2, r0
 801600c:	460b      	mov	r3, r1
 801600e:	ec43 2b17 	vmov	d7, r2, r3
 8016012:	eeb0 0a47 	vmov.f32	s0, s14
 8016016:	eef0 0a67 	vmov.f32	s1, s15
 801601a:	f003 fe71 	bl	8019d00 <exp>
 801601e:	eeb0 7a40 	vmov.f32	s14, s0
 8016022:	eef0 7a60 	vmov.f32	s15, s1
 8016026:	4b3e      	ldr	r3, [pc, #248]	; (8016120 <BatterySOCEstimationV2_step+0x280>)
 8016028:	ed83 7b6e 	vstr	d7, [r3, #440]	; 0x1b8

  /* Lookup_n-D: '<S6>/2-D Lookup Table R1' incorporates:
   *  Delay: '<S5>/Delay'
   *  Inport: '<Root>/Temperature'
   */
  rtDW.uDLookupTableR1 = look2_binlx(rtDW.CoreSubsys[0].Delay_DSTATE[0],
 801602c:	4b3c      	ldr	r3, [pc, #240]	; (8016120 <BatterySOCEstimationV2_step+0x280>)
 801602e:	ed93 7b04 	vldr	d7, [r3, #16]
 8016032:	4b36      	ldr	r3, [pc, #216]	; (801610c <BatterySOCEstimationV2_step+0x26c>)
 8016034:	ed93 6b04 	vldr	d6, [r3, #16]
 8016038:	2365      	movs	r3, #101	; 0x65
 801603a:	9300      	str	r3, [sp, #0]
 801603c:	4b39      	ldr	r3, [pc, #228]	; (8016124 <BatterySOCEstimationV2_step+0x284>)
 801603e:	4a44      	ldr	r2, [pc, #272]	; (8016150 <BatterySOCEstimationV2_step+0x2b0>)
 8016040:	4944      	ldr	r1, [pc, #272]	; (8016154 <BatterySOCEstimationV2_step+0x2b4>)
 8016042:	4845      	ldr	r0, [pc, #276]	; (8016158 <BatterySOCEstimationV2_step+0x2b8>)
 8016044:	eeb0 1a46 	vmov.f32	s2, s12
 8016048:	eef0 1a66 	vmov.f32	s3, s13
 801604c:	eeb0 0a47 	vmov.f32	s0, s14
 8016050:	eef0 0a67 	vmov.f32	s1, s15
 8016054:	f7ff fc36 	bl	80158c4 <look2_binlx>
 8016058:	eeb0 7a40 	vmov.f32	s14, s0
 801605c:	eef0 7a60 	vmov.f32	s15, s1
 8016060:	4b2f      	ldr	r3, [pc, #188]	; (8016120 <BatterySOCEstimationV2_step+0x280>)
 8016062:	ed83 7b70 	vstr	d7, [r3, #448]	; 0x1c0
   *  Product: '<S6>/Product2'
   *
   * About '<S6>/Math Function':
   *  Operator: exp
   */
  rtDW.MathFunction = exp(-rtDW.CoreSubsys[0].Probe[0] / (rtDW.uDLookupTableR1 *
 8016066:	4b2e      	ldr	r3, [pc, #184]	; (8016120 <BatterySOCEstimationV2_step+0x280>)
 8016068:	e9d3 2300 	ldrd	r2, r3, [r3]
 801606c:	4692      	mov	sl, r2
 801606e:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8016072:	4b2b      	ldr	r3, [pc, #172]	; (8016120 <BatterySOCEstimationV2_step+0x280>)
 8016074:	e9d3 4570 	ldrd	r4, r5, [r3, #448]	; 0x1c0
    look2_binlx(rtDW.CoreSubsys[0].Delay_DSTATE[0], rtU.Temperature,
 8016078:	4b29      	ldr	r3, [pc, #164]	; (8016120 <BatterySOCEstimationV2_step+0x280>)
 801607a:	ed93 7b04 	vldr	d7, [r3, #16]
 801607e:	4b23      	ldr	r3, [pc, #140]	; (801610c <BatterySOCEstimationV2_step+0x26c>)
 8016080:	ed93 6b04 	vldr	d6, [r3, #16]
 8016084:	2365      	movs	r3, #101	; 0x65
 8016086:	9300      	str	r3, [sp, #0]
 8016088:	4b26      	ldr	r3, [pc, #152]	; (8016124 <BatterySOCEstimationV2_step+0x284>)
 801608a:	4a34      	ldr	r2, [pc, #208]	; (801615c <BatterySOCEstimationV2_step+0x2bc>)
 801608c:	4934      	ldr	r1, [pc, #208]	; (8016160 <BatterySOCEstimationV2_step+0x2c0>)
 801608e:	4835      	ldr	r0, [pc, #212]	; (8016164 <BatterySOCEstimationV2_step+0x2c4>)
 8016090:	eeb0 1a46 	vmov.f32	s2, s12
 8016094:	eef0 1a66 	vmov.f32	s3, s13
 8016098:	eeb0 0a47 	vmov.f32	s0, s14
 801609c:	eef0 0a67 	vmov.f32	s1, s15
 80160a0:	f7ff fc10 	bl	80158c4 <look2_binlx>
 80160a4:	ec53 2b10 	vmov	r2, r3, d0
  rtDW.MathFunction = exp(-rtDW.CoreSubsys[0].Probe[0] / (rtDW.uDLookupTableR1 *
 80160a8:	4620      	mov	r0, r4
 80160aa:	4629      	mov	r1, r5
 80160ac:	f7ea fac4 	bl	8000638 <__aeabi_dmul>
 80160b0:	4602      	mov	r2, r0
 80160b2:	460b      	mov	r3, r1
 80160b4:	4650      	mov	r0, sl
 80160b6:	4659      	mov	r1, fp
 80160b8:	f7ea fbe8 	bl	800088c <__aeabi_ddiv>
 80160bc:	4602      	mov	r2, r0
 80160be:	460b      	mov	r3, r1
 80160c0:	ec43 2b17 	vmov	d7, r2, r3
 80160c4:	eeb0 0a47 	vmov.f32	s0, s14
 80160c8:	eef0 0a67 	vmov.f32	s1, s15
 80160cc:	f003 fe18 	bl	8019d00 <exp>
 80160d0:	eeb0 7a40 	vmov.f32	s14, s0
 80160d4:	eef0 7a60 	vmov.f32	s15, s1
 80160d8:	4b11      	ldr	r3, [pc, #68]	; (8016120 <BatterySOCEstimationV2_step+0x280>)
 80160da:	ed83 7b72 	vstr	d7, [r3, #456]	; 0x1c8

  /* SignalConversion generated from: '<S6>/Assignment' incorporates:
   *  Assignment: '<S6>/Assignment1'
   *  Constant: '<S6>/Constant'
   */
  memcpy(&rtDW.Assignment1[0], &rtConstP.Constant_Value[0], 9U * sizeof(real_T));
 80160de:	2248      	movs	r2, #72	; 0x48
 80160e0:	4921      	ldr	r1, [pc, #132]	; (8016168 <BatterySOCEstimationV2_step+0x2c8>)
 80160e2:	4822      	ldr	r0, [pc, #136]	; (801616c <BatterySOCEstimationV2_step+0x2cc>)
 80160e4:	f005 fc1d 	bl	801b922 <memcpy>

  /* Assignment: '<S6>/Assignment' incorporates:
   *  Assignment: '<S6>/Assignment1'
   */
  rtDW.Assignment1[4] = rtDW.MathFunction;
 80160e8:	4b0d      	ldr	r3, [pc, #52]	; (8016120 <BatterySOCEstimationV2_step+0x280>)
 80160ea:	e9d3 2372 	ldrd	r2, r3, [r3, #456]	; 0x1c8
 80160ee:	490c      	ldr	r1, [pc, #48]	; (8016120 <BatterySOCEstimationV2_step+0x280>)
 80160f0:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98

  /* Assignment: '<S6>/Assignment1' */
  rtDW.Assignment1[8] = rtDW.MathFunction1;
 80160f4:	4b0a      	ldr	r3, [pc, #40]	; (8016120 <BatterySOCEstimationV2_step+0x280>)
 80160f6:	e9d3 236e 	ldrd	r2, r3, [r3, #440]	; 0x1b8
 80160fa:	4909      	ldr	r1, [pc, #36]	; (8016120 <BatterySOCEstimationV2_step+0x280>)
 80160fc:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
  /* Product: '<S7>/Product2' incorporates:
   *  Assignment: '<S6>/Assignment1'
   *  Math: '<S7>/Transpose'
   *  UnitDelay: '<S3>/Unit Delay - P'
   */
  for (i_0 = 0; i_0 < 3; i_0++) {
 8016100:	2300      	movs	r3, #0
 8016102:	643b      	str	r3, [r7, #64]	; 0x40
 8016104:	e098      	b.n	8016238 <BatterySOCEstimationV2_step+0x398>
    for (i = 0; i < 3; i++) {
 8016106:	2300      	movs	r3, #0
 8016108:	647b      	str	r3, [r7, #68]	; 0x44
 801610a:	e08f      	b.n	801622c <BatterySOCEstimationV2_step+0x38c>
 801610c:	200027a0 	.word	0x200027a0
 8016110:	40418000 	.word	0x40418000
 8016114:	080244a0 	.word	0x080244a0
 8016118:	08024ae8 	.word	0x08024ae8
 801611c:	08025130 	.word	0x08025130
 8016120:	200025c8 	.word	0x200025c8
 8016124:	08025778 	.word	0x08025778
 8016128:	08020158 	.word	0x08020158
 801612c:	08020ad0 	.word	0x08020ad0
 8016130:	080207a8 	.word	0x080207a8
 8016134:	bff00000 	.word	0xbff00000
 8016138:	08020ae0 	.word	0x08020ae0
 801613c:	08021458 	.word	0x08021458
 8016140:	08021130 	.word	0x08021130
 8016144:	08021468 	.word	0x08021468
 8016148:	08021de0 	.word	0x08021de0
 801614c:	08021ab8 	.word	0x08021ab8
 8016150:	08021df0 	.word	0x08021df0
 8016154:	08022768 	.word	0x08022768
 8016158:	08022440 	.word	0x08022440
 801615c:	08022778 	.word	0x08022778
 8016160:	080230f0 	.word	0x080230f0
 8016164:	08022dc8 	.word	0x08022dc8
 8016168:	08020110 	.word	0x08020110
 801616c:	20002640 	.word	0x20002640
      rtDW.dv[i_0 + 3 * i] = (rtDW.CoreSubsys[0].UnitDelayP_DSTATE[i_0 + 3] *
 8016170:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016172:	3303      	adds	r3, #3
 8016174:	4a4a      	ldr	r2, [pc, #296]	; (80162a0 <BatterySOCEstimationV2_step+0x400>)
 8016176:	3305      	adds	r3, #5
 8016178:	00db      	lsls	r3, r3, #3
 801617a:	4413      	add	r3, r2
 801617c:	e9d3 0100 	ldrd	r0, r1, [r3]
        rtDW.Assignment1[i + 3] + rtDW.CoreSubsys[0].UnitDelayP_DSTATE[i_0] *
 8016180:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016182:	3303      	adds	r3, #3
 8016184:	4a46      	ldr	r2, [pc, #280]	; (80162a0 <BatterySOCEstimationV2_step+0x400>)
 8016186:	330f      	adds	r3, #15
 8016188:	00db      	lsls	r3, r3, #3
 801618a:	4413      	add	r3, r2
 801618c:	e9d3 2300 	ldrd	r2, r3, [r3]
      rtDW.dv[i_0 + 3 * i] = (rtDW.CoreSubsys[0].UnitDelayP_DSTATE[i_0 + 3] *
 8016190:	f7ea fa52 	bl	8000638 <__aeabi_dmul>
 8016194:	4602      	mov	r2, r0
 8016196:	460b      	mov	r3, r1
 8016198:	4614      	mov	r4, r2
 801619a:	461d      	mov	r5, r3
        rtDW.Assignment1[i + 3] + rtDW.CoreSubsys[0].UnitDelayP_DSTATE[i_0] *
 801619c:	4a40      	ldr	r2, [pc, #256]	; (80162a0 <BatterySOCEstimationV2_step+0x400>)
 801619e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80161a0:	3305      	adds	r3, #5
 80161a2:	00db      	lsls	r3, r3, #3
 80161a4:	4413      	add	r3, r2
 80161a6:	e9d3 0100 	ldrd	r0, r1, [r3]
        rtDW.Assignment1[i]) + rtDW.CoreSubsys[0].UnitDelayP_DSTATE[i_0 + 6] *
 80161aa:	4a3d      	ldr	r2, [pc, #244]	; (80162a0 <BatterySOCEstimationV2_step+0x400>)
 80161ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80161ae:	330f      	adds	r3, #15
 80161b0:	00db      	lsls	r3, r3, #3
 80161b2:	4413      	add	r3, r2
 80161b4:	e9d3 2300 	ldrd	r2, r3, [r3]
        rtDW.Assignment1[i + 3] + rtDW.CoreSubsys[0].UnitDelayP_DSTATE[i_0] *
 80161b8:	f7ea fa3e 	bl	8000638 <__aeabi_dmul>
 80161bc:	4602      	mov	r2, r0
 80161be:	460b      	mov	r3, r1
 80161c0:	4620      	mov	r0, r4
 80161c2:	4629      	mov	r1, r5
 80161c4:	f7ea f882 	bl	80002cc <__adddf3>
 80161c8:	4602      	mov	r2, r0
 80161ca:	460b      	mov	r3, r1
 80161cc:	4690      	mov	r8, r2
 80161ce:	4699      	mov	r9, r3
        rtDW.Assignment1[i]) + rtDW.CoreSubsys[0].UnitDelayP_DSTATE[i_0 + 6] *
 80161d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80161d2:	3306      	adds	r3, #6
 80161d4:	4a32      	ldr	r2, [pc, #200]	; (80162a0 <BatterySOCEstimationV2_step+0x400>)
 80161d6:	3305      	adds	r3, #5
 80161d8:	00db      	lsls	r3, r3, #3
 80161da:	4413      	add	r3, r2
 80161dc:	e9d3 0100 	ldrd	r0, r1, [r3]
        rtDW.Assignment1[i + 6];
 80161e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80161e2:	3306      	adds	r3, #6
 80161e4:	4a2e      	ldr	r2, [pc, #184]	; (80162a0 <BatterySOCEstimationV2_step+0x400>)
 80161e6:	330f      	adds	r3, #15
 80161e8:	00db      	lsls	r3, r3, #3
 80161ea:	4413      	add	r3, r2
 80161ec:	e9d3 2300 	ldrd	r2, r3, [r3]
        rtDW.Assignment1[i]) + rtDW.CoreSubsys[0].UnitDelayP_DSTATE[i_0 + 6] *
 80161f0:	f7ea fa22 	bl	8000638 <__aeabi_dmul>
 80161f4:	4602      	mov	r2, r0
 80161f6:	460b      	mov	r3, r1
 80161f8:	4610      	mov	r0, r2
 80161fa:	4619      	mov	r1, r3
      rtDW.dv[i_0 + 3 * i] = (rtDW.CoreSubsys[0].UnitDelayP_DSTATE[i_0 + 3] *
 80161fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80161fe:	4613      	mov	r3, r2
 8016200:	005b      	lsls	r3, r3, #1
 8016202:	441a      	add	r2, r3
 8016204:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016206:	18d4      	adds	r4, r2, r3
        rtDW.Assignment1[i]) + rtDW.CoreSubsys[0].UnitDelayP_DSTATE[i_0 + 6] *
 8016208:	4602      	mov	r2, r0
 801620a:	460b      	mov	r3, r1
 801620c:	4640      	mov	r0, r8
 801620e:	4649      	mov	r1, r9
 8016210:	f7ea f85c 	bl	80002cc <__adddf3>
 8016214:	4602      	mov	r2, r0
 8016216:	460b      	mov	r3, r1
      rtDW.dv[i_0 + 3 * i] = (rtDW.CoreSubsys[0].UnitDelayP_DSTATE[i_0 + 3] *
 8016218:	4821      	ldr	r0, [pc, #132]	; (80162a0 <BatterySOCEstimationV2_step+0x400>)
 801621a:	f104 0121 	add.w	r1, r4, #33	; 0x21
 801621e:	00c9      	lsls	r1, r1, #3
 8016220:	4401      	add	r1, r0
 8016222:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < 3; i++) {
 8016226:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016228:	3301      	adds	r3, #1
 801622a:	647b      	str	r3, [r7, #68]	; 0x44
 801622c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801622e:	2b02      	cmp	r3, #2
 8016230:	dd9e      	ble.n	8016170 <BatterySOCEstimationV2_step+0x2d0>
  for (i_0 = 0; i_0 < 3; i_0++) {
 8016232:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016234:	3301      	adds	r3, #1
 8016236:	643b      	str	r3, [r7, #64]	; 0x40
 8016238:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801623a:	2b02      	cmp	r3, #2
 801623c:	f77f af63 	ble.w	8016106 <BatterySOCEstimationV2_step+0x266>
    }
  }

  /* Product: '<S4>/Product2' */
  rtDW.uDLookupTableOCV = 0.0;
 8016240:	4917      	ldr	r1, [pc, #92]	; (80162a0 <BatterySOCEstimationV2_step+0x400>)
 8016242:	f04f 0200 	mov.w	r2, #0
 8016246:	f04f 0300 	mov.w	r3, #0
 801624a:	e9c1 2374 	strd	r2, r3, [r1, #464]	; 0x1d0
  for (i_0 = 0; i_0 < 3; i_0++) {
 801624e:	2300      	movs	r3, #0
 8016250:	643b      	str	r3, [r7, #64]	; 0x40
 8016252:	e0c9      	b.n	80163e8 <BatterySOCEstimationV2_step+0x548>
    /* Sum: '<S7>/Sum1' incorporates:
     *  Assignment: '<S6>/Assignment1'
     *  Product: '<S7>/Product2'
     */
    Switch = rtDW.Assignment1[i_0 + 3];
 8016254:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016256:	3303      	adds	r3, #3
 8016258:	4a11      	ldr	r2, [pc, #68]	; (80162a0 <BatterySOCEstimationV2_step+0x400>)
 801625a:	330f      	adds	r3, #15
 801625c:	00db      	lsls	r3, r3, #3
 801625e:	4413      	add	r3, r2
 8016260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016264:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    rtb_Assignment1_0 = rtDW.Assignment1[i_0];
 8016268:	4a0d      	ldr	r2, [pc, #52]	; (80162a0 <BatterySOCEstimationV2_step+0x400>)
 801626a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801626c:	330f      	adds	r3, #15
 801626e:	00db      	lsls	r3, r3, #3
 8016270:	4413      	add	r3, r2
 8016272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016276:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    rtb_Assignment1_1 = rtDW.Assignment1[i_0 + 6];
 801627a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801627c:	3306      	adds	r3, #6
 801627e:	4a08      	ldr	r2, [pc, #32]	; (80162a0 <BatterySOCEstimationV2_step+0x400>)
 8016280:	330f      	adds	r3, #15
 8016282:	00db      	lsls	r3, r3, #3
 8016284:	4413      	add	r3, r2
 8016286:	e9d3 2300 	ldrd	r2, r3, [r3]
 801628a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Product: '<S4>/Product2' */
    rtb_TmpSignalConversionAtProd_0 = 0.0;
 801628e:	f04f 0200 	mov.w	r2, #0
 8016292:	f04f 0300 	mov.w	r3, #0
 8016296:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    for (i = 0; i < 3; i++) {
 801629a:	2300      	movs	r3, #0
 801629c:	647b      	str	r3, [r7, #68]	; 0x44
 801629e:	e07b      	b.n	8016398 <BatterySOCEstimationV2_step+0x4f8>
 80162a0:	200025c8 	.word	0x200025c8
      /* Sum: '<S7>/Sum1' incorporates:
       *  Constant: '<S7>/Constant'
       *  Product: '<S7>/Product2'
       */
      rtb_Sum1_n_tmp = 3 * i + i_0;
 80162a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80162a6:	4613      	mov	r3, r2
 80162a8:	005b      	lsls	r3, r3, #1
 80162aa:	4413      	add	r3, r2
 80162ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80162ae:	4413      	add	r3, r2
 80162b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      rtb_Sum1_n_0 = ((rtDW.dv[3 * i + 1] * Switch + rtDW.dv[3 * i] *
 80162b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80162b4:	4613      	mov	r3, r2
 80162b6:	005b      	lsls	r3, r3, #1
 80162b8:	4413      	add	r3, r2
 80162ba:	3301      	adds	r3, #1
 80162bc:	4ab2      	ldr	r2, [pc, #712]	; (8016588 <BatterySOCEstimationV2_step+0x6e8>)
 80162be:	3321      	adds	r3, #33	; 0x21
 80162c0:	00db      	lsls	r3, r3, #3
 80162c2:	4413      	add	r3, r2
 80162c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80162c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80162cc:	f7ea f9b4 	bl	8000638 <__aeabi_dmul>
 80162d0:	4602      	mov	r2, r0
 80162d2:	460b      	mov	r3, r1
 80162d4:	4614      	mov	r4, r2
 80162d6:	461d      	mov	r5, r3
 80162d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80162da:	4613      	mov	r3, r2
 80162dc:	005b      	lsls	r3, r3, #1
 80162de:	4413      	add	r3, r2
 80162e0:	4aa9      	ldr	r2, [pc, #676]	; (8016588 <BatterySOCEstimationV2_step+0x6e8>)
 80162e2:	3321      	adds	r3, #33	; 0x21
 80162e4:	00db      	lsls	r3, r3, #3
 80162e6:	4413      	add	r3, r2
 80162e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80162ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80162f0:	f7ea f9a2 	bl	8000638 <__aeabi_dmul>
 80162f4:	4602      	mov	r2, r0
 80162f6:	460b      	mov	r3, r1
 80162f8:	4620      	mov	r0, r4
 80162fa:	4629      	mov	r1, r5
 80162fc:	f7e9 ffe6 	bl	80002cc <__adddf3>
 8016300:	4602      	mov	r2, r0
 8016302:	460b      	mov	r3, r1
 8016304:	4614      	mov	r4, r2
 8016306:	461d      	mov	r5, r3
                       rtb_Assignment1_0) + rtDW.dv[3 * i + 2] *
 8016308:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801630a:	4613      	mov	r3, r2
 801630c:	005b      	lsls	r3, r3, #1
 801630e:	4413      	add	r3, r2
 8016310:	3302      	adds	r3, #2
 8016312:	4a9d      	ldr	r2, [pc, #628]	; (8016588 <BatterySOCEstimationV2_step+0x6e8>)
 8016314:	3321      	adds	r3, #33	; 0x21
 8016316:	00db      	lsls	r3, r3, #3
 8016318:	4413      	add	r3, r2
 801631a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801631e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8016322:	f7ea f989 	bl	8000638 <__aeabi_dmul>
 8016326:	4602      	mov	r2, r0
 8016328:	460b      	mov	r3, r1
 801632a:	4620      	mov	r0, r4
 801632c:	4629      	mov	r1, r5
 801632e:	f7e9 ffcd 	bl	80002cc <__adddf3>
 8016332:	4602      	mov	r2, r0
 8016334:	460b      	mov	r3, r1
 8016336:	4610      	mov	r0, r2
 8016338:	4619      	mov	r1, r3
                      rtb_Assignment1_1) +
        rtConstP.Constant_Value_j[rtb_Sum1_n_tmp];
 801633a:	4a94      	ldr	r2, [pc, #592]	; (801658c <BatterySOCEstimationV2_step+0x6ec>)
 801633c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801633e:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 8016342:	00db      	lsls	r3, r3, #3
 8016344:	4413      	add	r3, r2
 8016346:	e9d3 2300 	ldrd	r2, r3, [r3]
      rtb_Sum1_n_0 = ((rtDW.dv[3 * i + 1] * Switch + rtDW.dv[3 * i] *
 801634a:	f7e9 ffbf 	bl	80002cc <__adddf3>
 801634e:	4602      	mov	r2, r0
 8016350:	460b      	mov	r3, r1
 8016352:	e9c7 2308 	strd	r2, r3, [r7, #32]
      rtDW.Sum1_n[rtb_Sum1_n_tmp] = rtb_Sum1_n_0;
 8016356:	4a8c      	ldr	r2, [pc, #560]	; (8016588 <BatterySOCEstimationV2_step+0x6e8>)
 8016358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801635a:	3318      	adds	r3, #24
 801635c:	00db      	lsls	r3, r3, #3
 801635e:	18d1      	adds	r1, r2, r3
 8016360:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8016364:	e9c1 2300 	strd	r2, r3, [r1]
      /* Product: '<S4>/Product2' incorporates:
       *  Math: '<S4>/Transpose'
       *  Product: '<S4>/Product'
       *  Product: '<S4>/Product3'
       */
      rtb_TmpSignalConversionAtProd_0 += rtb_Sum1_n_0 * rtDW.Product3_e[i];
 8016368:	4a87      	ldr	r2, [pc, #540]	; (8016588 <BatterySOCEstimationV2_step+0x6e8>)
 801636a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801636c:	332a      	adds	r3, #42	; 0x2a
 801636e:	00db      	lsls	r3, r3, #3
 8016370:	4413      	add	r3, r2
 8016372:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016376:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801637a:	f7ea f95d 	bl	8000638 <__aeabi_dmul>
 801637e:	4602      	mov	r2, r0
 8016380:	460b      	mov	r3, r1
 8016382:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8016386:	f7e9 ffa1 	bl	80002cc <__adddf3>
 801638a:	4602      	mov	r2, r0
 801638c:	460b      	mov	r3, r1
 801638e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    for (i = 0; i < 3; i++) {
 8016392:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016394:	3301      	adds	r3, #1
 8016396:	647b      	str	r3, [r7, #68]	; 0x44
 8016398:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801639a:	2b02      	cmp	r3, #2
 801639c:	dd82      	ble.n	80162a4 <BatterySOCEstimationV2_step+0x404>
    }

    /* Product: '<S4>/Product2' incorporates:
     *  Product: '<S4>/Product3'
     */
    rtDW.TmpSignalConversionAtProduc[i_0] = rtb_TmpSignalConversionAtProd_0;
 801639e:	4a7a      	ldr	r2, [pc, #488]	; (8016588 <BatterySOCEstimationV2_step+0x6e8>)
 80163a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80163a2:	332d      	adds	r3, #45	; 0x2d
 80163a4:	00db      	lsls	r3, r3, #3
 80163a6:	18d1      	adds	r1, r2, r3
 80163a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80163ac:	e9c1 2300 	strd	r2, r3, [r1]
    rtDW.uDLookupTableOCV += rtDW.Product3_e[i_0] *
 80163b0:	4b75      	ldr	r3, [pc, #468]	; (8016588 <BatterySOCEstimationV2_step+0x6e8>)
 80163b2:	e9d3 4574 	ldrd	r4, r5, [r3, #464]	; 0x1d0
 80163b6:	4a74      	ldr	r2, [pc, #464]	; (8016588 <BatterySOCEstimationV2_step+0x6e8>)
 80163b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80163ba:	332a      	adds	r3, #42	; 0x2a
 80163bc:	00db      	lsls	r3, r3, #3
 80163be:	4413      	add	r3, r2
 80163c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80163c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80163c8:	f7ea f936 	bl	8000638 <__aeabi_dmul>
 80163cc:	4602      	mov	r2, r0
 80163ce:	460b      	mov	r3, r1
 80163d0:	4620      	mov	r0, r4
 80163d2:	4629      	mov	r1, r5
 80163d4:	f7e9 ff7a 	bl	80002cc <__adddf3>
 80163d8:	4602      	mov	r2, r0
 80163da:	460b      	mov	r3, r1
 80163dc:	496a      	ldr	r1, [pc, #424]	; (8016588 <BatterySOCEstimationV2_step+0x6e8>)
 80163de:	e9c1 2374 	strd	r2, r3, [r1, #464]	; 0x1d0
  for (i_0 = 0; i_0 < 3; i_0++) {
 80163e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80163e4:	3301      	adds	r3, #1
 80163e6:	643b      	str	r3, [r7, #64]	; 0x40
 80163e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80163ea:	2b02      	cmp	r3, #2
 80163ec:	f77f af32 	ble.w	8016254 <BatterySOCEstimationV2_step+0x3b4>
   *  Constant: '<S4>/Constant'
   *  Constant: '<S4>/Constant1'
   *  Product: '<S4>/Product2'
   *  Sum: '<S4>/Sum2'
   */
  rtDW.uDLookupTableOCV = 1.0 / (rtDW.uDLookupTableOCV + 0.7);
 80163f0:	4b65      	ldr	r3, [pc, #404]	; (8016588 <BatterySOCEstimationV2_step+0x6e8>)
 80163f2:	e9d3 0174 	ldrd	r0, r1, [r3, #464]	; 0x1d0
 80163f6:	a360      	add	r3, pc, #384	; (adr r3, 8016578 <BatterySOCEstimationV2_step+0x6d8>)
 80163f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163fc:	f7e9 ff66 	bl	80002cc <__adddf3>
 8016400:	4602      	mov	r2, r0
 8016402:	460b      	mov	r3, r1
 8016404:	f04f 0000 	mov.w	r0, #0
 8016408:	4961      	ldr	r1, [pc, #388]	; (8016590 <BatterySOCEstimationV2_step+0x6f0>)
 801640a:	f7ea fa3f 	bl	800088c <__aeabi_ddiv>
 801640e:	4602      	mov	r2, r0
 8016410:	460b      	mov	r3, r1
 8016412:	495d      	ldr	r1, [pc, #372]	; (8016588 <BatterySOCEstimationV2_step+0x6e8>)
 8016414:	e9c1 2374 	strd	r2, r3, [r1, #464]	; 0x1d0

  /* Product: '<S4>/Product1' incorporates:
   *  Product: '<S4>/Product'
   *  SignalConversion generated from: '<S7>/Product1'
   */
  rtDW.TmpSignalConversionAtProduc[0] *= rtDW.uDLookupTableOCV;
 8016418:	4b5b      	ldr	r3, [pc, #364]	; (8016588 <BatterySOCEstimationV2_step+0x6e8>)
 801641a:	e9d3 015a 	ldrd	r0, r1, [r3, #360]	; 0x168
 801641e:	4b5a      	ldr	r3, [pc, #360]	; (8016588 <BatterySOCEstimationV2_step+0x6e8>)
 8016420:	e9d3 2374 	ldrd	r2, r3, [r3, #464]	; 0x1d0
 8016424:	f7ea f908 	bl	8000638 <__aeabi_dmul>
 8016428:	4602      	mov	r2, r0
 801642a:	460b      	mov	r3, r1
 801642c:	4956      	ldr	r1, [pc, #344]	; (8016588 <BatterySOCEstimationV2_step+0x6e8>)
 801642e:	e9c1 235a 	strd	r2, r3, [r1, #360]	; 0x168
  rtDW.TmpSignalConversionAtProduc[1] *= rtDW.uDLookupTableOCV;
 8016432:	4b55      	ldr	r3, [pc, #340]	; (8016588 <BatterySOCEstimationV2_step+0x6e8>)
 8016434:	e9d3 015c 	ldrd	r0, r1, [r3, #368]	; 0x170
 8016438:	4b53      	ldr	r3, [pc, #332]	; (8016588 <BatterySOCEstimationV2_step+0x6e8>)
 801643a:	e9d3 2374 	ldrd	r2, r3, [r3, #464]	; 0x1d0
 801643e:	f7ea f8fb 	bl	8000638 <__aeabi_dmul>
 8016442:	4602      	mov	r2, r0
 8016444:	460b      	mov	r3, r1
 8016446:	4950      	ldr	r1, [pc, #320]	; (8016588 <BatterySOCEstimationV2_step+0x6e8>)
 8016448:	e9c1 235c 	strd	r2, r3, [r1, #368]	; 0x170
  rtDW.TmpSignalConversionAtProduc[2] *= rtDW.uDLookupTableOCV;
 801644c:	4b4e      	ldr	r3, [pc, #312]	; (8016588 <BatterySOCEstimationV2_step+0x6e8>)
 801644e:	e9d3 015e 	ldrd	r0, r1, [r3, #376]	; 0x178
 8016452:	4b4d      	ldr	r3, [pc, #308]	; (8016588 <BatterySOCEstimationV2_step+0x6e8>)
 8016454:	e9d3 2374 	ldrd	r2, r3, [r3, #464]	; 0x1d0
 8016458:	f7ea f8ee 	bl	8000638 <__aeabi_dmul>
 801645c:	4602      	mov	r2, r0
 801645e:	460b      	mov	r3, r1
 8016460:	4949      	ldr	r1, [pc, #292]	; (8016588 <BatterySOCEstimationV2_step+0x6e8>)
 8016462:	e9c1 235e 	strd	r2, r3, [r1, #376]	; 0x178
   *  Lookup_n-D: '<S6>/2-D Lookup Table R0'
   *  Product: '<S6>/Product6'
   *  Sum: '<S6>/Sum of Elements'
   *  Sum: '<S6>/Sum2'
   */
  rtDW.uDLookupTableOCV = rtU.TerminalVoltage - ((look2_binlx(rtDW.CoreSubsys[0]
 8016466:	4b4b      	ldr	r3, [pc, #300]	; (8016594 <BatterySOCEstimationV2_step+0x6f4>)
 8016468:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 801646c:	4b46      	ldr	r3, [pc, #280]	; (8016588 <BatterySOCEstimationV2_step+0x6e8>)
 801646e:	ed93 7b04 	vldr	d7, [r3, #16]
 8016472:	4b48      	ldr	r3, [pc, #288]	; (8016594 <BatterySOCEstimationV2_step+0x6f4>)
 8016474:	ed93 6b04 	vldr	d6, [r3, #16]
 8016478:	2365      	movs	r3, #101	; 0x65
 801647a:	9300      	str	r3, [sp, #0]
 801647c:	4b46      	ldr	r3, [pc, #280]	; (8016598 <BatterySOCEstimationV2_step+0x6f8>)
 801647e:	4a47      	ldr	r2, [pc, #284]	; (801659c <BatterySOCEstimationV2_step+0x6fc>)
 8016480:	4947      	ldr	r1, [pc, #284]	; (80165a0 <BatterySOCEstimationV2_step+0x700>)
 8016482:	4848      	ldr	r0, [pc, #288]	; (80165a4 <BatterySOCEstimationV2_step+0x704>)
 8016484:	eeb0 1a46 	vmov.f32	s2, s12
 8016488:	eef0 1a66 	vmov.f32	s3, s13
 801648c:	eeb0 0a47 	vmov.f32	s0, s14
 8016490:	eef0 0a67 	vmov.f32	s1, s15
 8016494:	f7ff fa16 	bl	80158c4 <look2_binlx>
 8016498:	ec55 4b10 	vmov	r4, r5, d0
    .Delay_DSTATE[0], rtU.Temperature, rtConstP.uDLookupTableOCV_bp01Data,
    rtConstP.uDLookupTableOCV_bp02Data, rtConstP.uDLookupTableOCV_tableData,
    rtConstP.pooled4, 101U) - look2_binlx(rtDW.CoreSubsys[0].Delay_DSTATE[0],
 801649c:	4b3a      	ldr	r3, [pc, #232]	; (8016588 <BatterySOCEstimationV2_step+0x6e8>)
 801649e:	ed93 7b04 	vldr	d7, [r3, #16]
 80164a2:	4b3c      	ldr	r3, [pc, #240]	; (8016594 <BatterySOCEstimationV2_step+0x6f4>)
 80164a4:	ed93 6b04 	vldr	d6, [r3, #16]
 80164a8:	2365      	movs	r3, #101	; 0x65
 80164aa:	9300      	str	r3, [sp, #0]
 80164ac:	4b3a      	ldr	r3, [pc, #232]	; (8016598 <BatterySOCEstimationV2_step+0x6f8>)
 80164ae:	4a3e      	ldr	r2, [pc, #248]	; (80165a8 <BatterySOCEstimationV2_step+0x708>)
 80164b0:	493e      	ldr	r1, [pc, #248]	; (80165ac <BatterySOCEstimationV2_step+0x70c>)
 80164b2:	483f      	ldr	r0, [pc, #252]	; (80165b0 <BatterySOCEstimationV2_step+0x710>)
 80164b4:	eeb0 1a46 	vmov.f32	s2, s12
 80164b8:	eef0 1a66 	vmov.f32	s3, s13
 80164bc:	eeb0 0a47 	vmov.f32	s0, s14
 80164c0:	eef0 0a67 	vmov.f32	s1, s15
 80164c4:	f7ff f9fe 	bl	80158c4 <look2_binlx>
 80164c8:	ec51 0b10 	vmov	r0, r1, d0
    rtU.Temperature, rtConstP.uDLookupTableR0_bp01Data,
    rtConstP.uDLookupTableR0_bp02Data, rtConstP.uDLookupTableR0_tableData,
    rtConstP.pooled4, 101U) * -rtU.current) - (rtDW.CoreSubsys[0].Delay_DSTATE[1]
 80164cc:	4b31      	ldr	r3, [pc, #196]	; (8016594 <BatterySOCEstimationV2_step+0x6f4>)
 80164ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164d2:	f7ea f8b1 	bl	8000638 <__aeabi_dmul>
 80164d6:	4602      	mov	r2, r0
 80164d8:	460b      	mov	r3, r1
    rtConstP.pooled4, 101U) - look2_binlx(rtDW.CoreSubsys[0].Delay_DSTATE[0],
 80164da:	4620      	mov	r0, r4
 80164dc:	4629      	mov	r1, r5
 80164de:	f7e9 fef5 	bl	80002cc <__adddf3>
 80164e2:	4602      	mov	r2, r0
 80164e4:	460b      	mov	r3, r1
 80164e6:	4614      	mov	r4, r2
 80164e8:	461d      	mov	r5, r3
    rtConstP.pooled4, 101U) * -rtU.current) - (rtDW.CoreSubsys[0].Delay_DSTATE[1]
 80164ea:	4b27      	ldr	r3, [pc, #156]	; (8016588 <BatterySOCEstimationV2_step+0x6e8>)
 80164ec:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
    + rtDW.CoreSubsys[0].Delay_DSTATE[2]));
 80164f0:	4b25      	ldr	r3, [pc, #148]	; (8016588 <BatterySOCEstimationV2_step+0x6e8>)
 80164f2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80164f6:	f7e9 fee9 	bl	80002cc <__adddf3>
 80164fa:	4602      	mov	r2, r0
 80164fc:	460b      	mov	r3, r1
    rtConstP.pooled4, 101U) * -rtU.current) - (rtDW.CoreSubsys[0].Delay_DSTATE[1]
 80164fe:	4620      	mov	r0, r4
 8016500:	4629      	mov	r1, r5
 8016502:	f7e9 fee1 	bl	80002c8 <__aeabi_dsub>
 8016506:	4602      	mov	r2, r0
 8016508:	460b      	mov	r3, r1
  rtDW.uDLookupTableOCV = rtU.TerminalVoltage - ((look2_binlx(rtDW.CoreSubsys[0]
 801650a:	4640      	mov	r0, r8
 801650c:	4649      	mov	r1, r9
 801650e:	f7e9 fedb 	bl	80002c8 <__aeabi_dsub>
 8016512:	4602      	mov	r2, r0
 8016514:	460b      	mov	r3, r1
 8016516:	491c      	ldr	r1, [pc, #112]	; (8016588 <BatterySOCEstimationV2_step+0x6e8>)
 8016518:	e9c1 2374 	strd	r2, r3, [r1, #464]	; 0x1d0
   *  Product: '<S6>/Product5'
   *  Product: '<S7>/Product1'
   *  Sum: '<S6>/Sum'
   *  Sum: '<S6>/Sum1'
   */
  rtDW.dv1[0] = 6.6137566137566142E-5 * -rtDW.CoreSubsys[0].Probe[0] *
 801651c:	4b1a      	ldr	r3, [pc, #104]	; (8016588 <BatterySOCEstimationV2_step+0x6e8>)
 801651e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016522:	61ba      	str	r2, [r7, #24]
 8016524:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8016528:	61fb      	str	r3, [r7, #28]
 801652a:	a315      	add	r3, pc, #84	; (adr r3, 8016580 <BatterySOCEstimationV2_step+0x6e0>)
 801652c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016530:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8016534:	f7ea f880 	bl	8000638 <__aeabi_dmul>
 8016538:	4602      	mov	r2, r0
 801653a:	460b      	mov	r3, r1
 801653c:	4610      	mov	r0, r2
 801653e:	4619      	mov	r1, r3
    -rtU.current;
 8016540:	4b14      	ldr	r3, [pc, #80]	; (8016594 <BatterySOCEstimationV2_step+0x6f4>)
 8016542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016546:	613a      	str	r2, [r7, #16]
 8016548:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801654c:	617b      	str	r3, [r7, #20]
  rtDW.dv1[0] = 6.6137566137566142E-5 * -rtDW.CoreSubsys[0].Probe[0] *
 801654e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8016552:	f7ea f871 	bl	8000638 <__aeabi_dmul>
 8016556:	4602      	mov	r2, r0
 8016558:	460b      	mov	r3, r1
 801655a:	490b      	ldr	r1, [pc, #44]	; (8016588 <BatterySOCEstimationV2_step+0x6e8>)
 801655c:	e9c1 2366 	strd	r2, r3, [r1, #408]	; 0x198
  rtDW.dv1[1] = (1.0 - rtDW.MathFunction) * rtDW.uDLookupTableR1 * -rtU.current;
 8016560:	4b09      	ldr	r3, [pc, #36]	; (8016588 <BatterySOCEstimationV2_step+0x6e8>)
 8016562:	e9d3 2372 	ldrd	r2, r3, [r3, #456]	; 0x1c8
 8016566:	f04f 0000 	mov.w	r0, #0
 801656a:	4909      	ldr	r1, [pc, #36]	; (8016590 <BatterySOCEstimationV2_step+0x6f0>)
 801656c:	f7e9 feac 	bl	80002c8 <__aeabi_dsub>
 8016570:	e020      	b.n	80165b4 <BatterySOCEstimationV2_step+0x714>
 8016572:	bf00      	nop
 8016574:	f3af 8000 	nop.w
 8016578:	66666666 	.word	0x66666666
 801657c:	3fe66666 	.word	0x3fe66666
 8016580:	bc011567 	.word	0xbc011567
 8016584:	3f11566a 	.word	0x3f11566a
 8016588:	200025c8 	.word	0x200025c8
 801658c:	080200c8 	.word	0x080200c8
 8016590:	3ff00000 	.word	0x3ff00000
 8016594:	200027a0 	.word	0x200027a0
 8016598:	08025778 	.word	0x08025778
 801659c:	08023190 	.word	0x08023190
 80165a0:	08023b08 	.word	0x08023b08
 80165a4:	080237e0 	.word	0x080237e0
 80165a8:	08023b18 	.word	0x08023b18
 80165ac:	08024490 	.word	0x08024490
 80165b0:	08024168 	.word	0x08024168
 80165b4:	4602      	mov	r2, r0
 80165b6:	460b      	mov	r3, r1
 80165b8:	4610      	mov	r0, r2
 80165ba:	4619      	mov	r1, r3
 80165bc:	4ba9      	ldr	r3, [pc, #676]	; (8016864 <BatterySOCEstimationV2_step+0x9c4>)
 80165be:	e9d3 2370 	ldrd	r2, r3, [r3, #448]	; 0x1c0
 80165c2:	f7ea f839 	bl	8000638 <__aeabi_dmul>
 80165c6:	4602      	mov	r2, r0
 80165c8:	460b      	mov	r3, r1
 80165ca:	4610      	mov	r0, r2
 80165cc:	4619      	mov	r1, r3
 80165ce:	4ba6      	ldr	r3, [pc, #664]	; (8016868 <BatterySOCEstimationV2_step+0x9c8>)
 80165d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165d4:	60ba      	str	r2, [r7, #8]
 80165d6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80165da:	60fb      	str	r3, [r7, #12]
 80165dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80165e0:	f7ea f82a 	bl	8000638 <__aeabi_dmul>
 80165e4:	4602      	mov	r2, r0
 80165e6:	460b      	mov	r3, r1
 80165e8:	499e      	ldr	r1, [pc, #632]	; (8016864 <BatterySOCEstimationV2_step+0x9c4>)
 80165ea:	e9c1 2368 	strd	r2, r3, [r1, #416]	; 0x1a0
  rtDW.dv1[2] = (1.0 - rtDW.MathFunction1) * rtDW.uDLookupTableR2 * -rtU.current;
 80165ee:	4b9d      	ldr	r3, [pc, #628]	; (8016864 <BatterySOCEstimationV2_step+0x9c4>)
 80165f0:	e9d3 236e 	ldrd	r2, r3, [r3, #440]	; 0x1b8
 80165f4:	f04f 0000 	mov.w	r0, #0
 80165f8:	499c      	ldr	r1, [pc, #624]	; (801686c <BatterySOCEstimationV2_step+0x9cc>)
 80165fa:	f7e9 fe65 	bl	80002c8 <__aeabi_dsub>
 80165fe:	4602      	mov	r2, r0
 8016600:	460b      	mov	r3, r1
 8016602:	4610      	mov	r0, r2
 8016604:	4619      	mov	r1, r3
 8016606:	4b97      	ldr	r3, [pc, #604]	; (8016864 <BatterySOCEstimationV2_step+0x9c4>)
 8016608:	e9d3 236c 	ldrd	r2, r3, [r3, #432]	; 0x1b0
 801660c:	f7ea f814 	bl	8000638 <__aeabi_dmul>
 8016610:	4602      	mov	r2, r0
 8016612:	460b      	mov	r3, r1
 8016614:	4610      	mov	r0, r2
 8016616:	4619      	mov	r1, r3
 8016618:	4b93      	ldr	r3, [pc, #588]	; (8016868 <BatterySOCEstimationV2_step+0x9c8>)
 801661a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801661e:	603a      	str	r2, [r7, #0]
 8016620:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8016624:	607b      	str	r3, [r7, #4]
 8016626:	e9d7 2300 	ldrd	r2, r3, [r7]
 801662a:	f7ea f805 	bl	8000638 <__aeabi_dmul>
 801662e:	4602      	mov	r2, r0
 8016630:	460b      	mov	r3, r1
 8016632:	498c      	ldr	r1, [pc, #560]	; (8016864 <BatterySOCEstimationV2_step+0x9c4>)
 8016634:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
  for (i_0 = 0; i_0 < 3; i_0++) {
 8016638:	2300      	movs	r3, #0
 801663a:	643b      	str	r3, [r7, #64]	; 0x40
 801663c:	e068      	b.n	8016710 <BatterySOCEstimationV2_step+0x870>
     *  Product: '<S4>/Product3'
     *  Product: '<S7>/Product'
     *  SignalConversion generated from: '<S7>/Product1'
     *  Sum: '<S7>/Sum'
     */
    rtDW.Sum_i[i_0] = (((rtDW.Assignment1[i_0 + 3] * rtDW.CoreSubsys[0].
 801663e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016640:	3303      	adds	r3, #3
 8016642:	4a88      	ldr	r2, [pc, #544]	; (8016864 <BatterySOCEstimationV2_step+0x9c4>)
 8016644:	330f      	adds	r3, #15
 8016646:	00db      	lsls	r3, r3, #3
 8016648:	4413      	add	r3, r2
 801664a:	e9d3 0100 	ldrd	r0, r1, [r3]
                         Delay_DSTATE[1] + rtDW.Assignment1[i_0] *
 801664e:	4b85      	ldr	r3, [pc, #532]	; (8016864 <BatterySOCEstimationV2_step+0x9c4>)
 8016650:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
    rtDW.Sum_i[i_0] = (((rtDW.Assignment1[i_0 + 3] * rtDW.CoreSubsys[0].
 8016654:	f7e9 fff0 	bl	8000638 <__aeabi_dmul>
 8016658:	4602      	mov	r2, r0
 801665a:	460b      	mov	r3, r1
 801665c:	4614      	mov	r4, r2
 801665e:	461d      	mov	r5, r3
                         Delay_DSTATE[1] + rtDW.Assignment1[i_0] *
 8016660:	4a80      	ldr	r2, [pc, #512]	; (8016864 <BatterySOCEstimationV2_step+0x9c4>)
 8016662:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016664:	330f      	adds	r3, #15
 8016666:	00db      	lsls	r3, r3, #3
 8016668:	4413      	add	r3, r2
 801666a:	e9d3 0100 	ldrd	r0, r1, [r3]
                         rtDW.CoreSubsys[0].Delay_DSTATE[0]) +
 801666e:	4b7d      	ldr	r3, [pc, #500]	; (8016864 <BatterySOCEstimationV2_step+0x9c4>)
 8016670:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
                         Delay_DSTATE[1] + rtDW.Assignment1[i_0] *
 8016674:	f7e9 ffe0 	bl	8000638 <__aeabi_dmul>
 8016678:	4602      	mov	r2, r0
 801667a:	460b      	mov	r3, r1
 801667c:	4620      	mov	r0, r4
 801667e:	4629      	mov	r1, r5
 8016680:	f7e9 fe24 	bl	80002cc <__adddf3>
 8016684:	4602      	mov	r2, r0
 8016686:	460b      	mov	r3, r1
 8016688:	4614      	mov	r4, r2
 801668a:	461d      	mov	r5, r3
                        rtDW.Assignment1[i_0 + 6] * rtDW.CoreSubsys[0].
 801668c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801668e:	3306      	adds	r3, #6
 8016690:	4a74      	ldr	r2, [pc, #464]	; (8016864 <BatterySOCEstimationV2_step+0x9c4>)
 8016692:	330f      	adds	r3, #15
 8016694:	00db      	lsls	r3, r3, #3
 8016696:	4413      	add	r3, r2
 8016698:	e9d3 0100 	ldrd	r0, r1, [r3]
                        Delay_DSTATE[2]) + rtDW.dv1[i_0]) +
 801669c:	4b71      	ldr	r3, [pc, #452]	; (8016864 <BatterySOCEstimationV2_step+0x9c4>)
 801669e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
                        rtDW.Assignment1[i_0 + 6] * rtDW.CoreSubsys[0].
 80166a2:	f7e9 ffc9 	bl	8000638 <__aeabi_dmul>
 80166a6:	4602      	mov	r2, r0
 80166a8:	460b      	mov	r3, r1
                         rtDW.CoreSubsys[0].Delay_DSTATE[0]) +
 80166aa:	4620      	mov	r0, r4
 80166ac:	4629      	mov	r1, r5
 80166ae:	f7e9 fe0d 	bl	80002cc <__adddf3>
 80166b2:	4602      	mov	r2, r0
 80166b4:	460b      	mov	r3, r1
 80166b6:	4610      	mov	r0, r2
 80166b8:	4619      	mov	r1, r3
                        Delay_DSTATE[2]) + rtDW.dv1[i_0]) +
 80166ba:	4a6a      	ldr	r2, [pc, #424]	; (8016864 <BatterySOCEstimationV2_step+0x9c4>)
 80166bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80166be:	3333      	adds	r3, #51	; 0x33
 80166c0:	00db      	lsls	r3, r3, #3
 80166c2:	4413      	add	r3, r2
 80166c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166c8:	f7e9 fe00 	bl	80002cc <__adddf3>
 80166cc:	4602      	mov	r2, r0
 80166ce:	460b      	mov	r3, r1
 80166d0:	4614      	mov	r4, r2
 80166d2:	461d      	mov	r5, r3
      rtDW.TmpSignalConversionAtProduc[i_0] * rtDW.uDLookupTableOCV;
 80166d4:	4a63      	ldr	r2, [pc, #396]	; (8016864 <BatterySOCEstimationV2_step+0x9c4>)
 80166d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80166d8:	332d      	adds	r3, #45	; 0x2d
 80166da:	00db      	lsls	r3, r3, #3
 80166dc:	4413      	add	r3, r2
 80166de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80166e2:	4b60      	ldr	r3, [pc, #384]	; (8016864 <BatterySOCEstimationV2_step+0x9c4>)
 80166e4:	e9d3 2374 	ldrd	r2, r3, [r3, #464]	; 0x1d0
 80166e8:	f7e9 ffa6 	bl	8000638 <__aeabi_dmul>
 80166ec:	4602      	mov	r2, r0
 80166ee:	460b      	mov	r3, r1
                        Delay_DSTATE[2]) + rtDW.dv1[i_0]) +
 80166f0:	4620      	mov	r0, r4
 80166f2:	4629      	mov	r1, r5
 80166f4:	f7e9 fdea 	bl	80002cc <__adddf3>
 80166f8:	4602      	mov	r2, r0
 80166fa:	460b      	mov	r3, r1
    rtDW.Sum_i[i_0] = (((rtDW.Assignment1[i_0 + 3] * rtDW.CoreSubsys[0].
 80166fc:	4859      	ldr	r0, [pc, #356]	; (8016864 <BatterySOCEstimationV2_step+0x9c4>)
 80166fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8016700:	3130      	adds	r1, #48	; 0x30
 8016702:	00c9      	lsls	r1, r1, #3
 8016704:	4401      	add	r1, r0
 8016706:	e9c1 2300 	strd	r2, r3, [r1]
  for (i_0 = 0; i_0 < 3; i_0++) {
 801670a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801670c:	3301      	adds	r3, #1
 801670e:	643b      	str	r3, [r7, #64]	; 0x40
 8016710:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016712:	2b02      	cmp	r3, #2
 8016714:	dd93      	ble.n	801663e <BatterySOCEstimationV2_step+0x79e>
  }

  /* Update for Delay: '<S5>/Delay' */
  rtDW.CoreSubsys[0].icLoad = false;
 8016716:	4b53      	ldr	r3, [pc, #332]	; (8016864 <BatterySOCEstimationV2_step+0x9c4>)
 8016718:	2200      	movs	r2, #0
 801671a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  /* Product: '<S4>/Product4' incorporates:
   *  SignalConversion generated from: '<S7>/Product1'
   */
  rtb_TmpSignalConversionAtProd_0 = rtDW.TmpSignalConversionAtProduc[0];
 801671e:	4b51      	ldr	r3, [pc, #324]	; (8016864 <BatterySOCEstimationV2_step+0x9c4>)
 8016720:	e9d3 235a 	ldrd	r2, r3, [r3, #360]	; 0x168
 8016724:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  rtDW.uDLookupTableR2 = rtDW.TmpSignalConversionAtProduc[1];
 8016728:	4b4e      	ldr	r3, [pc, #312]	; (8016864 <BatterySOCEstimationV2_step+0x9c4>)
 801672a:	e9d3 235c 	ldrd	r2, r3, [r3, #368]	; 0x170
 801672e:	494d      	ldr	r1, [pc, #308]	; (8016864 <BatterySOCEstimationV2_step+0x9c4>)
 8016730:	e9c1 236c 	strd	r2, r3, [r1, #432]	; 0x1b0
  rtDW.MathFunction1 = rtDW.TmpSignalConversionAtProduc[2];
 8016734:	4b4b      	ldr	r3, [pc, #300]	; (8016864 <BatterySOCEstimationV2_step+0x9c4>)
 8016736:	e9d3 235e 	ldrd	r2, r3, [r3, #376]	; 0x178
 801673a:	494a      	ldr	r1, [pc, #296]	; (8016864 <BatterySOCEstimationV2_step+0x9c4>)
 801673c:	e9c1 236e 	strd	r2, r3, [r1, #440]	; 0x1b8
  for (i = 0; i < 3; i++) {
 8016740:	2300      	movs	r3, #0
 8016742:	647b      	str	r3, [r7, #68]	; 0x44
 8016744:	e087      	b.n	8016856 <BatterySOCEstimationV2_step+0x9b6>
    /* Update for Delay: '<S5>/Delay' */
    rtDW.CoreSubsys[0].Delay_DSTATE[i] = rtDW.Sum_i[i];
 8016746:	4a47      	ldr	r2, [pc, #284]	; (8016864 <BatterySOCEstimationV2_step+0x9c4>)
 8016748:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801674a:	3330      	adds	r3, #48	; 0x30
 801674c:	00db      	lsls	r3, r3, #3
 801674e:	4413      	add	r3, r2
 8016750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016754:	4843      	ldr	r0, [pc, #268]	; (8016864 <BatterySOCEstimationV2_step+0x9c4>)
 8016756:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8016758:	3102      	adds	r1, #2
 801675a:	00c9      	lsls	r1, r1, #3
 801675c:	4401      	add	r1, r0
 801675e:	e9c1 2300 	strd	r2, r3, [r1]

    /* Product: '<S4>/Product4' incorporates:
     *  Product: '<S4>/Product3'
     */
    rtDW.uDLookupTableOCV = rtDW.Product3_e[i];
 8016762:	4a40      	ldr	r2, [pc, #256]	; (8016864 <BatterySOCEstimationV2_step+0x9c4>)
 8016764:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016766:	332a      	adds	r3, #42	; 0x2a
 8016768:	00db      	lsls	r3, r3, #3
 801676a:	4413      	add	r3, r2
 801676c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016770:	493c      	ldr	r1, [pc, #240]	; (8016864 <BatterySOCEstimationV2_step+0x9c4>)
 8016772:	e9c1 2374 	strd	r2, r3, [r1, #464]	; 0x1d0
     *  Constant: '<S4>/Constant2'
     *  Product: '<S4>/Product3'
     *  Product: '<S4>/Product4'
     *  SignalConversion generated from: '<S7>/Product1'
     */
    rtDW.dv[3 * i] = rtConstP.Constant2_Value[3 * i] -
 8016776:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016778:	4613      	mov	r3, r2
 801677a:	005b      	lsls	r3, r3, #1
 801677c:	4413      	add	r3, r2
 801677e:	4a3c      	ldr	r2, [pc, #240]	; (8016870 <BatterySOCEstimationV2_step+0x9d0>)
 8016780:	00db      	lsls	r3, r3, #3
 8016782:	4413      	add	r3, r2
 8016784:	e9d3 4500 	ldrd	r4, r5, [r3]
      rtb_TmpSignalConversionAtProd_0 * rtDW.uDLookupTableOCV;
 8016788:	4b36      	ldr	r3, [pc, #216]	; (8016864 <BatterySOCEstimationV2_step+0x9c4>)
 801678a:	e9d3 0174 	ldrd	r0, r1, [r3, #464]	; 0x1d0
 801678e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8016792:	f7e9 ff51 	bl	8000638 <__aeabi_dmul>
 8016796:	4602      	mov	r2, r0
 8016798:	460b      	mov	r3, r1
 801679a:	4610      	mov	r0, r2
 801679c:	4619      	mov	r1, r3
    rtDW.dv[3 * i] = rtConstP.Constant2_Value[3 * i] -
 801679e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80167a0:	4613      	mov	r3, r2
 80167a2:	005b      	lsls	r3, r3, #1
 80167a4:	189e      	adds	r6, r3, r2
 80167a6:	4602      	mov	r2, r0
 80167a8:	460b      	mov	r3, r1
 80167aa:	4620      	mov	r0, r4
 80167ac:	4629      	mov	r1, r5
 80167ae:	f7e9 fd8b 	bl	80002c8 <__aeabi_dsub>
 80167b2:	4602      	mov	r2, r0
 80167b4:	460b      	mov	r3, r1
 80167b6:	482b      	ldr	r0, [pc, #172]	; (8016864 <BatterySOCEstimationV2_step+0x9c4>)
 80167b8:	f106 0121 	add.w	r1, r6, #33	; 0x21
 80167bc:	00c9      	lsls	r1, r1, #3
 80167be:	4401      	add	r1, r0
 80167c0:	e9c1 2300 	strd	r2, r3, [r1]
    i_0 = 3 * i + 1;
 80167c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80167c6:	4613      	mov	r3, r2
 80167c8:	005b      	lsls	r3, r3, #1
 80167ca:	4413      	add	r3, r2
 80167cc:	3301      	adds	r3, #1
 80167ce:	643b      	str	r3, [r7, #64]	; 0x40
    rtDW.dv[i_0] = rtConstP.Constant2_Value[i_0] - rtDW.uDLookupTableR2 *
 80167d0:	4a27      	ldr	r2, [pc, #156]	; (8016870 <BatterySOCEstimationV2_step+0x9d0>)
 80167d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80167d4:	00db      	lsls	r3, r3, #3
 80167d6:	4413      	add	r3, r2
 80167d8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80167dc:	4b21      	ldr	r3, [pc, #132]	; (8016864 <BatterySOCEstimationV2_step+0x9c4>)
 80167de:	e9d3 016c 	ldrd	r0, r1, [r3, #432]	; 0x1b0
      rtDW.uDLookupTableOCV;
 80167e2:	4b20      	ldr	r3, [pc, #128]	; (8016864 <BatterySOCEstimationV2_step+0x9c4>)
 80167e4:	e9d3 2374 	ldrd	r2, r3, [r3, #464]	; 0x1d0
    rtDW.dv[i_0] = rtConstP.Constant2_Value[i_0] - rtDW.uDLookupTableR2 *
 80167e8:	f7e9 ff26 	bl	8000638 <__aeabi_dmul>
 80167ec:	4602      	mov	r2, r0
 80167ee:	460b      	mov	r3, r1
 80167f0:	4620      	mov	r0, r4
 80167f2:	4629      	mov	r1, r5
 80167f4:	f7e9 fd68 	bl	80002c8 <__aeabi_dsub>
 80167f8:	4602      	mov	r2, r0
 80167fa:	460b      	mov	r3, r1
 80167fc:	4819      	ldr	r0, [pc, #100]	; (8016864 <BatterySOCEstimationV2_step+0x9c4>)
 80167fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8016800:	3121      	adds	r1, #33	; 0x21
 8016802:	00c9      	lsls	r1, r1, #3
 8016804:	4401      	add	r1, r0
 8016806:	e9c1 2300 	strd	r2, r3, [r1]
    i_0 = 3 * i + 2;
 801680a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801680c:	4613      	mov	r3, r2
 801680e:	005b      	lsls	r3, r3, #1
 8016810:	4413      	add	r3, r2
 8016812:	3302      	adds	r3, #2
 8016814:	643b      	str	r3, [r7, #64]	; 0x40
    rtDW.dv[i_0] = rtConstP.Constant2_Value[i_0] - rtDW.MathFunction1 *
 8016816:	4a16      	ldr	r2, [pc, #88]	; (8016870 <BatterySOCEstimationV2_step+0x9d0>)
 8016818:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801681a:	00db      	lsls	r3, r3, #3
 801681c:	4413      	add	r3, r2
 801681e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8016822:	4b10      	ldr	r3, [pc, #64]	; (8016864 <BatterySOCEstimationV2_step+0x9c4>)
 8016824:	e9d3 016e 	ldrd	r0, r1, [r3, #440]	; 0x1b8
      rtDW.uDLookupTableOCV;
 8016828:	4b0e      	ldr	r3, [pc, #56]	; (8016864 <BatterySOCEstimationV2_step+0x9c4>)
 801682a:	e9d3 2374 	ldrd	r2, r3, [r3, #464]	; 0x1d0
    rtDW.dv[i_0] = rtConstP.Constant2_Value[i_0] - rtDW.MathFunction1 *
 801682e:	f7e9 ff03 	bl	8000638 <__aeabi_dmul>
 8016832:	4602      	mov	r2, r0
 8016834:	460b      	mov	r3, r1
 8016836:	4620      	mov	r0, r4
 8016838:	4629      	mov	r1, r5
 801683a:	f7e9 fd45 	bl	80002c8 <__aeabi_dsub>
 801683e:	4602      	mov	r2, r0
 8016840:	460b      	mov	r3, r1
 8016842:	4808      	ldr	r0, [pc, #32]	; (8016864 <BatterySOCEstimationV2_step+0x9c4>)
 8016844:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8016846:	3121      	adds	r1, #33	; 0x21
 8016848:	00c9      	lsls	r1, r1, #3
 801684a:	4401      	add	r1, r0
 801684c:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 3; i++) {
 8016850:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016852:	3301      	adds	r3, #1
 8016854:	647b      	str	r3, [r7, #68]	; 0x44
 8016856:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016858:	2b02      	cmp	r3, #2
 801685a:	f77f af74 	ble.w	8016746 <BatterySOCEstimationV2_step+0x8a6>
  }

  /* Update for UnitDelay: '<S3>/Unit Delay - P' */
  for (i_0 = 0; i_0 < 3; i_0++) {
 801685e:	2300      	movs	r3, #0
 8016860:	643b      	str	r3, [r7, #64]	; 0x40
 8016862:	e088      	b.n	8016976 <BatterySOCEstimationV2_step+0xad6>
 8016864:	200025c8 	.word	0x200025c8
 8016868:	200027a0 	.word	0x200027a0
 801686c:	3ff00000 	.word	0x3ff00000
 8016870:	080200c8 	.word	0x080200c8
    /* Product: '<S4>/Product5' */
    rtDW.uDLookupTableR2 = rtDW.dv[i_0];
 8016874:	4a4a      	ldr	r2, [pc, #296]	; (80169a0 <BatterySOCEstimationV2_step+0xb00>)
 8016876:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016878:	3321      	adds	r3, #33	; 0x21
 801687a:	00db      	lsls	r3, r3, #3
 801687c:	4413      	add	r3, r2
 801687e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016882:	4947      	ldr	r1, [pc, #284]	; (80169a0 <BatterySOCEstimationV2_step+0xb00>)
 8016884:	e9c1 236c 	strd	r2, r3, [r1, #432]	; 0x1b0
    rtDW.MathFunction1 = rtDW.dv[i_0 + 3];
 8016888:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801688a:	3303      	adds	r3, #3
 801688c:	4a44      	ldr	r2, [pc, #272]	; (80169a0 <BatterySOCEstimationV2_step+0xb00>)
 801688e:	3321      	adds	r3, #33	; 0x21
 8016890:	00db      	lsls	r3, r3, #3
 8016892:	4413      	add	r3, r2
 8016894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016898:	4941      	ldr	r1, [pc, #260]	; (80169a0 <BatterySOCEstimationV2_step+0xb00>)
 801689a:	e9c1 236e 	strd	r2, r3, [r1, #440]	; 0x1b8
    rtDW.uDLookupTableR1 = rtDW.dv[i_0 + 6];
 801689e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80168a0:	3306      	adds	r3, #6
 80168a2:	4a3f      	ldr	r2, [pc, #252]	; (80169a0 <BatterySOCEstimationV2_step+0xb00>)
 80168a4:	3321      	adds	r3, #33	; 0x21
 80168a6:	00db      	lsls	r3, r3, #3
 80168a8:	4413      	add	r3, r2
 80168aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168ae:	493c      	ldr	r1, [pc, #240]	; (80169a0 <BatterySOCEstimationV2_step+0xb00>)
 80168b0:	e9c1 2370 	strd	r2, r3, [r1, #448]	; 0x1c0
    for (i = 0; i < 3; i++) {
 80168b4:	2300      	movs	r3, #0
 80168b6:	647b      	str	r3, [r7, #68]	; 0x44
 80168b8:	e057      	b.n	801696a <BatterySOCEstimationV2_step+0xaca>
      /* Product: '<S4>/Product5' incorporates:
       *  Sum: '<S7>/Sum1'
       */
      rtDW.CoreSubsys[0].UnitDelayP_DSTATE[i_0 + 3 * i] = (rtDW.Sum1_n[3 * i + 1]
 80168ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80168bc:	4613      	mov	r3, r2
 80168be:	005b      	lsls	r3, r3, #1
 80168c0:	4413      	add	r3, r2
 80168c2:	3301      	adds	r3, #1
 80168c4:	4a36      	ldr	r2, [pc, #216]	; (80169a0 <BatterySOCEstimationV2_step+0xb00>)
 80168c6:	3318      	adds	r3, #24
 80168c8:	00db      	lsls	r3, r3, #3
 80168ca:	4413      	add	r3, r2
 80168cc:	e9d3 0100 	ldrd	r0, r1, [r3]
        * rtDW.MathFunction1 + rtDW.Sum1_n[3 * i] * rtDW.uDLookupTableR2) +
 80168d0:	4b33      	ldr	r3, [pc, #204]	; (80169a0 <BatterySOCEstimationV2_step+0xb00>)
 80168d2:	e9d3 236e 	ldrd	r2, r3, [r3, #440]	; 0x1b8
 80168d6:	f7e9 feaf 	bl	8000638 <__aeabi_dmul>
 80168da:	4602      	mov	r2, r0
 80168dc:	460b      	mov	r3, r1
 80168de:	4614      	mov	r4, r2
 80168e0:	461d      	mov	r5, r3
 80168e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80168e4:	4613      	mov	r3, r2
 80168e6:	005b      	lsls	r3, r3, #1
 80168e8:	4413      	add	r3, r2
 80168ea:	4a2d      	ldr	r2, [pc, #180]	; (80169a0 <BatterySOCEstimationV2_step+0xb00>)
 80168ec:	3318      	adds	r3, #24
 80168ee:	00db      	lsls	r3, r3, #3
 80168f0:	4413      	add	r3, r2
 80168f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80168f6:	4b2a      	ldr	r3, [pc, #168]	; (80169a0 <BatterySOCEstimationV2_step+0xb00>)
 80168f8:	e9d3 236c 	ldrd	r2, r3, [r3, #432]	; 0x1b0
 80168fc:	f7e9 fe9c 	bl	8000638 <__aeabi_dmul>
 8016900:	4602      	mov	r2, r0
 8016902:	460b      	mov	r3, r1
 8016904:	4620      	mov	r0, r4
 8016906:	4629      	mov	r1, r5
 8016908:	f7e9 fce0 	bl	80002cc <__adddf3>
 801690c:	4602      	mov	r2, r0
 801690e:	460b      	mov	r3, r1
 8016910:	4690      	mov	r8, r2
 8016912:	4699      	mov	r9, r3
        rtDW.Sum1_n[3 * i + 2] * rtDW.uDLookupTableR1;
 8016914:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016916:	4613      	mov	r3, r2
 8016918:	005b      	lsls	r3, r3, #1
 801691a:	4413      	add	r3, r2
 801691c:	3302      	adds	r3, #2
 801691e:	4a20      	ldr	r2, [pc, #128]	; (80169a0 <BatterySOCEstimationV2_step+0xb00>)
 8016920:	3318      	adds	r3, #24
 8016922:	00db      	lsls	r3, r3, #3
 8016924:	4413      	add	r3, r2
 8016926:	e9d3 0100 	ldrd	r0, r1, [r3]
 801692a:	4b1d      	ldr	r3, [pc, #116]	; (80169a0 <BatterySOCEstimationV2_step+0xb00>)
 801692c:	e9d3 2370 	ldrd	r2, r3, [r3, #448]	; 0x1c0
 8016930:	f7e9 fe82 	bl	8000638 <__aeabi_dmul>
 8016934:	4602      	mov	r2, r0
 8016936:	460b      	mov	r3, r1
 8016938:	4610      	mov	r0, r2
 801693a:	4619      	mov	r1, r3
      rtDW.CoreSubsys[0].UnitDelayP_DSTATE[i_0 + 3 * i] = (rtDW.Sum1_n[3 * i + 1]
 801693c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801693e:	4613      	mov	r3, r2
 8016940:	005b      	lsls	r3, r3, #1
 8016942:	441a      	add	r2, r3
 8016944:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016946:	18d4      	adds	r4, r2, r3
        * rtDW.MathFunction1 + rtDW.Sum1_n[3 * i] * rtDW.uDLookupTableR2) +
 8016948:	4602      	mov	r2, r0
 801694a:	460b      	mov	r3, r1
 801694c:	4640      	mov	r0, r8
 801694e:	4649      	mov	r1, r9
 8016950:	f7e9 fcbc 	bl	80002cc <__adddf3>
 8016954:	4602      	mov	r2, r0
 8016956:	460b      	mov	r3, r1
      rtDW.CoreSubsys[0].UnitDelayP_DSTATE[i_0 + 3 * i] = (rtDW.Sum1_n[3 * i + 1]
 8016958:	4811      	ldr	r0, [pc, #68]	; (80169a0 <BatterySOCEstimationV2_step+0xb00>)
 801695a:	1d61      	adds	r1, r4, #5
 801695c:	00c9      	lsls	r1, r1, #3
 801695e:	4401      	add	r1, r0
 8016960:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < 3; i++) {
 8016964:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016966:	3301      	adds	r3, #1
 8016968:	647b      	str	r3, [r7, #68]	; 0x44
 801696a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801696c:	2b02      	cmp	r3, #2
 801696e:	dda4      	ble.n	80168ba <BatterySOCEstimationV2_step+0xa1a>
  for (i_0 = 0; i_0 < 3; i_0++) {
 8016970:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016972:	3301      	adds	r3, #1
 8016974:	643b      	str	r3, [r7, #64]	; 0x40
 8016976:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016978:	2b02      	cmp	r3, #2
 801697a:	f77f af7b 	ble.w	8016874 <BatterySOCEstimationV2_step+0x9d4>
  }

  /* End of Update for UnitDelay: '<S3>/Unit Delay - P' */

  /* ForEachSliceAssignment generated from: '<S1>/SOC' */
  rtDW.uDLookupTableR2 = rtDW.Sum_i[0];
 801697e:	4b08      	ldr	r3, [pc, #32]	; (80169a0 <BatterySOCEstimationV2_step+0xb00>)
 8016980:	e9d3 2360 	ldrd	r2, r3, [r3, #384]	; 0x180
 8016984:	4906      	ldr	r1, [pc, #24]	; (80169a0 <BatterySOCEstimationV2_step+0xb00>)
 8016986:	e9c1 236c 	strd	r2, r3, [r1, #432]	; 0x1b0

  /* End of Outputs for SubSystem: '<Root>/SOC Estimator (Kalman Filter)1' */

  /* Outport: '<Root>/SoC' */
  rtY.SoC = rtDW.uDLookupTableR2;
 801698a:	4b05      	ldr	r3, [pc, #20]	; (80169a0 <BatterySOCEstimationV2_step+0xb00>)
 801698c:	e9d3 236c 	ldrd	r2, r3, [r3, #432]	; 0x1b0
 8016990:	4904      	ldr	r1, [pc, #16]	; (80169a4 <BatterySOCEstimationV2_step+0xb04>)
 8016992:	e9c1 2300 	strd	r2, r3, [r1]
}
 8016996:	bf00      	nop
 8016998:	375c      	adds	r7, #92	; 0x5c
 801699a:	46bd      	mov	sp, r7
 801699c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169a0:	200025c8 	.word	0x200025c8
 80169a4:	200027c0 	.word	0x200027c0

080169a8 <BatterySOCEstimationV2_initialize>:

/* Model initialize function */
void BatterySOCEstimationV2_initialize(void)
{
 80169a8:	b580      	push	{r7, lr}
 80169aa:	af00      	add	r7, sp, #0
  /* SystemInitialize for Iterator SubSystem: '<Root>/SOC Estimator (Kalman Filter)1' */
  /* Start for Probe: '<S6>/Probe' */
  rtDW.CoreSubsys[0].Probe[0] = 0.05;
 80169ac:	490e      	ldr	r1, [pc, #56]	; (80169e8 <BatterySOCEstimationV2_initialize+0x40>)
 80169ae:	a30c      	add	r3, pc, #48	; (adr r3, 80169e0 <BatterySOCEstimationV2_initialize+0x38>)
 80169b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169b4:	e9c1 2300 	strd	r2, r3, [r1]
  rtDW.CoreSubsys[0].Probe[1] = 0.0;
 80169b8:	490b      	ldr	r1, [pc, #44]	; (80169e8 <BatterySOCEstimationV2_initialize+0x40>)
 80169ba:	f04f 0200 	mov.w	r2, #0
 80169be:	f04f 0300 	mov.w	r3, #0
 80169c2:	e9c1 2302 	strd	r2, r3, [r1, #8]

  /* InitializeConditions for Delay: '<S5>/Delay' */
  rtDW.CoreSubsys[0].icLoad = true;
 80169c6:	4b08      	ldr	r3, [pc, #32]	; (80169e8 <BatterySOCEstimationV2_initialize+0x40>)
 80169c8:	2201      	movs	r2, #1
 80169ca:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  /* InitializeConditions for UnitDelay: '<S3>/Unit Delay - P' */
  memcpy(&rtDW.CoreSubsys[0].UnitDelayP_DSTATE[0],
 80169ce:	2248      	movs	r2, #72	; 0x48
 80169d0:	4906      	ldr	r1, [pc, #24]	; (80169ec <BatterySOCEstimationV2_initialize+0x44>)
 80169d2:	4807      	ldr	r0, [pc, #28]	; (80169f0 <BatterySOCEstimationV2_initialize+0x48>)
 80169d4:	f004 ffa5 	bl	801b922 <memcpy>
         &rtConstP.UnitDelayP_InitialCondition[0], 9U * sizeof(real_T));

  /* End of SystemInitialize for SubSystem: '<Root>/SOC Estimator (Kalman Filter)1' */
}
 80169d8:	bf00      	nop
 80169da:	bd80      	pop	{r7, pc}
 80169dc:	f3af 8000 	nop.w
 80169e0:	9999999a 	.word	0x9999999a
 80169e4:	3fa99999 	.word	0x3fa99999
 80169e8:	200025c8 	.word	0x200025c8
 80169ec:	08023100 	.word	0x08023100
 80169f0:	200025f0 	.word	0x200025f0

080169f4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80169f4:	b480      	push	{r7}
 80169f6:	b083      	sub	sp, #12
 80169f8:	af00      	add	r7, sp, #0
 80169fa:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80169fc:	687b      	ldr	r3, [r7, #4]
 80169fe:	f103 0208 	add.w	r2, r3, #8
 8016a02:	687b      	ldr	r3, [r7, #4]
 8016a04:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8016a06:	687b      	ldr	r3, [r7, #4]
 8016a08:	f04f 32ff 	mov.w	r2, #4294967295
 8016a0c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016a0e:	687b      	ldr	r3, [r7, #4]
 8016a10:	f103 0208 	add.w	r2, r3, #8
 8016a14:	687b      	ldr	r3, [r7, #4]
 8016a16:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016a18:	687b      	ldr	r3, [r7, #4]
 8016a1a:	f103 0208 	add.w	r2, r3, #8
 8016a1e:	687b      	ldr	r3, [r7, #4]
 8016a20:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8016a22:	687b      	ldr	r3, [r7, #4]
 8016a24:	2200      	movs	r2, #0
 8016a26:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8016a28:	bf00      	nop
 8016a2a:	370c      	adds	r7, #12
 8016a2c:	46bd      	mov	sp, r7
 8016a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a32:	4770      	bx	lr

08016a34 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8016a34:	b480      	push	{r7}
 8016a36:	b083      	sub	sp, #12
 8016a38:	af00      	add	r7, sp, #0
 8016a3a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8016a3c:	687b      	ldr	r3, [r7, #4]
 8016a3e:	2200      	movs	r2, #0
 8016a40:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8016a42:	bf00      	nop
 8016a44:	370c      	adds	r7, #12
 8016a46:	46bd      	mov	sp, r7
 8016a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a4c:	4770      	bx	lr

08016a4e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8016a4e:	b480      	push	{r7}
 8016a50:	b085      	sub	sp, #20
 8016a52:	af00      	add	r7, sp, #0
 8016a54:	6078      	str	r0, [r7, #4]
 8016a56:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8016a58:	687b      	ldr	r3, [r7, #4]
 8016a5a:	685b      	ldr	r3, [r3, #4]
 8016a5c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8016a5e:	683b      	ldr	r3, [r7, #0]
 8016a60:	68fa      	ldr	r2, [r7, #12]
 8016a62:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8016a64:	68fb      	ldr	r3, [r7, #12]
 8016a66:	689a      	ldr	r2, [r3, #8]
 8016a68:	683b      	ldr	r3, [r7, #0]
 8016a6a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8016a6c:	68fb      	ldr	r3, [r7, #12]
 8016a6e:	689b      	ldr	r3, [r3, #8]
 8016a70:	683a      	ldr	r2, [r7, #0]
 8016a72:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8016a74:	68fb      	ldr	r3, [r7, #12]
 8016a76:	683a      	ldr	r2, [r7, #0]
 8016a78:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8016a7a:	683b      	ldr	r3, [r7, #0]
 8016a7c:	687a      	ldr	r2, [r7, #4]
 8016a7e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8016a80:	687b      	ldr	r3, [r7, #4]
 8016a82:	681b      	ldr	r3, [r3, #0]
 8016a84:	1c5a      	adds	r2, r3, #1
 8016a86:	687b      	ldr	r3, [r7, #4]
 8016a88:	601a      	str	r2, [r3, #0]
}
 8016a8a:	bf00      	nop
 8016a8c:	3714      	adds	r7, #20
 8016a8e:	46bd      	mov	sp, r7
 8016a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a94:	4770      	bx	lr

08016a96 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8016a96:	b480      	push	{r7}
 8016a98:	b085      	sub	sp, #20
 8016a9a:	af00      	add	r7, sp, #0
 8016a9c:	6078      	str	r0, [r7, #4]
 8016a9e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8016aa0:	683b      	ldr	r3, [r7, #0]
 8016aa2:	681b      	ldr	r3, [r3, #0]
 8016aa4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8016aa6:	68bb      	ldr	r3, [r7, #8]
 8016aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016aac:	d103      	bne.n	8016ab6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8016aae:	687b      	ldr	r3, [r7, #4]
 8016ab0:	691b      	ldr	r3, [r3, #16]
 8016ab2:	60fb      	str	r3, [r7, #12]
 8016ab4:	e00c      	b.n	8016ad0 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8016ab6:	687b      	ldr	r3, [r7, #4]
 8016ab8:	3308      	adds	r3, #8
 8016aba:	60fb      	str	r3, [r7, #12]
 8016abc:	e002      	b.n	8016ac4 <vListInsert+0x2e>
 8016abe:	68fb      	ldr	r3, [r7, #12]
 8016ac0:	685b      	ldr	r3, [r3, #4]
 8016ac2:	60fb      	str	r3, [r7, #12]
 8016ac4:	68fb      	ldr	r3, [r7, #12]
 8016ac6:	685b      	ldr	r3, [r3, #4]
 8016ac8:	681b      	ldr	r3, [r3, #0]
 8016aca:	68ba      	ldr	r2, [r7, #8]
 8016acc:	429a      	cmp	r2, r3
 8016ace:	d2f6      	bcs.n	8016abe <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8016ad0:	68fb      	ldr	r3, [r7, #12]
 8016ad2:	685a      	ldr	r2, [r3, #4]
 8016ad4:	683b      	ldr	r3, [r7, #0]
 8016ad6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8016ad8:	683b      	ldr	r3, [r7, #0]
 8016ada:	685b      	ldr	r3, [r3, #4]
 8016adc:	683a      	ldr	r2, [r7, #0]
 8016ade:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8016ae0:	683b      	ldr	r3, [r7, #0]
 8016ae2:	68fa      	ldr	r2, [r7, #12]
 8016ae4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8016ae6:	68fb      	ldr	r3, [r7, #12]
 8016ae8:	683a      	ldr	r2, [r7, #0]
 8016aea:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8016aec:	683b      	ldr	r3, [r7, #0]
 8016aee:	687a      	ldr	r2, [r7, #4]
 8016af0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8016af2:	687b      	ldr	r3, [r7, #4]
 8016af4:	681b      	ldr	r3, [r3, #0]
 8016af6:	1c5a      	adds	r2, r3, #1
 8016af8:	687b      	ldr	r3, [r7, #4]
 8016afa:	601a      	str	r2, [r3, #0]
}
 8016afc:	bf00      	nop
 8016afe:	3714      	adds	r7, #20
 8016b00:	46bd      	mov	sp, r7
 8016b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b06:	4770      	bx	lr

08016b08 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8016b08:	b480      	push	{r7}
 8016b0a:	b085      	sub	sp, #20
 8016b0c:	af00      	add	r7, sp, #0
 8016b0e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8016b10:	687b      	ldr	r3, [r7, #4]
 8016b12:	691b      	ldr	r3, [r3, #16]
 8016b14:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8016b16:	687b      	ldr	r3, [r7, #4]
 8016b18:	685b      	ldr	r3, [r3, #4]
 8016b1a:	687a      	ldr	r2, [r7, #4]
 8016b1c:	6892      	ldr	r2, [r2, #8]
 8016b1e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	689b      	ldr	r3, [r3, #8]
 8016b24:	687a      	ldr	r2, [r7, #4]
 8016b26:	6852      	ldr	r2, [r2, #4]
 8016b28:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8016b2a:	68fb      	ldr	r3, [r7, #12]
 8016b2c:	685b      	ldr	r3, [r3, #4]
 8016b2e:	687a      	ldr	r2, [r7, #4]
 8016b30:	429a      	cmp	r2, r3
 8016b32:	d103      	bne.n	8016b3c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8016b34:	687b      	ldr	r3, [r7, #4]
 8016b36:	689a      	ldr	r2, [r3, #8]
 8016b38:	68fb      	ldr	r3, [r7, #12]
 8016b3a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8016b3c:	687b      	ldr	r3, [r7, #4]
 8016b3e:	2200      	movs	r2, #0
 8016b40:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8016b42:	68fb      	ldr	r3, [r7, #12]
 8016b44:	681b      	ldr	r3, [r3, #0]
 8016b46:	1e5a      	subs	r2, r3, #1
 8016b48:	68fb      	ldr	r3, [r7, #12]
 8016b4a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8016b4c:	68fb      	ldr	r3, [r7, #12]
 8016b4e:	681b      	ldr	r3, [r3, #0]
}
 8016b50:	4618      	mov	r0, r3
 8016b52:	3714      	adds	r7, #20
 8016b54:	46bd      	mov	sp, r7
 8016b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b5a:	4770      	bx	lr

08016b5c <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8016b5c:	b580      	push	{r7, lr}
 8016b5e:	b086      	sub	sp, #24
 8016b60:	af00      	add	r7, sp, #0
 8016b62:	6078      	str	r0, [r7, #4]
 8016b64:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8016b66:	2301      	movs	r3, #1
 8016b68:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8016b6a:	687b      	ldr	r3, [r7, #4]
 8016b6c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8016b6e:	693b      	ldr	r3, [r7, #16]
 8016b70:	2b00      	cmp	r3, #0
 8016b72:	d10a      	bne.n	8016b8a <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8016b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b78:	f383 8811 	msr	BASEPRI, r3
 8016b7c:	f3bf 8f6f 	isb	sy
 8016b80:	f3bf 8f4f 	dsb	sy
 8016b84:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8016b86:	bf00      	nop
 8016b88:	e7fe      	b.n	8016b88 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8016b8a:	693b      	ldr	r3, [r7, #16]
 8016b8c:	2b00      	cmp	r3, #0
 8016b8e:	d05d      	beq.n	8016c4c <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8016b90:	693b      	ldr	r3, [r7, #16]
 8016b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8016b94:	2b00      	cmp	r3, #0
 8016b96:	d059      	beq.n	8016c4c <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8016b98:	693b      	ldr	r3, [r7, #16]
 8016b9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8016b9c:	693b      	ldr	r3, [r7, #16]
 8016b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016ba0:	2100      	movs	r1, #0
 8016ba2:	fba3 2302 	umull	r2, r3, r3, r2
 8016ba6:	2b00      	cmp	r3, #0
 8016ba8:	d000      	beq.n	8016bac <xQueueGenericReset+0x50>
 8016baa:	2101      	movs	r1, #1
 8016bac:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8016bae:	2b00      	cmp	r3, #0
 8016bb0:	d14c      	bne.n	8016c4c <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8016bb2:	f002 f811 	bl	8018bd8 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016bb6:	693b      	ldr	r3, [r7, #16]
 8016bb8:	681a      	ldr	r2, [r3, #0]
 8016bba:	693b      	ldr	r3, [r7, #16]
 8016bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016bbe:	6939      	ldr	r1, [r7, #16]
 8016bc0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8016bc2:	fb01 f303 	mul.w	r3, r1, r3
 8016bc6:	441a      	add	r2, r3
 8016bc8:	693b      	ldr	r3, [r7, #16]
 8016bca:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8016bcc:	693b      	ldr	r3, [r7, #16]
 8016bce:	2200      	movs	r2, #0
 8016bd0:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8016bd2:	693b      	ldr	r3, [r7, #16]
 8016bd4:	681a      	ldr	r2, [r3, #0]
 8016bd6:	693b      	ldr	r3, [r7, #16]
 8016bd8:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016bda:	693b      	ldr	r3, [r7, #16]
 8016bdc:	681a      	ldr	r2, [r3, #0]
 8016bde:	693b      	ldr	r3, [r7, #16]
 8016be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016be2:	3b01      	subs	r3, #1
 8016be4:	6939      	ldr	r1, [r7, #16]
 8016be6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8016be8:	fb01 f303 	mul.w	r3, r1, r3
 8016bec:	441a      	add	r2, r3
 8016bee:	693b      	ldr	r3, [r7, #16]
 8016bf0:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8016bf2:	693b      	ldr	r3, [r7, #16]
 8016bf4:	22ff      	movs	r2, #255	; 0xff
 8016bf6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8016bfa:	693b      	ldr	r3, [r7, #16]
 8016bfc:	22ff      	movs	r2, #255	; 0xff
 8016bfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8016c02:	683b      	ldr	r3, [r7, #0]
 8016c04:	2b00      	cmp	r3, #0
 8016c06:	d114      	bne.n	8016c32 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016c08:	693b      	ldr	r3, [r7, #16]
 8016c0a:	691b      	ldr	r3, [r3, #16]
 8016c0c:	2b00      	cmp	r3, #0
 8016c0e:	d01a      	beq.n	8016c46 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016c10:	693b      	ldr	r3, [r7, #16]
 8016c12:	3310      	adds	r3, #16
 8016c14:	4618      	mov	r0, r3
 8016c16:	f001 f80d 	bl	8017c34 <xTaskRemoveFromEventList>
 8016c1a:	4603      	mov	r3, r0
 8016c1c:	2b00      	cmp	r3, #0
 8016c1e:	d012      	beq.n	8016c46 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8016c20:	4b15      	ldr	r3, [pc, #84]	; (8016c78 <xQueueGenericReset+0x11c>)
 8016c22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016c26:	601a      	str	r2, [r3, #0]
 8016c28:	f3bf 8f4f 	dsb	sy
 8016c2c:	f3bf 8f6f 	isb	sy
 8016c30:	e009      	b.n	8016c46 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8016c32:	693b      	ldr	r3, [r7, #16]
 8016c34:	3310      	adds	r3, #16
 8016c36:	4618      	mov	r0, r3
 8016c38:	f7ff fedc 	bl	80169f4 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8016c3c:	693b      	ldr	r3, [r7, #16]
 8016c3e:	3324      	adds	r3, #36	; 0x24
 8016c40:	4618      	mov	r0, r3
 8016c42:	f7ff fed7 	bl	80169f4 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8016c46:	f001 fff7 	bl	8018c38 <vPortExitCritical>
 8016c4a:	e001      	b.n	8016c50 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8016c4c:	2300      	movs	r3, #0
 8016c4e:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8016c50:	697b      	ldr	r3, [r7, #20]
 8016c52:	2b00      	cmp	r3, #0
 8016c54:	d10a      	bne.n	8016c6c <xQueueGenericReset+0x110>
        __asm volatile
 8016c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c5a:	f383 8811 	msr	BASEPRI, r3
 8016c5e:	f3bf 8f6f 	isb	sy
 8016c62:	f3bf 8f4f 	dsb	sy
 8016c66:	60bb      	str	r3, [r7, #8]
    }
 8016c68:	bf00      	nop
 8016c6a:	e7fe      	b.n	8016c6a <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8016c6c:	697b      	ldr	r3, [r7, #20]
}
 8016c6e:	4618      	mov	r0, r3
 8016c70:	3718      	adds	r7, #24
 8016c72:	46bd      	mov	sp, r7
 8016c74:	bd80      	pop	{r7, pc}
 8016c76:	bf00      	nop
 8016c78:	e000ed04 	.word	0xe000ed04

08016c7c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8016c7c:	b580      	push	{r7, lr}
 8016c7e:	b08a      	sub	sp, #40	; 0x28
 8016c80:	af02      	add	r7, sp, #8
 8016c82:	60f8      	str	r0, [r7, #12]
 8016c84:	60b9      	str	r1, [r7, #8]
 8016c86:	4613      	mov	r3, r2
 8016c88:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8016c8a:	2300      	movs	r3, #0
 8016c8c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8016c8e:	68fb      	ldr	r3, [r7, #12]
 8016c90:	2b00      	cmp	r3, #0
 8016c92:	d02e      	beq.n	8016cf2 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8016c94:	2100      	movs	r1, #0
 8016c96:	68ba      	ldr	r2, [r7, #8]
 8016c98:	68fb      	ldr	r3, [r7, #12]
 8016c9a:	fba3 2302 	umull	r2, r3, r3, r2
 8016c9e:	2b00      	cmp	r3, #0
 8016ca0:	d000      	beq.n	8016ca4 <xQueueGenericCreate+0x28>
 8016ca2:	2101      	movs	r1, #1
 8016ca4:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8016ca6:	2b00      	cmp	r3, #0
 8016ca8:	d123      	bne.n	8016cf2 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8016caa:	68fb      	ldr	r3, [r7, #12]
 8016cac:	68ba      	ldr	r2, [r7, #8]
 8016cae:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8016cb2:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8016cb6:	d81c      	bhi.n	8016cf2 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016cb8:	68fb      	ldr	r3, [r7, #12]
 8016cba:	68ba      	ldr	r2, [r7, #8]
 8016cbc:	fb02 f303 	mul.w	r3, r2, r3
 8016cc0:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8016cc2:	69bb      	ldr	r3, [r7, #24]
 8016cc4:	3350      	adds	r3, #80	; 0x50
 8016cc6:	4618      	mov	r0, r3
 8016cc8:	f002 f8a8 	bl	8018e1c <pvPortMalloc>
 8016ccc:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8016cce:	69fb      	ldr	r3, [r7, #28]
 8016cd0:	2b00      	cmp	r3, #0
 8016cd2:	d01c      	beq.n	8016d0e <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8016cd4:	69fb      	ldr	r3, [r7, #28]
 8016cd6:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016cd8:	697b      	ldr	r3, [r7, #20]
 8016cda:	3350      	adds	r3, #80	; 0x50
 8016cdc:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8016cde:	79fa      	ldrb	r2, [r7, #7]
 8016ce0:	69fb      	ldr	r3, [r7, #28]
 8016ce2:	9300      	str	r3, [sp, #0]
 8016ce4:	4613      	mov	r3, r2
 8016ce6:	697a      	ldr	r2, [r7, #20]
 8016ce8:	68b9      	ldr	r1, [r7, #8]
 8016cea:	68f8      	ldr	r0, [r7, #12]
 8016cec:	f000 f814 	bl	8016d18 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8016cf0:	e00d      	b.n	8016d0e <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8016cf2:	69fb      	ldr	r3, [r7, #28]
 8016cf4:	2b00      	cmp	r3, #0
 8016cf6:	d10a      	bne.n	8016d0e <xQueueGenericCreate+0x92>
        __asm volatile
 8016cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016cfc:	f383 8811 	msr	BASEPRI, r3
 8016d00:	f3bf 8f6f 	isb	sy
 8016d04:	f3bf 8f4f 	dsb	sy
 8016d08:	613b      	str	r3, [r7, #16]
    }
 8016d0a:	bf00      	nop
 8016d0c:	e7fe      	b.n	8016d0c <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8016d0e:	69fb      	ldr	r3, [r7, #28]
    }
 8016d10:	4618      	mov	r0, r3
 8016d12:	3720      	adds	r7, #32
 8016d14:	46bd      	mov	sp, r7
 8016d16:	bd80      	pop	{r7, pc}

08016d18 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8016d18:	b580      	push	{r7, lr}
 8016d1a:	b084      	sub	sp, #16
 8016d1c:	af00      	add	r7, sp, #0
 8016d1e:	60f8      	str	r0, [r7, #12]
 8016d20:	60b9      	str	r1, [r7, #8]
 8016d22:	607a      	str	r2, [r7, #4]
 8016d24:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8016d26:	68bb      	ldr	r3, [r7, #8]
 8016d28:	2b00      	cmp	r3, #0
 8016d2a:	d103      	bne.n	8016d34 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8016d2c:	69bb      	ldr	r3, [r7, #24]
 8016d2e:	69ba      	ldr	r2, [r7, #24]
 8016d30:	601a      	str	r2, [r3, #0]
 8016d32:	e002      	b.n	8016d3a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8016d34:	69bb      	ldr	r3, [r7, #24]
 8016d36:	687a      	ldr	r2, [r7, #4]
 8016d38:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8016d3a:	69bb      	ldr	r3, [r7, #24]
 8016d3c:	68fa      	ldr	r2, [r7, #12]
 8016d3e:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8016d40:	69bb      	ldr	r3, [r7, #24]
 8016d42:	68ba      	ldr	r2, [r7, #8]
 8016d44:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8016d46:	2101      	movs	r1, #1
 8016d48:	69b8      	ldr	r0, [r7, #24]
 8016d4a:	f7ff ff07 	bl	8016b5c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8016d4e:	69bb      	ldr	r3, [r7, #24]
 8016d50:	78fa      	ldrb	r2, [r7, #3]
 8016d52:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8016d56:	bf00      	nop
 8016d58:	3710      	adds	r7, #16
 8016d5a:	46bd      	mov	sp, r7
 8016d5c:	bd80      	pop	{r7, pc}
	...

08016d60 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8016d60:	b580      	push	{r7, lr}
 8016d62:	b08c      	sub	sp, #48	; 0x30
 8016d64:	af00      	add	r7, sp, #0
 8016d66:	60f8      	str	r0, [r7, #12]
 8016d68:	60b9      	str	r1, [r7, #8]
 8016d6a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8016d6c:	2300      	movs	r3, #0
 8016d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8016d70:	68fb      	ldr	r3, [r7, #12]
 8016d72:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8016d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d76:	2b00      	cmp	r3, #0
 8016d78:	d10a      	bne.n	8016d90 <xQueueReceive+0x30>
        __asm volatile
 8016d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d7e:	f383 8811 	msr	BASEPRI, r3
 8016d82:	f3bf 8f6f 	isb	sy
 8016d86:	f3bf 8f4f 	dsb	sy
 8016d8a:	623b      	str	r3, [r7, #32]
    }
 8016d8c:	bf00      	nop
 8016d8e:	e7fe      	b.n	8016d8e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016d90:	68bb      	ldr	r3, [r7, #8]
 8016d92:	2b00      	cmp	r3, #0
 8016d94:	d103      	bne.n	8016d9e <xQueueReceive+0x3e>
 8016d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016d9a:	2b00      	cmp	r3, #0
 8016d9c:	d101      	bne.n	8016da2 <xQueueReceive+0x42>
 8016d9e:	2301      	movs	r3, #1
 8016da0:	e000      	b.n	8016da4 <xQueueReceive+0x44>
 8016da2:	2300      	movs	r3, #0
 8016da4:	2b00      	cmp	r3, #0
 8016da6:	d10a      	bne.n	8016dbe <xQueueReceive+0x5e>
        __asm volatile
 8016da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016dac:	f383 8811 	msr	BASEPRI, r3
 8016db0:	f3bf 8f6f 	isb	sy
 8016db4:	f3bf 8f4f 	dsb	sy
 8016db8:	61fb      	str	r3, [r7, #28]
    }
 8016dba:	bf00      	nop
 8016dbc:	e7fe      	b.n	8016dbc <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016dbe:	f001 f949 	bl	8018054 <xTaskGetSchedulerState>
 8016dc2:	4603      	mov	r3, r0
 8016dc4:	2b00      	cmp	r3, #0
 8016dc6:	d102      	bne.n	8016dce <xQueueReceive+0x6e>
 8016dc8:	687b      	ldr	r3, [r7, #4]
 8016dca:	2b00      	cmp	r3, #0
 8016dcc:	d101      	bne.n	8016dd2 <xQueueReceive+0x72>
 8016dce:	2301      	movs	r3, #1
 8016dd0:	e000      	b.n	8016dd4 <xQueueReceive+0x74>
 8016dd2:	2300      	movs	r3, #0
 8016dd4:	2b00      	cmp	r3, #0
 8016dd6:	d10a      	bne.n	8016dee <xQueueReceive+0x8e>
        __asm volatile
 8016dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ddc:	f383 8811 	msr	BASEPRI, r3
 8016de0:	f3bf 8f6f 	isb	sy
 8016de4:	f3bf 8f4f 	dsb	sy
 8016de8:	61bb      	str	r3, [r7, #24]
    }
 8016dea:	bf00      	nop
 8016dec:	e7fe      	b.n	8016dec <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8016dee:	f001 fef3 	bl	8018bd8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016df6:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016dfa:	2b00      	cmp	r3, #0
 8016dfc:	d01f      	beq.n	8016e3e <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8016dfe:	68b9      	ldr	r1, [r7, #8]
 8016e00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016e02:	f000 f88d 	bl	8016f20 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8016e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e08:	1e5a      	subs	r2, r3, #1
 8016e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e0c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e10:	691b      	ldr	r3, [r3, #16]
 8016e12:	2b00      	cmp	r3, #0
 8016e14:	d00f      	beq.n	8016e36 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e18:	3310      	adds	r3, #16
 8016e1a:	4618      	mov	r0, r3
 8016e1c:	f000 ff0a 	bl	8017c34 <xTaskRemoveFromEventList>
 8016e20:	4603      	mov	r3, r0
 8016e22:	2b00      	cmp	r3, #0
 8016e24:	d007      	beq.n	8016e36 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8016e26:	4b3d      	ldr	r3, [pc, #244]	; (8016f1c <xQueueReceive+0x1bc>)
 8016e28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016e2c:	601a      	str	r2, [r3, #0]
 8016e2e:	f3bf 8f4f 	dsb	sy
 8016e32:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8016e36:	f001 feff 	bl	8018c38 <vPortExitCritical>
                return pdPASS;
 8016e3a:	2301      	movs	r3, #1
 8016e3c:	e069      	b.n	8016f12 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8016e3e:	687b      	ldr	r3, [r7, #4]
 8016e40:	2b00      	cmp	r3, #0
 8016e42:	d103      	bne.n	8016e4c <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8016e44:	f001 fef8 	bl	8018c38 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8016e48:	2300      	movs	r3, #0
 8016e4a:	e062      	b.n	8016f12 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8016e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e4e:	2b00      	cmp	r3, #0
 8016e50:	d106      	bne.n	8016e60 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8016e52:	f107 0310 	add.w	r3, r7, #16
 8016e56:	4618      	mov	r0, r3
 8016e58:	f000 ffc2 	bl	8017de0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8016e5c:	2301      	movs	r3, #1
 8016e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8016e60:	f001 feea 	bl	8018c38 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8016e64:	f000 fbf0 	bl	8017648 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8016e68:	f001 feb6 	bl	8018bd8 <vPortEnterCritical>
 8016e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016e72:	b25b      	sxtb	r3, r3
 8016e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016e78:	d103      	bne.n	8016e82 <xQueueReceive+0x122>
 8016e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e7c:	2200      	movs	r2, #0
 8016e7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016e88:	b25b      	sxtb	r3, r3
 8016e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016e8e:	d103      	bne.n	8016e98 <xQueueReceive+0x138>
 8016e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e92:	2200      	movs	r2, #0
 8016e94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016e98:	f001 fece 	bl	8018c38 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016e9c:	1d3a      	adds	r2, r7, #4
 8016e9e:	f107 0310 	add.w	r3, r7, #16
 8016ea2:	4611      	mov	r1, r2
 8016ea4:	4618      	mov	r0, r3
 8016ea6:	f000 ffb1 	bl	8017e0c <xTaskCheckForTimeOut>
 8016eaa:	4603      	mov	r3, r0
 8016eac:	2b00      	cmp	r3, #0
 8016eae:	d123      	bne.n	8016ef8 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016eb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016eb2:	f000 f8ad 	bl	8017010 <prvIsQueueEmpty>
 8016eb6:	4603      	mov	r3, r0
 8016eb8:	2b00      	cmp	r3, #0
 8016eba:	d017      	beq.n	8016eec <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8016ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ebe:	3324      	adds	r3, #36	; 0x24
 8016ec0:	687a      	ldr	r2, [r7, #4]
 8016ec2:	4611      	mov	r1, r2
 8016ec4:	4618      	mov	r0, r3
 8016ec6:	f000 fe4b 	bl	8017b60 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8016eca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016ecc:	f000 f84e 	bl	8016f6c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8016ed0:	f000 fbc8 	bl	8017664 <xTaskResumeAll>
 8016ed4:	4603      	mov	r3, r0
 8016ed6:	2b00      	cmp	r3, #0
 8016ed8:	d189      	bne.n	8016dee <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8016eda:	4b10      	ldr	r3, [pc, #64]	; (8016f1c <xQueueReceive+0x1bc>)
 8016edc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016ee0:	601a      	str	r2, [r3, #0]
 8016ee2:	f3bf 8f4f 	dsb	sy
 8016ee6:	f3bf 8f6f 	isb	sy
 8016eea:	e780      	b.n	8016dee <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8016eec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016eee:	f000 f83d 	bl	8016f6c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8016ef2:	f000 fbb7 	bl	8017664 <xTaskResumeAll>
 8016ef6:	e77a      	b.n	8016dee <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8016ef8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016efa:	f000 f837 	bl	8016f6c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8016efe:	f000 fbb1 	bl	8017664 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016f02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016f04:	f000 f884 	bl	8017010 <prvIsQueueEmpty>
 8016f08:	4603      	mov	r3, r0
 8016f0a:	2b00      	cmp	r3, #0
 8016f0c:	f43f af6f 	beq.w	8016dee <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8016f10:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8016f12:	4618      	mov	r0, r3
 8016f14:	3730      	adds	r7, #48	; 0x30
 8016f16:	46bd      	mov	sp, r7
 8016f18:	bd80      	pop	{r7, pc}
 8016f1a:	bf00      	nop
 8016f1c:	e000ed04 	.word	0xe000ed04

08016f20 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8016f20:	b580      	push	{r7, lr}
 8016f22:	b082      	sub	sp, #8
 8016f24:	af00      	add	r7, sp, #0
 8016f26:	6078      	str	r0, [r7, #4]
 8016f28:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8016f2a:	687b      	ldr	r3, [r7, #4]
 8016f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016f2e:	2b00      	cmp	r3, #0
 8016f30:	d018      	beq.n	8016f64 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8016f32:	687b      	ldr	r3, [r7, #4]
 8016f34:	68da      	ldr	r2, [r3, #12]
 8016f36:	687b      	ldr	r3, [r7, #4]
 8016f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016f3a:	441a      	add	r2, r3
 8016f3c:	687b      	ldr	r3, [r7, #4]
 8016f3e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8016f40:	687b      	ldr	r3, [r7, #4]
 8016f42:	68da      	ldr	r2, [r3, #12]
 8016f44:	687b      	ldr	r3, [r7, #4]
 8016f46:	689b      	ldr	r3, [r3, #8]
 8016f48:	429a      	cmp	r2, r3
 8016f4a:	d303      	bcc.n	8016f54 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8016f4c:	687b      	ldr	r3, [r7, #4]
 8016f4e:	681a      	ldr	r2, [r3, #0]
 8016f50:	687b      	ldr	r3, [r7, #4]
 8016f52:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8016f54:	687b      	ldr	r3, [r7, #4]
 8016f56:	68d9      	ldr	r1, [r3, #12]
 8016f58:	687b      	ldr	r3, [r7, #4]
 8016f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016f5c:	461a      	mov	r2, r3
 8016f5e:	6838      	ldr	r0, [r7, #0]
 8016f60:	f004 fcdf 	bl	801b922 <memcpy>
    }
}
 8016f64:	bf00      	nop
 8016f66:	3708      	adds	r7, #8
 8016f68:	46bd      	mov	sp, r7
 8016f6a:	bd80      	pop	{r7, pc}

08016f6c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8016f6c:	b580      	push	{r7, lr}
 8016f6e:	b084      	sub	sp, #16
 8016f70:	af00      	add	r7, sp, #0
 8016f72:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8016f74:	f001 fe30 	bl	8018bd8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8016f78:	687b      	ldr	r3, [r7, #4]
 8016f7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016f7e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8016f80:	e011      	b.n	8016fa6 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016f82:	687b      	ldr	r3, [r7, #4]
 8016f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f86:	2b00      	cmp	r3, #0
 8016f88:	d012      	beq.n	8016fb0 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016f8a:	687b      	ldr	r3, [r7, #4]
 8016f8c:	3324      	adds	r3, #36	; 0x24
 8016f8e:	4618      	mov	r0, r3
 8016f90:	f000 fe50 	bl	8017c34 <xTaskRemoveFromEventList>
 8016f94:	4603      	mov	r3, r0
 8016f96:	2b00      	cmp	r3, #0
 8016f98:	d001      	beq.n	8016f9e <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8016f9a:	f000 ff9d 	bl	8017ed8 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8016f9e:	7bfb      	ldrb	r3, [r7, #15]
 8016fa0:	3b01      	subs	r3, #1
 8016fa2:	b2db      	uxtb	r3, r3
 8016fa4:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8016fa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016faa:	2b00      	cmp	r3, #0
 8016fac:	dce9      	bgt.n	8016f82 <prvUnlockQueue+0x16>
 8016fae:	e000      	b.n	8016fb2 <prvUnlockQueue+0x46>
                    break;
 8016fb0:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8016fb2:	687b      	ldr	r3, [r7, #4]
 8016fb4:	22ff      	movs	r2, #255	; 0xff
 8016fb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8016fba:	f001 fe3d 	bl	8018c38 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8016fbe:	f001 fe0b 	bl	8018bd8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8016fc2:	687b      	ldr	r3, [r7, #4]
 8016fc4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016fc8:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8016fca:	e011      	b.n	8016ff0 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016fcc:	687b      	ldr	r3, [r7, #4]
 8016fce:	691b      	ldr	r3, [r3, #16]
 8016fd0:	2b00      	cmp	r3, #0
 8016fd2:	d012      	beq.n	8016ffa <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016fd4:	687b      	ldr	r3, [r7, #4]
 8016fd6:	3310      	adds	r3, #16
 8016fd8:	4618      	mov	r0, r3
 8016fda:	f000 fe2b 	bl	8017c34 <xTaskRemoveFromEventList>
 8016fde:	4603      	mov	r3, r0
 8016fe0:	2b00      	cmp	r3, #0
 8016fe2:	d001      	beq.n	8016fe8 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8016fe4:	f000 ff78 	bl	8017ed8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8016fe8:	7bbb      	ldrb	r3, [r7, #14]
 8016fea:	3b01      	subs	r3, #1
 8016fec:	b2db      	uxtb	r3, r3
 8016fee:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8016ff0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016ff4:	2b00      	cmp	r3, #0
 8016ff6:	dce9      	bgt.n	8016fcc <prvUnlockQueue+0x60>
 8016ff8:	e000      	b.n	8016ffc <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8016ffa:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8016ffc:	687b      	ldr	r3, [r7, #4]
 8016ffe:	22ff      	movs	r2, #255	; 0xff
 8017000:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8017004:	f001 fe18 	bl	8018c38 <vPortExitCritical>
}
 8017008:	bf00      	nop
 801700a:	3710      	adds	r7, #16
 801700c:	46bd      	mov	sp, r7
 801700e:	bd80      	pop	{r7, pc}

08017010 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8017010:	b580      	push	{r7, lr}
 8017012:	b084      	sub	sp, #16
 8017014:	af00      	add	r7, sp, #0
 8017016:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8017018:	f001 fdde 	bl	8018bd8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 801701c:	687b      	ldr	r3, [r7, #4]
 801701e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017020:	2b00      	cmp	r3, #0
 8017022:	d102      	bne.n	801702a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8017024:	2301      	movs	r3, #1
 8017026:	60fb      	str	r3, [r7, #12]
 8017028:	e001      	b.n	801702e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 801702a:	2300      	movs	r3, #0
 801702c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 801702e:	f001 fe03 	bl	8018c38 <vPortExitCritical>

    return xReturn;
 8017032:	68fb      	ldr	r3, [r7, #12]
}
 8017034:	4618      	mov	r0, r3
 8017036:	3710      	adds	r7, #16
 8017038:	46bd      	mov	sp, r7
 801703a:	bd80      	pop	{r7, pc}

0801703c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 801703c:	b480      	push	{r7}
 801703e:	b087      	sub	sp, #28
 8017040:	af00      	add	r7, sp, #0
 8017042:	6078      	str	r0, [r7, #4]
 8017044:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8017046:	2300      	movs	r3, #0
 8017048:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 801704a:	687b      	ldr	r3, [r7, #4]
 801704c:	2b00      	cmp	r3, #0
 801704e:	d10a      	bne.n	8017066 <vQueueAddToRegistry+0x2a>
        __asm volatile
 8017050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017054:	f383 8811 	msr	BASEPRI, r3
 8017058:	f3bf 8f6f 	isb	sy
 801705c:	f3bf 8f4f 	dsb	sy
 8017060:	60fb      	str	r3, [r7, #12]
    }
 8017062:	bf00      	nop
 8017064:	e7fe      	b.n	8017064 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8017066:	683b      	ldr	r3, [r7, #0]
 8017068:	2b00      	cmp	r3, #0
 801706a:	d024      	beq.n	80170b6 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801706c:	2300      	movs	r3, #0
 801706e:	617b      	str	r3, [r7, #20]
 8017070:	e01e      	b.n	80170b0 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8017072:	4a18      	ldr	r2, [pc, #96]	; (80170d4 <vQueueAddToRegistry+0x98>)
 8017074:	697b      	ldr	r3, [r7, #20]
 8017076:	00db      	lsls	r3, r3, #3
 8017078:	4413      	add	r3, r2
 801707a:	685b      	ldr	r3, [r3, #4]
 801707c:	687a      	ldr	r2, [r7, #4]
 801707e:	429a      	cmp	r2, r3
 8017080:	d105      	bne.n	801708e <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8017082:	697b      	ldr	r3, [r7, #20]
 8017084:	00db      	lsls	r3, r3, #3
 8017086:	4a13      	ldr	r2, [pc, #76]	; (80170d4 <vQueueAddToRegistry+0x98>)
 8017088:	4413      	add	r3, r2
 801708a:	613b      	str	r3, [r7, #16]
                    break;
 801708c:	e013      	b.n	80170b6 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 801708e:	693b      	ldr	r3, [r7, #16]
 8017090:	2b00      	cmp	r3, #0
 8017092:	d10a      	bne.n	80170aa <vQueueAddToRegistry+0x6e>
 8017094:	4a0f      	ldr	r2, [pc, #60]	; (80170d4 <vQueueAddToRegistry+0x98>)
 8017096:	697b      	ldr	r3, [r7, #20]
 8017098:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801709c:	2b00      	cmp	r3, #0
 801709e:	d104      	bne.n	80170aa <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80170a0:	697b      	ldr	r3, [r7, #20]
 80170a2:	00db      	lsls	r3, r3, #3
 80170a4:	4a0b      	ldr	r2, [pc, #44]	; (80170d4 <vQueueAddToRegistry+0x98>)
 80170a6:	4413      	add	r3, r2
 80170a8:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80170aa:	697b      	ldr	r3, [r7, #20]
 80170ac:	3301      	adds	r3, #1
 80170ae:	617b      	str	r3, [r7, #20]
 80170b0:	697b      	ldr	r3, [r7, #20]
 80170b2:	2b07      	cmp	r3, #7
 80170b4:	d9dd      	bls.n	8017072 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80170b6:	693b      	ldr	r3, [r7, #16]
 80170b8:	2b00      	cmp	r3, #0
 80170ba:	d005      	beq.n	80170c8 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80170bc:	693b      	ldr	r3, [r7, #16]
 80170be:	683a      	ldr	r2, [r7, #0]
 80170c0:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80170c2:	693b      	ldr	r3, [r7, #16]
 80170c4:	687a      	ldr	r2, [r7, #4]
 80170c6:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 80170c8:	bf00      	nop
 80170ca:	371c      	adds	r7, #28
 80170cc:	46bd      	mov	sp, r7
 80170ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170d2:	4770      	bx	lr
 80170d4:	200027c8 	.word	0x200027c8

080170d8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80170d8:	b580      	push	{r7, lr}
 80170da:	b086      	sub	sp, #24
 80170dc:	af00      	add	r7, sp, #0
 80170de:	60f8      	str	r0, [r7, #12]
 80170e0:	60b9      	str	r1, [r7, #8]
 80170e2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80170e4:	68fb      	ldr	r3, [r7, #12]
 80170e6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80170e8:	f001 fd76 	bl	8018bd8 <vPortEnterCritical>
 80170ec:	697b      	ldr	r3, [r7, #20]
 80170ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80170f2:	b25b      	sxtb	r3, r3
 80170f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80170f8:	d103      	bne.n	8017102 <vQueueWaitForMessageRestricted+0x2a>
 80170fa:	697b      	ldr	r3, [r7, #20]
 80170fc:	2200      	movs	r2, #0
 80170fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017102:	697b      	ldr	r3, [r7, #20]
 8017104:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017108:	b25b      	sxtb	r3, r3
 801710a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801710e:	d103      	bne.n	8017118 <vQueueWaitForMessageRestricted+0x40>
 8017110:	697b      	ldr	r3, [r7, #20]
 8017112:	2200      	movs	r2, #0
 8017114:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017118:	f001 fd8e 	bl	8018c38 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801711c:	697b      	ldr	r3, [r7, #20]
 801711e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017120:	2b00      	cmp	r3, #0
 8017122:	d106      	bne.n	8017132 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8017124:	697b      	ldr	r3, [r7, #20]
 8017126:	3324      	adds	r3, #36	; 0x24
 8017128:	687a      	ldr	r2, [r7, #4]
 801712a:	68b9      	ldr	r1, [r7, #8]
 801712c:	4618      	mov	r0, r3
 801712e:	f000 fd3b 	bl	8017ba8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8017132:	6978      	ldr	r0, [r7, #20]
 8017134:	f7ff ff1a 	bl	8016f6c <prvUnlockQueue>
    }
 8017138:	bf00      	nop
 801713a:	3718      	adds	r7, #24
 801713c:	46bd      	mov	sp, r7
 801713e:	bd80      	pop	{r7, pc}

08017140 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8017140:	b580      	push	{r7, lr}
 8017142:	b08c      	sub	sp, #48	; 0x30
 8017144:	af04      	add	r7, sp, #16
 8017146:	60f8      	str	r0, [r7, #12]
 8017148:	60b9      	str	r1, [r7, #8]
 801714a:	603b      	str	r3, [r7, #0]
 801714c:	4613      	mov	r3, r2
 801714e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8017150:	88fb      	ldrh	r3, [r7, #6]
 8017152:	009b      	lsls	r3, r3, #2
 8017154:	4618      	mov	r0, r3
 8017156:	f001 fe61 	bl	8018e1c <pvPortMalloc>
 801715a:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 801715c:	697b      	ldr	r3, [r7, #20]
 801715e:	2b00      	cmp	r3, #0
 8017160:	d013      	beq.n	801718a <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8017162:	2058      	movs	r0, #88	; 0x58
 8017164:	f001 fe5a 	bl	8018e1c <pvPortMalloc>
 8017168:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 801716a:	69fb      	ldr	r3, [r7, #28]
 801716c:	2b00      	cmp	r3, #0
 801716e:	d008      	beq.n	8017182 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8017170:	2258      	movs	r2, #88	; 0x58
 8017172:	2100      	movs	r1, #0
 8017174:	69f8      	ldr	r0, [r7, #28]
 8017176:	f004 fb45 	bl	801b804 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 801717a:	69fb      	ldr	r3, [r7, #28]
 801717c:	697a      	ldr	r2, [r7, #20]
 801717e:	631a      	str	r2, [r3, #48]	; 0x30
 8017180:	e005      	b.n	801718e <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8017182:	6978      	ldr	r0, [r7, #20]
 8017184:	f001 ff04 	bl	8018f90 <vPortFree>
 8017188:	e001      	b.n	801718e <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 801718a:	2300      	movs	r3, #0
 801718c:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 801718e:	69fb      	ldr	r3, [r7, #28]
 8017190:	2b00      	cmp	r3, #0
 8017192:	d013      	beq.n	80171bc <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8017194:	88fa      	ldrh	r2, [r7, #6]
 8017196:	2300      	movs	r3, #0
 8017198:	9303      	str	r3, [sp, #12]
 801719a:	69fb      	ldr	r3, [r7, #28]
 801719c:	9302      	str	r3, [sp, #8]
 801719e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171a0:	9301      	str	r3, [sp, #4]
 80171a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171a4:	9300      	str	r3, [sp, #0]
 80171a6:	683b      	ldr	r3, [r7, #0]
 80171a8:	68b9      	ldr	r1, [r7, #8]
 80171aa:	68f8      	ldr	r0, [r7, #12]
 80171ac:	f000 f80e 	bl	80171cc <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80171b0:	69f8      	ldr	r0, [r7, #28]
 80171b2:	f000 f899 	bl	80172e8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80171b6:	2301      	movs	r3, #1
 80171b8:	61bb      	str	r3, [r7, #24]
 80171ba:	e002      	b.n	80171c2 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80171bc:	f04f 33ff 	mov.w	r3, #4294967295
 80171c0:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80171c2:	69bb      	ldr	r3, [r7, #24]
    }
 80171c4:	4618      	mov	r0, r3
 80171c6:	3720      	adds	r7, #32
 80171c8:	46bd      	mov	sp, r7
 80171ca:	bd80      	pop	{r7, pc}

080171cc <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80171cc:	b580      	push	{r7, lr}
 80171ce:	b088      	sub	sp, #32
 80171d0:	af00      	add	r7, sp, #0
 80171d2:	60f8      	str	r0, [r7, #12]
 80171d4:	60b9      	str	r1, [r7, #8]
 80171d6:	607a      	str	r2, [r7, #4]
 80171d8:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80171da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171dc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80171de:	687b      	ldr	r3, [r7, #4]
 80171e0:	009b      	lsls	r3, r3, #2
 80171e2:	461a      	mov	r2, r3
 80171e4:	21a5      	movs	r1, #165	; 0xa5
 80171e6:	f004 fb0d 	bl	801b804 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80171ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80171ee:	687b      	ldr	r3, [r7, #4]
 80171f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80171f4:	3b01      	subs	r3, #1
 80171f6:	009b      	lsls	r3, r3, #2
 80171f8:	4413      	add	r3, r2
 80171fa:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80171fc:	69bb      	ldr	r3, [r7, #24]
 80171fe:	f023 0307 	bic.w	r3, r3, #7
 8017202:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8017204:	69bb      	ldr	r3, [r7, #24]
 8017206:	f003 0307 	and.w	r3, r3, #7
 801720a:	2b00      	cmp	r3, #0
 801720c:	d00a      	beq.n	8017224 <prvInitialiseNewTask+0x58>
        __asm volatile
 801720e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017212:	f383 8811 	msr	BASEPRI, r3
 8017216:	f3bf 8f6f 	isb	sy
 801721a:	f3bf 8f4f 	dsb	sy
 801721e:	617b      	str	r3, [r7, #20]
    }
 8017220:	bf00      	nop
 8017222:	e7fe      	b.n	8017222 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8017224:	68bb      	ldr	r3, [r7, #8]
 8017226:	2b00      	cmp	r3, #0
 8017228:	d01e      	beq.n	8017268 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801722a:	2300      	movs	r3, #0
 801722c:	61fb      	str	r3, [r7, #28]
 801722e:	e012      	b.n	8017256 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8017230:	68ba      	ldr	r2, [r7, #8]
 8017232:	69fb      	ldr	r3, [r7, #28]
 8017234:	4413      	add	r3, r2
 8017236:	7819      	ldrb	r1, [r3, #0]
 8017238:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801723a:	69fb      	ldr	r3, [r7, #28]
 801723c:	4413      	add	r3, r2
 801723e:	3334      	adds	r3, #52	; 0x34
 8017240:	460a      	mov	r2, r1
 8017242:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8017244:	68ba      	ldr	r2, [r7, #8]
 8017246:	69fb      	ldr	r3, [r7, #28]
 8017248:	4413      	add	r3, r2
 801724a:	781b      	ldrb	r3, [r3, #0]
 801724c:	2b00      	cmp	r3, #0
 801724e:	d006      	beq.n	801725e <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017250:	69fb      	ldr	r3, [r7, #28]
 8017252:	3301      	adds	r3, #1
 8017254:	61fb      	str	r3, [r7, #28]
 8017256:	69fb      	ldr	r3, [r7, #28]
 8017258:	2b09      	cmp	r3, #9
 801725a:	d9e9      	bls.n	8017230 <prvInitialiseNewTask+0x64>
 801725c:	e000      	b.n	8017260 <prvInitialiseNewTask+0x94>
            {
                break;
 801725e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8017260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017262:	2200      	movs	r2, #0
 8017264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8017268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801726a:	2b0f      	cmp	r3, #15
 801726c:	d90a      	bls.n	8017284 <prvInitialiseNewTask+0xb8>
        __asm volatile
 801726e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017272:	f383 8811 	msr	BASEPRI, r3
 8017276:	f3bf 8f6f 	isb	sy
 801727a:	f3bf 8f4f 	dsb	sy
 801727e:	613b      	str	r3, [r7, #16]
    }
 8017280:	bf00      	nop
 8017282:	e7fe      	b.n	8017282 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8017284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017286:	2b0f      	cmp	r3, #15
 8017288:	d901      	bls.n	801728e <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801728a:	230f      	movs	r3, #15
 801728c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 801728e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017290:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017292:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8017294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017296:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017298:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801729a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801729c:	3304      	adds	r3, #4
 801729e:	4618      	mov	r0, r3
 80172a0:	f7ff fbc8 	bl	8016a34 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80172a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172a6:	3318      	adds	r3, #24
 80172a8:	4618      	mov	r0, r3
 80172aa:	f7ff fbc3 	bl	8016a34 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80172ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80172b2:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80172b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172b6:	f1c3 0210 	rsb	r2, r3, #16
 80172ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172bc:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80172be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80172c2:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80172c4:	683a      	ldr	r2, [r7, #0]
 80172c6:	68f9      	ldr	r1, [r7, #12]
 80172c8:	69b8      	ldr	r0, [r7, #24]
 80172ca:	f001 fb53 	bl	8018974 <pxPortInitialiseStack>
 80172ce:	4602      	mov	r2, r0
 80172d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172d2:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80172d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172d6:	2b00      	cmp	r3, #0
 80172d8:	d002      	beq.n	80172e0 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80172da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80172de:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80172e0:	bf00      	nop
 80172e2:	3720      	adds	r7, #32
 80172e4:	46bd      	mov	sp, r7
 80172e6:	bd80      	pop	{r7, pc}

080172e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80172e8:	b580      	push	{r7, lr}
 80172ea:	b084      	sub	sp, #16
 80172ec:	af00      	add	r7, sp, #0
 80172ee:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80172f0:	f001 fc72 	bl	8018bd8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80172f4:	4b40      	ldr	r3, [pc, #256]	; (80173f8 <prvAddNewTaskToReadyList+0x110>)
 80172f6:	681b      	ldr	r3, [r3, #0]
 80172f8:	3301      	adds	r3, #1
 80172fa:	4a3f      	ldr	r2, [pc, #252]	; (80173f8 <prvAddNewTaskToReadyList+0x110>)
 80172fc:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80172fe:	4b3f      	ldr	r3, [pc, #252]	; (80173fc <prvAddNewTaskToReadyList+0x114>)
 8017300:	681b      	ldr	r3, [r3, #0]
 8017302:	2b00      	cmp	r3, #0
 8017304:	d109      	bne.n	801731a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8017306:	4a3d      	ldr	r2, [pc, #244]	; (80173fc <prvAddNewTaskToReadyList+0x114>)
 8017308:	687b      	ldr	r3, [r7, #4]
 801730a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801730c:	4b3a      	ldr	r3, [pc, #232]	; (80173f8 <prvAddNewTaskToReadyList+0x110>)
 801730e:	681b      	ldr	r3, [r3, #0]
 8017310:	2b01      	cmp	r3, #1
 8017312:	d110      	bne.n	8017336 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8017314:	f000 fe04 	bl	8017f20 <prvInitialiseTaskLists>
 8017318:	e00d      	b.n	8017336 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 801731a:	4b39      	ldr	r3, [pc, #228]	; (8017400 <prvAddNewTaskToReadyList+0x118>)
 801731c:	681b      	ldr	r3, [r3, #0]
 801731e:	2b00      	cmp	r3, #0
 8017320:	d109      	bne.n	8017336 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8017322:	4b36      	ldr	r3, [pc, #216]	; (80173fc <prvAddNewTaskToReadyList+0x114>)
 8017324:	681b      	ldr	r3, [r3, #0]
 8017326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017328:	687b      	ldr	r3, [r7, #4]
 801732a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801732c:	429a      	cmp	r2, r3
 801732e:	d802      	bhi.n	8017336 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8017330:	4a32      	ldr	r2, [pc, #200]	; (80173fc <prvAddNewTaskToReadyList+0x114>)
 8017332:	687b      	ldr	r3, [r7, #4]
 8017334:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8017336:	4b33      	ldr	r3, [pc, #204]	; (8017404 <prvAddNewTaskToReadyList+0x11c>)
 8017338:	681b      	ldr	r3, [r3, #0]
 801733a:	3301      	adds	r3, #1
 801733c:	4a31      	ldr	r2, [pc, #196]	; (8017404 <prvAddNewTaskToReadyList+0x11c>)
 801733e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8017340:	4b30      	ldr	r3, [pc, #192]	; (8017404 <prvAddNewTaskToReadyList+0x11c>)
 8017342:	681a      	ldr	r2, [r3, #0]
 8017344:	687b      	ldr	r3, [r7, #4]
 8017346:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8017348:	687b      	ldr	r3, [r7, #4]
 801734a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801734c:	2201      	movs	r2, #1
 801734e:	409a      	lsls	r2, r3
 8017350:	4b2d      	ldr	r3, [pc, #180]	; (8017408 <prvAddNewTaskToReadyList+0x120>)
 8017352:	681b      	ldr	r3, [r3, #0]
 8017354:	4313      	orrs	r3, r2
 8017356:	4a2c      	ldr	r2, [pc, #176]	; (8017408 <prvAddNewTaskToReadyList+0x120>)
 8017358:	6013      	str	r3, [r2, #0]
 801735a:	687b      	ldr	r3, [r7, #4]
 801735c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801735e:	492b      	ldr	r1, [pc, #172]	; (801740c <prvAddNewTaskToReadyList+0x124>)
 8017360:	4613      	mov	r3, r2
 8017362:	009b      	lsls	r3, r3, #2
 8017364:	4413      	add	r3, r2
 8017366:	009b      	lsls	r3, r3, #2
 8017368:	440b      	add	r3, r1
 801736a:	3304      	adds	r3, #4
 801736c:	681b      	ldr	r3, [r3, #0]
 801736e:	60fb      	str	r3, [r7, #12]
 8017370:	687b      	ldr	r3, [r7, #4]
 8017372:	68fa      	ldr	r2, [r7, #12]
 8017374:	609a      	str	r2, [r3, #8]
 8017376:	68fb      	ldr	r3, [r7, #12]
 8017378:	689a      	ldr	r2, [r3, #8]
 801737a:	687b      	ldr	r3, [r7, #4]
 801737c:	60da      	str	r2, [r3, #12]
 801737e:	68fb      	ldr	r3, [r7, #12]
 8017380:	689b      	ldr	r3, [r3, #8]
 8017382:	687a      	ldr	r2, [r7, #4]
 8017384:	3204      	adds	r2, #4
 8017386:	605a      	str	r2, [r3, #4]
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	1d1a      	adds	r2, r3, #4
 801738c:	68fb      	ldr	r3, [r7, #12]
 801738e:	609a      	str	r2, [r3, #8]
 8017390:	687b      	ldr	r3, [r7, #4]
 8017392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017394:	4613      	mov	r3, r2
 8017396:	009b      	lsls	r3, r3, #2
 8017398:	4413      	add	r3, r2
 801739a:	009b      	lsls	r3, r3, #2
 801739c:	4a1b      	ldr	r2, [pc, #108]	; (801740c <prvAddNewTaskToReadyList+0x124>)
 801739e:	441a      	add	r2, r3
 80173a0:	687b      	ldr	r3, [r7, #4]
 80173a2:	615a      	str	r2, [r3, #20]
 80173a4:	687b      	ldr	r3, [r7, #4]
 80173a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80173a8:	4918      	ldr	r1, [pc, #96]	; (801740c <prvAddNewTaskToReadyList+0x124>)
 80173aa:	4613      	mov	r3, r2
 80173ac:	009b      	lsls	r3, r3, #2
 80173ae:	4413      	add	r3, r2
 80173b0:	009b      	lsls	r3, r3, #2
 80173b2:	440b      	add	r3, r1
 80173b4:	681b      	ldr	r3, [r3, #0]
 80173b6:	1c59      	adds	r1, r3, #1
 80173b8:	4814      	ldr	r0, [pc, #80]	; (801740c <prvAddNewTaskToReadyList+0x124>)
 80173ba:	4613      	mov	r3, r2
 80173bc:	009b      	lsls	r3, r3, #2
 80173be:	4413      	add	r3, r2
 80173c0:	009b      	lsls	r3, r3, #2
 80173c2:	4403      	add	r3, r0
 80173c4:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80173c6:	f001 fc37 	bl	8018c38 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80173ca:	4b0d      	ldr	r3, [pc, #52]	; (8017400 <prvAddNewTaskToReadyList+0x118>)
 80173cc:	681b      	ldr	r3, [r3, #0]
 80173ce:	2b00      	cmp	r3, #0
 80173d0:	d00e      	beq.n	80173f0 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80173d2:	4b0a      	ldr	r3, [pc, #40]	; (80173fc <prvAddNewTaskToReadyList+0x114>)
 80173d4:	681b      	ldr	r3, [r3, #0]
 80173d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80173d8:	687b      	ldr	r3, [r7, #4]
 80173da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80173dc:	429a      	cmp	r2, r3
 80173de:	d207      	bcs.n	80173f0 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80173e0:	4b0b      	ldr	r3, [pc, #44]	; (8017410 <prvAddNewTaskToReadyList+0x128>)
 80173e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80173e6:	601a      	str	r2, [r3, #0]
 80173e8:	f3bf 8f4f 	dsb	sy
 80173ec:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80173f0:	bf00      	nop
 80173f2:	3710      	adds	r7, #16
 80173f4:	46bd      	mov	sp, r7
 80173f6:	bd80      	pop	{r7, pc}
 80173f8:	200029bc 	.word	0x200029bc
 80173fc:	20002808 	.word	0x20002808
 8017400:	200029c8 	.word	0x200029c8
 8017404:	200029d8 	.word	0x200029d8
 8017408:	200029c4 	.word	0x200029c4
 801740c:	2000280c 	.word	0x2000280c
 8017410:	e000ed04 	.word	0xe000ed04

08017414 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8017414:	b580      	push	{r7, lr}
 8017416:	b084      	sub	sp, #16
 8017418:	af00      	add	r7, sp, #0
 801741a:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 801741c:	f001 fbdc 	bl	8018bd8 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8017420:	687b      	ldr	r3, [r7, #4]
 8017422:	2b00      	cmp	r3, #0
 8017424:	d102      	bne.n	801742c <vTaskDelete+0x18>
 8017426:	4b3b      	ldr	r3, [pc, #236]	; (8017514 <vTaskDelete+0x100>)
 8017428:	681b      	ldr	r3, [r3, #0]
 801742a:	e000      	b.n	801742e <vTaskDelete+0x1a>
 801742c:	687b      	ldr	r3, [r7, #4]
 801742e:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017430:	68fb      	ldr	r3, [r7, #12]
 8017432:	3304      	adds	r3, #4
 8017434:	4618      	mov	r0, r3
 8017436:	f7ff fb67 	bl	8016b08 <uxListRemove>
 801743a:	4603      	mov	r3, r0
 801743c:	2b00      	cmp	r3, #0
 801743e:	d115      	bne.n	801746c <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8017440:	68fb      	ldr	r3, [r7, #12]
 8017442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017444:	4934      	ldr	r1, [pc, #208]	; (8017518 <vTaskDelete+0x104>)
 8017446:	4613      	mov	r3, r2
 8017448:	009b      	lsls	r3, r3, #2
 801744a:	4413      	add	r3, r2
 801744c:	009b      	lsls	r3, r3, #2
 801744e:	440b      	add	r3, r1
 8017450:	681b      	ldr	r3, [r3, #0]
 8017452:	2b00      	cmp	r3, #0
 8017454:	d10a      	bne.n	801746c <vTaskDelete+0x58>
 8017456:	68fb      	ldr	r3, [r7, #12]
 8017458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801745a:	2201      	movs	r2, #1
 801745c:	fa02 f303 	lsl.w	r3, r2, r3
 8017460:	43da      	mvns	r2, r3
 8017462:	4b2e      	ldr	r3, [pc, #184]	; (801751c <vTaskDelete+0x108>)
 8017464:	681b      	ldr	r3, [r3, #0]
 8017466:	4013      	ands	r3, r2
 8017468:	4a2c      	ldr	r2, [pc, #176]	; (801751c <vTaskDelete+0x108>)
 801746a:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801746c:	68fb      	ldr	r3, [r7, #12]
 801746e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017470:	2b00      	cmp	r3, #0
 8017472:	d004      	beq.n	801747e <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017474:	68fb      	ldr	r3, [r7, #12]
 8017476:	3318      	adds	r3, #24
 8017478:	4618      	mov	r0, r3
 801747a:	f7ff fb45 	bl	8016b08 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 801747e:	4b28      	ldr	r3, [pc, #160]	; (8017520 <vTaskDelete+0x10c>)
 8017480:	681b      	ldr	r3, [r3, #0]
 8017482:	3301      	adds	r3, #1
 8017484:	4a26      	ldr	r2, [pc, #152]	; (8017520 <vTaskDelete+0x10c>)
 8017486:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 8017488:	4b22      	ldr	r3, [pc, #136]	; (8017514 <vTaskDelete+0x100>)
 801748a:	681b      	ldr	r3, [r3, #0]
 801748c:	68fa      	ldr	r2, [r7, #12]
 801748e:	429a      	cmp	r2, r3
 8017490:	d10b      	bne.n	80174aa <vTaskDelete+0x96>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8017492:	68fb      	ldr	r3, [r7, #12]
 8017494:	3304      	adds	r3, #4
 8017496:	4619      	mov	r1, r3
 8017498:	4822      	ldr	r0, [pc, #136]	; (8017524 <vTaskDelete+0x110>)
 801749a:	f7ff fad8 	bl	8016a4e <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 801749e:	4b22      	ldr	r3, [pc, #136]	; (8017528 <vTaskDelete+0x114>)
 80174a0:	681b      	ldr	r3, [r3, #0]
 80174a2:	3301      	adds	r3, #1
 80174a4:	4a20      	ldr	r2, [pc, #128]	; (8017528 <vTaskDelete+0x114>)
 80174a6:	6013      	str	r3, [r2, #0]
 80174a8:	e006      	b.n	80174b8 <vTaskDelete+0xa4>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 80174aa:	4b20      	ldr	r3, [pc, #128]	; (801752c <vTaskDelete+0x118>)
 80174ac:	681b      	ldr	r3, [r3, #0]
 80174ae:	3b01      	subs	r3, #1
 80174b0:	4a1e      	ldr	r2, [pc, #120]	; (801752c <vTaskDelete+0x118>)
 80174b2:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 80174b4:	f000 fdb2 	bl	801801c <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 80174b8:	f001 fbbe 	bl	8018c38 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( pxTCB != pxCurrentTCB )
 80174bc:	4b15      	ldr	r3, [pc, #84]	; (8017514 <vTaskDelete+0x100>)
 80174be:	681b      	ldr	r3, [r3, #0]
 80174c0:	68fa      	ldr	r2, [r7, #12]
 80174c2:	429a      	cmp	r2, r3
 80174c4:	d002      	beq.n	80174cc <vTaskDelete+0xb8>
        {
            prvDeleteTCB( pxTCB );
 80174c6:	68f8      	ldr	r0, [r7, #12]
 80174c8:	f000 fd98 	bl	8017ffc <prvDeleteTCB>
        }

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 80174cc:	4b18      	ldr	r3, [pc, #96]	; (8017530 <vTaskDelete+0x11c>)
 80174ce:	681b      	ldr	r3, [r3, #0]
 80174d0:	2b00      	cmp	r3, #0
 80174d2:	d01b      	beq.n	801750c <vTaskDelete+0xf8>
        {
            if( pxTCB == pxCurrentTCB )
 80174d4:	4b0f      	ldr	r3, [pc, #60]	; (8017514 <vTaskDelete+0x100>)
 80174d6:	681b      	ldr	r3, [r3, #0]
 80174d8:	68fa      	ldr	r2, [r7, #12]
 80174da:	429a      	cmp	r2, r3
 80174dc:	d116      	bne.n	801750c <vTaskDelete+0xf8>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 80174de:	4b15      	ldr	r3, [pc, #84]	; (8017534 <vTaskDelete+0x120>)
 80174e0:	681b      	ldr	r3, [r3, #0]
 80174e2:	2b00      	cmp	r3, #0
 80174e4:	d00a      	beq.n	80174fc <vTaskDelete+0xe8>
        __asm volatile
 80174e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80174ea:	f383 8811 	msr	BASEPRI, r3
 80174ee:	f3bf 8f6f 	isb	sy
 80174f2:	f3bf 8f4f 	dsb	sy
 80174f6:	60bb      	str	r3, [r7, #8]
    }
 80174f8:	bf00      	nop
 80174fa:	e7fe      	b.n	80174fa <vTaskDelete+0xe6>
                portYIELD_WITHIN_API();
 80174fc:	4b0e      	ldr	r3, [pc, #56]	; (8017538 <vTaskDelete+0x124>)
 80174fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017502:	601a      	str	r2, [r3, #0]
 8017504:	f3bf 8f4f 	dsb	sy
 8017508:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 801750c:	bf00      	nop
 801750e:	3710      	adds	r7, #16
 8017510:	46bd      	mov	sp, r7
 8017512:	bd80      	pop	{r7, pc}
 8017514:	20002808 	.word	0x20002808
 8017518:	2000280c 	.word	0x2000280c
 801751c:	200029c4 	.word	0x200029c4
 8017520:	200029d8 	.word	0x200029d8
 8017524:	20002990 	.word	0x20002990
 8017528:	200029a4 	.word	0x200029a4
 801752c:	200029bc 	.word	0x200029bc
 8017530:	200029c8 	.word	0x200029c8
 8017534:	200029e4 	.word	0x200029e4
 8017538:	e000ed04 	.word	0xe000ed04

0801753c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 801753c:	b580      	push	{r7, lr}
 801753e:	b084      	sub	sp, #16
 8017540:	af00      	add	r7, sp, #0
 8017542:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8017544:	2300      	movs	r3, #0
 8017546:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8017548:	687b      	ldr	r3, [r7, #4]
 801754a:	2b00      	cmp	r3, #0
 801754c:	d017      	beq.n	801757e <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 801754e:	4b13      	ldr	r3, [pc, #76]	; (801759c <vTaskDelay+0x60>)
 8017550:	681b      	ldr	r3, [r3, #0]
 8017552:	2b00      	cmp	r3, #0
 8017554:	d00a      	beq.n	801756c <vTaskDelay+0x30>
        __asm volatile
 8017556:	f04f 0350 	mov.w	r3, #80	; 0x50
 801755a:	f383 8811 	msr	BASEPRI, r3
 801755e:	f3bf 8f6f 	isb	sy
 8017562:	f3bf 8f4f 	dsb	sy
 8017566:	60bb      	str	r3, [r7, #8]
    }
 8017568:	bf00      	nop
 801756a:	e7fe      	b.n	801756a <vTaskDelay+0x2e>
            vTaskSuspendAll();
 801756c:	f000 f86c 	bl	8017648 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8017570:	2100      	movs	r1, #0
 8017572:	6878      	ldr	r0, [r7, #4]
 8017574:	f000 fefa 	bl	801836c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8017578:	f000 f874 	bl	8017664 <xTaskResumeAll>
 801757c:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 801757e:	68fb      	ldr	r3, [r7, #12]
 8017580:	2b00      	cmp	r3, #0
 8017582:	d107      	bne.n	8017594 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 8017584:	4b06      	ldr	r3, [pc, #24]	; (80175a0 <vTaskDelay+0x64>)
 8017586:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801758a:	601a      	str	r2, [r3, #0]
 801758c:	f3bf 8f4f 	dsb	sy
 8017590:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8017594:	bf00      	nop
 8017596:	3710      	adds	r7, #16
 8017598:	46bd      	mov	sp, r7
 801759a:	bd80      	pop	{r7, pc}
 801759c:	200029e4 	.word	0x200029e4
 80175a0:	e000ed04 	.word	0xe000ed04

080175a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80175a4:	b580      	push	{r7, lr}
 80175a6:	b086      	sub	sp, #24
 80175a8:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 80175aa:	4b20      	ldr	r3, [pc, #128]	; (801762c <vTaskStartScheduler+0x88>)
 80175ac:	9301      	str	r3, [sp, #4]
 80175ae:	2300      	movs	r3, #0
 80175b0:	9300      	str	r3, [sp, #0]
 80175b2:	2300      	movs	r3, #0
 80175b4:	2282      	movs	r2, #130	; 0x82
 80175b6:	491e      	ldr	r1, [pc, #120]	; (8017630 <vTaskStartScheduler+0x8c>)
 80175b8:	481e      	ldr	r0, [pc, #120]	; (8017634 <vTaskStartScheduler+0x90>)
 80175ba:	f7ff fdc1 	bl	8017140 <xTaskCreate>
 80175be:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80175c0:	68fb      	ldr	r3, [r7, #12]
 80175c2:	2b01      	cmp	r3, #1
 80175c4:	d102      	bne.n	80175cc <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 80175c6:	f000 ff51 	bl	801846c <xTimerCreateTimerTask>
 80175ca:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80175cc:	68fb      	ldr	r3, [r7, #12]
 80175ce:	2b01      	cmp	r3, #1
 80175d0:	d116      	bne.n	8017600 <vTaskStartScheduler+0x5c>
        __asm volatile
 80175d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80175d6:	f383 8811 	msr	BASEPRI, r3
 80175da:	f3bf 8f6f 	isb	sy
 80175de:	f3bf 8f4f 	dsb	sy
 80175e2:	60bb      	str	r3, [r7, #8]
    }
 80175e4:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80175e6:	4b14      	ldr	r3, [pc, #80]	; (8017638 <vTaskStartScheduler+0x94>)
 80175e8:	f04f 32ff 	mov.w	r2, #4294967295
 80175ec:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80175ee:	4b13      	ldr	r3, [pc, #76]	; (801763c <vTaskStartScheduler+0x98>)
 80175f0:	2201      	movs	r2, #1
 80175f2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80175f4:	4b12      	ldr	r3, [pc, #72]	; (8017640 <vTaskStartScheduler+0x9c>)
 80175f6:	2200      	movs	r2, #0
 80175f8:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80175fa:	f001 fa4b 	bl	8018a94 <xPortStartScheduler>
 80175fe:	e00e      	b.n	801761e <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8017600:	68fb      	ldr	r3, [r7, #12]
 8017602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017606:	d10a      	bne.n	801761e <vTaskStartScheduler+0x7a>
        __asm volatile
 8017608:	f04f 0350 	mov.w	r3, #80	; 0x50
 801760c:	f383 8811 	msr	BASEPRI, r3
 8017610:	f3bf 8f6f 	isb	sy
 8017614:	f3bf 8f4f 	dsb	sy
 8017618:	607b      	str	r3, [r7, #4]
    }
 801761a:	bf00      	nop
 801761c:	e7fe      	b.n	801761c <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 801761e:	4b09      	ldr	r3, [pc, #36]	; (8017644 <vTaskStartScheduler+0xa0>)
 8017620:	681b      	ldr	r3, [r3, #0]
}
 8017622:	bf00      	nop
 8017624:	3710      	adds	r7, #16
 8017626:	46bd      	mov	sp, r7
 8017628:	bd80      	pop	{r7, pc}
 801762a:	bf00      	nop
 801762c:	200029e0 	.word	0x200029e0
 8017630:	0801fe50 	.word	0x0801fe50
 8017634:	08017ef1 	.word	0x08017ef1
 8017638:	200029dc 	.word	0x200029dc
 801763c:	200029c8 	.word	0x200029c8
 8017640:	200029c0 	.word	0x200029c0
 8017644:	200000ec 	.word	0x200000ec

08017648 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8017648:	b480      	push	{r7}
 801764a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 801764c:	4b04      	ldr	r3, [pc, #16]	; (8017660 <vTaskSuspendAll+0x18>)
 801764e:	681b      	ldr	r3, [r3, #0]
 8017650:	3301      	adds	r3, #1
 8017652:	4a03      	ldr	r2, [pc, #12]	; (8017660 <vTaskSuspendAll+0x18>)
 8017654:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8017656:	bf00      	nop
 8017658:	46bd      	mov	sp, r7
 801765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801765e:	4770      	bx	lr
 8017660:	200029e4 	.word	0x200029e4

08017664 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8017664:	b580      	push	{r7, lr}
 8017666:	b088      	sub	sp, #32
 8017668:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 801766a:	2300      	movs	r3, #0
 801766c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 801766e:	2300      	movs	r3, #0
 8017670:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8017672:	4b71      	ldr	r3, [pc, #452]	; (8017838 <xTaskResumeAll+0x1d4>)
 8017674:	681b      	ldr	r3, [r3, #0]
 8017676:	2b00      	cmp	r3, #0
 8017678:	d10a      	bne.n	8017690 <xTaskResumeAll+0x2c>
        __asm volatile
 801767a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801767e:	f383 8811 	msr	BASEPRI, r3
 8017682:	f3bf 8f6f 	isb	sy
 8017686:	f3bf 8f4f 	dsb	sy
 801768a:	607b      	str	r3, [r7, #4]
    }
 801768c:	bf00      	nop
 801768e:	e7fe      	b.n	801768e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8017690:	f001 faa2 	bl	8018bd8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8017694:	4b68      	ldr	r3, [pc, #416]	; (8017838 <xTaskResumeAll+0x1d4>)
 8017696:	681b      	ldr	r3, [r3, #0]
 8017698:	3b01      	subs	r3, #1
 801769a:	4a67      	ldr	r2, [pc, #412]	; (8017838 <xTaskResumeAll+0x1d4>)
 801769c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801769e:	4b66      	ldr	r3, [pc, #408]	; (8017838 <xTaskResumeAll+0x1d4>)
 80176a0:	681b      	ldr	r3, [r3, #0]
 80176a2:	2b00      	cmp	r3, #0
 80176a4:	f040 80c0 	bne.w	8017828 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80176a8:	4b64      	ldr	r3, [pc, #400]	; (801783c <xTaskResumeAll+0x1d8>)
 80176aa:	681b      	ldr	r3, [r3, #0]
 80176ac:	2b00      	cmp	r3, #0
 80176ae:	f000 80bb 	beq.w	8017828 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80176b2:	e08a      	b.n	80177ca <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80176b4:	4b62      	ldr	r3, [pc, #392]	; (8017840 <xTaskResumeAll+0x1dc>)
 80176b6:	68db      	ldr	r3, [r3, #12]
 80176b8:	68db      	ldr	r3, [r3, #12]
 80176ba:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80176bc:	69fb      	ldr	r3, [r7, #28]
 80176be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80176c0:	613b      	str	r3, [r7, #16]
 80176c2:	69fb      	ldr	r3, [r7, #28]
 80176c4:	69db      	ldr	r3, [r3, #28]
 80176c6:	69fa      	ldr	r2, [r7, #28]
 80176c8:	6a12      	ldr	r2, [r2, #32]
 80176ca:	609a      	str	r2, [r3, #8]
 80176cc:	69fb      	ldr	r3, [r7, #28]
 80176ce:	6a1b      	ldr	r3, [r3, #32]
 80176d0:	69fa      	ldr	r2, [r7, #28]
 80176d2:	69d2      	ldr	r2, [r2, #28]
 80176d4:	605a      	str	r2, [r3, #4]
 80176d6:	693b      	ldr	r3, [r7, #16]
 80176d8:	685a      	ldr	r2, [r3, #4]
 80176da:	69fb      	ldr	r3, [r7, #28]
 80176dc:	3318      	adds	r3, #24
 80176de:	429a      	cmp	r2, r3
 80176e0:	d103      	bne.n	80176ea <xTaskResumeAll+0x86>
 80176e2:	69fb      	ldr	r3, [r7, #28]
 80176e4:	6a1a      	ldr	r2, [r3, #32]
 80176e6:	693b      	ldr	r3, [r7, #16]
 80176e8:	605a      	str	r2, [r3, #4]
 80176ea:	69fb      	ldr	r3, [r7, #28]
 80176ec:	2200      	movs	r2, #0
 80176ee:	629a      	str	r2, [r3, #40]	; 0x28
 80176f0:	693b      	ldr	r3, [r7, #16]
 80176f2:	681b      	ldr	r3, [r3, #0]
 80176f4:	1e5a      	subs	r2, r3, #1
 80176f6:	693b      	ldr	r3, [r7, #16]
 80176f8:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80176fa:	69fb      	ldr	r3, [r7, #28]
 80176fc:	695b      	ldr	r3, [r3, #20]
 80176fe:	60fb      	str	r3, [r7, #12]
 8017700:	69fb      	ldr	r3, [r7, #28]
 8017702:	689b      	ldr	r3, [r3, #8]
 8017704:	69fa      	ldr	r2, [r7, #28]
 8017706:	68d2      	ldr	r2, [r2, #12]
 8017708:	609a      	str	r2, [r3, #8]
 801770a:	69fb      	ldr	r3, [r7, #28]
 801770c:	68db      	ldr	r3, [r3, #12]
 801770e:	69fa      	ldr	r2, [r7, #28]
 8017710:	6892      	ldr	r2, [r2, #8]
 8017712:	605a      	str	r2, [r3, #4]
 8017714:	68fb      	ldr	r3, [r7, #12]
 8017716:	685a      	ldr	r2, [r3, #4]
 8017718:	69fb      	ldr	r3, [r7, #28]
 801771a:	3304      	adds	r3, #4
 801771c:	429a      	cmp	r2, r3
 801771e:	d103      	bne.n	8017728 <xTaskResumeAll+0xc4>
 8017720:	69fb      	ldr	r3, [r7, #28]
 8017722:	68da      	ldr	r2, [r3, #12]
 8017724:	68fb      	ldr	r3, [r7, #12]
 8017726:	605a      	str	r2, [r3, #4]
 8017728:	69fb      	ldr	r3, [r7, #28]
 801772a:	2200      	movs	r2, #0
 801772c:	615a      	str	r2, [r3, #20]
 801772e:	68fb      	ldr	r3, [r7, #12]
 8017730:	681b      	ldr	r3, [r3, #0]
 8017732:	1e5a      	subs	r2, r3, #1
 8017734:	68fb      	ldr	r3, [r7, #12]
 8017736:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8017738:	69fb      	ldr	r3, [r7, #28]
 801773a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801773c:	2201      	movs	r2, #1
 801773e:	409a      	lsls	r2, r3
 8017740:	4b40      	ldr	r3, [pc, #256]	; (8017844 <xTaskResumeAll+0x1e0>)
 8017742:	681b      	ldr	r3, [r3, #0]
 8017744:	4313      	orrs	r3, r2
 8017746:	4a3f      	ldr	r2, [pc, #252]	; (8017844 <xTaskResumeAll+0x1e0>)
 8017748:	6013      	str	r3, [r2, #0]
 801774a:	69fb      	ldr	r3, [r7, #28]
 801774c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801774e:	493e      	ldr	r1, [pc, #248]	; (8017848 <xTaskResumeAll+0x1e4>)
 8017750:	4613      	mov	r3, r2
 8017752:	009b      	lsls	r3, r3, #2
 8017754:	4413      	add	r3, r2
 8017756:	009b      	lsls	r3, r3, #2
 8017758:	440b      	add	r3, r1
 801775a:	3304      	adds	r3, #4
 801775c:	681b      	ldr	r3, [r3, #0]
 801775e:	60bb      	str	r3, [r7, #8]
 8017760:	69fb      	ldr	r3, [r7, #28]
 8017762:	68ba      	ldr	r2, [r7, #8]
 8017764:	609a      	str	r2, [r3, #8]
 8017766:	68bb      	ldr	r3, [r7, #8]
 8017768:	689a      	ldr	r2, [r3, #8]
 801776a:	69fb      	ldr	r3, [r7, #28]
 801776c:	60da      	str	r2, [r3, #12]
 801776e:	68bb      	ldr	r3, [r7, #8]
 8017770:	689b      	ldr	r3, [r3, #8]
 8017772:	69fa      	ldr	r2, [r7, #28]
 8017774:	3204      	adds	r2, #4
 8017776:	605a      	str	r2, [r3, #4]
 8017778:	69fb      	ldr	r3, [r7, #28]
 801777a:	1d1a      	adds	r2, r3, #4
 801777c:	68bb      	ldr	r3, [r7, #8]
 801777e:	609a      	str	r2, [r3, #8]
 8017780:	69fb      	ldr	r3, [r7, #28]
 8017782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017784:	4613      	mov	r3, r2
 8017786:	009b      	lsls	r3, r3, #2
 8017788:	4413      	add	r3, r2
 801778a:	009b      	lsls	r3, r3, #2
 801778c:	4a2e      	ldr	r2, [pc, #184]	; (8017848 <xTaskResumeAll+0x1e4>)
 801778e:	441a      	add	r2, r3
 8017790:	69fb      	ldr	r3, [r7, #28]
 8017792:	615a      	str	r2, [r3, #20]
 8017794:	69fb      	ldr	r3, [r7, #28]
 8017796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017798:	492b      	ldr	r1, [pc, #172]	; (8017848 <xTaskResumeAll+0x1e4>)
 801779a:	4613      	mov	r3, r2
 801779c:	009b      	lsls	r3, r3, #2
 801779e:	4413      	add	r3, r2
 80177a0:	009b      	lsls	r3, r3, #2
 80177a2:	440b      	add	r3, r1
 80177a4:	681b      	ldr	r3, [r3, #0]
 80177a6:	1c59      	adds	r1, r3, #1
 80177a8:	4827      	ldr	r0, [pc, #156]	; (8017848 <xTaskResumeAll+0x1e4>)
 80177aa:	4613      	mov	r3, r2
 80177ac:	009b      	lsls	r3, r3, #2
 80177ae:	4413      	add	r3, r2
 80177b0:	009b      	lsls	r3, r3, #2
 80177b2:	4403      	add	r3, r0
 80177b4:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80177b6:	69fb      	ldr	r3, [r7, #28]
 80177b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80177ba:	4b24      	ldr	r3, [pc, #144]	; (801784c <xTaskResumeAll+0x1e8>)
 80177bc:	681b      	ldr	r3, [r3, #0]
 80177be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80177c0:	429a      	cmp	r2, r3
 80177c2:	d302      	bcc.n	80177ca <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 80177c4:	4b22      	ldr	r3, [pc, #136]	; (8017850 <xTaskResumeAll+0x1ec>)
 80177c6:	2201      	movs	r2, #1
 80177c8:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80177ca:	4b1d      	ldr	r3, [pc, #116]	; (8017840 <xTaskResumeAll+0x1dc>)
 80177cc:	681b      	ldr	r3, [r3, #0]
 80177ce:	2b00      	cmp	r3, #0
 80177d0:	f47f af70 	bne.w	80176b4 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80177d4:	69fb      	ldr	r3, [r7, #28]
 80177d6:	2b00      	cmp	r3, #0
 80177d8:	d001      	beq.n	80177de <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80177da:	f000 fc1f 	bl	801801c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80177de:	4b1d      	ldr	r3, [pc, #116]	; (8017854 <xTaskResumeAll+0x1f0>)
 80177e0:	681b      	ldr	r3, [r3, #0]
 80177e2:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80177e4:	697b      	ldr	r3, [r7, #20]
 80177e6:	2b00      	cmp	r3, #0
 80177e8:	d010      	beq.n	801780c <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80177ea:	f000 f847 	bl	801787c <xTaskIncrementTick>
 80177ee:	4603      	mov	r3, r0
 80177f0:	2b00      	cmp	r3, #0
 80177f2:	d002      	beq.n	80177fa <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 80177f4:	4b16      	ldr	r3, [pc, #88]	; (8017850 <xTaskResumeAll+0x1ec>)
 80177f6:	2201      	movs	r2, #1
 80177f8:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80177fa:	697b      	ldr	r3, [r7, #20]
 80177fc:	3b01      	subs	r3, #1
 80177fe:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8017800:	697b      	ldr	r3, [r7, #20]
 8017802:	2b00      	cmp	r3, #0
 8017804:	d1f1      	bne.n	80177ea <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8017806:	4b13      	ldr	r3, [pc, #76]	; (8017854 <xTaskResumeAll+0x1f0>)
 8017808:	2200      	movs	r2, #0
 801780a:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 801780c:	4b10      	ldr	r3, [pc, #64]	; (8017850 <xTaskResumeAll+0x1ec>)
 801780e:	681b      	ldr	r3, [r3, #0]
 8017810:	2b00      	cmp	r3, #0
 8017812:	d009      	beq.n	8017828 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8017814:	2301      	movs	r3, #1
 8017816:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8017818:	4b0f      	ldr	r3, [pc, #60]	; (8017858 <xTaskResumeAll+0x1f4>)
 801781a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801781e:	601a      	str	r2, [r3, #0]
 8017820:	f3bf 8f4f 	dsb	sy
 8017824:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8017828:	f001 fa06 	bl	8018c38 <vPortExitCritical>

    return xAlreadyYielded;
 801782c:	69bb      	ldr	r3, [r7, #24]
}
 801782e:	4618      	mov	r0, r3
 8017830:	3720      	adds	r7, #32
 8017832:	46bd      	mov	sp, r7
 8017834:	bd80      	pop	{r7, pc}
 8017836:	bf00      	nop
 8017838:	200029e4 	.word	0x200029e4
 801783c:	200029bc 	.word	0x200029bc
 8017840:	2000297c 	.word	0x2000297c
 8017844:	200029c4 	.word	0x200029c4
 8017848:	2000280c 	.word	0x2000280c
 801784c:	20002808 	.word	0x20002808
 8017850:	200029d0 	.word	0x200029d0
 8017854:	200029cc 	.word	0x200029cc
 8017858:	e000ed04 	.word	0xe000ed04

0801785c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801785c:	b480      	push	{r7}
 801785e:	b083      	sub	sp, #12
 8017860:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8017862:	4b05      	ldr	r3, [pc, #20]	; (8017878 <xTaskGetTickCount+0x1c>)
 8017864:	681b      	ldr	r3, [r3, #0]
 8017866:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8017868:	687b      	ldr	r3, [r7, #4]
}
 801786a:	4618      	mov	r0, r3
 801786c:	370c      	adds	r7, #12
 801786e:	46bd      	mov	sp, r7
 8017870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017874:	4770      	bx	lr
 8017876:	bf00      	nop
 8017878:	200029c0 	.word	0x200029c0

0801787c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801787c:	b580      	push	{r7, lr}
 801787e:	b08a      	sub	sp, #40	; 0x28
 8017880:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8017882:	2300      	movs	r3, #0
 8017884:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017886:	4b7d      	ldr	r3, [pc, #500]	; (8017a7c <xTaskIncrementTick+0x200>)
 8017888:	681b      	ldr	r3, [r3, #0]
 801788a:	2b00      	cmp	r3, #0
 801788c:	f040 80ec 	bne.w	8017a68 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8017890:	4b7b      	ldr	r3, [pc, #492]	; (8017a80 <xTaskIncrementTick+0x204>)
 8017892:	681b      	ldr	r3, [r3, #0]
 8017894:	3301      	adds	r3, #1
 8017896:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8017898:	4a79      	ldr	r2, [pc, #484]	; (8017a80 <xTaskIncrementTick+0x204>)
 801789a:	6a3b      	ldr	r3, [r7, #32]
 801789c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801789e:	6a3b      	ldr	r3, [r7, #32]
 80178a0:	2b00      	cmp	r3, #0
 80178a2:	d120      	bne.n	80178e6 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80178a4:	4b77      	ldr	r3, [pc, #476]	; (8017a84 <xTaskIncrementTick+0x208>)
 80178a6:	681b      	ldr	r3, [r3, #0]
 80178a8:	681b      	ldr	r3, [r3, #0]
 80178aa:	2b00      	cmp	r3, #0
 80178ac:	d00a      	beq.n	80178c4 <xTaskIncrementTick+0x48>
        __asm volatile
 80178ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80178b2:	f383 8811 	msr	BASEPRI, r3
 80178b6:	f3bf 8f6f 	isb	sy
 80178ba:	f3bf 8f4f 	dsb	sy
 80178be:	607b      	str	r3, [r7, #4]
    }
 80178c0:	bf00      	nop
 80178c2:	e7fe      	b.n	80178c2 <xTaskIncrementTick+0x46>
 80178c4:	4b6f      	ldr	r3, [pc, #444]	; (8017a84 <xTaskIncrementTick+0x208>)
 80178c6:	681b      	ldr	r3, [r3, #0]
 80178c8:	61fb      	str	r3, [r7, #28]
 80178ca:	4b6f      	ldr	r3, [pc, #444]	; (8017a88 <xTaskIncrementTick+0x20c>)
 80178cc:	681b      	ldr	r3, [r3, #0]
 80178ce:	4a6d      	ldr	r2, [pc, #436]	; (8017a84 <xTaskIncrementTick+0x208>)
 80178d0:	6013      	str	r3, [r2, #0]
 80178d2:	4a6d      	ldr	r2, [pc, #436]	; (8017a88 <xTaskIncrementTick+0x20c>)
 80178d4:	69fb      	ldr	r3, [r7, #28]
 80178d6:	6013      	str	r3, [r2, #0]
 80178d8:	4b6c      	ldr	r3, [pc, #432]	; (8017a8c <xTaskIncrementTick+0x210>)
 80178da:	681b      	ldr	r3, [r3, #0]
 80178dc:	3301      	adds	r3, #1
 80178de:	4a6b      	ldr	r2, [pc, #428]	; (8017a8c <xTaskIncrementTick+0x210>)
 80178e0:	6013      	str	r3, [r2, #0]
 80178e2:	f000 fb9b 	bl	801801c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80178e6:	4b6a      	ldr	r3, [pc, #424]	; (8017a90 <xTaskIncrementTick+0x214>)
 80178e8:	681b      	ldr	r3, [r3, #0]
 80178ea:	6a3a      	ldr	r2, [r7, #32]
 80178ec:	429a      	cmp	r2, r3
 80178ee:	f0c0 80a6 	bcc.w	8017a3e <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80178f2:	4b64      	ldr	r3, [pc, #400]	; (8017a84 <xTaskIncrementTick+0x208>)
 80178f4:	681b      	ldr	r3, [r3, #0]
 80178f6:	681b      	ldr	r3, [r3, #0]
 80178f8:	2b00      	cmp	r3, #0
 80178fa:	d104      	bne.n	8017906 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80178fc:	4b64      	ldr	r3, [pc, #400]	; (8017a90 <xTaskIncrementTick+0x214>)
 80178fe:	f04f 32ff 	mov.w	r2, #4294967295
 8017902:	601a      	str	r2, [r3, #0]
                    break;
 8017904:	e09b      	b.n	8017a3e <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017906:	4b5f      	ldr	r3, [pc, #380]	; (8017a84 <xTaskIncrementTick+0x208>)
 8017908:	681b      	ldr	r3, [r3, #0]
 801790a:	68db      	ldr	r3, [r3, #12]
 801790c:	68db      	ldr	r3, [r3, #12]
 801790e:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8017910:	69bb      	ldr	r3, [r7, #24]
 8017912:	685b      	ldr	r3, [r3, #4]
 8017914:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8017916:	6a3a      	ldr	r2, [r7, #32]
 8017918:	697b      	ldr	r3, [r7, #20]
 801791a:	429a      	cmp	r2, r3
 801791c:	d203      	bcs.n	8017926 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 801791e:	4a5c      	ldr	r2, [pc, #368]	; (8017a90 <xTaskIncrementTick+0x214>)
 8017920:	697b      	ldr	r3, [r7, #20]
 8017922:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8017924:	e08b      	b.n	8017a3e <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8017926:	69bb      	ldr	r3, [r7, #24]
 8017928:	695b      	ldr	r3, [r3, #20]
 801792a:	613b      	str	r3, [r7, #16]
 801792c:	69bb      	ldr	r3, [r7, #24]
 801792e:	689b      	ldr	r3, [r3, #8]
 8017930:	69ba      	ldr	r2, [r7, #24]
 8017932:	68d2      	ldr	r2, [r2, #12]
 8017934:	609a      	str	r2, [r3, #8]
 8017936:	69bb      	ldr	r3, [r7, #24]
 8017938:	68db      	ldr	r3, [r3, #12]
 801793a:	69ba      	ldr	r2, [r7, #24]
 801793c:	6892      	ldr	r2, [r2, #8]
 801793e:	605a      	str	r2, [r3, #4]
 8017940:	693b      	ldr	r3, [r7, #16]
 8017942:	685a      	ldr	r2, [r3, #4]
 8017944:	69bb      	ldr	r3, [r7, #24]
 8017946:	3304      	adds	r3, #4
 8017948:	429a      	cmp	r2, r3
 801794a:	d103      	bne.n	8017954 <xTaskIncrementTick+0xd8>
 801794c:	69bb      	ldr	r3, [r7, #24]
 801794e:	68da      	ldr	r2, [r3, #12]
 8017950:	693b      	ldr	r3, [r7, #16]
 8017952:	605a      	str	r2, [r3, #4]
 8017954:	69bb      	ldr	r3, [r7, #24]
 8017956:	2200      	movs	r2, #0
 8017958:	615a      	str	r2, [r3, #20]
 801795a:	693b      	ldr	r3, [r7, #16]
 801795c:	681b      	ldr	r3, [r3, #0]
 801795e:	1e5a      	subs	r2, r3, #1
 8017960:	693b      	ldr	r3, [r7, #16]
 8017962:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8017964:	69bb      	ldr	r3, [r7, #24]
 8017966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017968:	2b00      	cmp	r3, #0
 801796a:	d01e      	beq.n	80179aa <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 801796c:	69bb      	ldr	r3, [r7, #24]
 801796e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017970:	60fb      	str	r3, [r7, #12]
 8017972:	69bb      	ldr	r3, [r7, #24]
 8017974:	69db      	ldr	r3, [r3, #28]
 8017976:	69ba      	ldr	r2, [r7, #24]
 8017978:	6a12      	ldr	r2, [r2, #32]
 801797a:	609a      	str	r2, [r3, #8]
 801797c:	69bb      	ldr	r3, [r7, #24]
 801797e:	6a1b      	ldr	r3, [r3, #32]
 8017980:	69ba      	ldr	r2, [r7, #24]
 8017982:	69d2      	ldr	r2, [r2, #28]
 8017984:	605a      	str	r2, [r3, #4]
 8017986:	68fb      	ldr	r3, [r7, #12]
 8017988:	685a      	ldr	r2, [r3, #4]
 801798a:	69bb      	ldr	r3, [r7, #24]
 801798c:	3318      	adds	r3, #24
 801798e:	429a      	cmp	r2, r3
 8017990:	d103      	bne.n	801799a <xTaskIncrementTick+0x11e>
 8017992:	69bb      	ldr	r3, [r7, #24]
 8017994:	6a1a      	ldr	r2, [r3, #32]
 8017996:	68fb      	ldr	r3, [r7, #12]
 8017998:	605a      	str	r2, [r3, #4]
 801799a:	69bb      	ldr	r3, [r7, #24]
 801799c:	2200      	movs	r2, #0
 801799e:	629a      	str	r2, [r3, #40]	; 0x28
 80179a0:	68fb      	ldr	r3, [r7, #12]
 80179a2:	681b      	ldr	r3, [r3, #0]
 80179a4:	1e5a      	subs	r2, r3, #1
 80179a6:	68fb      	ldr	r3, [r7, #12]
 80179a8:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80179aa:	69bb      	ldr	r3, [r7, #24]
 80179ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80179ae:	2201      	movs	r2, #1
 80179b0:	409a      	lsls	r2, r3
 80179b2:	4b38      	ldr	r3, [pc, #224]	; (8017a94 <xTaskIncrementTick+0x218>)
 80179b4:	681b      	ldr	r3, [r3, #0]
 80179b6:	4313      	orrs	r3, r2
 80179b8:	4a36      	ldr	r2, [pc, #216]	; (8017a94 <xTaskIncrementTick+0x218>)
 80179ba:	6013      	str	r3, [r2, #0]
 80179bc:	69bb      	ldr	r3, [r7, #24]
 80179be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80179c0:	4935      	ldr	r1, [pc, #212]	; (8017a98 <xTaskIncrementTick+0x21c>)
 80179c2:	4613      	mov	r3, r2
 80179c4:	009b      	lsls	r3, r3, #2
 80179c6:	4413      	add	r3, r2
 80179c8:	009b      	lsls	r3, r3, #2
 80179ca:	440b      	add	r3, r1
 80179cc:	3304      	adds	r3, #4
 80179ce:	681b      	ldr	r3, [r3, #0]
 80179d0:	60bb      	str	r3, [r7, #8]
 80179d2:	69bb      	ldr	r3, [r7, #24]
 80179d4:	68ba      	ldr	r2, [r7, #8]
 80179d6:	609a      	str	r2, [r3, #8]
 80179d8:	68bb      	ldr	r3, [r7, #8]
 80179da:	689a      	ldr	r2, [r3, #8]
 80179dc:	69bb      	ldr	r3, [r7, #24]
 80179de:	60da      	str	r2, [r3, #12]
 80179e0:	68bb      	ldr	r3, [r7, #8]
 80179e2:	689b      	ldr	r3, [r3, #8]
 80179e4:	69ba      	ldr	r2, [r7, #24]
 80179e6:	3204      	adds	r2, #4
 80179e8:	605a      	str	r2, [r3, #4]
 80179ea:	69bb      	ldr	r3, [r7, #24]
 80179ec:	1d1a      	adds	r2, r3, #4
 80179ee:	68bb      	ldr	r3, [r7, #8]
 80179f0:	609a      	str	r2, [r3, #8]
 80179f2:	69bb      	ldr	r3, [r7, #24]
 80179f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80179f6:	4613      	mov	r3, r2
 80179f8:	009b      	lsls	r3, r3, #2
 80179fa:	4413      	add	r3, r2
 80179fc:	009b      	lsls	r3, r3, #2
 80179fe:	4a26      	ldr	r2, [pc, #152]	; (8017a98 <xTaskIncrementTick+0x21c>)
 8017a00:	441a      	add	r2, r3
 8017a02:	69bb      	ldr	r3, [r7, #24]
 8017a04:	615a      	str	r2, [r3, #20]
 8017a06:	69bb      	ldr	r3, [r7, #24]
 8017a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017a0a:	4923      	ldr	r1, [pc, #140]	; (8017a98 <xTaskIncrementTick+0x21c>)
 8017a0c:	4613      	mov	r3, r2
 8017a0e:	009b      	lsls	r3, r3, #2
 8017a10:	4413      	add	r3, r2
 8017a12:	009b      	lsls	r3, r3, #2
 8017a14:	440b      	add	r3, r1
 8017a16:	681b      	ldr	r3, [r3, #0]
 8017a18:	1c59      	adds	r1, r3, #1
 8017a1a:	481f      	ldr	r0, [pc, #124]	; (8017a98 <xTaskIncrementTick+0x21c>)
 8017a1c:	4613      	mov	r3, r2
 8017a1e:	009b      	lsls	r3, r3, #2
 8017a20:	4413      	add	r3, r2
 8017a22:	009b      	lsls	r3, r3, #2
 8017a24:	4403      	add	r3, r0
 8017a26:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8017a28:	69bb      	ldr	r3, [r7, #24]
 8017a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017a2c:	4b1b      	ldr	r3, [pc, #108]	; (8017a9c <xTaskIncrementTick+0x220>)
 8017a2e:	681b      	ldr	r3, [r3, #0]
 8017a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017a32:	429a      	cmp	r2, r3
 8017a34:	f67f af5d 	bls.w	80178f2 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8017a38:	2301      	movs	r3, #1
 8017a3a:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017a3c:	e759      	b.n	80178f2 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8017a3e:	4b17      	ldr	r3, [pc, #92]	; (8017a9c <xTaskIncrementTick+0x220>)
 8017a40:	681b      	ldr	r3, [r3, #0]
 8017a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017a44:	4914      	ldr	r1, [pc, #80]	; (8017a98 <xTaskIncrementTick+0x21c>)
 8017a46:	4613      	mov	r3, r2
 8017a48:	009b      	lsls	r3, r3, #2
 8017a4a:	4413      	add	r3, r2
 8017a4c:	009b      	lsls	r3, r3, #2
 8017a4e:	440b      	add	r3, r1
 8017a50:	681b      	ldr	r3, [r3, #0]
 8017a52:	2b01      	cmp	r3, #1
 8017a54:	d901      	bls.n	8017a5a <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 8017a56:	2301      	movs	r3, #1
 8017a58:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8017a5a:	4b11      	ldr	r3, [pc, #68]	; (8017aa0 <xTaskIncrementTick+0x224>)
 8017a5c:	681b      	ldr	r3, [r3, #0]
 8017a5e:	2b00      	cmp	r3, #0
 8017a60:	d007      	beq.n	8017a72 <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 8017a62:	2301      	movs	r3, #1
 8017a64:	627b      	str	r3, [r7, #36]	; 0x24
 8017a66:	e004      	b.n	8017a72 <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8017a68:	4b0e      	ldr	r3, [pc, #56]	; (8017aa4 <xTaskIncrementTick+0x228>)
 8017a6a:	681b      	ldr	r3, [r3, #0]
 8017a6c:	3301      	adds	r3, #1
 8017a6e:	4a0d      	ldr	r2, [pc, #52]	; (8017aa4 <xTaskIncrementTick+0x228>)
 8017a70:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8017a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8017a74:	4618      	mov	r0, r3
 8017a76:	3728      	adds	r7, #40	; 0x28
 8017a78:	46bd      	mov	sp, r7
 8017a7a:	bd80      	pop	{r7, pc}
 8017a7c:	200029e4 	.word	0x200029e4
 8017a80:	200029c0 	.word	0x200029c0
 8017a84:	20002974 	.word	0x20002974
 8017a88:	20002978 	.word	0x20002978
 8017a8c:	200029d4 	.word	0x200029d4
 8017a90:	200029dc 	.word	0x200029dc
 8017a94:	200029c4 	.word	0x200029c4
 8017a98:	2000280c 	.word	0x2000280c
 8017a9c:	20002808 	.word	0x20002808
 8017aa0:	200029d0 	.word	0x200029d0
 8017aa4:	200029cc 	.word	0x200029cc

08017aa8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8017aa8:	b480      	push	{r7}
 8017aaa:	b087      	sub	sp, #28
 8017aac:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8017aae:	4b27      	ldr	r3, [pc, #156]	; (8017b4c <vTaskSwitchContext+0xa4>)
 8017ab0:	681b      	ldr	r3, [r3, #0]
 8017ab2:	2b00      	cmp	r3, #0
 8017ab4:	d003      	beq.n	8017abe <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8017ab6:	4b26      	ldr	r3, [pc, #152]	; (8017b50 <vTaskSwitchContext+0xa8>)
 8017ab8:	2201      	movs	r2, #1
 8017aba:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8017abc:	e03f      	b.n	8017b3e <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8017abe:	4b24      	ldr	r3, [pc, #144]	; (8017b50 <vTaskSwitchContext+0xa8>)
 8017ac0:	2200      	movs	r2, #0
 8017ac2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017ac4:	4b23      	ldr	r3, [pc, #140]	; (8017b54 <vTaskSwitchContext+0xac>)
 8017ac6:	681b      	ldr	r3, [r3, #0]
 8017ac8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8017aca:	68fb      	ldr	r3, [r7, #12]
 8017acc:	fab3 f383 	clz	r3, r3
 8017ad0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8017ad2:	7afb      	ldrb	r3, [r7, #11]
 8017ad4:	f1c3 031f 	rsb	r3, r3, #31
 8017ad8:	617b      	str	r3, [r7, #20]
 8017ada:	491f      	ldr	r1, [pc, #124]	; (8017b58 <vTaskSwitchContext+0xb0>)
 8017adc:	697a      	ldr	r2, [r7, #20]
 8017ade:	4613      	mov	r3, r2
 8017ae0:	009b      	lsls	r3, r3, #2
 8017ae2:	4413      	add	r3, r2
 8017ae4:	009b      	lsls	r3, r3, #2
 8017ae6:	440b      	add	r3, r1
 8017ae8:	681b      	ldr	r3, [r3, #0]
 8017aea:	2b00      	cmp	r3, #0
 8017aec:	d10a      	bne.n	8017b04 <vTaskSwitchContext+0x5c>
        __asm volatile
 8017aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017af2:	f383 8811 	msr	BASEPRI, r3
 8017af6:	f3bf 8f6f 	isb	sy
 8017afa:	f3bf 8f4f 	dsb	sy
 8017afe:	607b      	str	r3, [r7, #4]
    }
 8017b00:	bf00      	nop
 8017b02:	e7fe      	b.n	8017b02 <vTaskSwitchContext+0x5a>
 8017b04:	697a      	ldr	r2, [r7, #20]
 8017b06:	4613      	mov	r3, r2
 8017b08:	009b      	lsls	r3, r3, #2
 8017b0a:	4413      	add	r3, r2
 8017b0c:	009b      	lsls	r3, r3, #2
 8017b0e:	4a12      	ldr	r2, [pc, #72]	; (8017b58 <vTaskSwitchContext+0xb0>)
 8017b10:	4413      	add	r3, r2
 8017b12:	613b      	str	r3, [r7, #16]
 8017b14:	693b      	ldr	r3, [r7, #16]
 8017b16:	685b      	ldr	r3, [r3, #4]
 8017b18:	685a      	ldr	r2, [r3, #4]
 8017b1a:	693b      	ldr	r3, [r7, #16]
 8017b1c:	605a      	str	r2, [r3, #4]
 8017b1e:	693b      	ldr	r3, [r7, #16]
 8017b20:	685a      	ldr	r2, [r3, #4]
 8017b22:	693b      	ldr	r3, [r7, #16]
 8017b24:	3308      	adds	r3, #8
 8017b26:	429a      	cmp	r2, r3
 8017b28:	d104      	bne.n	8017b34 <vTaskSwitchContext+0x8c>
 8017b2a:	693b      	ldr	r3, [r7, #16]
 8017b2c:	685b      	ldr	r3, [r3, #4]
 8017b2e:	685a      	ldr	r2, [r3, #4]
 8017b30:	693b      	ldr	r3, [r7, #16]
 8017b32:	605a      	str	r2, [r3, #4]
 8017b34:	693b      	ldr	r3, [r7, #16]
 8017b36:	685b      	ldr	r3, [r3, #4]
 8017b38:	68db      	ldr	r3, [r3, #12]
 8017b3a:	4a08      	ldr	r2, [pc, #32]	; (8017b5c <vTaskSwitchContext+0xb4>)
 8017b3c:	6013      	str	r3, [r2, #0]
}
 8017b3e:	bf00      	nop
 8017b40:	371c      	adds	r7, #28
 8017b42:	46bd      	mov	sp, r7
 8017b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b48:	4770      	bx	lr
 8017b4a:	bf00      	nop
 8017b4c:	200029e4 	.word	0x200029e4
 8017b50:	200029d0 	.word	0x200029d0
 8017b54:	200029c4 	.word	0x200029c4
 8017b58:	2000280c 	.word	0x2000280c
 8017b5c:	20002808 	.word	0x20002808

08017b60 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8017b60:	b580      	push	{r7, lr}
 8017b62:	b084      	sub	sp, #16
 8017b64:	af00      	add	r7, sp, #0
 8017b66:	6078      	str	r0, [r7, #4]
 8017b68:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8017b6a:	687b      	ldr	r3, [r7, #4]
 8017b6c:	2b00      	cmp	r3, #0
 8017b6e:	d10a      	bne.n	8017b86 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8017b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b74:	f383 8811 	msr	BASEPRI, r3
 8017b78:	f3bf 8f6f 	isb	sy
 8017b7c:	f3bf 8f4f 	dsb	sy
 8017b80:	60fb      	str	r3, [r7, #12]
    }
 8017b82:	bf00      	nop
 8017b84:	e7fe      	b.n	8017b84 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017b86:	4b07      	ldr	r3, [pc, #28]	; (8017ba4 <vTaskPlaceOnEventList+0x44>)
 8017b88:	681b      	ldr	r3, [r3, #0]
 8017b8a:	3318      	adds	r3, #24
 8017b8c:	4619      	mov	r1, r3
 8017b8e:	6878      	ldr	r0, [r7, #4]
 8017b90:	f7fe ff81 	bl	8016a96 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8017b94:	2101      	movs	r1, #1
 8017b96:	6838      	ldr	r0, [r7, #0]
 8017b98:	f000 fbe8 	bl	801836c <prvAddCurrentTaskToDelayedList>
}
 8017b9c:	bf00      	nop
 8017b9e:	3710      	adds	r7, #16
 8017ba0:	46bd      	mov	sp, r7
 8017ba2:	bd80      	pop	{r7, pc}
 8017ba4:	20002808 	.word	0x20002808

08017ba8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8017ba8:	b580      	push	{r7, lr}
 8017baa:	b086      	sub	sp, #24
 8017bac:	af00      	add	r7, sp, #0
 8017bae:	60f8      	str	r0, [r7, #12]
 8017bb0:	60b9      	str	r1, [r7, #8]
 8017bb2:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8017bb4:	68fb      	ldr	r3, [r7, #12]
 8017bb6:	2b00      	cmp	r3, #0
 8017bb8:	d10a      	bne.n	8017bd0 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8017bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017bbe:	f383 8811 	msr	BASEPRI, r3
 8017bc2:	f3bf 8f6f 	isb	sy
 8017bc6:	f3bf 8f4f 	dsb	sy
 8017bca:	613b      	str	r3, [r7, #16]
    }
 8017bcc:	bf00      	nop
 8017bce:	e7fe      	b.n	8017bce <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017bd0:	68fb      	ldr	r3, [r7, #12]
 8017bd2:	685b      	ldr	r3, [r3, #4]
 8017bd4:	617b      	str	r3, [r7, #20]
 8017bd6:	4b16      	ldr	r3, [pc, #88]	; (8017c30 <vTaskPlaceOnEventListRestricted+0x88>)
 8017bd8:	681b      	ldr	r3, [r3, #0]
 8017bda:	697a      	ldr	r2, [r7, #20]
 8017bdc:	61da      	str	r2, [r3, #28]
 8017bde:	4b14      	ldr	r3, [pc, #80]	; (8017c30 <vTaskPlaceOnEventListRestricted+0x88>)
 8017be0:	681b      	ldr	r3, [r3, #0]
 8017be2:	697a      	ldr	r2, [r7, #20]
 8017be4:	6892      	ldr	r2, [r2, #8]
 8017be6:	621a      	str	r2, [r3, #32]
 8017be8:	4b11      	ldr	r3, [pc, #68]	; (8017c30 <vTaskPlaceOnEventListRestricted+0x88>)
 8017bea:	681a      	ldr	r2, [r3, #0]
 8017bec:	697b      	ldr	r3, [r7, #20]
 8017bee:	689b      	ldr	r3, [r3, #8]
 8017bf0:	3218      	adds	r2, #24
 8017bf2:	605a      	str	r2, [r3, #4]
 8017bf4:	4b0e      	ldr	r3, [pc, #56]	; (8017c30 <vTaskPlaceOnEventListRestricted+0x88>)
 8017bf6:	681b      	ldr	r3, [r3, #0]
 8017bf8:	f103 0218 	add.w	r2, r3, #24
 8017bfc:	697b      	ldr	r3, [r7, #20]
 8017bfe:	609a      	str	r2, [r3, #8]
 8017c00:	4b0b      	ldr	r3, [pc, #44]	; (8017c30 <vTaskPlaceOnEventListRestricted+0x88>)
 8017c02:	681b      	ldr	r3, [r3, #0]
 8017c04:	68fa      	ldr	r2, [r7, #12]
 8017c06:	629a      	str	r2, [r3, #40]	; 0x28
 8017c08:	68fb      	ldr	r3, [r7, #12]
 8017c0a:	681b      	ldr	r3, [r3, #0]
 8017c0c:	1c5a      	adds	r2, r3, #1
 8017c0e:	68fb      	ldr	r3, [r7, #12]
 8017c10:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8017c12:	687b      	ldr	r3, [r7, #4]
 8017c14:	2b00      	cmp	r3, #0
 8017c16:	d002      	beq.n	8017c1e <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8017c18:	f04f 33ff 	mov.w	r3, #4294967295
 8017c1c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8017c1e:	6879      	ldr	r1, [r7, #4]
 8017c20:	68b8      	ldr	r0, [r7, #8]
 8017c22:	f000 fba3 	bl	801836c <prvAddCurrentTaskToDelayedList>
    }
 8017c26:	bf00      	nop
 8017c28:	3718      	adds	r7, #24
 8017c2a:	46bd      	mov	sp, r7
 8017c2c:	bd80      	pop	{r7, pc}
 8017c2e:	bf00      	nop
 8017c30:	20002808 	.word	0x20002808

08017c34 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8017c34:	b480      	push	{r7}
 8017c36:	b08b      	sub	sp, #44	; 0x2c
 8017c38:	af00      	add	r7, sp, #0
 8017c3a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017c3c:	687b      	ldr	r3, [r7, #4]
 8017c3e:	68db      	ldr	r3, [r3, #12]
 8017c40:	68db      	ldr	r3, [r3, #12]
 8017c42:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8017c44:	6a3b      	ldr	r3, [r7, #32]
 8017c46:	2b00      	cmp	r3, #0
 8017c48:	d10a      	bne.n	8017c60 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8017c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c4e:	f383 8811 	msr	BASEPRI, r3
 8017c52:	f3bf 8f6f 	isb	sy
 8017c56:	f3bf 8f4f 	dsb	sy
 8017c5a:	60fb      	str	r3, [r7, #12]
    }
 8017c5c:	bf00      	nop
 8017c5e:	e7fe      	b.n	8017c5e <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8017c60:	6a3b      	ldr	r3, [r7, #32]
 8017c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017c64:	61fb      	str	r3, [r7, #28]
 8017c66:	6a3b      	ldr	r3, [r7, #32]
 8017c68:	69db      	ldr	r3, [r3, #28]
 8017c6a:	6a3a      	ldr	r2, [r7, #32]
 8017c6c:	6a12      	ldr	r2, [r2, #32]
 8017c6e:	609a      	str	r2, [r3, #8]
 8017c70:	6a3b      	ldr	r3, [r7, #32]
 8017c72:	6a1b      	ldr	r3, [r3, #32]
 8017c74:	6a3a      	ldr	r2, [r7, #32]
 8017c76:	69d2      	ldr	r2, [r2, #28]
 8017c78:	605a      	str	r2, [r3, #4]
 8017c7a:	69fb      	ldr	r3, [r7, #28]
 8017c7c:	685a      	ldr	r2, [r3, #4]
 8017c7e:	6a3b      	ldr	r3, [r7, #32]
 8017c80:	3318      	adds	r3, #24
 8017c82:	429a      	cmp	r2, r3
 8017c84:	d103      	bne.n	8017c8e <xTaskRemoveFromEventList+0x5a>
 8017c86:	6a3b      	ldr	r3, [r7, #32]
 8017c88:	6a1a      	ldr	r2, [r3, #32]
 8017c8a:	69fb      	ldr	r3, [r7, #28]
 8017c8c:	605a      	str	r2, [r3, #4]
 8017c8e:	6a3b      	ldr	r3, [r7, #32]
 8017c90:	2200      	movs	r2, #0
 8017c92:	629a      	str	r2, [r3, #40]	; 0x28
 8017c94:	69fb      	ldr	r3, [r7, #28]
 8017c96:	681b      	ldr	r3, [r3, #0]
 8017c98:	1e5a      	subs	r2, r3, #1
 8017c9a:	69fb      	ldr	r3, [r7, #28]
 8017c9c:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017c9e:	4b4a      	ldr	r3, [pc, #296]	; (8017dc8 <xTaskRemoveFromEventList+0x194>)
 8017ca0:	681b      	ldr	r3, [r3, #0]
 8017ca2:	2b00      	cmp	r3, #0
 8017ca4:	d15e      	bne.n	8017d64 <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8017ca6:	6a3b      	ldr	r3, [r7, #32]
 8017ca8:	695b      	ldr	r3, [r3, #20]
 8017caa:	617b      	str	r3, [r7, #20]
 8017cac:	6a3b      	ldr	r3, [r7, #32]
 8017cae:	689b      	ldr	r3, [r3, #8]
 8017cb0:	6a3a      	ldr	r2, [r7, #32]
 8017cb2:	68d2      	ldr	r2, [r2, #12]
 8017cb4:	609a      	str	r2, [r3, #8]
 8017cb6:	6a3b      	ldr	r3, [r7, #32]
 8017cb8:	68db      	ldr	r3, [r3, #12]
 8017cba:	6a3a      	ldr	r2, [r7, #32]
 8017cbc:	6892      	ldr	r2, [r2, #8]
 8017cbe:	605a      	str	r2, [r3, #4]
 8017cc0:	697b      	ldr	r3, [r7, #20]
 8017cc2:	685a      	ldr	r2, [r3, #4]
 8017cc4:	6a3b      	ldr	r3, [r7, #32]
 8017cc6:	3304      	adds	r3, #4
 8017cc8:	429a      	cmp	r2, r3
 8017cca:	d103      	bne.n	8017cd4 <xTaskRemoveFromEventList+0xa0>
 8017ccc:	6a3b      	ldr	r3, [r7, #32]
 8017cce:	68da      	ldr	r2, [r3, #12]
 8017cd0:	697b      	ldr	r3, [r7, #20]
 8017cd2:	605a      	str	r2, [r3, #4]
 8017cd4:	6a3b      	ldr	r3, [r7, #32]
 8017cd6:	2200      	movs	r2, #0
 8017cd8:	615a      	str	r2, [r3, #20]
 8017cda:	697b      	ldr	r3, [r7, #20]
 8017cdc:	681b      	ldr	r3, [r3, #0]
 8017cde:	1e5a      	subs	r2, r3, #1
 8017ce0:	697b      	ldr	r3, [r7, #20]
 8017ce2:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8017ce4:	6a3b      	ldr	r3, [r7, #32]
 8017ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017ce8:	2201      	movs	r2, #1
 8017cea:	409a      	lsls	r2, r3
 8017cec:	4b37      	ldr	r3, [pc, #220]	; (8017dcc <xTaskRemoveFromEventList+0x198>)
 8017cee:	681b      	ldr	r3, [r3, #0]
 8017cf0:	4313      	orrs	r3, r2
 8017cf2:	4a36      	ldr	r2, [pc, #216]	; (8017dcc <xTaskRemoveFromEventList+0x198>)
 8017cf4:	6013      	str	r3, [r2, #0]
 8017cf6:	6a3b      	ldr	r3, [r7, #32]
 8017cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017cfa:	4935      	ldr	r1, [pc, #212]	; (8017dd0 <xTaskRemoveFromEventList+0x19c>)
 8017cfc:	4613      	mov	r3, r2
 8017cfe:	009b      	lsls	r3, r3, #2
 8017d00:	4413      	add	r3, r2
 8017d02:	009b      	lsls	r3, r3, #2
 8017d04:	440b      	add	r3, r1
 8017d06:	3304      	adds	r3, #4
 8017d08:	681b      	ldr	r3, [r3, #0]
 8017d0a:	613b      	str	r3, [r7, #16]
 8017d0c:	6a3b      	ldr	r3, [r7, #32]
 8017d0e:	693a      	ldr	r2, [r7, #16]
 8017d10:	609a      	str	r2, [r3, #8]
 8017d12:	693b      	ldr	r3, [r7, #16]
 8017d14:	689a      	ldr	r2, [r3, #8]
 8017d16:	6a3b      	ldr	r3, [r7, #32]
 8017d18:	60da      	str	r2, [r3, #12]
 8017d1a:	693b      	ldr	r3, [r7, #16]
 8017d1c:	689b      	ldr	r3, [r3, #8]
 8017d1e:	6a3a      	ldr	r2, [r7, #32]
 8017d20:	3204      	adds	r2, #4
 8017d22:	605a      	str	r2, [r3, #4]
 8017d24:	6a3b      	ldr	r3, [r7, #32]
 8017d26:	1d1a      	adds	r2, r3, #4
 8017d28:	693b      	ldr	r3, [r7, #16]
 8017d2a:	609a      	str	r2, [r3, #8]
 8017d2c:	6a3b      	ldr	r3, [r7, #32]
 8017d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017d30:	4613      	mov	r3, r2
 8017d32:	009b      	lsls	r3, r3, #2
 8017d34:	4413      	add	r3, r2
 8017d36:	009b      	lsls	r3, r3, #2
 8017d38:	4a25      	ldr	r2, [pc, #148]	; (8017dd0 <xTaskRemoveFromEventList+0x19c>)
 8017d3a:	441a      	add	r2, r3
 8017d3c:	6a3b      	ldr	r3, [r7, #32]
 8017d3e:	615a      	str	r2, [r3, #20]
 8017d40:	6a3b      	ldr	r3, [r7, #32]
 8017d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017d44:	4922      	ldr	r1, [pc, #136]	; (8017dd0 <xTaskRemoveFromEventList+0x19c>)
 8017d46:	4613      	mov	r3, r2
 8017d48:	009b      	lsls	r3, r3, #2
 8017d4a:	4413      	add	r3, r2
 8017d4c:	009b      	lsls	r3, r3, #2
 8017d4e:	440b      	add	r3, r1
 8017d50:	681b      	ldr	r3, [r3, #0]
 8017d52:	1c59      	adds	r1, r3, #1
 8017d54:	481e      	ldr	r0, [pc, #120]	; (8017dd0 <xTaskRemoveFromEventList+0x19c>)
 8017d56:	4613      	mov	r3, r2
 8017d58:	009b      	lsls	r3, r3, #2
 8017d5a:	4413      	add	r3, r2
 8017d5c:	009b      	lsls	r3, r3, #2
 8017d5e:	4403      	add	r3, r0
 8017d60:	6019      	str	r1, [r3, #0]
 8017d62:	e01b      	b.n	8017d9c <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8017d64:	4b1b      	ldr	r3, [pc, #108]	; (8017dd4 <xTaskRemoveFromEventList+0x1a0>)
 8017d66:	685b      	ldr	r3, [r3, #4]
 8017d68:	61bb      	str	r3, [r7, #24]
 8017d6a:	6a3b      	ldr	r3, [r7, #32]
 8017d6c:	69ba      	ldr	r2, [r7, #24]
 8017d6e:	61da      	str	r2, [r3, #28]
 8017d70:	69bb      	ldr	r3, [r7, #24]
 8017d72:	689a      	ldr	r2, [r3, #8]
 8017d74:	6a3b      	ldr	r3, [r7, #32]
 8017d76:	621a      	str	r2, [r3, #32]
 8017d78:	69bb      	ldr	r3, [r7, #24]
 8017d7a:	689b      	ldr	r3, [r3, #8]
 8017d7c:	6a3a      	ldr	r2, [r7, #32]
 8017d7e:	3218      	adds	r2, #24
 8017d80:	605a      	str	r2, [r3, #4]
 8017d82:	6a3b      	ldr	r3, [r7, #32]
 8017d84:	f103 0218 	add.w	r2, r3, #24
 8017d88:	69bb      	ldr	r3, [r7, #24]
 8017d8a:	609a      	str	r2, [r3, #8]
 8017d8c:	6a3b      	ldr	r3, [r7, #32]
 8017d8e:	4a11      	ldr	r2, [pc, #68]	; (8017dd4 <xTaskRemoveFromEventList+0x1a0>)
 8017d90:	629a      	str	r2, [r3, #40]	; 0x28
 8017d92:	4b10      	ldr	r3, [pc, #64]	; (8017dd4 <xTaskRemoveFromEventList+0x1a0>)
 8017d94:	681b      	ldr	r3, [r3, #0]
 8017d96:	3301      	adds	r3, #1
 8017d98:	4a0e      	ldr	r2, [pc, #56]	; (8017dd4 <xTaskRemoveFromEventList+0x1a0>)
 8017d9a:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8017d9c:	6a3b      	ldr	r3, [r7, #32]
 8017d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017da0:	4b0d      	ldr	r3, [pc, #52]	; (8017dd8 <xTaskRemoveFromEventList+0x1a4>)
 8017da2:	681b      	ldr	r3, [r3, #0]
 8017da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017da6:	429a      	cmp	r2, r3
 8017da8:	d905      	bls.n	8017db6 <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8017daa:	2301      	movs	r3, #1
 8017dac:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8017dae:	4b0b      	ldr	r3, [pc, #44]	; (8017ddc <xTaskRemoveFromEventList+0x1a8>)
 8017db0:	2201      	movs	r2, #1
 8017db2:	601a      	str	r2, [r3, #0]
 8017db4:	e001      	b.n	8017dba <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 8017db6:	2300      	movs	r3, #0
 8017db8:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8017dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8017dbc:	4618      	mov	r0, r3
 8017dbe:	372c      	adds	r7, #44	; 0x2c
 8017dc0:	46bd      	mov	sp, r7
 8017dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dc6:	4770      	bx	lr
 8017dc8:	200029e4 	.word	0x200029e4
 8017dcc:	200029c4 	.word	0x200029c4
 8017dd0:	2000280c 	.word	0x2000280c
 8017dd4:	2000297c 	.word	0x2000297c
 8017dd8:	20002808 	.word	0x20002808
 8017ddc:	200029d0 	.word	0x200029d0

08017de0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8017de0:	b480      	push	{r7}
 8017de2:	b083      	sub	sp, #12
 8017de4:	af00      	add	r7, sp, #0
 8017de6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8017de8:	4b06      	ldr	r3, [pc, #24]	; (8017e04 <vTaskInternalSetTimeOutState+0x24>)
 8017dea:	681a      	ldr	r2, [r3, #0]
 8017dec:	687b      	ldr	r3, [r7, #4]
 8017dee:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8017df0:	4b05      	ldr	r3, [pc, #20]	; (8017e08 <vTaskInternalSetTimeOutState+0x28>)
 8017df2:	681a      	ldr	r2, [r3, #0]
 8017df4:	687b      	ldr	r3, [r7, #4]
 8017df6:	605a      	str	r2, [r3, #4]
}
 8017df8:	bf00      	nop
 8017dfa:	370c      	adds	r7, #12
 8017dfc:	46bd      	mov	sp, r7
 8017dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e02:	4770      	bx	lr
 8017e04:	200029d4 	.word	0x200029d4
 8017e08:	200029c0 	.word	0x200029c0

08017e0c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8017e0c:	b580      	push	{r7, lr}
 8017e0e:	b088      	sub	sp, #32
 8017e10:	af00      	add	r7, sp, #0
 8017e12:	6078      	str	r0, [r7, #4]
 8017e14:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8017e16:	687b      	ldr	r3, [r7, #4]
 8017e18:	2b00      	cmp	r3, #0
 8017e1a:	d10a      	bne.n	8017e32 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8017e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e20:	f383 8811 	msr	BASEPRI, r3
 8017e24:	f3bf 8f6f 	isb	sy
 8017e28:	f3bf 8f4f 	dsb	sy
 8017e2c:	613b      	str	r3, [r7, #16]
    }
 8017e2e:	bf00      	nop
 8017e30:	e7fe      	b.n	8017e30 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8017e32:	683b      	ldr	r3, [r7, #0]
 8017e34:	2b00      	cmp	r3, #0
 8017e36:	d10a      	bne.n	8017e4e <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8017e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e3c:	f383 8811 	msr	BASEPRI, r3
 8017e40:	f3bf 8f6f 	isb	sy
 8017e44:	f3bf 8f4f 	dsb	sy
 8017e48:	60fb      	str	r3, [r7, #12]
    }
 8017e4a:	bf00      	nop
 8017e4c:	e7fe      	b.n	8017e4c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8017e4e:	f000 fec3 	bl	8018bd8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8017e52:	4b1f      	ldr	r3, [pc, #124]	; (8017ed0 <xTaskCheckForTimeOut+0xc4>)
 8017e54:	681b      	ldr	r3, [r3, #0]
 8017e56:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8017e58:	687b      	ldr	r3, [r7, #4]
 8017e5a:	685b      	ldr	r3, [r3, #4]
 8017e5c:	69ba      	ldr	r2, [r7, #24]
 8017e5e:	1ad3      	subs	r3, r2, r3
 8017e60:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8017e62:	683b      	ldr	r3, [r7, #0]
 8017e64:	681b      	ldr	r3, [r3, #0]
 8017e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017e6a:	d102      	bne.n	8017e72 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8017e6c:	2300      	movs	r3, #0
 8017e6e:	61fb      	str	r3, [r7, #28]
 8017e70:	e026      	b.n	8017ec0 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8017e72:	687b      	ldr	r3, [r7, #4]
 8017e74:	681a      	ldr	r2, [r3, #0]
 8017e76:	4b17      	ldr	r3, [pc, #92]	; (8017ed4 <xTaskCheckForTimeOut+0xc8>)
 8017e78:	681b      	ldr	r3, [r3, #0]
 8017e7a:	429a      	cmp	r2, r3
 8017e7c:	d00a      	beq.n	8017e94 <xTaskCheckForTimeOut+0x88>
 8017e7e:	687b      	ldr	r3, [r7, #4]
 8017e80:	685b      	ldr	r3, [r3, #4]
 8017e82:	69ba      	ldr	r2, [r7, #24]
 8017e84:	429a      	cmp	r2, r3
 8017e86:	d305      	bcc.n	8017e94 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8017e88:	2301      	movs	r3, #1
 8017e8a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8017e8c:	683b      	ldr	r3, [r7, #0]
 8017e8e:	2200      	movs	r2, #0
 8017e90:	601a      	str	r2, [r3, #0]
 8017e92:	e015      	b.n	8017ec0 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8017e94:	683b      	ldr	r3, [r7, #0]
 8017e96:	681b      	ldr	r3, [r3, #0]
 8017e98:	697a      	ldr	r2, [r7, #20]
 8017e9a:	429a      	cmp	r2, r3
 8017e9c:	d20b      	bcs.n	8017eb6 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8017e9e:	683b      	ldr	r3, [r7, #0]
 8017ea0:	681a      	ldr	r2, [r3, #0]
 8017ea2:	697b      	ldr	r3, [r7, #20]
 8017ea4:	1ad2      	subs	r2, r2, r3
 8017ea6:	683b      	ldr	r3, [r7, #0]
 8017ea8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8017eaa:	6878      	ldr	r0, [r7, #4]
 8017eac:	f7ff ff98 	bl	8017de0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8017eb0:	2300      	movs	r3, #0
 8017eb2:	61fb      	str	r3, [r7, #28]
 8017eb4:	e004      	b.n	8017ec0 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8017eb6:	683b      	ldr	r3, [r7, #0]
 8017eb8:	2200      	movs	r2, #0
 8017eba:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8017ebc:	2301      	movs	r3, #1
 8017ebe:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8017ec0:	f000 feba 	bl	8018c38 <vPortExitCritical>

    return xReturn;
 8017ec4:	69fb      	ldr	r3, [r7, #28]
}
 8017ec6:	4618      	mov	r0, r3
 8017ec8:	3720      	adds	r7, #32
 8017eca:	46bd      	mov	sp, r7
 8017ecc:	bd80      	pop	{r7, pc}
 8017ece:	bf00      	nop
 8017ed0:	200029c0 	.word	0x200029c0
 8017ed4:	200029d4 	.word	0x200029d4

08017ed8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8017ed8:	b480      	push	{r7}
 8017eda:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8017edc:	4b03      	ldr	r3, [pc, #12]	; (8017eec <vTaskMissedYield+0x14>)
 8017ede:	2201      	movs	r2, #1
 8017ee0:	601a      	str	r2, [r3, #0]
}
 8017ee2:	bf00      	nop
 8017ee4:	46bd      	mov	sp, r7
 8017ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017eea:	4770      	bx	lr
 8017eec:	200029d0 	.word	0x200029d0

08017ef0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8017ef0:	b580      	push	{r7, lr}
 8017ef2:	b082      	sub	sp, #8
 8017ef4:	af00      	add	r7, sp, #0
 8017ef6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8017ef8:	f000 f852 	bl	8017fa0 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8017efc:	4b06      	ldr	r3, [pc, #24]	; (8017f18 <prvIdleTask+0x28>)
 8017efe:	681b      	ldr	r3, [r3, #0]
 8017f00:	2b01      	cmp	r3, #1
 8017f02:	d9f9      	bls.n	8017ef8 <prvIdleTask+0x8>
            {
                taskYIELD();
 8017f04:	4b05      	ldr	r3, [pc, #20]	; (8017f1c <prvIdleTask+0x2c>)
 8017f06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017f0a:	601a      	str	r2, [r3, #0]
 8017f0c:	f3bf 8f4f 	dsb	sy
 8017f10:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8017f14:	e7f0      	b.n	8017ef8 <prvIdleTask+0x8>
 8017f16:	bf00      	nop
 8017f18:	2000280c 	.word	0x2000280c
 8017f1c:	e000ed04 	.word	0xe000ed04

08017f20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8017f20:	b580      	push	{r7, lr}
 8017f22:	b082      	sub	sp, #8
 8017f24:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017f26:	2300      	movs	r3, #0
 8017f28:	607b      	str	r3, [r7, #4]
 8017f2a:	e00c      	b.n	8017f46 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8017f2c:	687a      	ldr	r2, [r7, #4]
 8017f2e:	4613      	mov	r3, r2
 8017f30:	009b      	lsls	r3, r3, #2
 8017f32:	4413      	add	r3, r2
 8017f34:	009b      	lsls	r3, r3, #2
 8017f36:	4a12      	ldr	r2, [pc, #72]	; (8017f80 <prvInitialiseTaskLists+0x60>)
 8017f38:	4413      	add	r3, r2
 8017f3a:	4618      	mov	r0, r3
 8017f3c:	f7fe fd5a 	bl	80169f4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017f40:	687b      	ldr	r3, [r7, #4]
 8017f42:	3301      	adds	r3, #1
 8017f44:	607b      	str	r3, [r7, #4]
 8017f46:	687b      	ldr	r3, [r7, #4]
 8017f48:	2b0f      	cmp	r3, #15
 8017f4a:	d9ef      	bls.n	8017f2c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8017f4c:	480d      	ldr	r0, [pc, #52]	; (8017f84 <prvInitialiseTaskLists+0x64>)
 8017f4e:	f7fe fd51 	bl	80169f4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8017f52:	480d      	ldr	r0, [pc, #52]	; (8017f88 <prvInitialiseTaskLists+0x68>)
 8017f54:	f7fe fd4e 	bl	80169f4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8017f58:	480c      	ldr	r0, [pc, #48]	; (8017f8c <prvInitialiseTaskLists+0x6c>)
 8017f5a:	f7fe fd4b 	bl	80169f4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8017f5e:	480c      	ldr	r0, [pc, #48]	; (8017f90 <prvInitialiseTaskLists+0x70>)
 8017f60:	f7fe fd48 	bl	80169f4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8017f64:	480b      	ldr	r0, [pc, #44]	; (8017f94 <prvInitialiseTaskLists+0x74>)
 8017f66:	f7fe fd45 	bl	80169f4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8017f6a:	4b0b      	ldr	r3, [pc, #44]	; (8017f98 <prvInitialiseTaskLists+0x78>)
 8017f6c:	4a05      	ldr	r2, [pc, #20]	; (8017f84 <prvInitialiseTaskLists+0x64>)
 8017f6e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8017f70:	4b0a      	ldr	r3, [pc, #40]	; (8017f9c <prvInitialiseTaskLists+0x7c>)
 8017f72:	4a05      	ldr	r2, [pc, #20]	; (8017f88 <prvInitialiseTaskLists+0x68>)
 8017f74:	601a      	str	r2, [r3, #0]
}
 8017f76:	bf00      	nop
 8017f78:	3708      	adds	r7, #8
 8017f7a:	46bd      	mov	sp, r7
 8017f7c:	bd80      	pop	{r7, pc}
 8017f7e:	bf00      	nop
 8017f80:	2000280c 	.word	0x2000280c
 8017f84:	2000294c 	.word	0x2000294c
 8017f88:	20002960 	.word	0x20002960
 8017f8c:	2000297c 	.word	0x2000297c
 8017f90:	20002990 	.word	0x20002990
 8017f94:	200029a8 	.word	0x200029a8
 8017f98:	20002974 	.word	0x20002974
 8017f9c:	20002978 	.word	0x20002978

08017fa0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8017fa0:	b580      	push	{r7, lr}
 8017fa2:	b082      	sub	sp, #8
 8017fa4:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8017fa6:	e019      	b.n	8017fdc <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8017fa8:	f000 fe16 	bl	8018bd8 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017fac:	4b10      	ldr	r3, [pc, #64]	; (8017ff0 <prvCheckTasksWaitingTermination+0x50>)
 8017fae:	68db      	ldr	r3, [r3, #12]
 8017fb0:	68db      	ldr	r3, [r3, #12]
 8017fb2:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017fb4:	687b      	ldr	r3, [r7, #4]
 8017fb6:	3304      	adds	r3, #4
 8017fb8:	4618      	mov	r0, r3
 8017fba:	f7fe fda5 	bl	8016b08 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8017fbe:	4b0d      	ldr	r3, [pc, #52]	; (8017ff4 <prvCheckTasksWaitingTermination+0x54>)
 8017fc0:	681b      	ldr	r3, [r3, #0]
 8017fc2:	3b01      	subs	r3, #1
 8017fc4:	4a0b      	ldr	r2, [pc, #44]	; (8017ff4 <prvCheckTasksWaitingTermination+0x54>)
 8017fc6:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8017fc8:	4b0b      	ldr	r3, [pc, #44]	; (8017ff8 <prvCheckTasksWaitingTermination+0x58>)
 8017fca:	681b      	ldr	r3, [r3, #0]
 8017fcc:	3b01      	subs	r3, #1
 8017fce:	4a0a      	ldr	r2, [pc, #40]	; (8017ff8 <prvCheckTasksWaitingTermination+0x58>)
 8017fd0:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8017fd2:	f000 fe31 	bl	8018c38 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8017fd6:	6878      	ldr	r0, [r7, #4]
 8017fd8:	f000 f810 	bl	8017ffc <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8017fdc:	4b06      	ldr	r3, [pc, #24]	; (8017ff8 <prvCheckTasksWaitingTermination+0x58>)
 8017fde:	681b      	ldr	r3, [r3, #0]
 8017fe0:	2b00      	cmp	r3, #0
 8017fe2:	d1e1      	bne.n	8017fa8 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8017fe4:	bf00      	nop
 8017fe6:	bf00      	nop
 8017fe8:	3708      	adds	r7, #8
 8017fea:	46bd      	mov	sp, r7
 8017fec:	bd80      	pop	{r7, pc}
 8017fee:	bf00      	nop
 8017ff0:	20002990 	.word	0x20002990
 8017ff4:	200029bc 	.word	0x200029bc
 8017ff8:	200029a4 	.word	0x200029a4

08017ffc <prvDeleteTCB>:


#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8017ffc:	b580      	push	{r7, lr}
 8017ffe:	b082      	sub	sp, #8
 8018000:	af00      	add	r7, sp, #0
 8018002:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8018004:	687b      	ldr	r3, [r7, #4]
 8018006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018008:	4618      	mov	r0, r3
 801800a:	f000 ffc1 	bl	8018f90 <vPortFree>
            vPortFree( pxTCB );
 801800e:	6878      	ldr	r0, [r7, #4]
 8018010:	f000 ffbe 	bl	8018f90 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8018014:	bf00      	nop
 8018016:	3708      	adds	r7, #8
 8018018:	46bd      	mov	sp, r7
 801801a:	bd80      	pop	{r7, pc}

0801801c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801801c:	b480      	push	{r7}
 801801e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018020:	4b0a      	ldr	r3, [pc, #40]	; (801804c <prvResetNextTaskUnblockTime+0x30>)
 8018022:	681b      	ldr	r3, [r3, #0]
 8018024:	681b      	ldr	r3, [r3, #0]
 8018026:	2b00      	cmp	r3, #0
 8018028:	d104      	bne.n	8018034 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 801802a:	4b09      	ldr	r3, [pc, #36]	; (8018050 <prvResetNextTaskUnblockTime+0x34>)
 801802c:	f04f 32ff 	mov.w	r2, #4294967295
 8018030:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8018032:	e005      	b.n	8018040 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8018034:	4b05      	ldr	r3, [pc, #20]	; (801804c <prvResetNextTaskUnblockTime+0x30>)
 8018036:	681b      	ldr	r3, [r3, #0]
 8018038:	68db      	ldr	r3, [r3, #12]
 801803a:	681b      	ldr	r3, [r3, #0]
 801803c:	4a04      	ldr	r2, [pc, #16]	; (8018050 <prvResetNextTaskUnblockTime+0x34>)
 801803e:	6013      	str	r3, [r2, #0]
}
 8018040:	bf00      	nop
 8018042:	46bd      	mov	sp, r7
 8018044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018048:	4770      	bx	lr
 801804a:	bf00      	nop
 801804c:	20002974 	.word	0x20002974
 8018050:	200029dc 	.word	0x200029dc

08018054 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8018054:	b480      	push	{r7}
 8018056:	b083      	sub	sp, #12
 8018058:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 801805a:	4b0b      	ldr	r3, [pc, #44]	; (8018088 <xTaskGetSchedulerState+0x34>)
 801805c:	681b      	ldr	r3, [r3, #0]
 801805e:	2b00      	cmp	r3, #0
 8018060:	d102      	bne.n	8018068 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8018062:	2301      	movs	r3, #1
 8018064:	607b      	str	r3, [r7, #4]
 8018066:	e008      	b.n	801807a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018068:	4b08      	ldr	r3, [pc, #32]	; (801808c <xTaskGetSchedulerState+0x38>)
 801806a:	681b      	ldr	r3, [r3, #0]
 801806c:	2b00      	cmp	r3, #0
 801806e:	d102      	bne.n	8018076 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8018070:	2302      	movs	r3, #2
 8018072:	607b      	str	r3, [r7, #4]
 8018074:	e001      	b.n	801807a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8018076:	2300      	movs	r3, #0
 8018078:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 801807a:	687b      	ldr	r3, [r7, #4]
    }
 801807c:	4618      	mov	r0, r3
 801807e:	370c      	adds	r7, #12
 8018080:	46bd      	mov	sp, r7
 8018082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018086:	4770      	bx	lr
 8018088:	200029c8 	.word	0x200029c8
 801808c:	200029e4 	.word	0x200029e4

08018090 <ulTaskGenericNotifyTake>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWait,
                                      BaseType_t xClearCountOnExit,
                                      TickType_t xTicksToWait )
    {
 8018090:	b580      	push	{r7, lr}
 8018092:	b086      	sub	sp, #24
 8018094:	af00      	add	r7, sp, #0
 8018096:	60f8      	str	r0, [r7, #12]
 8018098:	60b9      	str	r1, [r7, #8]
 801809a:	607a      	str	r2, [r7, #4]
        uint32_t ulReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 801809c:	68fb      	ldr	r3, [r7, #12]
 801809e:	2b00      	cmp	r3, #0
 80180a0:	d00a      	beq.n	80180b8 <ulTaskGenericNotifyTake+0x28>
        __asm volatile
 80180a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80180a6:	f383 8811 	msr	BASEPRI, r3
 80180aa:	f3bf 8f6f 	isb	sy
 80180ae:	f3bf 8f4f 	dsb	sy
 80180b2:	613b      	str	r3, [r7, #16]
    }
 80180b4:	bf00      	nop
 80180b6:	e7fe      	b.n	80180b6 <ulTaskGenericNotifyTake+0x26>

        taskENTER_CRITICAL();
 80180b8:	f000 fd8e 	bl	8018bd8 <vPortEnterCritical>
        {
            /* Only block if the notification count is not already non-zero. */
            if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] == 0UL )
 80180bc:	4b26      	ldr	r3, [pc, #152]	; (8018158 <ulTaskGenericNotifyTake+0xc8>)
 80180be:	681b      	ldr	r3, [r3, #0]
 80180c0:	68fa      	ldr	r2, [r7, #12]
 80180c2:	3214      	adds	r2, #20
 80180c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80180c8:	2b00      	cmp	r3, #0
 80180ca:	d115      	bne.n	80180f8 <ulTaskGenericNotifyTake+0x68>
            {
                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 80180cc:	4b22      	ldr	r3, [pc, #136]	; (8018158 <ulTaskGenericNotifyTake+0xc8>)
 80180ce:	681a      	ldr	r2, [r3, #0]
 80180d0:	68fb      	ldr	r3, [r7, #12]
 80180d2:	4413      	add	r3, r2
 80180d4:	3354      	adds	r3, #84	; 0x54
 80180d6:	2201      	movs	r2, #1
 80180d8:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 80180da:	687b      	ldr	r3, [r7, #4]
 80180dc:	2b00      	cmp	r3, #0
 80180de:	d00b      	beq.n	80180f8 <ulTaskGenericNotifyTake+0x68>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80180e0:	2101      	movs	r1, #1
 80180e2:	6878      	ldr	r0, [r7, #4]
 80180e4:	f000 f942 	bl	801836c <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 80180e8:	4b1c      	ldr	r3, [pc, #112]	; (801815c <ulTaskGenericNotifyTake+0xcc>)
 80180ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80180ee:	601a      	str	r2, [r3, #0]
 80180f0:	f3bf 8f4f 	dsb	sy
 80180f4:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80180f8:	f000 fd9e 	bl	8018c38 <vPortExitCritical>

        taskENTER_CRITICAL();
 80180fc:	f000 fd6c 	bl	8018bd8 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_TAKE( uxIndexToWait );
            ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8018100:	4b15      	ldr	r3, [pc, #84]	; (8018158 <ulTaskGenericNotifyTake+0xc8>)
 8018102:	681b      	ldr	r3, [r3, #0]
 8018104:	68fa      	ldr	r2, [r7, #12]
 8018106:	3214      	adds	r2, #20
 8018108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801810c:	617b      	str	r3, [r7, #20]

            if( ulReturn != 0UL )
 801810e:	697b      	ldr	r3, [r7, #20]
 8018110:	2b00      	cmp	r3, #0
 8018112:	d012      	beq.n	801813a <ulTaskGenericNotifyTake+0xaa>
            {
                if( xClearCountOnExit != pdFALSE )
 8018114:	68bb      	ldr	r3, [r7, #8]
 8018116:	2b00      	cmp	r3, #0
 8018118:	d007      	beq.n	801812a <ulTaskGenericNotifyTake+0x9a>
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = 0UL;
 801811a:	4b0f      	ldr	r3, [pc, #60]	; (8018158 <ulTaskGenericNotifyTake+0xc8>)
 801811c:	681b      	ldr	r3, [r3, #0]
 801811e:	68fa      	ldr	r2, [r7, #12]
 8018120:	3214      	adds	r2, #20
 8018122:	2100      	movs	r1, #0
 8018124:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8018128:	e007      	b.n	801813a <ulTaskGenericNotifyTake+0xaa>
                }
                else
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = ulReturn - ( uint32_t ) 1;
 801812a:	4b0b      	ldr	r3, [pc, #44]	; (8018158 <ulTaskGenericNotifyTake+0xc8>)
 801812c:	681b      	ldr	r3, [r3, #0]
 801812e:	697a      	ldr	r2, [r7, #20]
 8018130:	1e51      	subs	r1, r2, #1
 8018132:	68fa      	ldr	r2, [r7, #12]
 8018134:	3214      	adds	r2, #20
 8018136:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 801813a:	4b07      	ldr	r3, [pc, #28]	; (8018158 <ulTaskGenericNotifyTake+0xc8>)
 801813c:	681a      	ldr	r2, [r3, #0]
 801813e:	68fb      	ldr	r3, [r7, #12]
 8018140:	4413      	add	r3, r2
 8018142:	3354      	adds	r3, #84	; 0x54
 8018144:	2200      	movs	r2, #0
 8018146:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8018148:	f000 fd76 	bl	8018c38 <vPortExitCritical>

        return ulReturn;
 801814c:	697b      	ldr	r3, [r7, #20]
    }
 801814e:	4618      	mov	r0, r3
 8018150:	3718      	adds	r7, #24
 8018152:	46bd      	mov	sp, r7
 8018154:	bd80      	pop	{r7, pc}
 8018156:	bf00      	nop
 8018158:	20002808 	.word	0x20002808
 801815c:	e000ed04 	.word	0xe000ed04

08018160 <vTaskGenericNotifyGiveFromISR>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    void vTaskGenericNotifyGiveFromISR( TaskHandle_t xTaskToNotify,
                                        UBaseType_t uxIndexToNotify,
                                        BaseType_t * pxHigherPriorityTaskWoken )
    {
 8018160:	b580      	push	{r7, lr}
 8018162:	b090      	sub	sp, #64	; 0x40
 8018164:	af00      	add	r7, sp, #0
 8018166:	60f8      	str	r0, [r7, #12]
 8018168:	60b9      	str	r1, [r7, #8]
 801816a:	607a      	str	r2, [r7, #4]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 801816c:	68fb      	ldr	r3, [r7, #12]
 801816e:	2b00      	cmp	r3, #0
 8018170:	d10a      	bne.n	8018188 <vTaskGenericNotifyGiveFromISR+0x28>
        __asm volatile
 8018172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018176:	f383 8811 	msr	BASEPRI, r3
 801817a:	f3bf 8f6f 	isb	sy
 801817e:	f3bf 8f4f 	dsb	sy
 8018182:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8018184:	bf00      	nop
 8018186:	e7fe      	b.n	8018186 <vTaskGenericNotifyGiveFromISR+0x26>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8018188:	68bb      	ldr	r3, [r7, #8]
 801818a:	2b00      	cmp	r3, #0
 801818c:	d00a      	beq.n	80181a4 <vTaskGenericNotifyGiveFromISR+0x44>
        __asm volatile
 801818e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018192:	f383 8811 	msr	BASEPRI, r3
 8018196:	f3bf 8f6f 	isb	sy
 801819a:	f3bf 8f4f 	dsb	sy
 801819e:	623b      	str	r3, [r7, #32]
    }
 80181a0:	bf00      	nop
 80181a2:	e7fe      	b.n	80181a2 <vTaskGenericNotifyGiveFromISR+0x42>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80181a4:	f000 fdfa 	bl	8018d9c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 80181a8:	68fb      	ldr	r3, [r7, #12]
 80181aa:	63fb      	str	r3, [r7, #60]	; 0x3c

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80181ac:	f3ef 8211 	mrs	r2, BASEPRI
 80181b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80181b4:	f383 8811 	msr	BASEPRI, r3
 80181b8:	f3bf 8f6f 	isb	sy
 80181bc:	f3bf 8f4f 	dsb	sy
 80181c0:	61fa      	str	r2, [r7, #28]
 80181c2:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80181c4:	69fb      	ldr	r3, [r7, #28]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80181c6:	63bb      	str	r3, [r7, #56]	; 0x38
        {
            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80181c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80181ca:	68bb      	ldr	r3, [r7, #8]
 80181cc:	4413      	add	r3, r2
 80181ce:	3354      	adds	r3, #84	; 0x54
 80181d0:	781b      	ldrb	r3, [r3, #0]
 80181d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80181d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80181d8:	68bb      	ldr	r3, [r7, #8]
 80181da:	4413      	add	r3, r2
 80181dc:	3354      	adds	r3, #84	; 0x54
 80181de:	2202      	movs	r2, #2
 80181e0:	701a      	strb	r2, [r3, #0]

            /* 'Giving' is equivalent to incrementing a count in a counting
             * semaphore. */
            ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80181e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80181e4:	68ba      	ldr	r2, [r7, #8]
 80181e6:	3214      	adds	r2, #20
 80181e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80181ec:	1c59      	adds	r1, r3, #1
 80181ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80181f0:	68ba      	ldr	r2, [r7, #8]
 80181f2:	3214      	adds	r2, #20
 80181f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

            traceTASK_NOTIFY_GIVE_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80181f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80181fc:	2b01      	cmp	r3, #1
 80181fe:	f040 809e 	bne.w	801833e <vTaskGenericNotifyGiveFromISR+0x1de>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8018202:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018206:	2b00      	cmp	r3, #0
 8018208:	d00a      	beq.n	8018220 <vTaskGenericNotifyGiveFromISR+0xc0>
        __asm volatile
 801820a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801820e:	f383 8811 	msr	BASEPRI, r3
 8018212:	f3bf 8f6f 	isb	sy
 8018216:	f3bf 8f4f 	dsb	sy
 801821a:	617b      	str	r3, [r7, #20]
    }
 801821c:	bf00      	nop
 801821e:	e7fe      	b.n	801821e <vTaskGenericNotifyGiveFromISR+0xbe>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018220:	4b4c      	ldr	r3, [pc, #304]	; (8018354 <vTaskGenericNotifyGiveFromISR+0x1f4>)
 8018222:	681b      	ldr	r3, [r3, #0]
 8018224:	2b00      	cmp	r3, #0
 8018226:	d15e      	bne.n	80182e6 <vTaskGenericNotifyGiveFromISR+0x186>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8018228:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801822a:	695b      	ldr	r3, [r3, #20]
 801822c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801822e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018230:	689b      	ldr	r3, [r3, #8]
 8018232:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018234:	68d2      	ldr	r2, [r2, #12]
 8018236:	609a      	str	r2, [r3, #8]
 8018238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801823a:	68db      	ldr	r3, [r3, #12]
 801823c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801823e:	6892      	ldr	r2, [r2, #8]
 8018240:	605a      	str	r2, [r3, #4]
 8018242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018244:	685a      	ldr	r2, [r3, #4]
 8018246:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018248:	3304      	adds	r3, #4
 801824a:	429a      	cmp	r2, r3
 801824c:	d103      	bne.n	8018256 <vTaskGenericNotifyGiveFromISR+0xf6>
 801824e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018250:	68da      	ldr	r2, [r3, #12]
 8018252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018254:	605a      	str	r2, [r3, #4]
 8018256:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018258:	2200      	movs	r2, #0
 801825a:	615a      	str	r2, [r3, #20]
 801825c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801825e:	681b      	ldr	r3, [r3, #0]
 8018260:	1e5a      	subs	r2, r3, #1
 8018262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018264:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8018266:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801826a:	2201      	movs	r2, #1
 801826c:	409a      	lsls	r2, r3
 801826e:	4b3a      	ldr	r3, [pc, #232]	; (8018358 <vTaskGenericNotifyGiveFromISR+0x1f8>)
 8018270:	681b      	ldr	r3, [r3, #0]
 8018272:	4313      	orrs	r3, r2
 8018274:	4a38      	ldr	r2, [pc, #224]	; (8018358 <vTaskGenericNotifyGiveFromISR+0x1f8>)
 8018276:	6013      	str	r3, [r2, #0]
 8018278:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801827a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801827c:	4937      	ldr	r1, [pc, #220]	; (801835c <vTaskGenericNotifyGiveFromISR+0x1fc>)
 801827e:	4613      	mov	r3, r2
 8018280:	009b      	lsls	r3, r3, #2
 8018282:	4413      	add	r3, r2
 8018284:	009b      	lsls	r3, r3, #2
 8018286:	440b      	add	r3, r1
 8018288:	3304      	adds	r3, #4
 801828a:	681b      	ldr	r3, [r3, #0]
 801828c:	62bb      	str	r3, [r7, #40]	; 0x28
 801828e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018290:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018292:	609a      	str	r2, [r3, #8]
 8018294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018296:	689a      	ldr	r2, [r3, #8]
 8018298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801829a:	60da      	str	r2, [r3, #12]
 801829c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801829e:	689b      	ldr	r3, [r3, #8]
 80182a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80182a2:	3204      	adds	r2, #4
 80182a4:	605a      	str	r2, [r3, #4]
 80182a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80182a8:	1d1a      	adds	r2, r3, #4
 80182aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182ac:	609a      	str	r2, [r3, #8]
 80182ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80182b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80182b2:	4613      	mov	r3, r2
 80182b4:	009b      	lsls	r3, r3, #2
 80182b6:	4413      	add	r3, r2
 80182b8:	009b      	lsls	r3, r3, #2
 80182ba:	4a28      	ldr	r2, [pc, #160]	; (801835c <vTaskGenericNotifyGiveFromISR+0x1fc>)
 80182bc:	441a      	add	r2, r3
 80182be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80182c0:	615a      	str	r2, [r3, #20]
 80182c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80182c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80182c6:	4925      	ldr	r1, [pc, #148]	; (801835c <vTaskGenericNotifyGiveFromISR+0x1fc>)
 80182c8:	4613      	mov	r3, r2
 80182ca:	009b      	lsls	r3, r3, #2
 80182cc:	4413      	add	r3, r2
 80182ce:	009b      	lsls	r3, r3, #2
 80182d0:	440b      	add	r3, r1
 80182d2:	681b      	ldr	r3, [r3, #0]
 80182d4:	1c59      	adds	r1, r3, #1
 80182d6:	4821      	ldr	r0, [pc, #132]	; (801835c <vTaskGenericNotifyGiveFromISR+0x1fc>)
 80182d8:	4613      	mov	r3, r2
 80182da:	009b      	lsls	r3, r3, #2
 80182dc:	4413      	add	r3, r2
 80182de:	009b      	lsls	r3, r3, #2
 80182e0:	4403      	add	r3, r0
 80182e2:	6019      	str	r1, [r3, #0]
 80182e4:	e01b      	b.n	801831e <vTaskGenericNotifyGiveFromISR+0x1be>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80182e6:	4b1e      	ldr	r3, [pc, #120]	; (8018360 <vTaskGenericNotifyGiveFromISR+0x200>)
 80182e8:	685b      	ldr	r3, [r3, #4]
 80182ea:	633b      	str	r3, [r7, #48]	; 0x30
 80182ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80182ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80182f0:	61da      	str	r2, [r3, #28]
 80182f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182f4:	689a      	ldr	r2, [r3, #8]
 80182f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80182f8:	621a      	str	r2, [r3, #32]
 80182fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182fc:	689b      	ldr	r3, [r3, #8]
 80182fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018300:	3218      	adds	r2, #24
 8018302:	605a      	str	r2, [r3, #4]
 8018304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018306:	f103 0218 	add.w	r2, r3, #24
 801830a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801830c:	609a      	str	r2, [r3, #8]
 801830e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018310:	4a13      	ldr	r2, [pc, #76]	; (8018360 <vTaskGenericNotifyGiveFromISR+0x200>)
 8018312:	629a      	str	r2, [r3, #40]	; 0x28
 8018314:	4b12      	ldr	r3, [pc, #72]	; (8018360 <vTaskGenericNotifyGiveFromISR+0x200>)
 8018316:	681b      	ldr	r3, [r3, #0]
 8018318:	3301      	adds	r3, #1
 801831a:	4a11      	ldr	r2, [pc, #68]	; (8018360 <vTaskGenericNotifyGiveFromISR+0x200>)
 801831c:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801831e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018322:	4b10      	ldr	r3, [pc, #64]	; (8018364 <vTaskGenericNotifyGiveFromISR+0x204>)
 8018324:	681b      	ldr	r3, [r3, #0]
 8018326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018328:	429a      	cmp	r2, r3
 801832a:	d908      	bls.n	801833e <vTaskGenericNotifyGiveFromISR+0x1de>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 801832c:	687b      	ldr	r3, [r7, #4]
 801832e:	2b00      	cmp	r3, #0
 8018330:	d002      	beq.n	8018338 <vTaskGenericNotifyGiveFromISR+0x1d8>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8018332:	687b      	ldr	r3, [r7, #4]
 8018334:	2201      	movs	r2, #1
 8018336:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter in an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8018338:	4b0b      	ldr	r3, [pc, #44]	; (8018368 <vTaskGenericNotifyGiveFromISR+0x208>)
 801833a:	2201      	movs	r2, #1
 801833c:	601a      	str	r2, [r3, #0]
 801833e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018340:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8018342:	693b      	ldr	r3, [r7, #16]
 8018344:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8018348:	bf00      	nop
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
 801834a:	bf00      	nop
 801834c:	3740      	adds	r7, #64	; 0x40
 801834e:	46bd      	mov	sp, r7
 8018350:	bd80      	pop	{r7, pc}
 8018352:	bf00      	nop
 8018354:	200029e4 	.word	0x200029e4
 8018358:	200029c4 	.word	0x200029c4
 801835c:	2000280c 	.word	0x2000280c
 8018360:	2000297c 	.word	0x2000297c
 8018364:	20002808 	.word	0x20002808
 8018368:	200029d0 	.word	0x200029d0

0801836c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 801836c:	b580      	push	{r7, lr}
 801836e:	b086      	sub	sp, #24
 8018370:	af00      	add	r7, sp, #0
 8018372:	6078      	str	r0, [r7, #4]
 8018374:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8018376:	4b36      	ldr	r3, [pc, #216]	; (8018450 <prvAddCurrentTaskToDelayedList+0xe4>)
 8018378:	681b      	ldr	r3, [r3, #0]
 801837a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801837c:	4b35      	ldr	r3, [pc, #212]	; (8018454 <prvAddCurrentTaskToDelayedList+0xe8>)
 801837e:	681b      	ldr	r3, [r3, #0]
 8018380:	3304      	adds	r3, #4
 8018382:	4618      	mov	r0, r3
 8018384:	f7fe fbc0 	bl	8016b08 <uxListRemove>
 8018388:	4603      	mov	r3, r0
 801838a:	2b00      	cmp	r3, #0
 801838c:	d10b      	bne.n	80183a6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801838e:	4b31      	ldr	r3, [pc, #196]	; (8018454 <prvAddCurrentTaskToDelayedList+0xe8>)
 8018390:	681b      	ldr	r3, [r3, #0]
 8018392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018394:	2201      	movs	r2, #1
 8018396:	fa02 f303 	lsl.w	r3, r2, r3
 801839a:	43da      	mvns	r2, r3
 801839c:	4b2e      	ldr	r3, [pc, #184]	; (8018458 <prvAddCurrentTaskToDelayedList+0xec>)
 801839e:	681b      	ldr	r3, [r3, #0]
 80183a0:	4013      	ands	r3, r2
 80183a2:	4a2d      	ldr	r2, [pc, #180]	; (8018458 <prvAddCurrentTaskToDelayedList+0xec>)
 80183a4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80183a6:	687b      	ldr	r3, [r7, #4]
 80183a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80183ac:	d124      	bne.n	80183f8 <prvAddCurrentTaskToDelayedList+0x8c>
 80183ae:	683b      	ldr	r3, [r7, #0]
 80183b0:	2b00      	cmp	r3, #0
 80183b2:	d021      	beq.n	80183f8 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80183b4:	4b29      	ldr	r3, [pc, #164]	; (801845c <prvAddCurrentTaskToDelayedList+0xf0>)
 80183b6:	685b      	ldr	r3, [r3, #4]
 80183b8:	613b      	str	r3, [r7, #16]
 80183ba:	4b26      	ldr	r3, [pc, #152]	; (8018454 <prvAddCurrentTaskToDelayedList+0xe8>)
 80183bc:	681b      	ldr	r3, [r3, #0]
 80183be:	693a      	ldr	r2, [r7, #16]
 80183c0:	609a      	str	r2, [r3, #8]
 80183c2:	4b24      	ldr	r3, [pc, #144]	; (8018454 <prvAddCurrentTaskToDelayedList+0xe8>)
 80183c4:	681b      	ldr	r3, [r3, #0]
 80183c6:	693a      	ldr	r2, [r7, #16]
 80183c8:	6892      	ldr	r2, [r2, #8]
 80183ca:	60da      	str	r2, [r3, #12]
 80183cc:	4b21      	ldr	r3, [pc, #132]	; (8018454 <prvAddCurrentTaskToDelayedList+0xe8>)
 80183ce:	681a      	ldr	r2, [r3, #0]
 80183d0:	693b      	ldr	r3, [r7, #16]
 80183d2:	689b      	ldr	r3, [r3, #8]
 80183d4:	3204      	adds	r2, #4
 80183d6:	605a      	str	r2, [r3, #4]
 80183d8:	4b1e      	ldr	r3, [pc, #120]	; (8018454 <prvAddCurrentTaskToDelayedList+0xe8>)
 80183da:	681b      	ldr	r3, [r3, #0]
 80183dc:	1d1a      	adds	r2, r3, #4
 80183de:	693b      	ldr	r3, [r7, #16]
 80183e0:	609a      	str	r2, [r3, #8]
 80183e2:	4b1c      	ldr	r3, [pc, #112]	; (8018454 <prvAddCurrentTaskToDelayedList+0xe8>)
 80183e4:	681b      	ldr	r3, [r3, #0]
 80183e6:	4a1d      	ldr	r2, [pc, #116]	; (801845c <prvAddCurrentTaskToDelayedList+0xf0>)
 80183e8:	615a      	str	r2, [r3, #20]
 80183ea:	4b1c      	ldr	r3, [pc, #112]	; (801845c <prvAddCurrentTaskToDelayedList+0xf0>)
 80183ec:	681b      	ldr	r3, [r3, #0]
 80183ee:	3301      	adds	r3, #1
 80183f0:	4a1a      	ldr	r2, [pc, #104]	; (801845c <prvAddCurrentTaskToDelayedList+0xf0>)
 80183f2:	6013      	str	r3, [r2, #0]
 80183f4:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80183f6:	e026      	b.n	8018446 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80183f8:	697a      	ldr	r2, [r7, #20]
 80183fa:	687b      	ldr	r3, [r7, #4]
 80183fc:	4413      	add	r3, r2
 80183fe:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8018400:	4b14      	ldr	r3, [pc, #80]	; (8018454 <prvAddCurrentTaskToDelayedList+0xe8>)
 8018402:	681b      	ldr	r3, [r3, #0]
 8018404:	68fa      	ldr	r2, [r7, #12]
 8018406:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8018408:	68fa      	ldr	r2, [r7, #12]
 801840a:	697b      	ldr	r3, [r7, #20]
 801840c:	429a      	cmp	r2, r3
 801840e:	d209      	bcs.n	8018424 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018410:	4b13      	ldr	r3, [pc, #76]	; (8018460 <prvAddCurrentTaskToDelayedList+0xf4>)
 8018412:	681a      	ldr	r2, [r3, #0]
 8018414:	4b0f      	ldr	r3, [pc, #60]	; (8018454 <prvAddCurrentTaskToDelayedList+0xe8>)
 8018416:	681b      	ldr	r3, [r3, #0]
 8018418:	3304      	adds	r3, #4
 801841a:	4619      	mov	r1, r3
 801841c:	4610      	mov	r0, r2
 801841e:	f7fe fb3a 	bl	8016a96 <vListInsert>
}
 8018422:	e010      	b.n	8018446 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018424:	4b0f      	ldr	r3, [pc, #60]	; (8018464 <prvAddCurrentTaskToDelayedList+0xf8>)
 8018426:	681a      	ldr	r2, [r3, #0]
 8018428:	4b0a      	ldr	r3, [pc, #40]	; (8018454 <prvAddCurrentTaskToDelayedList+0xe8>)
 801842a:	681b      	ldr	r3, [r3, #0]
 801842c:	3304      	adds	r3, #4
 801842e:	4619      	mov	r1, r3
 8018430:	4610      	mov	r0, r2
 8018432:	f7fe fb30 	bl	8016a96 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8018436:	4b0c      	ldr	r3, [pc, #48]	; (8018468 <prvAddCurrentTaskToDelayedList+0xfc>)
 8018438:	681b      	ldr	r3, [r3, #0]
 801843a:	68fa      	ldr	r2, [r7, #12]
 801843c:	429a      	cmp	r2, r3
 801843e:	d202      	bcs.n	8018446 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8018440:	4a09      	ldr	r2, [pc, #36]	; (8018468 <prvAddCurrentTaskToDelayedList+0xfc>)
 8018442:	68fb      	ldr	r3, [r7, #12]
 8018444:	6013      	str	r3, [r2, #0]
}
 8018446:	bf00      	nop
 8018448:	3718      	adds	r7, #24
 801844a:	46bd      	mov	sp, r7
 801844c:	bd80      	pop	{r7, pc}
 801844e:	bf00      	nop
 8018450:	200029c0 	.word	0x200029c0
 8018454:	20002808 	.word	0x20002808
 8018458:	200029c4 	.word	0x200029c4
 801845c:	200029a8 	.word	0x200029a8
 8018460:	20002978 	.word	0x20002978
 8018464:	20002974 	.word	0x20002974
 8018468:	200029dc 	.word	0x200029dc

0801846c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 801846c:	b580      	push	{r7, lr}
 801846e:	b084      	sub	sp, #16
 8018470:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8018472:	2300      	movs	r3, #0
 8018474:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8018476:	f000 fa47 	bl	8018908 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 801847a:	4b11      	ldr	r3, [pc, #68]	; (80184c0 <xTimerCreateTimerTask+0x54>)
 801847c:	681b      	ldr	r3, [r3, #0]
 801847e:	2b00      	cmp	r3, #0
 8018480:	d00b      	beq.n	801849a <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8018482:	4b10      	ldr	r3, [pc, #64]	; (80184c4 <xTimerCreateTimerTask+0x58>)
 8018484:	9301      	str	r3, [sp, #4]
 8018486:	2302      	movs	r3, #2
 8018488:	9300      	str	r3, [sp, #0]
 801848a:	2300      	movs	r3, #0
 801848c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8018490:	490d      	ldr	r1, [pc, #52]	; (80184c8 <xTimerCreateTimerTask+0x5c>)
 8018492:	480e      	ldr	r0, [pc, #56]	; (80184cc <xTimerCreateTimerTask+0x60>)
 8018494:	f7fe fe54 	bl	8017140 <xTaskCreate>
 8018498:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 801849a:	687b      	ldr	r3, [r7, #4]
 801849c:	2b00      	cmp	r3, #0
 801849e:	d10a      	bne.n	80184b6 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80184a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80184a4:	f383 8811 	msr	BASEPRI, r3
 80184a8:	f3bf 8f6f 	isb	sy
 80184ac:	f3bf 8f4f 	dsb	sy
 80184b0:	603b      	str	r3, [r7, #0]
    }
 80184b2:	bf00      	nop
 80184b4:	e7fe      	b.n	80184b4 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80184b6:	687b      	ldr	r3, [r7, #4]
    }
 80184b8:	4618      	mov	r0, r3
 80184ba:	3708      	adds	r7, #8
 80184bc:	46bd      	mov	sp, r7
 80184be:	bd80      	pop	{r7, pc}
 80184c0:	20002a18 	.word	0x20002a18
 80184c4:	20002a1c 	.word	0x20002a1c
 80184c8:	0801fe58 	.word	0x0801fe58
 80184cc:	08018575 	.word	0x08018575

080184d0 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80184d0:	b580      	push	{r7, lr}
 80184d2:	b084      	sub	sp, #16
 80184d4:	af00      	add	r7, sp, #0
 80184d6:	60f8      	str	r0, [r7, #12]
 80184d8:	60b9      	str	r1, [r7, #8]
 80184da:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80184dc:	e008      	b.n	80184f0 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80184de:	68fb      	ldr	r3, [r7, #12]
 80184e0:	699b      	ldr	r3, [r3, #24]
 80184e2:	68ba      	ldr	r2, [r7, #8]
 80184e4:	4413      	add	r3, r2
 80184e6:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80184e8:	68fb      	ldr	r3, [r7, #12]
 80184ea:	6a1b      	ldr	r3, [r3, #32]
 80184ec:	68f8      	ldr	r0, [r7, #12]
 80184ee:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80184f0:	68fb      	ldr	r3, [r7, #12]
 80184f2:	699a      	ldr	r2, [r3, #24]
 80184f4:	68bb      	ldr	r3, [r7, #8]
 80184f6:	18d1      	adds	r1, r2, r3
 80184f8:	68bb      	ldr	r3, [r7, #8]
 80184fa:	687a      	ldr	r2, [r7, #4]
 80184fc:	68f8      	ldr	r0, [r7, #12]
 80184fe:	f000 f8dd 	bl	80186bc <prvInsertTimerInActiveList>
 8018502:	4603      	mov	r3, r0
 8018504:	2b00      	cmp	r3, #0
 8018506:	d1ea      	bne.n	80184de <prvReloadTimer+0xe>
        }
    }
 8018508:	bf00      	nop
 801850a:	bf00      	nop
 801850c:	3710      	adds	r7, #16
 801850e:	46bd      	mov	sp, r7
 8018510:	bd80      	pop	{r7, pc}
	...

08018514 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8018514:	b580      	push	{r7, lr}
 8018516:	b084      	sub	sp, #16
 8018518:	af00      	add	r7, sp, #0
 801851a:	6078      	str	r0, [r7, #4]
 801851c:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801851e:	4b14      	ldr	r3, [pc, #80]	; (8018570 <prvProcessExpiredTimer+0x5c>)
 8018520:	681b      	ldr	r3, [r3, #0]
 8018522:	68db      	ldr	r3, [r3, #12]
 8018524:	68db      	ldr	r3, [r3, #12]
 8018526:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018528:	68fb      	ldr	r3, [r7, #12]
 801852a:	3304      	adds	r3, #4
 801852c:	4618      	mov	r0, r3
 801852e:	f7fe faeb 	bl	8016b08 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018532:	68fb      	ldr	r3, [r7, #12]
 8018534:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018538:	f003 0304 	and.w	r3, r3, #4
 801853c:	2b00      	cmp	r3, #0
 801853e:	d005      	beq.n	801854c <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8018540:	683a      	ldr	r2, [r7, #0]
 8018542:	6879      	ldr	r1, [r7, #4]
 8018544:	68f8      	ldr	r0, [r7, #12]
 8018546:	f7ff ffc3 	bl	80184d0 <prvReloadTimer>
 801854a:	e008      	b.n	801855e <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 801854c:	68fb      	ldr	r3, [r7, #12]
 801854e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018552:	f023 0301 	bic.w	r3, r3, #1
 8018556:	b2da      	uxtb	r2, r3
 8018558:	68fb      	ldr	r3, [r7, #12]
 801855a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801855e:	68fb      	ldr	r3, [r7, #12]
 8018560:	6a1b      	ldr	r3, [r3, #32]
 8018562:	68f8      	ldr	r0, [r7, #12]
 8018564:	4798      	blx	r3
    }
 8018566:	bf00      	nop
 8018568:	3710      	adds	r7, #16
 801856a:	46bd      	mov	sp, r7
 801856c:	bd80      	pop	{r7, pc}
 801856e:	bf00      	nop
 8018570:	20002a10 	.word	0x20002a10

08018574 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8018574:	b580      	push	{r7, lr}
 8018576:	b084      	sub	sp, #16
 8018578:	af00      	add	r7, sp, #0
 801857a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801857c:	f107 0308 	add.w	r3, r7, #8
 8018580:	4618      	mov	r0, r3
 8018582:	f000 f857 	bl	8018634 <prvGetNextExpireTime>
 8018586:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8018588:	68bb      	ldr	r3, [r7, #8]
 801858a:	4619      	mov	r1, r3
 801858c:	68f8      	ldr	r0, [r7, #12]
 801858e:	f000 f803 	bl	8018598 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8018592:	f000 f8d5 	bl	8018740 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8018596:	e7f1      	b.n	801857c <prvTimerTask+0x8>

08018598 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8018598:	b580      	push	{r7, lr}
 801859a:	b084      	sub	sp, #16
 801859c:	af00      	add	r7, sp, #0
 801859e:	6078      	str	r0, [r7, #4]
 80185a0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80185a2:	f7ff f851 	bl	8017648 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80185a6:	f107 0308 	add.w	r3, r7, #8
 80185aa:	4618      	mov	r0, r3
 80185ac:	f000 f866 	bl	801867c <prvSampleTimeNow>
 80185b0:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80185b2:	68bb      	ldr	r3, [r7, #8]
 80185b4:	2b00      	cmp	r3, #0
 80185b6:	d130      	bne.n	801861a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80185b8:	683b      	ldr	r3, [r7, #0]
 80185ba:	2b00      	cmp	r3, #0
 80185bc:	d10a      	bne.n	80185d4 <prvProcessTimerOrBlockTask+0x3c>
 80185be:	687a      	ldr	r2, [r7, #4]
 80185c0:	68fb      	ldr	r3, [r7, #12]
 80185c2:	429a      	cmp	r2, r3
 80185c4:	d806      	bhi.n	80185d4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80185c6:	f7ff f84d 	bl	8017664 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80185ca:	68f9      	ldr	r1, [r7, #12]
 80185cc:	6878      	ldr	r0, [r7, #4]
 80185ce:	f7ff ffa1 	bl	8018514 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80185d2:	e024      	b.n	801861e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80185d4:	683b      	ldr	r3, [r7, #0]
 80185d6:	2b00      	cmp	r3, #0
 80185d8:	d008      	beq.n	80185ec <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80185da:	4b13      	ldr	r3, [pc, #76]	; (8018628 <prvProcessTimerOrBlockTask+0x90>)
 80185dc:	681b      	ldr	r3, [r3, #0]
 80185de:	681b      	ldr	r3, [r3, #0]
 80185e0:	2b00      	cmp	r3, #0
 80185e2:	d101      	bne.n	80185e8 <prvProcessTimerOrBlockTask+0x50>
 80185e4:	2301      	movs	r3, #1
 80185e6:	e000      	b.n	80185ea <prvProcessTimerOrBlockTask+0x52>
 80185e8:	2300      	movs	r3, #0
 80185ea:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80185ec:	4b0f      	ldr	r3, [pc, #60]	; (801862c <prvProcessTimerOrBlockTask+0x94>)
 80185ee:	6818      	ldr	r0, [r3, #0]
 80185f0:	687a      	ldr	r2, [r7, #4]
 80185f2:	68fb      	ldr	r3, [r7, #12]
 80185f4:	1ad3      	subs	r3, r2, r3
 80185f6:	683a      	ldr	r2, [r7, #0]
 80185f8:	4619      	mov	r1, r3
 80185fa:	f7fe fd6d 	bl	80170d8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80185fe:	f7ff f831 	bl	8017664 <xTaskResumeAll>
 8018602:	4603      	mov	r3, r0
 8018604:	2b00      	cmp	r3, #0
 8018606:	d10a      	bne.n	801861e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8018608:	4b09      	ldr	r3, [pc, #36]	; (8018630 <prvProcessTimerOrBlockTask+0x98>)
 801860a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801860e:	601a      	str	r2, [r3, #0]
 8018610:	f3bf 8f4f 	dsb	sy
 8018614:	f3bf 8f6f 	isb	sy
    }
 8018618:	e001      	b.n	801861e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 801861a:	f7ff f823 	bl	8017664 <xTaskResumeAll>
    }
 801861e:	bf00      	nop
 8018620:	3710      	adds	r7, #16
 8018622:	46bd      	mov	sp, r7
 8018624:	bd80      	pop	{r7, pc}
 8018626:	bf00      	nop
 8018628:	20002a14 	.word	0x20002a14
 801862c:	20002a18 	.word	0x20002a18
 8018630:	e000ed04 	.word	0xe000ed04

08018634 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8018634:	b480      	push	{r7}
 8018636:	b085      	sub	sp, #20
 8018638:	af00      	add	r7, sp, #0
 801863a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801863c:	4b0e      	ldr	r3, [pc, #56]	; (8018678 <prvGetNextExpireTime+0x44>)
 801863e:	681b      	ldr	r3, [r3, #0]
 8018640:	681b      	ldr	r3, [r3, #0]
 8018642:	2b00      	cmp	r3, #0
 8018644:	d101      	bne.n	801864a <prvGetNextExpireTime+0x16>
 8018646:	2201      	movs	r2, #1
 8018648:	e000      	b.n	801864c <prvGetNextExpireTime+0x18>
 801864a:	2200      	movs	r2, #0
 801864c:	687b      	ldr	r3, [r7, #4]
 801864e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8018650:	687b      	ldr	r3, [r7, #4]
 8018652:	681b      	ldr	r3, [r3, #0]
 8018654:	2b00      	cmp	r3, #0
 8018656:	d105      	bne.n	8018664 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8018658:	4b07      	ldr	r3, [pc, #28]	; (8018678 <prvGetNextExpireTime+0x44>)
 801865a:	681b      	ldr	r3, [r3, #0]
 801865c:	68db      	ldr	r3, [r3, #12]
 801865e:	681b      	ldr	r3, [r3, #0]
 8018660:	60fb      	str	r3, [r7, #12]
 8018662:	e001      	b.n	8018668 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8018664:	2300      	movs	r3, #0
 8018666:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8018668:	68fb      	ldr	r3, [r7, #12]
    }
 801866a:	4618      	mov	r0, r3
 801866c:	3714      	adds	r7, #20
 801866e:	46bd      	mov	sp, r7
 8018670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018674:	4770      	bx	lr
 8018676:	bf00      	nop
 8018678:	20002a10 	.word	0x20002a10

0801867c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 801867c:	b580      	push	{r7, lr}
 801867e:	b084      	sub	sp, #16
 8018680:	af00      	add	r7, sp, #0
 8018682:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8018684:	f7ff f8ea 	bl	801785c <xTaskGetTickCount>
 8018688:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 801868a:	4b0b      	ldr	r3, [pc, #44]	; (80186b8 <prvSampleTimeNow+0x3c>)
 801868c:	681b      	ldr	r3, [r3, #0]
 801868e:	68fa      	ldr	r2, [r7, #12]
 8018690:	429a      	cmp	r2, r3
 8018692:	d205      	bcs.n	80186a0 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8018694:	f000 f912 	bl	80188bc <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8018698:	687b      	ldr	r3, [r7, #4]
 801869a:	2201      	movs	r2, #1
 801869c:	601a      	str	r2, [r3, #0]
 801869e:	e002      	b.n	80186a6 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80186a0:	687b      	ldr	r3, [r7, #4]
 80186a2:	2200      	movs	r2, #0
 80186a4:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80186a6:	4a04      	ldr	r2, [pc, #16]	; (80186b8 <prvSampleTimeNow+0x3c>)
 80186a8:	68fb      	ldr	r3, [r7, #12]
 80186aa:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80186ac:	68fb      	ldr	r3, [r7, #12]
    }
 80186ae:	4618      	mov	r0, r3
 80186b0:	3710      	adds	r7, #16
 80186b2:	46bd      	mov	sp, r7
 80186b4:	bd80      	pop	{r7, pc}
 80186b6:	bf00      	nop
 80186b8:	20002a20 	.word	0x20002a20

080186bc <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80186bc:	b580      	push	{r7, lr}
 80186be:	b086      	sub	sp, #24
 80186c0:	af00      	add	r7, sp, #0
 80186c2:	60f8      	str	r0, [r7, #12]
 80186c4:	60b9      	str	r1, [r7, #8]
 80186c6:	607a      	str	r2, [r7, #4]
 80186c8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80186ca:	2300      	movs	r3, #0
 80186cc:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80186ce:	68fb      	ldr	r3, [r7, #12]
 80186d0:	68ba      	ldr	r2, [r7, #8]
 80186d2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80186d4:	68fb      	ldr	r3, [r7, #12]
 80186d6:	68fa      	ldr	r2, [r7, #12]
 80186d8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80186da:	68ba      	ldr	r2, [r7, #8]
 80186dc:	687b      	ldr	r3, [r7, #4]
 80186de:	429a      	cmp	r2, r3
 80186e0:	d812      	bhi.n	8018708 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80186e2:	687a      	ldr	r2, [r7, #4]
 80186e4:	683b      	ldr	r3, [r7, #0]
 80186e6:	1ad2      	subs	r2, r2, r3
 80186e8:	68fb      	ldr	r3, [r7, #12]
 80186ea:	699b      	ldr	r3, [r3, #24]
 80186ec:	429a      	cmp	r2, r3
 80186ee:	d302      	bcc.n	80186f6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80186f0:	2301      	movs	r3, #1
 80186f2:	617b      	str	r3, [r7, #20]
 80186f4:	e01b      	b.n	801872e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80186f6:	4b10      	ldr	r3, [pc, #64]	; (8018738 <prvInsertTimerInActiveList+0x7c>)
 80186f8:	681a      	ldr	r2, [r3, #0]
 80186fa:	68fb      	ldr	r3, [r7, #12]
 80186fc:	3304      	adds	r3, #4
 80186fe:	4619      	mov	r1, r3
 8018700:	4610      	mov	r0, r2
 8018702:	f7fe f9c8 	bl	8016a96 <vListInsert>
 8018706:	e012      	b.n	801872e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8018708:	687a      	ldr	r2, [r7, #4]
 801870a:	683b      	ldr	r3, [r7, #0]
 801870c:	429a      	cmp	r2, r3
 801870e:	d206      	bcs.n	801871e <prvInsertTimerInActiveList+0x62>
 8018710:	68ba      	ldr	r2, [r7, #8]
 8018712:	683b      	ldr	r3, [r7, #0]
 8018714:	429a      	cmp	r2, r3
 8018716:	d302      	bcc.n	801871e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8018718:	2301      	movs	r3, #1
 801871a:	617b      	str	r3, [r7, #20]
 801871c:	e007      	b.n	801872e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801871e:	4b07      	ldr	r3, [pc, #28]	; (801873c <prvInsertTimerInActiveList+0x80>)
 8018720:	681a      	ldr	r2, [r3, #0]
 8018722:	68fb      	ldr	r3, [r7, #12]
 8018724:	3304      	adds	r3, #4
 8018726:	4619      	mov	r1, r3
 8018728:	4610      	mov	r0, r2
 801872a:	f7fe f9b4 	bl	8016a96 <vListInsert>
            }
        }

        return xProcessTimerNow;
 801872e:	697b      	ldr	r3, [r7, #20]
    }
 8018730:	4618      	mov	r0, r3
 8018732:	3718      	adds	r7, #24
 8018734:	46bd      	mov	sp, r7
 8018736:	bd80      	pop	{r7, pc}
 8018738:	20002a14 	.word	0x20002a14
 801873c:	20002a10 	.word	0x20002a10

08018740 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8018740:	b580      	push	{r7, lr}
 8018742:	b088      	sub	sp, #32
 8018744:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8018746:	e0a6      	b.n	8018896 <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8018748:	68bb      	ldr	r3, [r7, #8]
 801874a:	2b00      	cmp	r3, #0
 801874c:	f2c0 80a3 	blt.w	8018896 <prvProcessReceivedCommands+0x156>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8018750:	693b      	ldr	r3, [r7, #16]
 8018752:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8018754:	69fb      	ldr	r3, [r7, #28]
 8018756:	695b      	ldr	r3, [r3, #20]
 8018758:	2b00      	cmp	r3, #0
 801875a:	d004      	beq.n	8018766 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801875c:	69fb      	ldr	r3, [r7, #28]
 801875e:	3304      	adds	r3, #4
 8018760:	4618      	mov	r0, r3
 8018762:	f7fe f9d1 	bl	8016b08 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8018766:	1d3b      	adds	r3, r7, #4
 8018768:	4618      	mov	r0, r3
 801876a:	f7ff ff87 	bl	801867c <prvSampleTimeNow>
 801876e:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8018770:	68bb      	ldr	r3, [r7, #8]
 8018772:	3b01      	subs	r3, #1
 8018774:	2b08      	cmp	r3, #8
 8018776:	f200 808d 	bhi.w	8018894 <prvProcessReceivedCommands+0x154>
 801877a:	a201      	add	r2, pc, #4	; (adr r2, 8018780 <prvProcessReceivedCommands+0x40>)
 801877c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018780:	080187a5 	.word	0x080187a5
 8018784:	080187a5 	.word	0x080187a5
 8018788:	0801880d 	.word	0x0801880d
 801878c:	08018821 	.word	0x08018821
 8018790:	0801886b 	.word	0x0801886b
 8018794:	080187a5 	.word	0x080187a5
 8018798:	080187a5 	.word	0x080187a5
 801879c:	0801880d 	.word	0x0801880d
 80187a0:	08018821 	.word	0x08018821
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80187a4:	69fb      	ldr	r3, [r7, #28]
 80187a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80187aa:	f043 0301 	orr.w	r3, r3, #1
 80187ae:	b2da      	uxtb	r2, r3
 80187b0:	69fb      	ldr	r3, [r7, #28]
 80187b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80187b6:	68fa      	ldr	r2, [r7, #12]
 80187b8:	69fb      	ldr	r3, [r7, #28]
 80187ba:	699b      	ldr	r3, [r3, #24]
 80187bc:	18d1      	adds	r1, r2, r3
 80187be:	68fb      	ldr	r3, [r7, #12]
 80187c0:	69ba      	ldr	r2, [r7, #24]
 80187c2:	69f8      	ldr	r0, [r7, #28]
 80187c4:	f7ff ff7a 	bl	80186bc <prvInsertTimerInActiveList>
 80187c8:	4603      	mov	r3, r0
 80187ca:	2b00      	cmp	r3, #0
 80187cc:	d063      	beq.n	8018896 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80187ce:	69fb      	ldr	r3, [r7, #28]
 80187d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80187d4:	f003 0304 	and.w	r3, r3, #4
 80187d8:	2b00      	cmp	r3, #0
 80187da:	d009      	beq.n	80187f0 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80187dc:	68fa      	ldr	r2, [r7, #12]
 80187de:	69fb      	ldr	r3, [r7, #28]
 80187e0:	699b      	ldr	r3, [r3, #24]
 80187e2:	4413      	add	r3, r2
 80187e4:	69ba      	ldr	r2, [r7, #24]
 80187e6:	4619      	mov	r1, r3
 80187e8:	69f8      	ldr	r0, [r7, #28]
 80187ea:	f7ff fe71 	bl	80184d0 <prvReloadTimer>
 80187ee:	e008      	b.n	8018802 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80187f0:	69fb      	ldr	r3, [r7, #28]
 80187f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80187f6:	f023 0301 	bic.w	r3, r3, #1
 80187fa:	b2da      	uxtb	r2, r3
 80187fc:	69fb      	ldr	r3, [r7, #28]
 80187fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018802:	69fb      	ldr	r3, [r7, #28]
 8018804:	6a1b      	ldr	r3, [r3, #32]
 8018806:	69f8      	ldr	r0, [r7, #28]
 8018808:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 801880a:	e044      	b.n	8018896 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 801880c:	69fb      	ldr	r3, [r7, #28]
 801880e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018812:	f023 0301 	bic.w	r3, r3, #1
 8018816:	b2da      	uxtb	r2, r3
 8018818:	69fb      	ldr	r3, [r7, #28]
 801881a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 801881e:	e03a      	b.n	8018896 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8018820:	69fb      	ldr	r3, [r7, #28]
 8018822:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018826:	f043 0301 	orr.w	r3, r3, #1
 801882a:	b2da      	uxtb	r2, r3
 801882c:	69fb      	ldr	r3, [r7, #28]
 801882e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8018832:	68fa      	ldr	r2, [r7, #12]
 8018834:	69fb      	ldr	r3, [r7, #28]
 8018836:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8018838:	69fb      	ldr	r3, [r7, #28]
 801883a:	699b      	ldr	r3, [r3, #24]
 801883c:	2b00      	cmp	r3, #0
 801883e:	d10a      	bne.n	8018856 <prvProcessReceivedCommands+0x116>
        __asm volatile
 8018840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018844:	f383 8811 	msr	BASEPRI, r3
 8018848:	f3bf 8f6f 	isb	sy
 801884c:	f3bf 8f4f 	dsb	sy
 8018850:	617b      	str	r3, [r7, #20]
    }
 8018852:	bf00      	nop
 8018854:	e7fe      	b.n	8018854 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8018856:	69fb      	ldr	r3, [r7, #28]
 8018858:	699a      	ldr	r2, [r3, #24]
 801885a:	69bb      	ldr	r3, [r7, #24]
 801885c:	18d1      	adds	r1, r2, r3
 801885e:	69bb      	ldr	r3, [r7, #24]
 8018860:	69ba      	ldr	r2, [r7, #24]
 8018862:	69f8      	ldr	r0, [r7, #28]
 8018864:	f7ff ff2a 	bl	80186bc <prvInsertTimerInActiveList>
                        break;
 8018868:	e015      	b.n	8018896 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801886a:	69fb      	ldr	r3, [r7, #28]
 801886c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018870:	f003 0302 	and.w	r3, r3, #2
 8018874:	2b00      	cmp	r3, #0
 8018876:	d103      	bne.n	8018880 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8018878:	69f8      	ldr	r0, [r7, #28]
 801887a:	f000 fb89 	bl	8018f90 <vPortFree>
 801887e:	e00a      	b.n	8018896 <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8018880:	69fb      	ldr	r3, [r7, #28]
 8018882:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018886:	f023 0301 	bic.w	r3, r3, #1
 801888a:	b2da      	uxtb	r2, r3
 801888c:	69fb      	ldr	r3, [r7, #28]
 801888e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8018892:	e000      	b.n	8018896 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
 8018894:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8018896:	4b08      	ldr	r3, [pc, #32]	; (80188b8 <prvProcessReceivedCommands+0x178>)
 8018898:	681b      	ldr	r3, [r3, #0]
 801889a:	f107 0108 	add.w	r1, r7, #8
 801889e:	2200      	movs	r2, #0
 80188a0:	4618      	mov	r0, r3
 80188a2:	f7fe fa5d 	bl	8016d60 <xQueueReceive>
 80188a6:	4603      	mov	r3, r0
 80188a8:	2b00      	cmp	r3, #0
 80188aa:	f47f af4d 	bne.w	8018748 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 80188ae:	bf00      	nop
 80188b0:	bf00      	nop
 80188b2:	3720      	adds	r7, #32
 80188b4:	46bd      	mov	sp, r7
 80188b6:	bd80      	pop	{r7, pc}
 80188b8:	20002a18 	.word	0x20002a18

080188bc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80188bc:	b580      	push	{r7, lr}
 80188be:	b082      	sub	sp, #8
 80188c0:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80188c2:	e009      	b.n	80188d8 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80188c4:	4b0e      	ldr	r3, [pc, #56]	; (8018900 <prvSwitchTimerLists+0x44>)
 80188c6:	681b      	ldr	r3, [r3, #0]
 80188c8:	68db      	ldr	r3, [r3, #12]
 80188ca:	681b      	ldr	r3, [r3, #0]
 80188cc:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80188ce:	f04f 31ff 	mov.w	r1, #4294967295
 80188d2:	6838      	ldr	r0, [r7, #0]
 80188d4:	f7ff fe1e 	bl	8018514 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80188d8:	4b09      	ldr	r3, [pc, #36]	; (8018900 <prvSwitchTimerLists+0x44>)
 80188da:	681b      	ldr	r3, [r3, #0]
 80188dc:	681b      	ldr	r3, [r3, #0]
 80188de:	2b00      	cmp	r3, #0
 80188e0:	d1f0      	bne.n	80188c4 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80188e2:	4b07      	ldr	r3, [pc, #28]	; (8018900 <prvSwitchTimerLists+0x44>)
 80188e4:	681b      	ldr	r3, [r3, #0]
 80188e6:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80188e8:	4b06      	ldr	r3, [pc, #24]	; (8018904 <prvSwitchTimerLists+0x48>)
 80188ea:	681b      	ldr	r3, [r3, #0]
 80188ec:	4a04      	ldr	r2, [pc, #16]	; (8018900 <prvSwitchTimerLists+0x44>)
 80188ee:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80188f0:	4a04      	ldr	r2, [pc, #16]	; (8018904 <prvSwitchTimerLists+0x48>)
 80188f2:	687b      	ldr	r3, [r7, #4]
 80188f4:	6013      	str	r3, [r2, #0]
    }
 80188f6:	bf00      	nop
 80188f8:	3708      	adds	r7, #8
 80188fa:	46bd      	mov	sp, r7
 80188fc:	bd80      	pop	{r7, pc}
 80188fe:	bf00      	nop
 8018900:	20002a10 	.word	0x20002a10
 8018904:	20002a14 	.word	0x20002a14

08018908 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8018908:	b580      	push	{r7, lr}
 801890a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 801890c:	f000 f964 	bl	8018bd8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8018910:	4b12      	ldr	r3, [pc, #72]	; (801895c <prvCheckForValidListAndQueue+0x54>)
 8018912:	681b      	ldr	r3, [r3, #0]
 8018914:	2b00      	cmp	r3, #0
 8018916:	d11d      	bne.n	8018954 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8018918:	4811      	ldr	r0, [pc, #68]	; (8018960 <prvCheckForValidListAndQueue+0x58>)
 801891a:	f7fe f86b 	bl	80169f4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 801891e:	4811      	ldr	r0, [pc, #68]	; (8018964 <prvCheckForValidListAndQueue+0x5c>)
 8018920:	f7fe f868 	bl	80169f4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8018924:	4b10      	ldr	r3, [pc, #64]	; (8018968 <prvCheckForValidListAndQueue+0x60>)
 8018926:	4a0e      	ldr	r2, [pc, #56]	; (8018960 <prvCheckForValidListAndQueue+0x58>)
 8018928:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 801892a:	4b10      	ldr	r3, [pc, #64]	; (801896c <prvCheckForValidListAndQueue+0x64>)
 801892c:	4a0d      	ldr	r2, [pc, #52]	; (8018964 <prvCheckForValidListAndQueue+0x5c>)
 801892e:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8018930:	2200      	movs	r2, #0
 8018932:	210c      	movs	r1, #12
 8018934:	200a      	movs	r0, #10
 8018936:	f7fe f9a1 	bl	8016c7c <xQueueGenericCreate>
 801893a:	4603      	mov	r3, r0
 801893c:	4a07      	ldr	r2, [pc, #28]	; (801895c <prvCheckForValidListAndQueue+0x54>)
 801893e:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8018940:	4b06      	ldr	r3, [pc, #24]	; (801895c <prvCheckForValidListAndQueue+0x54>)
 8018942:	681b      	ldr	r3, [r3, #0]
 8018944:	2b00      	cmp	r3, #0
 8018946:	d005      	beq.n	8018954 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8018948:	4b04      	ldr	r3, [pc, #16]	; (801895c <prvCheckForValidListAndQueue+0x54>)
 801894a:	681b      	ldr	r3, [r3, #0]
 801894c:	4908      	ldr	r1, [pc, #32]	; (8018970 <prvCheckForValidListAndQueue+0x68>)
 801894e:	4618      	mov	r0, r3
 8018950:	f7fe fb74 	bl	801703c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8018954:	f000 f970 	bl	8018c38 <vPortExitCritical>
    }
 8018958:	bf00      	nop
 801895a:	bd80      	pop	{r7, pc}
 801895c:	20002a18 	.word	0x20002a18
 8018960:	200029e8 	.word	0x200029e8
 8018964:	200029fc 	.word	0x200029fc
 8018968:	20002a10 	.word	0x20002a10
 801896c:	20002a14 	.word	0x20002a14
 8018970:	0801fe60 	.word	0x0801fe60

08018974 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8018974:	b480      	push	{r7}
 8018976:	b085      	sub	sp, #20
 8018978:	af00      	add	r7, sp, #0
 801897a:	60f8      	str	r0, [r7, #12]
 801897c:	60b9      	str	r1, [r7, #8]
 801897e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8018980:	68fb      	ldr	r3, [r7, #12]
 8018982:	3b04      	subs	r3, #4
 8018984:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8018986:	68fb      	ldr	r3, [r7, #12]
 8018988:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801898c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 801898e:	68fb      	ldr	r3, [r7, #12]
 8018990:	3b04      	subs	r3, #4
 8018992:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8018994:	68bb      	ldr	r3, [r7, #8]
 8018996:	f023 0201 	bic.w	r2, r3, #1
 801899a:	68fb      	ldr	r3, [r7, #12]
 801899c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 801899e:	68fb      	ldr	r3, [r7, #12]
 80189a0:	3b04      	subs	r3, #4
 80189a2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80189a4:	4a0c      	ldr	r2, [pc, #48]	; (80189d8 <pxPortInitialiseStack+0x64>)
 80189a6:	68fb      	ldr	r3, [r7, #12]
 80189a8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80189aa:	68fb      	ldr	r3, [r7, #12]
 80189ac:	3b14      	subs	r3, #20
 80189ae:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80189b0:	687a      	ldr	r2, [r7, #4]
 80189b2:	68fb      	ldr	r3, [r7, #12]
 80189b4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80189b6:	68fb      	ldr	r3, [r7, #12]
 80189b8:	3b04      	subs	r3, #4
 80189ba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80189bc:	68fb      	ldr	r3, [r7, #12]
 80189be:	f06f 0202 	mvn.w	r2, #2
 80189c2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80189c4:	68fb      	ldr	r3, [r7, #12]
 80189c6:	3b20      	subs	r3, #32
 80189c8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80189ca:	68fb      	ldr	r3, [r7, #12]
}
 80189cc:	4618      	mov	r0, r3
 80189ce:	3714      	adds	r7, #20
 80189d0:	46bd      	mov	sp, r7
 80189d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189d6:	4770      	bx	lr
 80189d8:	080189dd 	.word	0x080189dd

080189dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80189dc:	b480      	push	{r7}
 80189de:	b085      	sub	sp, #20
 80189e0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80189e2:	2300      	movs	r3, #0
 80189e4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80189e6:	4b12      	ldr	r3, [pc, #72]	; (8018a30 <prvTaskExitError+0x54>)
 80189e8:	681b      	ldr	r3, [r3, #0]
 80189ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80189ee:	d00a      	beq.n	8018a06 <prvTaskExitError+0x2a>
        __asm volatile
 80189f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80189f4:	f383 8811 	msr	BASEPRI, r3
 80189f8:	f3bf 8f6f 	isb	sy
 80189fc:	f3bf 8f4f 	dsb	sy
 8018a00:	60fb      	str	r3, [r7, #12]
    }
 8018a02:	bf00      	nop
 8018a04:	e7fe      	b.n	8018a04 <prvTaskExitError+0x28>
        __asm volatile
 8018a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a0a:	f383 8811 	msr	BASEPRI, r3
 8018a0e:	f3bf 8f6f 	isb	sy
 8018a12:	f3bf 8f4f 	dsb	sy
 8018a16:	60bb      	str	r3, [r7, #8]
    }
 8018a18:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8018a1a:	bf00      	nop
 8018a1c:	687b      	ldr	r3, [r7, #4]
 8018a1e:	2b00      	cmp	r3, #0
 8018a20:	d0fc      	beq.n	8018a1c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8018a22:	bf00      	nop
 8018a24:	bf00      	nop
 8018a26:	3714      	adds	r7, #20
 8018a28:	46bd      	mov	sp, r7
 8018a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a2e:	4770      	bx	lr
 8018a30:	200000f0 	.word	0x200000f0
	...

08018a40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8018a40:	4b07      	ldr	r3, [pc, #28]	; (8018a60 <pxCurrentTCBConst2>)
 8018a42:	6819      	ldr	r1, [r3, #0]
 8018a44:	6808      	ldr	r0, [r1, #0]
 8018a46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a4a:	f380 8809 	msr	PSP, r0
 8018a4e:	f3bf 8f6f 	isb	sy
 8018a52:	f04f 0000 	mov.w	r0, #0
 8018a56:	f380 8811 	msr	BASEPRI, r0
 8018a5a:	4770      	bx	lr
 8018a5c:	f3af 8000 	nop.w

08018a60 <pxCurrentTCBConst2>:
 8018a60:	20002808 	.word	0x20002808
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8018a64:	bf00      	nop
 8018a66:	bf00      	nop

08018a68 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8018a68:	4808      	ldr	r0, [pc, #32]	; (8018a8c <prvPortStartFirstTask+0x24>)
 8018a6a:	6800      	ldr	r0, [r0, #0]
 8018a6c:	6800      	ldr	r0, [r0, #0]
 8018a6e:	f380 8808 	msr	MSP, r0
 8018a72:	f04f 0000 	mov.w	r0, #0
 8018a76:	f380 8814 	msr	CONTROL, r0
 8018a7a:	b662      	cpsie	i
 8018a7c:	b661      	cpsie	f
 8018a7e:	f3bf 8f4f 	dsb	sy
 8018a82:	f3bf 8f6f 	isb	sy
 8018a86:	df00      	svc	0
 8018a88:	bf00      	nop
 8018a8a:	0000      	.short	0x0000
 8018a8c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8018a90:	bf00      	nop
 8018a92:	bf00      	nop

08018a94 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8018a94:	b580      	push	{r7, lr}
 8018a96:	b086      	sub	sp, #24
 8018a98:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8018a9a:	4b46      	ldr	r3, [pc, #280]	; (8018bb4 <xPortStartScheduler+0x120>)
 8018a9c:	681b      	ldr	r3, [r3, #0]
 8018a9e:	4a46      	ldr	r2, [pc, #280]	; (8018bb8 <xPortStartScheduler+0x124>)
 8018aa0:	4293      	cmp	r3, r2
 8018aa2:	d10a      	bne.n	8018aba <xPortStartScheduler+0x26>
        __asm volatile
 8018aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018aa8:	f383 8811 	msr	BASEPRI, r3
 8018aac:	f3bf 8f6f 	isb	sy
 8018ab0:	f3bf 8f4f 	dsb	sy
 8018ab4:	613b      	str	r3, [r7, #16]
    }
 8018ab6:	bf00      	nop
 8018ab8:	e7fe      	b.n	8018ab8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8018aba:	4b3e      	ldr	r3, [pc, #248]	; (8018bb4 <xPortStartScheduler+0x120>)
 8018abc:	681b      	ldr	r3, [r3, #0]
 8018abe:	4a3f      	ldr	r2, [pc, #252]	; (8018bbc <xPortStartScheduler+0x128>)
 8018ac0:	4293      	cmp	r3, r2
 8018ac2:	d10a      	bne.n	8018ada <xPortStartScheduler+0x46>
        __asm volatile
 8018ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ac8:	f383 8811 	msr	BASEPRI, r3
 8018acc:	f3bf 8f6f 	isb	sy
 8018ad0:	f3bf 8f4f 	dsb	sy
 8018ad4:	60fb      	str	r3, [r7, #12]
    }
 8018ad6:	bf00      	nop
 8018ad8:	e7fe      	b.n	8018ad8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8018ada:	4b39      	ldr	r3, [pc, #228]	; (8018bc0 <xPortStartScheduler+0x12c>)
 8018adc:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8018ade:	697b      	ldr	r3, [r7, #20]
 8018ae0:	781b      	ldrb	r3, [r3, #0]
 8018ae2:	b2db      	uxtb	r3, r3
 8018ae4:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8018ae6:	697b      	ldr	r3, [r7, #20]
 8018ae8:	22ff      	movs	r2, #255	; 0xff
 8018aea:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8018aec:	697b      	ldr	r3, [r7, #20]
 8018aee:	781b      	ldrb	r3, [r3, #0]
 8018af0:	b2db      	uxtb	r3, r3
 8018af2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8018af4:	78fb      	ldrb	r3, [r7, #3]
 8018af6:	b2db      	uxtb	r3, r3
 8018af8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8018afc:	b2da      	uxtb	r2, r3
 8018afe:	4b31      	ldr	r3, [pc, #196]	; (8018bc4 <xPortStartScheduler+0x130>)
 8018b00:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8018b02:	4b31      	ldr	r3, [pc, #196]	; (8018bc8 <xPortStartScheduler+0x134>)
 8018b04:	2207      	movs	r2, #7
 8018b06:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018b08:	e009      	b.n	8018b1e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 8018b0a:	4b2f      	ldr	r3, [pc, #188]	; (8018bc8 <xPortStartScheduler+0x134>)
 8018b0c:	681b      	ldr	r3, [r3, #0]
 8018b0e:	3b01      	subs	r3, #1
 8018b10:	4a2d      	ldr	r2, [pc, #180]	; (8018bc8 <xPortStartScheduler+0x134>)
 8018b12:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8018b14:	78fb      	ldrb	r3, [r7, #3]
 8018b16:	b2db      	uxtb	r3, r3
 8018b18:	005b      	lsls	r3, r3, #1
 8018b1a:	b2db      	uxtb	r3, r3
 8018b1c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018b1e:	78fb      	ldrb	r3, [r7, #3]
 8018b20:	b2db      	uxtb	r3, r3
 8018b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018b26:	2b80      	cmp	r3, #128	; 0x80
 8018b28:	d0ef      	beq.n	8018b0a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8018b2a:	4b27      	ldr	r3, [pc, #156]	; (8018bc8 <xPortStartScheduler+0x134>)
 8018b2c:	681b      	ldr	r3, [r3, #0]
 8018b2e:	f1c3 0307 	rsb	r3, r3, #7
 8018b32:	2b04      	cmp	r3, #4
 8018b34:	d00a      	beq.n	8018b4c <xPortStartScheduler+0xb8>
        __asm volatile
 8018b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b3a:	f383 8811 	msr	BASEPRI, r3
 8018b3e:	f3bf 8f6f 	isb	sy
 8018b42:	f3bf 8f4f 	dsb	sy
 8018b46:	60bb      	str	r3, [r7, #8]
    }
 8018b48:	bf00      	nop
 8018b4a:	e7fe      	b.n	8018b4a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8018b4c:	4b1e      	ldr	r3, [pc, #120]	; (8018bc8 <xPortStartScheduler+0x134>)
 8018b4e:	681b      	ldr	r3, [r3, #0]
 8018b50:	021b      	lsls	r3, r3, #8
 8018b52:	4a1d      	ldr	r2, [pc, #116]	; (8018bc8 <xPortStartScheduler+0x134>)
 8018b54:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8018b56:	4b1c      	ldr	r3, [pc, #112]	; (8018bc8 <xPortStartScheduler+0x134>)
 8018b58:	681b      	ldr	r3, [r3, #0]
 8018b5a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8018b5e:	4a1a      	ldr	r2, [pc, #104]	; (8018bc8 <xPortStartScheduler+0x134>)
 8018b60:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8018b62:	687b      	ldr	r3, [r7, #4]
 8018b64:	b2da      	uxtb	r2, r3
 8018b66:	697b      	ldr	r3, [r7, #20]
 8018b68:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8018b6a:	4b18      	ldr	r3, [pc, #96]	; (8018bcc <xPortStartScheduler+0x138>)
 8018b6c:	681b      	ldr	r3, [r3, #0]
 8018b6e:	4a17      	ldr	r2, [pc, #92]	; (8018bcc <xPortStartScheduler+0x138>)
 8018b70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8018b74:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8018b76:	4b15      	ldr	r3, [pc, #84]	; (8018bcc <xPortStartScheduler+0x138>)
 8018b78:	681b      	ldr	r3, [r3, #0]
 8018b7a:	4a14      	ldr	r2, [pc, #80]	; (8018bcc <xPortStartScheduler+0x138>)
 8018b7c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8018b80:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8018b82:	f000 f8db 	bl	8018d3c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8018b86:	4b12      	ldr	r3, [pc, #72]	; (8018bd0 <xPortStartScheduler+0x13c>)
 8018b88:	2200      	movs	r2, #0
 8018b8a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8018b8c:	f000 f8fa 	bl	8018d84 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8018b90:	4b10      	ldr	r3, [pc, #64]	; (8018bd4 <xPortStartScheduler+0x140>)
 8018b92:	681b      	ldr	r3, [r3, #0]
 8018b94:	4a0f      	ldr	r2, [pc, #60]	; (8018bd4 <xPortStartScheduler+0x140>)
 8018b96:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8018b9a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8018b9c:	f7ff ff64 	bl	8018a68 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8018ba0:	f7fe ff82 	bl	8017aa8 <vTaskSwitchContext>
    prvTaskExitError();
 8018ba4:	f7ff ff1a 	bl	80189dc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8018ba8:	2300      	movs	r3, #0
}
 8018baa:	4618      	mov	r0, r3
 8018bac:	3718      	adds	r7, #24
 8018bae:	46bd      	mov	sp, r7
 8018bb0:	bd80      	pop	{r7, pc}
 8018bb2:	bf00      	nop
 8018bb4:	e000ed00 	.word	0xe000ed00
 8018bb8:	410fc271 	.word	0x410fc271
 8018bbc:	410fc270 	.word	0x410fc270
 8018bc0:	e000e400 	.word	0xe000e400
 8018bc4:	20002a24 	.word	0x20002a24
 8018bc8:	20002a28 	.word	0x20002a28
 8018bcc:	e000ed20 	.word	0xe000ed20
 8018bd0:	200000f0 	.word	0x200000f0
 8018bd4:	e000ef34 	.word	0xe000ef34

08018bd8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8018bd8:	b480      	push	{r7}
 8018bda:	b083      	sub	sp, #12
 8018bdc:	af00      	add	r7, sp, #0
        __asm volatile
 8018bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018be2:	f383 8811 	msr	BASEPRI, r3
 8018be6:	f3bf 8f6f 	isb	sy
 8018bea:	f3bf 8f4f 	dsb	sy
 8018bee:	607b      	str	r3, [r7, #4]
    }
 8018bf0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8018bf2:	4b0f      	ldr	r3, [pc, #60]	; (8018c30 <vPortEnterCritical+0x58>)
 8018bf4:	681b      	ldr	r3, [r3, #0]
 8018bf6:	3301      	adds	r3, #1
 8018bf8:	4a0d      	ldr	r2, [pc, #52]	; (8018c30 <vPortEnterCritical+0x58>)
 8018bfa:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8018bfc:	4b0c      	ldr	r3, [pc, #48]	; (8018c30 <vPortEnterCritical+0x58>)
 8018bfe:	681b      	ldr	r3, [r3, #0]
 8018c00:	2b01      	cmp	r3, #1
 8018c02:	d10f      	bne.n	8018c24 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8018c04:	4b0b      	ldr	r3, [pc, #44]	; (8018c34 <vPortEnterCritical+0x5c>)
 8018c06:	681b      	ldr	r3, [r3, #0]
 8018c08:	b2db      	uxtb	r3, r3
 8018c0a:	2b00      	cmp	r3, #0
 8018c0c:	d00a      	beq.n	8018c24 <vPortEnterCritical+0x4c>
        __asm volatile
 8018c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c12:	f383 8811 	msr	BASEPRI, r3
 8018c16:	f3bf 8f6f 	isb	sy
 8018c1a:	f3bf 8f4f 	dsb	sy
 8018c1e:	603b      	str	r3, [r7, #0]
    }
 8018c20:	bf00      	nop
 8018c22:	e7fe      	b.n	8018c22 <vPortEnterCritical+0x4a>
    }
}
 8018c24:	bf00      	nop
 8018c26:	370c      	adds	r7, #12
 8018c28:	46bd      	mov	sp, r7
 8018c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c2e:	4770      	bx	lr
 8018c30:	200000f0 	.word	0x200000f0
 8018c34:	e000ed04 	.word	0xe000ed04

08018c38 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8018c38:	b480      	push	{r7}
 8018c3a:	b083      	sub	sp, #12
 8018c3c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8018c3e:	4b12      	ldr	r3, [pc, #72]	; (8018c88 <vPortExitCritical+0x50>)
 8018c40:	681b      	ldr	r3, [r3, #0]
 8018c42:	2b00      	cmp	r3, #0
 8018c44:	d10a      	bne.n	8018c5c <vPortExitCritical+0x24>
        __asm volatile
 8018c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c4a:	f383 8811 	msr	BASEPRI, r3
 8018c4e:	f3bf 8f6f 	isb	sy
 8018c52:	f3bf 8f4f 	dsb	sy
 8018c56:	607b      	str	r3, [r7, #4]
    }
 8018c58:	bf00      	nop
 8018c5a:	e7fe      	b.n	8018c5a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8018c5c:	4b0a      	ldr	r3, [pc, #40]	; (8018c88 <vPortExitCritical+0x50>)
 8018c5e:	681b      	ldr	r3, [r3, #0]
 8018c60:	3b01      	subs	r3, #1
 8018c62:	4a09      	ldr	r2, [pc, #36]	; (8018c88 <vPortExitCritical+0x50>)
 8018c64:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8018c66:	4b08      	ldr	r3, [pc, #32]	; (8018c88 <vPortExitCritical+0x50>)
 8018c68:	681b      	ldr	r3, [r3, #0]
 8018c6a:	2b00      	cmp	r3, #0
 8018c6c:	d105      	bne.n	8018c7a <vPortExitCritical+0x42>
 8018c6e:	2300      	movs	r3, #0
 8018c70:	603b      	str	r3, [r7, #0]
        __asm volatile
 8018c72:	683b      	ldr	r3, [r7, #0]
 8018c74:	f383 8811 	msr	BASEPRI, r3
    }
 8018c78:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8018c7a:	bf00      	nop
 8018c7c:	370c      	adds	r7, #12
 8018c7e:	46bd      	mov	sp, r7
 8018c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c84:	4770      	bx	lr
 8018c86:	bf00      	nop
 8018c88:	200000f0 	.word	0x200000f0
 8018c8c:	00000000 	.word	0x00000000

08018c90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8018c90:	f3ef 8009 	mrs	r0, PSP
 8018c94:	f3bf 8f6f 	isb	sy
 8018c98:	4b15      	ldr	r3, [pc, #84]	; (8018cf0 <pxCurrentTCBConst>)
 8018c9a:	681a      	ldr	r2, [r3, #0]
 8018c9c:	f01e 0f10 	tst.w	lr, #16
 8018ca0:	bf08      	it	eq
 8018ca2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8018ca6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018caa:	6010      	str	r0, [r2, #0]
 8018cac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8018cb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8018cb4:	f380 8811 	msr	BASEPRI, r0
 8018cb8:	f3bf 8f4f 	dsb	sy
 8018cbc:	f3bf 8f6f 	isb	sy
 8018cc0:	f7fe fef2 	bl	8017aa8 <vTaskSwitchContext>
 8018cc4:	f04f 0000 	mov.w	r0, #0
 8018cc8:	f380 8811 	msr	BASEPRI, r0
 8018ccc:	bc09      	pop	{r0, r3}
 8018cce:	6819      	ldr	r1, [r3, #0]
 8018cd0:	6808      	ldr	r0, [r1, #0]
 8018cd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018cd6:	f01e 0f10 	tst.w	lr, #16
 8018cda:	bf08      	it	eq
 8018cdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8018ce0:	f380 8809 	msr	PSP, r0
 8018ce4:	f3bf 8f6f 	isb	sy
 8018ce8:	4770      	bx	lr
 8018cea:	bf00      	nop
 8018cec:	f3af 8000 	nop.w

08018cf0 <pxCurrentTCBConst>:
 8018cf0:	20002808 	.word	0x20002808
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8018cf4:	bf00      	nop
 8018cf6:	bf00      	nop

08018cf8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8018cf8:	b580      	push	{r7, lr}
 8018cfa:	b082      	sub	sp, #8
 8018cfc:	af00      	add	r7, sp, #0
        __asm volatile
 8018cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d02:	f383 8811 	msr	BASEPRI, r3
 8018d06:	f3bf 8f6f 	isb	sy
 8018d0a:	f3bf 8f4f 	dsb	sy
 8018d0e:	607b      	str	r3, [r7, #4]
    }
 8018d10:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8018d12:	f7fe fdb3 	bl	801787c <xTaskIncrementTick>
 8018d16:	4603      	mov	r3, r0
 8018d18:	2b00      	cmp	r3, #0
 8018d1a:	d003      	beq.n	8018d24 <SysTick_Handler+0x2c>
        {
        	traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8018d1c:	4b06      	ldr	r3, [pc, #24]	; (8018d38 <SysTick_Handler+0x40>)
 8018d1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018d22:	601a      	str	r2, [r3, #0]
 8018d24:	2300      	movs	r3, #0
 8018d26:	603b      	str	r3, [r7, #0]
        __asm volatile
 8018d28:	683b      	ldr	r3, [r7, #0]
 8018d2a:	f383 8811 	msr	BASEPRI, r3
    }
 8018d2e:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 8018d30:	bf00      	nop
 8018d32:	3708      	adds	r7, #8
 8018d34:	46bd      	mov	sp, r7
 8018d36:	bd80      	pop	{r7, pc}
 8018d38:	e000ed04 	.word	0xe000ed04

08018d3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8018d3c:	b480      	push	{r7}
 8018d3e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8018d40:	4b0b      	ldr	r3, [pc, #44]	; (8018d70 <vPortSetupTimerInterrupt+0x34>)
 8018d42:	2200      	movs	r2, #0
 8018d44:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8018d46:	4b0b      	ldr	r3, [pc, #44]	; (8018d74 <vPortSetupTimerInterrupt+0x38>)
 8018d48:	2200      	movs	r2, #0
 8018d4a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8018d4c:	4b0a      	ldr	r3, [pc, #40]	; (8018d78 <vPortSetupTimerInterrupt+0x3c>)
 8018d4e:	681b      	ldr	r3, [r3, #0]
 8018d50:	4a0a      	ldr	r2, [pc, #40]	; (8018d7c <vPortSetupTimerInterrupt+0x40>)
 8018d52:	fba2 2303 	umull	r2, r3, r2, r3
 8018d56:	099b      	lsrs	r3, r3, #6
 8018d58:	4a09      	ldr	r2, [pc, #36]	; (8018d80 <vPortSetupTimerInterrupt+0x44>)
 8018d5a:	3b01      	subs	r3, #1
 8018d5c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8018d5e:	4b04      	ldr	r3, [pc, #16]	; (8018d70 <vPortSetupTimerInterrupt+0x34>)
 8018d60:	2207      	movs	r2, #7
 8018d62:	601a      	str	r2, [r3, #0]
}
 8018d64:	bf00      	nop
 8018d66:	46bd      	mov	sp, r7
 8018d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d6c:	4770      	bx	lr
 8018d6e:	bf00      	nop
 8018d70:	e000e010 	.word	0xe000e010
 8018d74:	e000e018 	.word	0xe000e018
 8018d78:	20000054 	.word	0x20000054
 8018d7c:	10624dd3 	.word	0x10624dd3
 8018d80:	e000e014 	.word	0xe000e014

08018d84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8018d84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8018d94 <vPortEnableVFP+0x10>
 8018d88:	6801      	ldr	r1, [r0, #0]
 8018d8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8018d8e:	6001      	str	r1, [r0, #0]
 8018d90:	4770      	bx	lr
 8018d92:	0000      	.short	0x0000
 8018d94:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8018d98:	bf00      	nop
 8018d9a:	bf00      	nop

08018d9c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8018d9c:	b480      	push	{r7}
 8018d9e:	b085      	sub	sp, #20
 8018da0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8018da2:	f3ef 8305 	mrs	r3, IPSR
 8018da6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8018da8:	68fb      	ldr	r3, [r7, #12]
 8018daa:	2b0f      	cmp	r3, #15
 8018dac:	d914      	bls.n	8018dd8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8018dae:	4a17      	ldr	r2, [pc, #92]	; (8018e0c <vPortValidateInterruptPriority+0x70>)
 8018db0:	68fb      	ldr	r3, [r7, #12]
 8018db2:	4413      	add	r3, r2
 8018db4:	781b      	ldrb	r3, [r3, #0]
 8018db6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8018db8:	4b15      	ldr	r3, [pc, #84]	; (8018e10 <vPortValidateInterruptPriority+0x74>)
 8018dba:	781b      	ldrb	r3, [r3, #0]
 8018dbc:	7afa      	ldrb	r2, [r7, #11]
 8018dbe:	429a      	cmp	r2, r3
 8018dc0:	d20a      	bcs.n	8018dd8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8018dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018dc6:	f383 8811 	msr	BASEPRI, r3
 8018dca:	f3bf 8f6f 	isb	sy
 8018dce:	f3bf 8f4f 	dsb	sy
 8018dd2:	607b      	str	r3, [r7, #4]
    }
 8018dd4:	bf00      	nop
 8018dd6:	e7fe      	b.n	8018dd6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8018dd8:	4b0e      	ldr	r3, [pc, #56]	; (8018e14 <vPortValidateInterruptPriority+0x78>)
 8018dda:	681b      	ldr	r3, [r3, #0]
 8018ddc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8018de0:	4b0d      	ldr	r3, [pc, #52]	; (8018e18 <vPortValidateInterruptPriority+0x7c>)
 8018de2:	681b      	ldr	r3, [r3, #0]
 8018de4:	429a      	cmp	r2, r3
 8018de6:	d90a      	bls.n	8018dfe <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8018de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018dec:	f383 8811 	msr	BASEPRI, r3
 8018df0:	f3bf 8f6f 	isb	sy
 8018df4:	f3bf 8f4f 	dsb	sy
 8018df8:	603b      	str	r3, [r7, #0]
    }
 8018dfa:	bf00      	nop
 8018dfc:	e7fe      	b.n	8018dfc <vPortValidateInterruptPriority+0x60>
    }
 8018dfe:	bf00      	nop
 8018e00:	3714      	adds	r7, #20
 8018e02:	46bd      	mov	sp, r7
 8018e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e08:	4770      	bx	lr
 8018e0a:	bf00      	nop
 8018e0c:	e000e3f0 	.word	0xe000e3f0
 8018e10:	20002a24 	.word	0x20002a24
 8018e14:	e000ed0c 	.word	0xe000ed0c
 8018e18:	20002a28 	.word	0x20002a28

08018e1c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8018e1c:	b580      	push	{r7, lr}
 8018e1e:	b08a      	sub	sp, #40	; 0x28
 8018e20:	af00      	add	r7, sp, #0
 8018e22:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8018e24:	2300      	movs	r3, #0
 8018e26:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8018e28:	f7fe fc0e 	bl	8017648 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8018e2c:	4b53      	ldr	r3, [pc, #332]	; (8018f7c <pvPortMalloc+0x160>)
 8018e2e:	681b      	ldr	r3, [r3, #0]
 8018e30:	2b00      	cmp	r3, #0
 8018e32:	d101      	bne.n	8018e38 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8018e34:	f000 f908 	bl	8019048 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8018e38:	687b      	ldr	r3, [r7, #4]
 8018e3a:	2b00      	cmp	r3, #0
 8018e3c:	d012      	beq.n	8018e64 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8018e3e:	2208      	movs	r2, #8
 8018e40:	687b      	ldr	r3, [r7, #4]
 8018e42:	f003 0307 	and.w	r3, r3, #7
 8018e46:	1ad3      	subs	r3, r2, r3
 8018e48:	3308      	adds	r3, #8
 8018e4a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8018e4c:	69bb      	ldr	r3, [r7, #24]
 8018e4e:	43db      	mvns	r3, r3
 8018e50:	687a      	ldr	r2, [r7, #4]
 8018e52:	429a      	cmp	r2, r3
 8018e54:	d804      	bhi.n	8018e60 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8018e56:	687a      	ldr	r2, [r7, #4]
 8018e58:	69bb      	ldr	r3, [r7, #24]
 8018e5a:	4413      	add	r3, r2
 8018e5c:	607b      	str	r3, [r7, #4]
 8018e5e:	e001      	b.n	8018e64 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8018e60:	2300      	movs	r3, #0
 8018e62:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8018e64:	687b      	ldr	r3, [r7, #4]
 8018e66:	2b00      	cmp	r3, #0
 8018e68:	db70      	blt.n	8018f4c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8018e6a:	687b      	ldr	r3, [r7, #4]
 8018e6c:	2b00      	cmp	r3, #0
 8018e6e:	d06d      	beq.n	8018f4c <pvPortMalloc+0x130>
 8018e70:	4b43      	ldr	r3, [pc, #268]	; (8018f80 <pvPortMalloc+0x164>)
 8018e72:	681b      	ldr	r3, [r3, #0]
 8018e74:	687a      	ldr	r2, [r7, #4]
 8018e76:	429a      	cmp	r2, r3
 8018e78:	d868      	bhi.n	8018f4c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8018e7a:	4b42      	ldr	r3, [pc, #264]	; (8018f84 <pvPortMalloc+0x168>)
 8018e7c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8018e7e:	4b41      	ldr	r3, [pc, #260]	; (8018f84 <pvPortMalloc+0x168>)
 8018e80:	681b      	ldr	r3, [r3, #0]
 8018e82:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8018e84:	e004      	b.n	8018e90 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8018e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e88:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8018e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e8c:	681b      	ldr	r3, [r3, #0]
 8018e8e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8018e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e92:	685b      	ldr	r3, [r3, #4]
 8018e94:	687a      	ldr	r2, [r7, #4]
 8018e96:	429a      	cmp	r2, r3
 8018e98:	d903      	bls.n	8018ea2 <pvPortMalloc+0x86>
 8018e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e9c:	681b      	ldr	r3, [r3, #0]
 8018e9e:	2b00      	cmp	r3, #0
 8018ea0:	d1f1      	bne.n	8018e86 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8018ea2:	4b36      	ldr	r3, [pc, #216]	; (8018f7c <pvPortMalloc+0x160>)
 8018ea4:	681b      	ldr	r3, [r3, #0]
 8018ea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018ea8:	429a      	cmp	r2, r3
 8018eaa:	d04f      	beq.n	8018f4c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8018eac:	6a3b      	ldr	r3, [r7, #32]
 8018eae:	681b      	ldr	r3, [r3, #0]
 8018eb0:	2208      	movs	r2, #8
 8018eb2:	4413      	add	r3, r2
 8018eb4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8018eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018eb8:	681a      	ldr	r2, [r3, #0]
 8018eba:	6a3b      	ldr	r3, [r7, #32]
 8018ebc:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8018ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ec0:	685a      	ldr	r2, [r3, #4]
 8018ec2:	687b      	ldr	r3, [r7, #4]
 8018ec4:	1ad2      	subs	r2, r2, r3
 8018ec6:	2308      	movs	r3, #8
 8018ec8:	005b      	lsls	r3, r3, #1
 8018eca:	429a      	cmp	r2, r3
 8018ecc:	d91f      	bls.n	8018f0e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8018ece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018ed0:	687b      	ldr	r3, [r7, #4]
 8018ed2:	4413      	add	r3, r2
 8018ed4:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8018ed6:	697b      	ldr	r3, [r7, #20]
 8018ed8:	f003 0307 	and.w	r3, r3, #7
 8018edc:	2b00      	cmp	r3, #0
 8018ede:	d00a      	beq.n	8018ef6 <pvPortMalloc+0xda>
        __asm volatile
 8018ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ee4:	f383 8811 	msr	BASEPRI, r3
 8018ee8:	f3bf 8f6f 	isb	sy
 8018eec:	f3bf 8f4f 	dsb	sy
 8018ef0:	613b      	str	r3, [r7, #16]
    }
 8018ef2:	bf00      	nop
 8018ef4:	e7fe      	b.n	8018ef4 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8018ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ef8:	685a      	ldr	r2, [r3, #4]
 8018efa:	687b      	ldr	r3, [r7, #4]
 8018efc:	1ad2      	subs	r2, r2, r3
 8018efe:	697b      	ldr	r3, [r7, #20]
 8018f00:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8018f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f04:	687a      	ldr	r2, [r7, #4]
 8018f06:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8018f08:	6978      	ldr	r0, [r7, #20]
 8018f0a:	f000 f8f9 	bl	8019100 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8018f0e:	4b1c      	ldr	r3, [pc, #112]	; (8018f80 <pvPortMalloc+0x164>)
 8018f10:	681a      	ldr	r2, [r3, #0]
 8018f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f14:	685b      	ldr	r3, [r3, #4]
 8018f16:	1ad3      	subs	r3, r2, r3
 8018f18:	4a19      	ldr	r2, [pc, #100]	; (8018f80 <pvPortMalloc+0x164>)
 8018f1a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8018f1c:	4b18      	ldr	r3, [pc, #96]	; (8018f80 <pvPortMalloc+0x164>)
 8018f1e:	681a      	ldr	r2, [r3, #0]
 8018f20:	4b19      	ldr	r3, [pc, #100]	; (8018f88 <pvPortMalloc+0x16c>)
 8018f22:	681b      	ldr	r3, [r3, #0]
 8018f24:	429a      	cmp	r2, r3
 8018f26:	d203      	bcs.n	8018f30 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8018f28:	4b15      	ldr	r3, [pc, #84]	; (8018f80 <pvPortMalloc+0x164>)
 8018f2a:	681b      	ldr	r3, [r3, #0]
 8018f2c:	4a16      	ldr	r2, [pc, #88]	; (8018f88 <pvPortMalloc+0x16c>)
 8018f2e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8018f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f32:	685b      	ldr	r3, [r3, #4]
 8018f34:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8018f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f3a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8018f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f3e:	2200      	movs	r2, #0
 8018f40:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8018f42:	4b12      	ldr	r3, [pc, #72]	; (8018f8c <pvPortMalloc+0x170>)
 8018f44:	681b      	ldr	r3, [r3, #0]
 8018f46:	3301      	adds	r3, #1
 8018f48:	4a10      	ldr	r2, [pc, #64]	; (8018f8c <pvPortMalloc+0x170>)
 8018f4a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8018f4c:	f7fe fb8a 	bl	8017664 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8018f50:	69fb      	ldr	r3, [r7, #28]
 8018f52:	f003 0307 	and.w	r3, r3, #7
 8018f56:	2b00      	cmp	r3, #0
 8018f58:	d00a      	beq.n	8018f70 <pvPortMalloc+0x154>
        __asm volatile
 8018f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f5e:	f383 8811 	msr	BASEPRI, r3
 8018f62:	f3bf 8f6f 	isb	sy
 8018f66:	f3bf 8f4f 	dsb	sy
 8018f6a:	60fb      	str	r3, [r7, #12]
    }
 8018f6c:	bf00      	nop
 8018f6e:	e7fe      	b.n	8018f6e <pvPortMalloc+0x152>
    return pvReturn;
 8018f70:	69fb      	ldr	r3, [r7, #28]
}
 8018f72:	4618      	mov	r0, r3
 8018f74:	3728      	adds	r7, #40	; 0x28
 8018f76:	46bd      	mov	sp, r7
 8018f78:	bd80      	pop	{r7, pc}
 8018f7a:	bf00      	nop
 8018f7c:	20011a34 	.word	0x20011a34
 8018f80:	20011a38 	.word	0x20011a38
 8018f84:	20011a2c 	.word	0x20011a2c
 8018f88:	20011a3c 	.word	0x20011a3c
 8018f8c:	20011a40 	.word	0x20011a40

08018f90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8018f90:	b580      	push	{r7, lr}
 8018f92:	b086      	sub	sp, #24
 8018f94:	af00      	add	r7, sp, #0
 8018f96:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8018f98:	687b      	ldr	r3, [r7, #4]
 8018f9a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8018f9c:	687b      	ldr	r3, [r7, #4]
 8018f9e:	2b00      	cmp	r3, #0
 8018fa0:	d049      	beq.n	8019036 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8018fa2:	2308      	movs	r3, #8
 8018fa4:	425b      	negs	r3, r3
 8018fa6:	697a      	ldr	r2, [r7, #20]
 8018fa8:	4413      	add	r3, r2
 8018faa:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8018fac:	697b      	ldr	r3, [r7, #20]
 8018fae:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8018fb0:	693b      	ldr	r3, [r7, #16]
 8018fb2:	685b      	ldr	r3, [r3, #4]
 8018fb4:	2b00      	cmp	r3, #0
 8018fb6:	db0a      	blt.n	8018fce <vPortFree+0x3e>
        __asm volatile
 8018fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018fbc:	f383 8811 	msr	BASEPRI, r3
 8018fc0:	f3bf 8f6f 	isb	sy
 8018fc4:	f3bf 8f4f 	dsb	sy
 8018fc8:	60fb      	str	r3, [r7, #12]
    }
 8018fca:	bf00      	nop
 8018fcc:	e7fe      	b.n	8018fcc <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8018fce:	693b      	ldr	r3, [r7, #16]
 8018fd0:	681b      	ldr	r3, [r3, #0]
 8018fd2:	2b00      	cmp	r3, #0
 8018fd4:	d00a      	beq.n	8018fec <vPortFree+0x5c>
        __asm volatile
 8018fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018fda:	f383 8811 	msr	BASEPRI, r3
 8018fde:	f3bf 8f6f 	isb	sy
 8018fe2:	f3bf 8f4f 	dsb	sy
 8018fe6:	60bb      	str	r3, [r7, #8]
    }
 8018fe8:	bf00      	nop
 8018fea:	e7fe      	b.n	8018fea <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8018fec:	693b      	ldr	r3, [r7, #16]
 8018fee:	685b      	ldr	r3, [r3, #4]
 8018ff0:	0fdb      	lsrs	r3, r3, #31
 8018ff2:	f003 0301 	and.w	r3, r3, #1
 8018ff6:	b2db      	uxtb	r3, r3
 8018ff8:	2b00      	cmp	r3, #0
 8018ffa:	d01c      	beq.n	8019036 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8018ffc:	693b      	ldr	r3, [r7, #16]
 8018ffe:	681b      	ldr	r3, [r3, #0]
 8019000:	2b00      	cmp	r3, #0
 8019002:	d118      	bne.n	8019036 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8019004:	693b      	ldr	r3, [r7, #16]
 8019006:	685b      	ldr	r3, [r3, #4]
 8019008:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801900c:	693b      	ldr	r3, [r7, #16]
 801900e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8019010:	f7fe fb1a 	bl	8017648 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8019014:	693b      	ldr	r3, [r7, #16]
 8019016:	685a      	ldr	r2, [r3, #4]
 8019018:	4b09      	ldr	r3, [pc, #36]	; (8019040 <vPortFree+0xb0>)
 801901a:	681b      	ldr	r3, [r3, #0]
 801901c:	4413      	add	r3, r2
 801901e:	4a08      	ldr	r2, [pc, #32]	; (8019040 <vPortFree+0xb0>)
 8019020:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8019022:	6938      	ldr	r0, [r7, #16]
 8019024:	f000 f86c 	bl	8019100 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8019028:	4b06      	ldr	r3, [pc, #24]	; (8019044 <vPortFree+0xb4>)
 801902a:	681b      	ldr	r3, [r3, #0]
 801902c:	3301      	adds	r3, #1
 801902e:	4a05      	ldr	r2, [pc, #20]	; (8019044 <vPortFree+0xb4>)
 8019030:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8019032:	f7fe fb17 	bl	8017664 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8019036:	bf00      	nop
 8019038:	3718      	adds	r7, #24
 801903a:	46bd      	mov	sp, r7
 801903c:	bd80      	pop	{r7, pc}
 801903e:	bf00      	nop
 8019040:	20011a38 	.word	0x20011a38
 8019044:	20011a44 	.word	0x20011a44

08019048 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8019048:	b480      	push	{r7}
 801904a:	b085      	sub	sp, #20
 801904c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801904e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8019052:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8019054:	4b25      	ldr	r3, [pc, #148]	; (80190ec <prvHeapInit+0xa4>)
 8019056:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8019058:	68fb      	ldr	r3, [r7, #12]
 801905a:	f003 0307 	and.w	r3, r3, #7
 801905e:	2b00      	cmp	r3, #0
 8019060:	d00c      	beq.n	801907c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8019062:	68fb      	ldr	r3, [r7, #12]
 8019064:	3307      	adds	r3, #7
 8019066:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8019068:	68fb      	ldr	r3, [r7, #12]
 801906a:	f023 0307 	bic.w	r3, r3, #7
 801906e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8019070:	68ba      	ldr	r2, [r7, #8]
 8019072:	68fb      	ldr	r3, [r7, #12]
 8019074:	1ad3      	subs	r3, r2, r3
 8019076:	4a1d      	ldr	r2, [pc, #116]	; (80190ec <prvHeapInit+0xa4>)
 8019078:	4413      	add	r3, r2
 801907a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 801907c:	68fb      	ldr	r3, [r7, #12]
 801907e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8019080:	4a1b      	ldr	r2, [pc, #108]	; (80190f0 <prvHeapInit+0xa8>)
 8019082:	687b      	ldr	r3, [r7, #4]
 8019084:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8019086:	4b1a      	ldr	r3, [pc, #104]	; (80190f0 <prvHeapInit+0xa8>)
 8019088:	2200      	movs	r2, #0
 801908a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 801908c:	687b      	ldr	r3, [r7, #4]
 801908e:	68ba      	ldr	r2, [r7, #8]
 8019090:	4413      	add	r3, r2
 8019092:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8019094:	2208      	movs	r2, #8
 8019096:	68fb      	ldr	r3, [r7, #12]
 8019098:	1a9b      	subs	r3, r3, r2
 801909a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 801909c:	68fb      	ldr	r3, [r7, #12]
 801909e:	f023 0307 	bic.w	r3, r3, #7
 80190a2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80190a4:	68fb      	ldr	r3, [r7, #12]
 80190a6:	4a13      	ldr	r2, [pc, #76]	; (80190f4 <prvHeapInit+0xac>)
 80190a8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80190aa:	4b12      	ldr	r3, [pc, #72]	; (80190f4 <prvHeapInit+0xac>)
 80190ac:	681b      	ldr	r3, [r3, #0]
 80190ae:	2200      	movs	r2, #0
 80190b0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80190b2:	4b10      	ldr	r3, [pc, #64]	; (80190f4 <prvHeapInit+0xac>)
 80190b4:	681b      	ldr	r3, [r3, #0]
 80190b6:	2200      	movs	r2, #0
 80190b8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80190ba:	687b      	ldr	r3, [r7, #4]
 80190bc:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80190be:	683b      	ldr	r3, [r7, #0]
 80190c0:	68fa      	ldr	r2, [r7, #12]
 80190c2:	1ad2      	subs	r2, r2, r3
 80190c4:	683b      	ldr	r3, [r7, #0]
 80190c6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80190c8:	4b0a      	ldr	r3, [pc, #40]	; (80190f4 <prvHeapInit+0xac>)
 80190ca:	681a      	ldr	r2, [r3, #0]
 80190cc:	683b      	ldr	r3, [r7, #0]
 80190ce:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80190d0:	683b      	ldr	r3, [r7, #0]
 80190d2:	685b      	ldr	r3, [r3, #4]
 80190d4:	4a08      	ldr	r2, [pc, #32]	; (80190f8 <prvHeapInit+0xb0>)
 80190d6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80190d8:	683b      	ldr	r3, [r7, #0]
 80190da:	685b      	ldr	r3, [r3, #4]
 80190dc:	4a07      	ldr	r2, [pc, #28]	; (80190fc <prvHeapInit+0xb4>)
 80190de:	6013      	str	r3, [r2, #0]
}
 80190e0:	bf00      	nop
 80190e2:	3714      	adds	r7, #20
 80190e4:	46bd      	mov	sp, r7
 80190e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190ea:	4770      	bx	lr
 80190ec:	20002a2c 	.word	0x20002a2c
 80190f0:	20011a2c 	.word	0x20011a2c
 80190f4:	20011a34 	.word	0x20011a34
 80190f8:	20011a3c 	.word	0x20011a3c
 80190fc:	20011a38 	.word	0x20011a38

08019100 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8019100:	b480      	push	{r7}
 8019102:	b085      	sub	sp, #20
 8019104:	af00      	add	r7, sp, #0
 8019106:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8019108:	4b28      	ldr	r3, [pc, #160]	; (80191ac <prvInsertBlockIntoFreeList+0xac>)
 801910a:	60fb      	str	r3, [r7, #12]
 801910c:	e002      	b.n	8019114 <prvInsertBlockIntoFreeList+0x14>
 801910e:	68fb      	ldr	r3, [r7, #12]
 8019110:	681b      	ldr	r3, [r3, #0]
 8019112:	60fb      	str	r3, [r7, #12]
 8019114:	68fb      	ldr	r3, [r7, #12]
 8019116:	681b      	ldr	r3, [r3, #0]
 8019118:	687a      	ldr	r2, [r7, #4]
 801911a:	429a      	cmp	r2, r3
 801911c:	d8f7      	bhi.n	801910e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 801911e:	68fb      	ldr	r3, [r7, #12]
 8019120:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8019122:	68fb      	ldr	r3, [r7, #12]
 8019124:	685b      	ldr	r3, [r3, #4]
 8019126:	68ba      	ldr	r2, [r7, #8]
 8019128:	4413      	add	r3, r2
 801912a:	687a      	ldr	r2, [r7, #4]
 801912c:	429a      	cmp	r2, r3
 801912e:	d108      	bne.n	8019142 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8019130:	68fb      	ldr	r3, [r7, #12]
 8019132:	685a      	ldr	r2, [r3, #4]
 8019134:	687b      	ldr	r3, [r7, #4]
 8019136:	685b      	ldr	r3, [r3, #4]
 8019138:	441a      	add	r2, r3
 801913a:	68fb      	ldr	r3, [r7, #12]
 801913c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 801913e:	68fb      	ldr	r3, [r7, #12]
 8019140:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8019142:	687b      	ldr	r3, [r7, #4]
 8019144:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8019146:	687b      	ldr	r3, [r7, #4]
 8019148:	685b      	ldr	r3, [r3, #4]
 801914a:	68ba      	ldr	r2, [r7, #8]
 801914c:	441a      	add	r2, r3
 801914e:	68fb      	ldr	r3, [r7, #12]
 8019150:	681b      	ldr	r3, [r3, #0]
 8019152:	429a      	cmp	r2, r3
 8019154:	d118      	bne.n	8019188 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8019156:	68fb      	ldr	r3, [r7, #12]
 8019158:	681a      	ldr	r2, [r3, #0]
 801915a:	4b15      	ldr	r3, [pc, #84]	; (80191b0 <prvInsertBlockIntoFreeList+0xb0>)
 801915c:	681b      	ldr	r3, [r3, #0]
 801915e:	429a      	cmp	r2, r3
 8019160:	d00d      	beq.n	801917e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8019162:	687b      	ldr	r3, [r7, #4]
 8019164:	685a      	ldr	r2, [r3, #4]
 8019166:	68fb      	ldr	r3, [r7, #12]
 8019168:	681b      	ldr	r3, [r3, #0]
 801916a:	685b      	ldr	r3, [r3, #4]
 801916c:	441a      	add	r2, r3
 801916e:	687b      	ldr	r3, [r7, #4]
 8019170:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8019172:	68fb      	ldr	r3, [r7, #12]
 8019174:	681b      	ldr	r3, [r3, #0]
 8019176:	681a      	ldr	r2, [r3, #0]
 8019178:	687b      	ldr	r3, [r7, #4]
 801917a:	601a      	str	r2, [r3, #0]
 801917c:	e008      	b.n	8019190 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801917e:	4b0c      	ldr	r3, [pc, #48]	; (80191b0 <prvInsertBlockIntoFreeList+0xb0>)
 8019180:	681a      	ldr	r2, [r3, #0]
 8019182:	687b      	ldr	r3, [r7, #4]
 8019184:	601a      	str	r2, [r3, #0]
 8019186:	e003      	b.n	8019190 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8019188:	68fb      	ldr	r3, [r7, #12]
 801918a:	681a      	ldr	r2, [r3, #0]
 801918c:	687b      	ldr	r3, [r7, #4]
 801918e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8019190:	68fa      	ldr	r2, [r7, #12]
 8019192:	687b      	ldr	r3, [r7, #4]
 8019194:	429a      	cmp	r2, r3
 8019196:	d002      	beq.n	801919e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8019198:	68fb      	ldr	r3, [r7, #12]
 801919a:	687a      	ldr	r2, [r7, #4]
 801919c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 801919e:	bf00      	nop
 80191a0:	3714      	adds	r7, #20
 80191a2:	46bd      	mov	sp, r7
 80191a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191a8:	4770      	bx	lr
 80191aa:	bf00      	nop
 80191ac:	20011a2c 	.word	0x20011a2c
 80191b0:	20011a34 	.word	0x20011a34

080191b4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80191b4:	b580      	push	{r7, lr}
 80191b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80191b8:	2200      	movs	r2, #0
 80191ba:	4912      	ldr	r1, [pc, #72]	; (8019204 <MX_USB_DEVICE_Init+0x50>)
 80191bc:	4812      	ldr	r0, [pc, #72]	; (8019208 <MX_USB_DEVICE_Init+0x54>)
 80191be:	f7fb f865 	bl	801428c <USBD_Init>
 80191c2:	4603      	mov	r3, r0
 80191c4:	2b00      	cmp	r3, #0
 80191c6:	d001      	beq.n	80191cc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80191c8:	f7f0 fe92 	bl	8009ef0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80191cc:	490f      	ldr	r1, [pc, #60]	; (801920c <MX_USB_DEVICE_Init+0x58>)
 80191ce:	480e      	ldr	r0, [pc, #56]	; (8019208 <MX_USB_DEVICE_Init+0x54>)
 80191d0:	f7fb f88c 	bl	80142ec <USBD_RegisterClass>
 80191d4:	4603      	mov	r3, r0
 80191d6:	2b00      	cmp	r3, #0
 80191d8:	d001      	beq.n	80191de <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80191da:	f7f0 fe89 	bl	8009ef0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80191de:	490c      	ldr	r1, [pc, #48]	; (8019210 <MX_USB_DEVICE_Init+0x5c>)
 80191e0:	4809      	ldr	r0, [pc, #36]	; (8019208 <MX_USB_DEVICE_Init+0x54>)
 80191e2:	f7fa ff7d 	bl	80140e0 <USBD_CDC_RegisterInterface>
 80191e6:	4603      	mov	r3, r0
 80191e8:	2b00      	cmp	r3, #0
 80191ea:	d001      	beq.n	80191f0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80191ec:	f7f0 fe80 	bl	8009ef0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80191f0:	4805      	ldr	r0, [pc, #20]	; (8019208 <MX_USB_DEVICE_Init+0x54>)
 80191f2:	f7fb f8b1 	bl	8014358 <USBD_Start>
 80191f6:	4603      	mov	r3, r0
 80191f8:	2b00      	cmp	r3, #0
 80191fa:	d001      	beq.n	8019200 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80191fc:	f7f0 fe78 	bl	8009ef0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8019200:	bf00      	nop
 8019202:	bd80      	pop	{r7, pc}
 8019204:	20000108 	.word	0x20000108
 8019208:	20011a48 	.word	0x20011a48
 801920c:	2000006c 	.word	0x2000006c
 8019210:	200000f4 	.word	0x200000f4

08019214 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8019214:	b580      	push	{r7, lr}
 8019216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8019218:	2200      	movs	r2, #0
 801921a:	4905      	ldr	r1, [pc, #20]	; (8019230 <CDC_Init_FS+0x1c>)
 801921c:	4805      	ldr	r0, [pc, #20]	; (8019234 <CDC_Init_FS+0x20>)
 801921e:	f7fa ff79 	bl	8014114 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8019222:	4905      	ldr	r1, [pc, #20]	; (8019238 <CDC_Init_FS+0x24>)
 8019224:	4803      	ldr	r0, [pc, #12]	; (8019234 <CDC_Init_FS+0x20>)
 8019226:	f7fa ff97 	bl	8014158 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801922a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801922c:	4618      	mov	r0, r3
 801922e:	bd80      	pop	{r7, pc}
 8019230:	20012524 	.word	0x20012524
 8019234:	20011a48 	.word	0x20011a48
 8019238:	20011d24 	.word	0x20011d24

0801923c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801923c:	b480      	push	{r7}
 801923e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8019240:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8019242:	4618      	mov	r0, r3
 8019244:	46bd      	mov	sp, r7
 8019246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801924a:	4770      	bx	lr

0801924c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801924c:	b480      	push	{r7}
 801924e:	b083      	sub	sp, #12
 8019250:	af00      	add	r7, sp, #0
 8019252:	4603      	mov	r3, r0
 8019254:	6039      	str	r1, [r7, #0]
 8019256:	71fb      	strb	r3, [r7, #7]
 8019258:	4613      	mov	r3, r2
 801925a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801925c:	79fb      	ldrb	r3, [r7, #7]
 801925e:	2b23      	cmp	r3, #35	; 0x23
 8019260:	d84a      	bhi.n	80192f8 <CDC_Control_FS+0xac>
 8019262:	a201      	add	r2, pc, #4	; (adr r2, 8019268 <CDC_Control_FS+0x1c>)
 8019264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019268:	080192f9 	.word	0x080192f9
 801926c:	080192f9 	.word	0x080192f9
 8019270:	080192f9 	.word	0x080192f9
 8019274:	080192f9 	.word	0x080192f9
 8019278:	080192f9 	.word	0x080192f9
 801927c:	080192f9 	.word	0x080192f9
 8019280:	080192f9 	.word	0x080192f9
 8019284:	080192f9 	.word	0x080192f9
 8019288:	080192f9 	.word	0x080192f9
 801928c:	080192f9 	.word	0x080192f9
 8019290:	080192f9 	.word	0x080192f9
 8019294:	080192f9 	.word	0x080192f9
 8019298:	080192f9 	.word	0x080192f9
 801929c:	080192f9 	.word	0x080192f9
 80192a0:	080192f9 	.word	0x080192f9
 80192a4:	080192f9 	.word	0x080192f9
 80192a8:	080192f9 	.word	0x080192f9
 80192ac:	080192f9 	.word	0x080192f9
 80192b0:	080192f9 	.word	0x080192f9
 80192b4:	080192f9 	.word	0x080192f9
 80192b8:	080192f9 	.word	0x080192f9
 80192bc:	080192f9 	.word	0x080192f9
 80192c0:	080192f9 	.word	0x080192f9
 80192c4:	080192f9 	.word	0x080192f9
 80192c8:	080192f9 	.word	0x080192f9
 80192cc:	080192f9 	.word	0x080192f9
 80192d0:	080192f9 	.word	0x080192f9
 80192d4:	080192f9 	.word	0x080192f9
 80192d8:	080192f9 	.word	0x080192f9
 80192dc:	080192f9 	.word	0x080192f9
 80192e0:	080192f9 	.word	0x080192f9
 80192e4:	080192f9 	.word	0x080192f9
 80192e8:	080192f9 	.word	0x080192f9
 80192ec:	080192f9 	.word	0x080192f9
 80192f0:	080192f9 	.word	0x080192f9
 80192f4:	080192f9 	.word	0x080192f9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80192f8:	bf00      	nop
  }

  return (USBD_OK);
 80192fa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80192fc:	4618      	mov	r0, r3
 80192fe:	370c      	adds	r7, #12
 8019300:	46bd      	mov	sp, r7
 8019302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019306:	4770      	bx	lr

08019308 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8019308:	b580      	push	{r7, lr}
 801930a:	b082      	sub	sp, #8
 801930c:	af00      	add	r7, sp, #0
 801930e:	6078      	str	r0, [r7, #4]
 8019310:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8019312:	6879      	ldr	r1, [r7, #4]
 8019314:	4808      	ldr	r0, [pc, #32]	; (8019338 <CDC_Receive_FS+0x30>)
 8019316:	f7fa ff1f 	bl	8014158 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801931a:	4807      	ldr	r0, [pc, #28]	; (8019338 <CDC_Receive_FS+0x30>)
 801931c:	f7fa ff80 	bl	8014220 <USBD_CDC_ReceivePacket>


  USB_Handler(Buf, (uint8_t) *Len);
 8019320:	683b      	ldr	r3, [r7, #0]
 8019322:	681b      	ldr	r3, [r3, #0]
 8019324:	b2db      	uxtb	r3, r3
 8019326:	4619      	mov	r1, r3
 8019328:	6878      	ldr	r0, [r7, #4]
 801932a:	f7f0 fd8b 	bl	8009e44 <USB_Handler>
  return (USBD_OK);
 801932e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8019330:	4618      	mov	r0, r3
 8019332:	3708      	adds	r7, #8
 8019334:	46bd      	mov	sp, r7
 8019336:	bd80      	pop	{r7, pc}
 8019338:	20011a48 	.word	0x20011a48

0801933c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801933c:	b580      	push	{r7, lr}
 801933e:	b084      	sub	sp, #16
 8019340:	af00      	add	r7, sp, #0
 8019342:	6078      	str	r0, [r7, #4]
 8019344:	460b      	mov	r3, r1
 8019346:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8019348:	2300      	movs	r3, #0
 801934a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801934c:	4b0d      	ldr	r3, [pc, #52]	; (8019384 <CDC_Transmit_FS+0x48>)
 801934e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8019352:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8019354:	68bb      	ldr	r3, [r7, #8]
 8019356:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801935a:	2b00      	cmp	r3, #0
 801935c:	d001      	beq.n	8019362 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801935e:	2301      	movs	r3, #1
 8019360:	e00b      	b.n	801937a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8019362:	887b      	ldrh	r3, [r7, #2]
 8019364:	461a      	mov	r2, r3
 8019366:	6879      	ldr	r1, [r7, #4]
 8019368:	4806      	ldr	r0, [pc, #24]	; (8019384 <CDC_Transmit_FS+0x48>)
 801936a:	f7fa fed3 	bl	8014114 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801936e:	4805      	ldr	r0, [pc, #20]	; (8019384 <CDC_Transmit_FS+0x48>)
 8019370:	f7fa ff10 	bl	8014194 <USBD_CDC_TransmitPacket>
 8019374:	4603      	mov	r3, r0
 8019376:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8019378:	7bfb      	ldrb	r3, [r7, #15]
}
 801937a:	4618      	mov	r0, r3
 801937c:	3710      	adds	r7, #16
 801937e:	46bd      	mov	sp, r7
 8019380:	bd80      	pop	{r7, pc}
 8019382:	bf00      	nop
 8019384:	20011a48 	.word	0x20011a48

08019388 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8019388:	b480      	push	{r7}
 801938a:	b087      	sub	sp, #28
 801938c:	af00      	add	r7, sp, #0
 801938e:	60f8      	str	r0, [r7, #12]
 8019390:	60b9      	str	r1, [r7, #8]
 8019392:	4613      	mov	r3, r2
 8019394:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8019396:	2300      	movs	r3, #0
 8019398:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801939a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801939e:	4618      	mov	r0, r3
 80193a0:	371c      	adds	r7, #28
 80193a2:	46bd      	mov	sp, r7
 80193a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193a8:	4770      	bx	lr
	...

080193ac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80193ac:	b480      	push	{r7}
 80193ae:	b083      	sub	sp, #12
 80193b0:	af00      	add	r7, sp, #0
 80193b2:	4603      	mov	r3, r0
 80193b4:	6039      	str	r1, [r7, #0]
 80193b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80193b8:	683b      	ldr	r3, [r7, #0]
 80193ba:	2212      	movs	r2, #18
 80193bc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80193be:	4b03      	ldr	r3, [pc, #12]	; (80193cc <USBD_FS_DeviceDescriptor+0x20>)
}
 80193c0:	4618      	mov	r0, r3
 80193c2:	370c      	adds	r7, #12
 80193c4:	46bd      	mov	sp, r7
 80193c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193ca:	4770      	bx	lr
 80193cc:	20000128 	.word	0x20000128

080193d0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80193d0:	b480      	push	{r7}
 80193d2:	b083      	sub	sp, #12
 80193d4:	af00      	add	r7, sp, #0
 80193d6:	4603      	mov	r3, r0
 80193d8:	6039      	str	r1, [r7, #0]
 80193da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80193dc:	683b      	ldr	r3, [r7, #0]
 80193de:	2204      	movs	r2, #4
 80193e0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80193e2:	4b03      	ldr	r3, [pc, #12]	; (80193f0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80193e4:	4618      	mov	r0, r3
 80193e6:	370c      	adds	r7, #12
 80193e8:	46bd      	mov	sp, r7
 80193ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193ee:	4770      	bx	lr
 80193f0:	20000148 	.word	0x20000148

080193f4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80193f4:	b580      	push	{r7, lr}
 80193f6:	b082      	sub	sp, #8
 80193f8:	af00      	add	r7, sp, #0
 80193fa:	4603      	mov	r3, r0
 80193fc:	6039      	str	r1, [r7, #0]
 80193fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8019400:	79fb      	ldrb	r3, [r7, #7]
 8019402:	2b00      	cmp	r3, #0
 8019404:	d105      	bne.n	8019412 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8019406:	683a      	ldr	r2, [r7, #0]
 8019408:	4907      	ldr	r1, [pc, #28]	; (8019428 <USBD_FS_ProductStrDescriptor+0x34>)
 801940a:	4808      	ldr	r0, [pc, #32]	; (801942c <USBD_FS_ProductStrDescriptor+0x38>)
 801940c:	f7fc f97a 	bl	8015704 <USBD_GetString>
 8019410:	e004      	b.n	801941c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8019412:	683a      	ldr	r2, [r7, #0]
 8019414:	4904      	ldr	r1, [pc, #16]	; (8019428 <USBD_FS_ProductStrDescriptor+0x34>)
 8019416:	4805      	ldr	r0, [pc, #20]	; (801942c <USBD_FS_ProductStrDescriptor+0x38>)
 8019418:	f7fc f974 	bl	8015704 <USBD_GetString>
  }
  return USBD_StrDesc;
 801941c:	4b02      	ldr	r3, [pc, #8]	; (8019428 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801941e:	4618      	mov	r0, r3
 8019420:	3708      	adds	r7, #8
 8019422:	46bd      	mov	sp, r7
 8019424:	bd80      	pop	{r7, pc}
 8019426:	bf00      	nop
 8019428:	20012d24 	.word	0x20012d24
 801942c:	0801fe68 	.word	0x0801fe68

08019430 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019430:	b580      	push	{r7, lr}
 8019432:	b082      	sub	sp, #8
 8019434:	af00      	add	r7, sp, #0
 8019436:	4603      	mov	r3, r0
 8019438:	6039      	str	r1, [r7, #0]
 801943a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801943c:	683a      	ldr	r2, [r7, #0]
 801943e:	4904      	ldr	r1, [pc, #16]	; (8019450 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8019440:	4804      	ldr	r0, [pc, #16]	; (8019454 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8019442:	f7fc f95f 	bl	8015704 <USBD_GetString>
  return USBD_StrDesc;
 8019446:	4b02      	ldr	r3, [pc, #8]	; (8019450 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8019448:	4618      	mov	r0, r3
 801944a:	3708      	adds	r7, #8
 801944c:	46bd      	mov	sp, r7
 801944e:	bd80      	pop	{r7, pc}
 8019450:	20012d24 	.word	0x20012d24
 8019454:	0801fe78 	.word	0x0801fe78

08019458 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019458:	b580      	push	{r7, lr}
 801945a:	b082      	sub	sp, #8
 801945c:	af00      	add	r7, sp, #0
 801945e:	4603      	mov	r3, r0
 8019460:	6039      	str	r1, [r7, #0]
 8019462:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8019464:	683b      	ldr	r3, [r7, #0]
 8019466:	221a      	movs	r2, #26
 8019468:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801946a:	f000 f855 	bl	8019518 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801946e:	4b02      	ldr	r3, [pc, #8]	; (8019478 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8019470:	4618      	mov	r0, r3
 8019472:	3708      	adds	r7, #8
 8019474:	46bd      	mov	sp, r7
 8019476:	bd80      	pop	{r7, pc}
 8019478:	2000014c 	.word	0x2000014c

0801947c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801947c:	b580      	push	{r7, lr}
 801947e:	b082      	sub	sp, #8
 8019480:	af00      	add	r7, sp, #0
 8019482:	4603      	mov	r3, r0
 8019484:	6039      	str	r1, [r7, #0]
 8019486:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8019488:	79fb      	ldrb	r3, [r7, #7]
 801948a:	2b00      	cmp	r3, #0
 801948c:	d105      	bne.n	801949a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801948e:	683a      	ldr	r2, [r7, #0]
 8019490:	4907      	ldr	r1, [pc, #28]	; (80194b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8019492:	4808      	ldr	r0, [pc, #32]	; (80194b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8019494:	f7fc f936 	bl	8015704 <USBD_GetString>
 8019498:	e004      	b.n	80194a4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801949a:	683a      	ldr	r2, [r7, #0]
 801949c:	4904      	ldr	r1, [pc, #16]	; (80194b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 801949e:	4805      	ldr	r0, [pc, #20]	; (80194b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80194a0:	f7fc f930 	bl	8015704 <USBD_GetString>
  }
  return USBD_StrDesc;
 80194a4:	4b02      	ldr	r3, [pc, #8]	; (80194b0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80194a6:	4618      	mov	r0, r3
 80194a8:	3708      	adds	r7, #8
 80194aa:	46bd      	mov	sp, r7
 80194ac:	bd80      	pop	{r7, pc}
 80194ae:	bf00      	nop
 80194b0:	20012d24 	.word	0x20012d24
 80194b4:	0801fe8c 	.word	0x0801fe8c

080194b8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80194b8:	b580      	push	{r7, lr}
 80194ba:	b082      	sub	sp, #8
 80194bc:	af00      	add	r7, sp, #0
 80194be:	4603      	mov	r3, r0
 80194c0:	6039      	str	r1, [r7, #0]
 80194c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80194c4:	79fb      	ldrb	r3, [r7, #7]
 80194c6:	2b00      	cmp	r3, #0
 80194c8:	d105      	bne.n	80194d6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80194ca:	683a      	ldr	r2, [r7, #0]
 80194cc:	4907      	ldr	r1, [pc, #28]	; (80194ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 80194ce:	4808      	ldr	r0, [pc, #32]	; (80194f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80194d0:	f7fc f918 	bl	8015704 <USBD_GetString>
 80194d4:	e004      	b.n	80194e0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80194d6:	683a      	ldr	r2, [r7, #0]
 80194d8:	4904      	ldr	r1, [pc, #16]	; (80194ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 80194da:	4805      	ldr	r0, [pc, #20]	; (80194f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80194dc:	f7fc f912 	bl	8015704 <USBD_GetString>
  }
  return USBD_StrDesc;
 80194e0:	4b02      	ldr	r3, [pc, #8]	; (80194ec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80194e2:	4618      	mov	r0, r3
 80194e4:	3708      	adds	r7, #8
 80194e6:	46bd      	mov	sp, r7
 80194e8:	bd80      	pop	{r7, pc}
 80194ea:	bf00      	nop
 80194ec:	20012d24 	.word	0x20012d24
 80194f0:	0801fe98 	.word	0x0801fe98

080194f4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80194f4:	b480      	push	{r7}
 80194f6:	b083      	sub	sp, #12
 80194f8:	af00      	add	r7, sp, #0
 80194fa:	4603      	mov	r3, r0
 80194fc:	6039      	str	r1, [r7, #0]
 80194fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8019500:	683b      	ldr	r3, [r7, #0]
 8019502:	220c      	movs	r2, #12
 8019504:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8019506:	4b03      	ldr	r3, [pc, #12]	; (8019514 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8019508:	4618      	mov	r0, r3
 801950a:	370c      	adds	r7, #12
 801950c:	46bd      	mov	sp, r7
 801950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019512:	4770      	bx	lr
 8019514:	2000013c 	.word	0x2000013c

08019518 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8019518:	b580      	push	{r7, lr}
 801951a:	b084      	sub	sp, #16
 801951c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801951e:	4b0f      	ldr	r3, [pc, #60]	; (801955c <Get_SerialNum+0x44>)
 8019520:	681b      	ldr	r3, [r3, #0]
 8019522:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8019524:	4b0e      	ldr	r3, [pc, #56]	; (8019560 <Get_SerialNum+0x48>)
 8019526:	681b      	ldr	r3, [r3, #0]
 8019528:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801952a:	4b0e      	ldr	r3, [pc, #56]	; (8019564 <Get_SerialNum+0x4c>)
 801952c:	681b      	ldr	r3, [r3, #0]
 801952e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8019530:	68fa      	ldr	r2, [r7, #12]
 8019532:	687b      	ldr	r3, [r7, #4]
 8019534:	4413      	add	r3, r2
 8019536:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8019538:	68fb      	ldr	r3, [r7, #12]
 801953a:	2b00      	cmp	r3, #0
 801953c:	d009      	beq.n	8019552 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801953e:	2208      	movs	r2, #8
 8019540:	4909      	ldr	r1, [pc, #36]	; (8019568 <Get_SerialNum+0x50>)
 8019542:	68f8      	ldr	r0, [r7, #12]
 8019544:	f000 f814 	bl	8019570 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8019548:	2204      	movs	r2, #4
 801954a:	4908      	ldr	r1, [pc, #32]	; (801956c <Get_SerialNum+0x54>)
 801954c:	68b8      	ldr	r0, [r7, #8]
 801954e:	f000 f80f 	bl	8019570 <IntToUnicode>
  }
}
 8019552:	bf00      	nop
 8019554:	3710      	adds	r7, #16
 8019556:	46bd      	mov	sp, r7
 8019558:	bd80      	pop	{r7, pc}
 801955a:	bf00      	nop
 801955c:	1fff7a10 	.word	0x1fff7a10
 8019560:	1fff7a14 	.word	0x1fff7a14
 8019564:	1fff7a18 	.word	0x1fff7a18
 8019568:	2000014e 	.word	0x2000014e
 801956c:	2000015e 	.word	0x2000015e

08019570 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8019570:	b480      	push	{r7}
 8019572:	b087      	sub	sp, #28
 8019574:	af00      	add	r7, sp, #0
 8019576:	60f8      	str	r0, [r7, #12]
 8019578:	60b9      	str	r1, [r7, #8]
 801957a:	4613      	mov	r3, r2
 801957c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801957e:	2300      	movs	r3, #0
 8019580:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8019582:	2300      	movs	r3, #0
 8019584:	75fb      	strb	r3, [r7, #23]
 8019586:	e027      	b.n	80195d8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8019588:	68fb      	ldr	r3, [r7, #12]
 801958a:	0f1b      	lsrs	r3, r3, #28
 801958c:	2b09      	cmp	r3, #9
 801958e:	d80b      	bhi.n	80195a8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8019590:	68fb      	ldr	r3, [r7, #12]
 8019592:	0f1b      	lsrs	r3, r3, #28
 8019594:	b2da      	uxtb	r2, r3
 8019596:	7dfb      	ldrb	r3, [r7, #23]
 8019598:	005b      	lsls	r3, r3, #1
 801959a:	4619      	mov	r1, r3
 801959c:	68bb      	ldr	r3, [r7, #8]
 801959e:	440b      	add	r3, r1
 80195a0:	3230      	adds	r2, #48	; 0x30
 80195a2:	b2d2      	uxtb	r2, r2
 80195a4:	701a      	strb	r2, [r3, #0]
 80195a6:	e00a      	b.n	80195be <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80195a8:	68fb      	ldr	r3, [r7, #12]
 80195aa:	0f1b      	lsrs	r3, r3, #28
 80195ac:	b2da      	uxtb	r2, r3
 80195ae:	7dfb      	ldrb	r3, [r7, #23]
 80195b0:	005b      	lsls	r3, r3, #1
 80195b2:	4619      	mov	r1, r3
 80195b4:	68bb      	ldr	r3, [r7, #8]
 80195b6:	440b      	add	r3, r1
 80195b8:	3237      	adds	r2, #55	; 0x37
 80195ba:	b2d2      	uxtb	r2, r2
 80195bc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80195be:	68fb      	ldr	r3, [r7, #12]
 80195c0:	011b      	lsls	r3, r3, #4
 80195c2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80195c4:	7dfb      	ldrb	r3, [r7, #23]
 80195c6:	005b      	lsls	r3, r3, #1
 80195c8:	3301      	adds	r3, #1
 80195ca:	68ba      	ldr	r2, [r7, #8]
 80195cc:	4413      	add	r3, r2
 80195ce:	2200      	movs	r2, #0
 80195d0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80195d2:	7dfb      	ldrb	r3, [r7, #23]
 80195d4:	3301      	adds	r3, #1
 80195d6:	75fb      	strb	r3, [r7, #23]
 80195d8:	7dfa      	ldrb	r2, [r7, #23]
 80195da:	79fb      	ldrb	r3, [r7, #7]
 80195dc:	429a      	cmp	r2, r3
 80195de:	d3d3      	bcc.n	8019588 <IntToUnicode+0x18>
  }
}
 80195e0:	bf00      	nop
 80195e2:	bf00      	nop
 80195e4:	371c      	adds	r7, #28
 80195e6:	46bd      	mov	sp, r7
 80195e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195ec:	4770      	bx	lr
	...

080195f0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80195f0:	b580      	push	{r7, lr}
 80195f2:	b0a0      	sub	sp, #128	; 0x80
 80195f4:	af00      	add	r7, sp, #0
 80195f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80195f8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80195fc:	2200      	movs	r2, #0
 80195fe:	601a      	str	r2, [r3, #0]
 8019600:	605a      	str	r2, [r3, #4]
 8019602:	609a      	str	r2, [r3, #8]
 8019604:	60da      	str	r2, [r3, #12]
 8019606:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8019608:	f107 0310 	add.w	r3, r7, #16
 801960c:	225c      	movs	r2, #92	; 0x5c
 801960e:	2100      	movs	r1, #0
 8019610:	4618      	mov	r0, r3
 8019612:	f002 f8f7 	bl	801b804 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8019616:	687b      	ldr	r3, [r7, #4]
 8019618:	681b      	ldr	r3, [r3, #0]
 801961a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801961e:	d156      	bne.n	80196ce <HAL_PCD_MspInit+0xde>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8019620:	f44f 7380 	mov.w	r3, #256	; 0x100
 8019624:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8019626:	2300      	movs	r3, #0
 8019628:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801962a:	f107 0310 	add.w	r3, r7, #16
 801962e:	4618      	mov	r0, r3
 8019630:	f7f5 ffac 	bl	800f58c <HAL_RCCEx_PeriphCLKConfig>
 8019634:	4603      	mov	r3, r0
 8019636:	2b00      	cmp	r3, #0
 8019638:	d001      	beq.n	801963e <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 801963a:	f7f0 fc59 	bl	8009ef0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801963e:	2300      	movs	r3, #0
 8019640:	60fb      	str	r3, [r7, #12]
 8019642:	4b25      	ldr	r3, [pc, #148]	; (80196d8 <HAL_PCD_MspInit+0xe8>)
 8019644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019646:	4a24      	ldr	r2, [pc, #144]	; (80196d8 <HAL_PCD_MspInit+0xe8>)
 8019648:	f043 0301 	orr.w	r3, r3, #1
 801964c:	6313      	str	r3, [r2, #48]	; 0x30
 801964e:	4b22      	ldr	r3, [pc, #136]	; (80196d8 <HAL_PCD_MspInit+0xe8>)
 8019650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019652:	f003 0301 	and.w	r3, r3, #1
 8019656:	60fb      	str	r3, [r7, #12]
 8019658:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 801965a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801965e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8019660:	2300      	movs	r3, #0
 8019662:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019664:	2300      	movs	r3, #0
 8019666:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8019668:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801966c:	4619      	mov	r1, r3
 801966e:	481b      	ldr	r0, [pc, #108]	; (80196dc <HAL_PCD_MspInit+0xec>)
 8019670:	f7f3 f8fe 	bl	800c870 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8019674:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8019678:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801967a:	2302      	movs	r3, #2
 801967c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801967e:	2300      	movs	r3, #0
 8019680:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8019682:	2303      	movs	r3, #3
 8019684:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8019686:	230a      	movs	r3, #10
 8019688:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801968a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801968e:	4619      	mov	r1, r3
 8019690:	4812      	ldr	r0, [pc, #72]	; (80196dc <HAL_PCD_MspInit+0xec>)
 8019692:	f7f3 f8ed 	bl	800c870 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8019696:	4b10      	ldr	r3, [pc, #64]	; (80196d8 <HAL_PCD_MspInit+0xe8>)
 8019698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801969a:	4a0f      	ldr	r2, [pc, #60]	; (80196d8 <HAL_PCD_MspInit+0xe8>)
 801969c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80196a0:	6353      	str	r3, [r2, #52]	; 0x34
 80196a2:	2300      	movs	r3, #0
 80196a4:	60bb      	str	r3, [r7, #8]
 80196a6:	4b0c      	ldr	r3, [pc, #48]	; (80196d8 <HAL_PCD_MspInit+0xe8>)
 80196a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80196aa:	4a0b      	ldr	r2, [pc, #44]	; (80196d8 <HAL_PCD_MspInit+0xe8>)
 80196ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80196b0:	6453      	str	r3, [r2, #68]	; 0x44
 80196b2:	4b09      	ldr	r3, [pc, #36]	; (80196d8 <HAL_PCD_MspInit+0xe8>)
 80196b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80196b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80196ba:	60bb      	str	r3, [r7, #8]
 80196bc:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80196be:	2200      	movs	r2, #0
 80196c0:	2105      	movs	r1, #5
 80196c2:	2043      	movs	r0, #67	; 0x43
 80196c4:	f7f2 fd2c 	bl	800c120 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80196c8:	2043      	movs	r0, #67	; 0x43
 80196ca:	f7f2 fd45 	bl	800c158 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80196ce:	bf00      	nop
 80196d0:	3780      	adds	r7, #128	; 0x80
 80196d2:	46bd      	mov	sp, r7
 80196d4:	bd80      	pop	{r7, pc}
 80196d6:	bf00      	nop
 80196d8:	40023800 	.word	0x40023800
 80196dc:	40020000 	.word	0x40020000

080196e0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80196e0:	b580      	push	{r7, lr}
 80196e2:	b082      	sub	sp, #8
 80196e4:	af00      	add	r7, sp, #0
 80196e6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80196e8:	687b      	ldr	r3, [r7, #4]
 80196ea:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80196ee:	687b      	ldr	r3, [r7, #4]
 80196f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80196f4:	4619      	mov	r1, r3
 80196f6:	4610      	mov	r0, r2
 80196f8:	f7fa fe7b 	bl	80143f2 <USBD_LL_SetupStage>
}
 80196fc:	bf00      	nop
 80196fe:	3708      	adds	r7, #8
 8019700:	46bd      	mov	sp, r7
 8019702:	bd80      	pop	{r7, pc}

08019704 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019704:	b580      	push	{r7, lr}
 8019706:	b082      	sub	sp, #8
 8019708:	af00      	add	r7, sp, #0
 801970a:	6078      	str	r0, [r7, #4]
 801970c:	460b      	mov	r3, r1
 801970e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8019710:	687b      	ldr	r3, [r7, #4]
 8019712:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8019716:	78fa      	ldrb	r2, [r7, #3]
 8019718:	6879      	ldr	r1, [r7, #4]
 801971a:	4613      	mov	r3, r2
 801971c:	00db      	lsls	r3, r3, #3
 801971e:	4413      	add	r3, r2
 8019720:	009b      	lsls	r3, r3, #2
 8019722:	440b      	add	r3, r1
 8019724:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8019728:	681a      	ldr	r2, [r3, #0]
 801972a:	78fb      	ldrb	r3, [r7, #3]
 801972c:	4619      	mov	r1, r3
 801972e:	f7fa feb5 	bl	801449c <USBD_LL_DataOutStage>
}
 8019732:	bf00      	nop
 8019734:	3708      	adds	r7, #8
 8019736:	46bd      	mov	sp, r7
 8019738:	bd80      	pop	{r7, pc}

0801973a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801973a:	b580      	push	{r7, lr}
 801973c:	b082      	sub	sp, #8
 801973e:	af00      	add	r7, sp, #0
 8019740:	6078      	str	r0, [r7, #4]
 8019742:	460b      	mov	r3, r1
 8019744:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8019746:	687b      	ldr	r3, [r7, #4]
 8019748:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801974c:	78fa      	ldrb	r2, [r7, #3]
 801974e:	6879      	ldr	r1, [r7, #4]
 8019750:	4613      	mov	r3, r2
 8019752:	00db      	lsls	r3, r3, #3
 8019754:	4413      	add	r3, r2
 8019756:	009b      	lsls	r3, r3, #2
 8019758:	440b      	add	r3, r1
 801975a:	334c      	adds	r3, #76	; 0x4c
 801975c:	681a      	ldr	r2, [r3, #0]
 801975e:	78fb      	ldrb	r3, [r7, #3]
 8019760:	4619      	mov	r1, r3
 8019762:	f7fa ff4e 	bl	8014602 <USBD_LL_DataInStage>
}
 8019766:	bf00      	nop
 8019768:	3708      	adds	r7, #8
 801976a:	46bd      	mov	sp, r7
 801976c:	bd80      	pop	{r7, pc}

0801976e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801976e:	b580      	push	{r7, lr}
 8019770:	b082      	sub	sp, #8
 8019772:	af00      	add	r7, sp, #0
 8019774:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8019776:	687b      	ldr	r3, [r7, #4]
 8019778:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801977c:	4618      	mov	r0, r3
 801977e:	f7fb f882 	bl	8014886 <USBD_LL_SOF>
}
 8019782:	bf00      	nop
 8019784:	3708      	adds	r7, #8
 8019786:	46bd      	mov	sp, r7
 8019788:	bd80      	pop	{r7, pc}

0801978a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801978a:	b580      	push	{r7, lr}
 801978c:	b084      	sub	sp, #16
 801978e:	af00      	add	r7, sp, #0
 8019790:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8019792:	2301      	movs	r3, #1
 8019794:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8019796:	687b      	ldr	r3, [r7, #4]
 8019798:	68db      	ldr	r3, [r3, #12]
 801979a:	2b00      	cmp	r3, #0
 801979c:	d102      	bne.n	80197a4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801979e:	2300      	movs	r3, #0
 80197a0:	73fb      	strb	r3, [r7, #15]
 80197a2:	e008      	b.n	80197b6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80197a4:	687b      	ldr	r3, [r7, #4]
 80197a6:	68db      	ldr	r3, [r3, #12]
 80197a8:	2b02      	cmp	r3, #2
 80197aa:	d102      	bne.n	80197b2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80197ac:	2301      	movs	r3, #1
 80197ae:	73fb      	strb	r3, [r7, #15]
 80197b0:	e001      	b.n	80197b6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80197b2:	f7f0 fb9d 	bl	8009ef0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80197b6:	687b      	ldr	r3, [r7, #4]
 80197b8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80197bc:	7bfa      	ldrb	r2, [r7, #15]
 80197be:	4611      	mov	r1, r2
 80197c0:	4618      	mov	r0, r3
 80197c2:	f7fb f822 	bl	801480a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80197c6:	687b      	ldr	r3, [r7, #4]
 80197c8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80197cc:	4618      	mov	r0, r3
 80197ce:	f7fa ffca 	bl	8014766 <USBD_LL_Reset>
}
 80197d2:	bf00      	nop
 80197d4:	3710      	adds	r7, #16
 80197d6:	46bd      	mov	sp, r7
 80197d8:	bd80      	pop	{r7, pc}
	...

080197dc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80197dc:	b580      	push	{r7, lr}
 80197de:	b082      	sub	sp, #8
 80197e0:	af00      	add	r7, sp, #0
 80197e2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80197e4:	687b      	ldr	r3, [r7, #4]
 80197e6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80197ea:	4618      	mov	r0, r3
 80197ec:	f7fb f81d 	bl	801482a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80197f0:	687b      	ldr	r3, [r7, #4]
 80197f2:	681b      	ldr	r3, [r3, #0]
 80197f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80197f8:	681b      	ldr	r3, [r3, #0]
 80197fa:	687a      	ldr	r2, [r7, #4]
 80197fc:	6812      	ldr	r2, [r2, #0]
 80197fe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8019802:	f043 0301 	orr.w	r3, r3, #1
 8019806:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8019808:	687b      	ldr	r3, [r7, #4]
 801980a:	6a1b      	ldr	r3, [r3, #32]
 801980c:	2b00      	cmp	r3, #0
 801980e:	d005      	beq.n	801981c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019810:	4b04      	ldr	r3, [pc, #16]	; (8019824 <HAL_PCD_SuspendCallback+0x48>)
 8019812:	691b      	ldr	r3, [r3, #16]
 8019814:	4a03      	ldr	r2, [pc, #12]	; (8019824 <HAL_PCD_SuspendCallback+0x48>)
 8019816:	f043 0306 	orr.w	r3, r3, #6
 801981a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801981c:	bf00      	nop
 801981e:	3708      	adds	r7, #8
 8019820:	46bd      	mov	sp, r7
 8019822:	bd80      	pop	{r7, pc}
 8019824:	e000ed00 	.word	0xe000ed00

08019828 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019828:	b580      	push	{r7, lr}
 801982a:	b082      	sub	sp, #8
 801982c:	af00      	add	r7, sp, #0
 801982e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8019830:	687b      	ldr	r3, [r7, #4]
 8019832:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8019836:	4618      	mov	r0, r3
 8019838:	f7fb f80d 	bl	8014856 <USBD_LL_Resume>
}
 801983c:	bf00      	nop
 801983e:	3708      	adds	r7, #8
 8019840:	46bd      	mov	sp, r7
 8019842:	bd80      	pop	{r7, pc}

08019844 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019844:	b580      	push	{r7, lr}
 8019846:	b082      	sub	sp, #8
 8019848:	af00      	add	r7, sp, #0
 801984a:	6078      	str	r0, [r7, #4]
 801984c:	460b      	mov	r3, r1
 801984e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8019850:	687b      	ldr	r3, [r7, #4]
 8019852:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8019856:	78fa      	ldrb	r2, [r7, #3]
 8019858:	4611      	mov	r1, r2
 801985a:	4618      	mov	r0, r3
 801985c:	f7fb f865 	bl	801492a <USBD_LL_IsoOUTIncomplete>
}
 8019860:	bf00      	nop
 8019862:	3708      	adds	r7, #8
 8019864:	46bd      	mov	sp, r7
 8019866:	bd80      	pop	{r7, pc}

08019868 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019868:	b580      	push	{r7, lr}
 801986a:	b082      	sub	sp, #8
 801986c:	af00      	add	r7, sp, #0
 801986e:	6078      	str	r0, [r7, #4]
 8019870:	460b      	mov	r3, r1
 8019872:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8019874:	687b      	ldr	r3, [r7, #4]
 8019876:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801987a:	78fa      	ldrb	r2, [r7, #3]
 801987c:	4611      	mov	r1, r2
 801987e:	4618      	mov	r0, r3
 8019880:	f7fb f821 	bl	80148c6 <USBD_LL_IsoINIncomplete>
}
 8019884:	bf00      	nop
 8019886:	3708      	adds	r7, #8
 8019888:	46bd      	mov	sp, r7
 801988a:	bd80      	pop	{r7, pc}

0801988c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801988c:	b580      	push	{r7, lr}
 801988e:	b082      	sub	sp, #8
 8019890:	af00      	add	r7, sp, #0
 8019892:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8019894:	687b      	ldr	r3, [r7, #4]
 8019896:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801989a:	4618      	mov	r0, r3
 801989c:	f7fb f877 	bl	801498e <USBD_LL_DevConnected>
}
 80198a0:	bf00      	nop
 80198a2:	3708      	adds	r7, #8
 80198a4:	46bd      	mov	sp, r7
 80198a6:	bd80      	pop	{r7, pc}

080198a8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80198a8:	b580      	push	{r7, lr}
 80198aa:	b082      	sub	sp, #8
 80198ac:	af00      	add	r7, sp, #0
 80198ae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80198b0:	687b      	ldr	r3, [r7, #4]
 80198b2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80198b6:	4618      	mov	r0, r3
 80198b8:	f7fb f874 	bl	80149a4 <USBD_LL_DevDisconnected>
}
 80198bc:	bf00      	nop
 80198be:	3708      	adds	r7, #8
 80198c0:	46bd      	mov	sp, r7
 80198c2:	bd80      	pop	{r7, pc}

080198c4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80198c4:	b580      	push	{r7, lr}
 80198c6:	b082      	sub	sp, #8
 80198c8:	af00      	add	r7, sp, #0
 80198ca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80198cc:	687b      	ldr	r3, [r7, #4]
 80198ce:	781b      	ldrb	r3, [r3, #0]
 80198d0:	2b00      	cmp	r3, #0
 80198d2:	d13c      	bne.n	801994e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80198d4:	4a20      	ldr	r2, [pc, #128]	; (8019958 <USBD_LL_Init+0x94>)
 80198d6:	687b      	ldr	r3, [r7, #4]
 80198d8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80198dc:	687b      	ldr	r3, [r7, #4]
 80198de:	4a1e      	ldr	r2, [pc, #120]	; (8019958 <USBD_LL_Init+0x94>)
 80198e0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80198e4:	4b1c      	ldr	r3, [pc, #112]	; (8019958 <USBD_LL_Init+0x94>)
 80198e6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80198ea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80198ec:	4b1a      	ldr	r3, [pc, #104]	; (8019958 <USBD_LL_Init+0x94>)
 80198ee:	2206      	movs	r2, #6
 80198f0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80198f2:	4b19      	ldr	r3, [pc, #100]	; (8019958 <USBD_LL_Init+0x94>)
 80198f4:	2202      	movs	r2, #2
 80198f6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80198f8:	4b17      	ldr	r3, [pc, #92]	; (8019958 <USBD_LL_Init+0x94>)
 80198fa:	2200      	movs	r2, #0
 80198fc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80198fe:	4b16      	ldr	r3, [pc, #88]	; (8019958 <USBD_LL_Init+0x94>)
 8019900:	2202      	movs	r2, #2
 8019902:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8019904:	4b14      	ldr	r3, [pc, #80]	; (8019958 <USBD_LL_Init+0x94>)
 8019906:	2200      	movs	r2, #0
 8019908:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801990a:	4b13      	ldr	r3, [pc, #76]	; (8019958 <USBD_LL_Init+0x94>)
 801990c:	2200      	movs	r2, #0
 801990e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8019910:	4b11      	ldr	r3, [pc, #68]	; (8019958 <USBD_LL_Init+0x94>)
 8019912:	2200      	movs	r2, #0
 8019914:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8019916:	4b10      	ldr	r3, [pc, #64]	; (8019958 <USBD_LL_Init+0x94>)
 8019918:	2201      	movs	r2, #1
 801991a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801991c:	4b0e      	ldr	r3, [pc, #56]	; (8019958 <USBD_LL_Init+0x94>)
 801991e:	2200      	movs	r2, #0
 8019920:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8019922:	480d      	ldr	r0, [pc, #52]	; (8019958 <USBD_LL_Init+0x94>)
 8019924:	f7f4 fa1d 	bl	800dd62 <HAL_PCD_Init>
 8019928:	4603      	mov	r3, r0
 801992a:	2b00      	cmp	r3, #0
 801992c:	d001      	beq.n	8019932 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801992e:	f7f0 fadf 	bl	8009ef0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8019932:	2180      	movs	r1, #128	; 0x80
 8019934:	4808      	ldr	r0, [pc, #32]	; (8019958 <USBD_LL_Init+0x94>)
 8019936:	f7f5 fca8 	bl	800f28a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801993a:	2240      	movs	r2, #64	; 0x40
 801993c:	2100      	movs	r1, #0
 801993e:	4806      	ldr	r0, [pc, #24]	; (8019958 <USBD_LL_Init+0x94>)
 8019940:	f7f5 fc5c 	bl	800f1fc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8019944:	2280      	movs	r2, #128	; 0x80
 8019946:	2101      	movs	r1, #1
 8019948:	4803      	ldr	r0, [pc, #12]	; (8019958 <USBD_LL_Init+0x94>)
 801994a:	f7f5 fc57 	bl	800f1fc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801994e:	2300      	movs	r3, #0
}
 8019950:	4618      	mov	r0, r3
 8019952:	3708      	adds	r7, #8
 8019954:	46bd      	mov	sp, r7
 8019956:	bd80      	pop	{r7, pc}
 8019958:	20012f24 	.word	0x20012f24

0801995c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801995c:	b580      	push	{r7, lr}
 801995e:	b084      	sub	sp, #16
 8019960:	af00      	add	r7, sp, #0
 8019962:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019964:	2300      	movs	r3, #0
 8019966:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019968:	2300      	movs	r3, #0
 801996a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801996c:	687b      	ldr	r3, [r7, #4]
 801996e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8019972:	4618      	mov	r0, r3
 8019974:	f7f4 fb19 	bl	800dfaa <HAL_PCD_Start>
 8019978:	4603      	mov	r3, r0
 801997a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801997c:	7bfb      	ldrb	r3, [r7, #15]
 801997e:	4618      	mov	r0, r3
 8019980:	f000 f990 	bl	8019ca4 <USBD_Get_USB_Status>
 8019984:	4603      	mov	r3, r0
 8019986:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019988:	7bbb      	ldrb	r3, [r7, #14]
}
 801998a:	4618      	mov	r0, r3
 801998c:	3710      	adds	r7, #16
 801998e:	46bd      	mov	sp, r7
 8019990:	bd80      	pop	{r7, pc}

08019992 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8019992:	b580      	push	{r7, lr}
 8019994:	b084      	sub	sp, #16
 8019996:	af00      	add	r7, sp, #0
 8019998:	6078      	str	r0, [r7, #4]
 801999a:	4608      	mov	r0, r1
 801999c:	4611      	mov	r1, r2
 801999e:	461a      	mov	r2, r3
 80199a0:	4603      	mov	r3, r0
 80199a2:	70fb      	strb	r3, [r7, #3]
 80199a4:	460b      	mov	r3, r1
 80199a6:	70bb      	strb	r3, [r7, #2]
 80199a8:	4613      	mov	r3, r2
 80199aa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80199ac:	2300      	movs	r3, #0
 80199ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80199b0:	2300      	movs	r3, #0
 80199b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80199b4:	687b      	ldr	r3, [r7, #4]
 80199b6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80199ba:	78bb      	ldrb	r3, [r7, #2]
 80199bc:	883a      	ldrh	r2, [r7, #0]
 80199be:	78f9      	ldrb	r1, [r7, #3]
 80199c0:	f7f5 f817 	bl	800e9f2 <HAL_PCD_EP_Open>
 80199c4:	4603      	mov	r3, r0
 80199c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80199c8:	7bfb      	ldrb	r3, [r7, #15]
 80199ca:	4618      	mov	r0, r3
 80199cc:	f000 f96a 	bl	8019ca4 <USBD_Get_USB_Status>
 80199d0:	4603      	mov	r3, r0
 80199d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80199d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80199d6:	4618      	mov	r0, r3
 80199d8:	3710      	adds	r7, #16
 80199da:	46bd      	mov	sp, r7
 80199dc:	bd80      	pop	{r7, pc}

080199de <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80199de:	b580      	push	{r7, lr}
 80199e0:	b084      	sub	sp, #16
 80199e2:	af00      	add	r7, sp, #0
 80199e4:	6078      	str	r0, [r7, #4]
 80199e6:	460b      	mov	r3, r1
 80199e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80199ea:	2300      	movs	r3, #0
 80199ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80199ee:	2300      	movs	r3, #0
 80199f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80199f2:	687b      	ldr	r3, [r7, #4]
 80199f4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80199f8:	78fa      	ldrb	r2, [r7, #3]
 80199fa:	4611      	mov	r1, r2
 80199fc:	4618      	mov	r0, r3
 80199fe:	f7f5 f860 	bl	800eac2 <HAL_PCD_EP_Close>
 8019a02:	4603      	mov	r3, r0
 8019a04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019a06:	7bfb      	ldrb	r3, [r7, #15]
 8019a08:	4618      	mov	r0, r3
 8019a0a:	f000 f94b 	bl	8019ca4 <USBD_Get_USB_Status>
 8019a0e:	4603      	mov	r3, r0
 8019a10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019a12:	7bbb      	ldrb	r3, [r7, #14]
}
 8019a14:	4618      	mov	r0, r3
 8019a16:	3710      	adds	r7, #16
 8019a18:	46bd      	mov	sp, r7
 8019a1a:	bd80      	pop	{r7, pc}

08019a1c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019a1c:	b580      	push	{r7, lr}
 8019a1e:	b084      	sub	sp, #16
 8019a20:	af00      	add	r7, sp, #0
 8019a22:	6078      	str	r0, [r7, #4]
 8019a24:	460b      	mov	r3, r1
 8019a26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019a28:	2300      	movs	r3, #0
 8019a2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019a2c:	2300      	movs	r3, #0
 8019a2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8019a30:	687b      	ldr	r3, [r7, #4]
 8019a32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8019a36:	78fa      	ldrb	r2, [r7, #3]
 8019a38:	4611      	mov	r1, r2
 8019a3a:	4618      	mov	r0, r3
 8019a3c:	f7f5 f938 	bl	800ecb0 <HAL_PCD_EP_SetStall>
 8019a40:	4603      	mov	r3, r0
 8019a42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019a44:	7bfb      	ldrb	r3, [r7, #15]
 8019a46:	4618      	mov	r0, r3
 8019a48:	f000 f92c 	bl	8019ca4 <USBD_Get_USB_Status>
 8019a4c:	4603      	mov	r3, r0
 8019a4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019a50:	7bbb      	ldrb	r3, [r7, #14]
}
 8019a52:	4618      	mov	r0, r3
 8019a54:	3710      	adds	r7, #16
 8019a56:	46bd      	mov	sp, r7
 8019a58:	bd80      	pop	{r7, pc}

08019a5a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019a5a:	b580      	push	{r7, lr}
 8019a5c:	b084      	sub	sp, #16
 8019a5e:	af00      	add	r7, sp, #0
 8019a60:	6078      	str	r0, [r7, #4]
 8019a62:	460b      	mov	r3, r1
 8019a64:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019a66:	2300      	movs	r3, #0
 8019a68:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019a6a:	2300      	movs	r3, #0
 8019a6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8019a6e:	687b      	ldr	r3, [r7, #4]
 8019a70:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8019a74:	78fa      	ldrb	r2, [r7, #3]
 8019a76:	4611      	mov	r1, r2
 8019a78:	4618      	mov	r0, r3
 8019a7a:	f7f5 f97d 	bl	800ed78 <HAL_PCD_EP_ClrStall>
 8019a7e:	4603      	mov	r3, r0
 8019a80:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019a82:	7bfb      	ldrb	r3, [r7, #15]
 8019a84:	4618      	mov	r0, r3
 8019a86:	f000 f90d 	bl	8019ca4 <USBD_Get_USB_Status>
 8019a8a:	4603      	mov	r3, r0
 8019a8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019a8e:	7bbb      	ldrb	r3, [r7, #14]
}
 8019a90:	4618      	mov	r0, r3
 8019a92:	3710      	adds	r7, #16
 8019a94:	46bd      	mov	sp, r7
 8019a96:	bd80      	pop	{r7, pc}

08019a98 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019a98:	b480      	push	{r7}
 8019a9a:	b085      	sub	sp, #20
 8019a9c:	af00      	add	r7, sp, #0
 8019a9e:	6078      	str	r0, [r7, #4]
 8019aa0:	460b      	mov	r3, r1
 8019aa2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8019aa4:	687b      	ldr	r3, [r7, #4]
 8019aa6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8019aaa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8019aac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8019ab0:	2b00      	cmp	r3, #0
 8019ab2:	da0b      	bge.n	8019acc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8019ab4:	78fb      	ldrb	r3, [r7, #3]
 8019ab6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8019aba:	68f9      	ldr	r1, [r7, #12]
 8019abc:	4613      	mov	r3, r2
 8019abe:	00db      	lsls	r3, r3, #3
 8019ac0:	4413      	add	r3, r2
 8019ac2:	009b      	lsls	r3, r3, #2
 8019ac4:	440b      	add	r3, r1
 8019ac6:	333e      	adds	r3, #62	; 0x3e
 8019ac8:	781b      	ldrb	r3, [r3, #0]
 8019aca:	e00b      	b.n	8019ae4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8019acc:	78fb      	ldrb	r3, [r7, #3]
 8019ace:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8019ad2:	68f9      	ldr	r1, [r7, #12]
 8019ad4:	4613      	mov	r3, r2
 8019ad6:	00db      	lsls	r3, r3, #3
 8019ad8:	4413      	add	r3, r2
 8019ada:	009b      	lsls	r3, r3, #2
 8019adc:	440b      	add	r3, r1
 8019ade:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8019ae2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8019ae4:	4618      	mov	r0, r3
 8019ae6:	3714      	adds	r7, #20
 8019ae8:	46bd      	mov	sp, r7
 8019aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019aee:	4770      	bx	lr

08019af0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8019af0:	b580      	push	{r7, lr}
 8019af2:	b084      	sub	sp, #16
 8019af4:	af00      	add	r7, sp, #0
 8019af6:	6078      	str	r0, [r7, #4]
 8019af8:	460b      	mov	r3, r1
 8019afa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019afc:	2300      	movs	r3, #0
 8019afe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019b00:	2300      	movs	r3, #0
 8019b02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8019b04:	687b      	ldr	r3, [r7, #4]
 8019b06:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8019b0a:	78fa      	ldrb	r2, [r7, #3]
 8019b0c:	4611      	mov	r1, r2
 8019b0e:	4618      	mov	r0, r3
 8019b10:	f7f4 ff4a 	bl	800e9a8 <HAL_PCD_SetAddress>
 8019b14:	4603      	mov	r3, r0
 8019b16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019b18:	7bfb      	ldrb	r3, [r7, #15]
 8019b1a:	4618      	mov	r0, r3
 8019b1c:	f000 f8c2 	bl	8019ca4 <USBD_Get_USB_Status>
 8019b20:	4603      	mov	r3, r0
 8019b22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019b24:	7bbb      	ldrb	r3, [r7, #14]
}
 8019b26:	4618      	mov	r0, r3
 8019b28:	3710      	adds	r7, #16
 8019b2a:	46bd      	mov	sp, r7
 8019b2c:	bd80      	pop	{r7, pc}

08019b2e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8019b2e:	b580      	push	{r7, lr}
 8019b30:	b086      	sub	sp, #24
 8019b32:	af00      	add	r7, sp, #0
 8019b34:	60f8      	str	r0, [r7, #12]
 8019b36:	607a      	str	r2, [r7, #4]
 8019b38:	603b      	str	r3, [r7, #0]
 8019b3a:	460b      	mov	r3, r1
 8019b3c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019b3e:	2300      	movs	r3, #0
 8019b40:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019b42:	2300      	movs	r3, #0
 8019b44:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8019b46:	68fb      	ldr	r3, [r7, #12]
 8019b48:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8019b4c:	7af9      	ldrb	r1, [r7, #11]
 8019b4e:	683b      	ldr	r3, [r7, #0]
 8019b50:	687a      	ldr	r2, [r7, #4]
 8019b52:	f7f5 f863 	bl	800ec1c <HAL_PCD_EP_Transmit>
 8019b56:	4603      	mov	r3, r0
 8019b58:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019b5a:	7dfb      	ldrb	r3, [r7, #23]
 8019b5c:	4618      	mov	r0, r3
 8019b5e:	f000 f8a1 	bl	8019ca4 <USBD_Get_USB_Status>
 8019b62:	4603      	mov	r3, r0
 8019b64:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8019b66:	7dbb      	ldrb	r3, [r7, #22]
}
 8019b68:	4618      	mov	r0, r3
 8019b6a:	3718      	adds	r7, #24
 8019b6c:	46bd      	mov	sp, r7
 8019b6e:	bd80      	pop	{r7, pc}

08019b70 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8019b70:	b580      	push	{r7, lr}
 8019b72:	b086      	sub	sp, #24
 8019b74:	af00      	add	r7, sp, #0
 8019b76:	60f8      	str	r0, [r7, #12]
 8019b78:	607a      	str	r2, [r7, #4]
 8019b7a:	603b      	str	r3, [r7, #0]
 8019b7c:	460b      	mov	r3, r1
 8019b7e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019b80:	2300      	movs	r3, #0
 8019b82:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019b84:	2300      	movs	r3, #0
 8019b86:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8019b88:	68fb      	ldr	r3, [r7, #12]
 8019b8a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8019b8e:	7af9      	ldrb	r1, [r7, #11]
 8019b90:	683b      	ldr	r3, [r7, #0]
 8019b92:	687a      	ldr	r2, [r7, #4]
 8019b94:	f7f4 ffdf 	bl	800eb56 <HAL_PCD_EP_Receive>
 8019b98:	4603      	mov	r3, r0
 8019b9a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019b9c:	7dfb      	ldrb	r3, [r7, #23]
 8019b9e:	4618      	mov	r0, r3
 8019ba0:	f000 f880 	bl	8019ca4 <USBD_Get_USB_Status>
 8019ba4:	4603      	mov	r3, r0
 8019ba6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8019ba8:	7dbb      	ldrb	r3, [r7, #22]
}
 8019baa:	4618      	mov	r0, r3
 8019bac:	3718      	adds	r7, #24
 8019bae:	46bd      	mov	sp, r7
 8019bb0:	bd80      	pop	{r7, pc}

08019bb2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019bb2:	b580      	push	{r7, lr}
 8019bb4:	b082      	sub	sp, #8
 8019bb6:	af00      	add	r7, sp, #0
 8019bb8:	6078      	str	r0, [r7, #4]
 8019bba:	460b      	mov	r3, r1
 8019bbc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8019bbe:	687b      	ldr	r3, [r7, #4]
 8019bc0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8019bc4:	78fa      	ldrb	r2, [r7, #3]
 8019bc6:	4611      	mov	r1, r2
 8019bc8:	4618      	mov	r0, r3
 8019bca:	f7f5 f80f 	bl	800ebec <HAL_PCD_EP_GetRxCount>
 8019bce:	4603      	mov	r3, r0
}
 8019bd0:	4618      	mov	r0, r3
 8019bd2:	3708      	adds	r7, #8
 8019bd4:	46bd      	mov	sp, r7
 8019bd6:	bd80      	pop	{r7, pc}

08019bd8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8019bd8:	b580      	push	{r7, lr}
 8019bda:	b082      	sub	sp, #8
 8019bdc:	af00      	add	r7, sp, #0
 8019bde:	6078      	str	r0, [r7, #4]
 8019be0:	460b      	mov	r3, r1
 8019be2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8019be4:	78fb      	ldrb	r3, [r7, #3]
 8019be6:	2b00      	cmp	r3, #0
 8019be8:	d002      	beq.n	8019bf0 <HAL_PCDEx_LPM_Callback+0x18>
 8019bea:	2b01      	cmp	r3, #1
 8019bec:	d01f      	beq.n	8019c2e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8019bee:	e03b      	b.n	8019c68 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8019bf0:	687b      	ldr	r3, [r7, #4]
 8019bf2:	6a1b      	ldr	r3, [r3, #32]
 8019bf4:	2b00      	cmp	r3, #0
 8019bf6:	d007      	beq.n	8019c08 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8019bf8:	f7ed fc02 	bl	8007400 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019bfc:	4b1c      	ldr	r3, [pc, #112]	; (8019c70 <HAL_PCDEx_LPM_Callback+0x98>)
 8019bfe:	691b      	ldr	r3, [r3, #16]
 8019c00:	4a1b      	ldr	r2, [pc, #108]	; (8019c70 <HAL_PCDEx_LPM_Callback+0x98>)
 8019c02:	f023 0306 	bic.w	r3, r3, #6
 8019c06:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8019c08:	687b      	ldr	r3, [r7, #4]
 8019c0a:	681b      	ldr	r3, [r3, #0]
 8019c0c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8019c10:	681b      	ldr	r3, [r3, #0]
 8019c12:	687a      	ldr	r2, [r7, #4]
 8019c14:	6812      	ldr	r2, [r2, #0]
 8019c16:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8019c1a:	f023 0301 	bic.w	r3, r3, #1
 8019c1e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8019c20:	687b      	ldr	r3, [r7, #4]
 8019c22:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8019c26:	4618      	mov	r0, r3
 8019c28:	f7fa fe15 	bl	8014856 <USBD_LL_Resume>
    break;
 8019c2c:	e01c      	b.n	8019c68 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8019c2e:	687b      	ldr	r3, [r7, #4]
 8019c30:	681b      	ldr	r3, [r3, #0]
 8019c32:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8019c36:	681b      	ldr	r3, [r3, #0]
 8019c38:	687a      	ldr	r2, [r7, #4]
 8019c3a:	6812      	ldr	r2, [r2, #0]
 8019c3c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8019c40:	f043 0301 	orr.w	r3, r3, #1
 8019c44:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8019c46:	687b      	ldr	r3, [r7, #4]
 8019c48:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8019c4c:	4618      	mov	r0, r3
 8019c4e:	f7fa fdec 	bl	801482a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8019c52:	687b      	ldr	r3, [r7, #4]
 8019c54:	6a1b      	ldr	r3, [r3, #32]
 8019c56:	2b00      	cmp	r3, #0
 8019c58:	d005      	beq.n	8019c66 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019c5a:	4b05      	ldr	r3, [pc, #20]	; (8019c70 <HAL_PCDEx_LPM_Callback+0x98>)
 8019c5c:	691b      	ldr	r3, [r3, #16]
 8019c5e:	4a04      	ldr	r2, [pc, #16]	; (8019c70 <HAL_PCDEx_LPM_Callback+0x98>)
 8019c60:	f043 0306 	orr.w	r3, r3, #6
 8019c64:	6113      	str	r3, [r2, #16]
    break;
 8019c66:	bf00      	nop
}
 8019c68:	bf00      	nop
 8019c6a:	3708      	adds	r7, #8
 8019c6c:	46bd      	mov	sp, r7
 8019c6e:	bd80      	pop	{r7, pc}
 8019c70:	e000ed00 	.word	0xe000ed00

08019c74 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8019c74:	b480      	push	{r7}
 8019c76:	b083      	sub	sp, #12
 8019c78:	af00      	add	r7, sp, #0
 8019c7a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8019c7c:	4b03      	ldr	r3, [pc, #12]	; (8019c8c <USBD_static_malloc+0x18>)
}
 8019c7e:	4618      	mov	r0, r3
 8019c80:	370c      	adds	r7, #12
 8019c82:	46bd      	mov	sp, r7
 8019c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c88:	4770      	bx	lr
 8019c8a:	bf00      	nop
 8019c8c:	20013430 	.word	0x20013430

08019c90 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8019c90:	b480      	push	{r7}
 8019c92:	b083      	sub	sp, #12
 8019c94:	af00      	add	r7, sp, #0
 8019c96:	6078      	str	r0, [r7, #4]

}
 8019c98:	bf00      	nop
 8019c9a:	370c      	adds	r7, #12
 8019c9c:	46bd      	mov	sp, r7
 8019c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ca2:	4770      	bx	lr

08019ca4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8019ca4:	b480      	push	{r7}
 8019ca6:	b085      	sub	sp, #20
 8019ca8:	af00      	add	r7, sp, #0
 8019caa:	4603      	mov	r3, r0
 8019cac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019cae:	2300      	movs	r3, #0
 8019cb0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8019cb2:	79fb      	ldrb	r3, [r7, #7]
 8019cb4:	2b03      	cmp	r3, #3
 8019cb6:	d817      	bhi.n	8019ce8 <USBD_Get_USB_Status+0x44>
 8019cb8:	a201      	add	r2, pc, #4	; (adr r2, 8019cc0 <USBD_Get_USB_Status+0x1c>)
 8019cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019cbe:	bf00      	nop
 8019cc0:	08019cd1 	.word	0x08019cd1
 8019cc4:	08019cd7 	.word	0x08019cd7
 8019cc8:	08019cdd 	.word	0x08019cdd
 8019ccc:	08019ce3 	.word	0x08019ce3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8019cd0:	2300      	movs	r3, #0
 8019cd2:	73fb      	strb	r3, [r7, #15]
    break;
 8019cd4:	e00b      	b.n	8019cee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019cd6:	2303      	movs	r3, #3
 8019cd8:	73fb      	strb	r3, [r7, #15]
    break;
 8019cda:	e008      	b.n	8019cee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019cdc:	2301      	movs	r3, #1
 8019cde:	73fb      	strb	r3, [r7, #15]
    break;
 8019ce0:	e005      	b.n	8019cee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019ce2:	2303      	movs	r3, #3
 8019ce4:	73fb      	strb	r3, [r7, #15]
    break;
 8019ce6:	e002      	b.n	8019cee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8019ce8:	2303      	movs	r3, #3
 8019cea:	73fb      	strb	r3, [r7, #15]
    break;
 8019cec:	bf00      	nop
  }
  return usb_status;
 8019cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8019cf0:	4618      	mov	r0, r3
 8019cf2:	3714      	adds	r7, #20
 8019cf4:	46bd      	mov	sp, r7
 8019cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cfa:	4770      	bx	lr
 8019cfc:	0000      	movs	r0, r0
	...

08019d00 <exp>:
 8019d00:	b538      	push	{r3, r4, r5, lr}
 8019d02:	ed2d 8b02 	vpush	{d8}
 8019d06:	ec55 4b10 	vmov	r4, r5, d0
 8019d0a:	f000 f895 	bl	8019e38 <__ieee754_exp>
 8019d0e:	eeb0 8a40 	vmov.f32	s16, s0
 8019d12:	eef0 8a60 	vmov.f32	s17, s1
 8019d16:	ec45 4b10 	vmov	d0, r4, r5
 8019d1a:	f000 f877 	bl	8019e0c <finite>
 8019d1e:	b168      	cbz	r0, 8019d3c <exp+0x3c>
 8019d20:	a317      	add	r3, pc, #92	; (adr r3, 8019d80 <exp+0x80>)
 8019d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d26:	4620      	mov	r0, r4
 8019d28:	4629      	mov	r1, r5
 8019d2a:	f7e6 ff15 	bl	8000b58 <__aeabi_dcmpgt>
 8019d2e:	b160      	cbz	r0, 8019d4a <exp+0x4a>
 8019d30:	f001 fdca 	bl	801b8c8 <__errno>
 8019d34:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 8019d70 <exp+0x70>
 8019d38:	2322      	movs	r3, #34	; 0x22
 8019d3a:	6003      	str	r3, [r0, #0]
 8019d3c:	eeb0 0a48 	vmov.f32	s0, s16
 8019d40:	eef0 0a68 	vmov.f32	s1, s17
 8019d44:	ecbd 8b02 	vpop	{d8}
 8019d48:	bd38      	pop	{r3, r4, r5, pc}
 8019d4a:	a30f      	add	r3, pc, #60	; (adr r3, 8019d88 <exp+0x88>)
 8019d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d50:	4620      	mov	r0, r4
 8019d52:	4629      	mov	r1, r5
 8019d54:	f7e6 fee2 	bl	8000b1c <__aeabi_dcmplt>
 8019d58:	2800      	cmp	r0, #0
 8019d5a:	d0ef      	beq.n	8019d3c <exp+0x3c>
 8019d5c:	f001 fdb4 	bl	801b8c8 <__errno>
 8019d60:	2322      	movs	r3, #34	; 0x22
 8019d62:	ed9f 8b05 	vldr	d8, [pc, #20]	; 8019d78 <exp+0x78>
 8019d66:	6003      	str	r3, [r0, #0]
 8019d68:	e7e8      	b.n	8019d3c <exp+0x3c>
 8019d6a:	bf00      	nop
 8019d6c:	f3af 8000 	nop.w
 8019d70:	00000000 	.word	0x00000000
 8019d74:	7ff00000 	.word	0x7ff00000
	...
 8019d80:	fefa39ef 	.word	0xfefa39ef
 8019d84:	40862e42 	.word	0x40862e42
 8019d88:	d52d3051 	.word	0xd52d3051
 8019d8c:	c0874910 	.word	0xc0874910

08019d90 <log>:
 8019d90:	b538      	push	{r3, r4, r5, lr}
 8019d92:	ed2d 8b02 	vpush	{d8}
 8019d96:	ec55 4b10 	vmov	r4, r5, d0
 8019d9a:	f000 f9d1 	bl	801a140 <__ieee754_log>
 8019d9e:	4622      	mov	r2, r4
 8019da0:	462b      	mov	r3, r5
 8019da2:	4620      	mov	r0, r4
 8019da4:	4629      	mov	r1, r5
 8019da6:	eeb0 8a40 	vmov.f32	s16, s0
 8019daa:	eef0 8a60 	vmov.f32	s17, s1
 8019dae:	f7e6 fedd 	bl	8000b6c <__aeabi_dcmpun>
 8019db2:	b998      	cbnz	r0, 8019ddc <log+0x4c>
 8019db4:	2200      	movs	r2, #0
 8019db6:	2300      	movs	r3, #0
 8019db8:	4620      	mov	r0, r4
 8019dba:	4629      	mov	r1, r5
 8019dbc:	f7e6 fecc 	bl	8000b58 <__aeabi_dcmpgt>
 8019dc0:	b960      	cbnz	r0, 8019ddc <log+0x4c>
 8019dc2:	2200      	movs	r2, #0
 8019dc4:	2300      	movs	r3, #0
 8019dc6:	4620      	mov	r0, r4
 8019dc8:	4629      	mov	r1, r5
 8019dca:	f7e6 fe9d 	bl	8000b08 <__aeabi_dcmpeq>
 8019dce:	b160      	cbz	r0, 8019dea <log+0x5a>
 8019dd0:	f001 fd7a 	bl	801b8c8 <__errno>
 8019dd4:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 8019e00 <log+0x70>
 8019dd8:	2322      	movs	r3, #34	; 0x22
 8019dda:	6003      	str	r3, [r0, #0]
 8019ddc:	eeb0 0a48 	vmov.f32	s0, s16
 8019de0:	eef0 0a68 	vmov.f32	s1, s17
 8019de4:	ecbd 8b02 	vpop	{d8}
 8019de8:	bd38      	pop	{r3, r4, r5, pc}
 8019dea:	f001 fd6d 	bl	801b8c8 <__errno>
 8019dee:	ecbd 8b02 	vpop	{d8}
 8019df2:	2321      	movs	r3, #33	; 0x21
 8019df4:	6003      	str	r3, [r0, #0]
 8019df6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019dfa:	4803      	ldr	r0, [pc, #12]	; (8019e08 <log+0x78>)
 8019dfc:	f000 b814 	b.w	8019e28 <nan>
 8019e00:	00000000 	.word	0x00000000
 8019e04:	fff00000 	.word	0xfff00000
 8019e08:	08025b75 	.word	0x08025b75

08019e0c <finite>:
 8019e0c:	b082      	sub	sp, #8
 8019e0e:	ed8d 0b00 	vstr	d0, [sp]
 8019e12:	9801      	ldr	r0, [sp, #4]
 8019e14:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8019e18:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8019e1c:	0fc0      	lsrs	r0, r0, #31
 8019e1e:	b002      	add	sp, #8
 8019e20:	4770      	bx	lr
 8019e22:	0000      	movs	r0, r0
 8019e24:	0000      	movs	r0, r0
	...

08019e28 <nan>:
 8019e28:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8019e30 <nan+0x8>
 8019e2c:	4770      	bx	lr
 8019e2e:	bf00      	nop
 8019e30:	00000000 	.word	0x00000000
 8019e34:	7ff80000 	.word	0x7ff80000

08019e38 <__ieee754_exp>:
 8019e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019e3c:	ec55 4b10 	vmov	r4, r5, d0
 8019e40:	49b5      	ldr	r1, [pc, #724]	; (801a118 <__ieee754_exp+0x2e0>)
 8019e42:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8019e46:	428a      	cmp	r2, r1
 8019e48:	ed2d 8b04 	vpush	{d8-d9}
 8019e4c:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8019e50:	d93b      	bls.n	8019eca <__ieee754_exp+0x92>
 8019e52:	49b2      	ldr	r1, [pc, #712]	; (801a11c <__ieee754_exp+0x2e4>)
 8019e54:	428a      	cmp	r2, r1
 8019e56:	d916      	bls.n	8019e86 <__ieee754_exp+0x4e>
 8019e58:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8019e5c:	4323      	orrs	r3, r4
 8019e5e:	ee10 2a10 	vmov	r2, s0
 8019e62:	d007      	beq.n	8019e74 <__ieee754_exp+0x3c>
 8019e64:	462b      	mov	r3, r5
 8019e66:	4620      	mov	r0, r4
 8019e68:	4629      	mov	r1, r5
 8019e6a:	f7e6 fa2f 	bl	80002cc <__adddf3>
 8019e6e:	4604      	mov	r4, r0
 8019e70:	460d      	mov	r5, r1
 8019e72:	e002      	b.n	8019e7a <__ieee754_exp+0x42>
 8019e74:	b10e      	cbz	r6, 8019e7a <__ieee754_exp+0x42>
 8019e76:	2400      	movs	r4, #0
 8019e78:	2500      	movs	r5, #0
 8019e7a:	ecbd 8b04 	vpop	{d8-d9}
 8019e7e:	ec45 4b10 	vmov	d0, r4, r5
 8019e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019e86:	a38e      	add	r3, pc, #568	; (adr r3, 801a0c0 <__ieee754_exp+0x288>)
 8019e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e8c:	ee10 0a10 	vmov	r0, s0
 8019e90:	4629      	mov	r1, r5
 8019e92:	f7e6 fe61 	bl	8000b58 <__aeabi_dcmpgt>
 8019e96:	4607      	mov	r7, r0
 8019e98:	b130      	cbz	r0, 8019ea8 <__ieee754_exp+0x70>
 8019e9a:	ecbd 8b04 	vpop	{d8-d9}
 8019e9e:	2000      	movs	r0, #0
 8019ea0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019ea4:	f000 bb2d 	b.w	801a502 <__math_oflow>
 8019ea8:	a387      	add	r3, pc, #540	; (adr r3, 801a0c8 <__ieee754_exp+0x290>)
 8019eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019eae:	4620      	mov	r0, r4
 8019eb0:	4629      	mov	r1, r5
 8019eb2:	f7e6 fe33 	bl	8000b1c <__aeabi_dcmplt>
 8019eb6:	2800      	cmp	r0, #0
 8019eb8:	f000 808b 	beq.w	8019fd2 <__ieee754_exp+0x19a>
 8019ebc:	ecbd 8b04 	vpop	{d8-d9}
 8019ec0:	4638      	mov	r0, r7
 8019ec2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019ec6:	f000 bb13 	b.w	801a4f0 <__math_uflow>
 8019eca:	4b95      	ldr	r3, [pc, #596]	; (801a120 <__ieee754_exp+0x2e8>)
 8019ecc:	429a      	cmp	r2, r3
 8019ece:	f240 80ac 	bls.w	801a02a <__ieee754_exp+0x1f2>
 8019ed2:	4b94      	ldr	r3, [pc, #592]	; (801a124 <__ieee754_exp+0x2ec>)
 8019ed4:	429a      	cmp	r2, r3
 8019ed6:	d87c      	bhi.n	8019fd2 <__ieee754_exp+0x19a>
 8019ed8:	4b93      	ldr	r3, [pc, #588]	; (801a128 <__ieee754_exp+0x2f0>)
 8019eda:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8019ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ee2:	ee10 0a10 	vmov	r0, s0
 8019ee6:	4629      	mov	r1, r5
 8019ee8:	f7e6 f9ee 	bl	80002c8 <__aeabi_dsub>
 8019eec:	4b8f      	ldr	r3, [pc, #572]	; (801a12c <__ieee754_exp+0x2f4>)
 8019eee:	00f7      	lsls	r7, r6, #3
 8019ef0:	443b      	add	r3, r7
 8019ef2:	ed93 7b00 	vldr	d7, [r3]
 8019ef6:	f1c6 0a01 	rsb	sl, r6, #1
 8019efa:	4680      	mov	r8, r0
 8019efc:	4689      	mov	r9, r1
 8019efe:	ebaa 0a06 	sub.w	sl, sl, r6
 8019f02:	eeb0 8a47 	vmov.f32	s16, s14
 8019f06:	eef0 8a67 	vmov.f32	s17, s15
 8019f0a:	ec53 2b18 	vmov	r2, r3, d8
 8019f0e:	4640      	mov	r0, r8
 8019f10:	4649      	mov	r1, r9
 8019f12:	f7e6 f9d9 	bl	80002c8 <__aeabi_dsub>
 8019f16:	4604      	mov	r4, r0
 8019f18:	460d      	mov	r5, r1
 8019f1a:	4622      	mov	r2, r4
 8019f1c:	462b      	mov	r3, r5
 8019f1e:	4620      	mov	r0, r4
 8019f20:	4629      	mov	r1, r5
 8019f22:	f7e6 fb89 	bl	8000638 <__aeabi_dmul>
 8019f26:	a36a      	add	r3, pc, #424	; (adr r3, 801a0d0 <__ieee754_exp+0x298>)
 8019f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f2c:	4606      	mov	r6, r0
 8019f2e:	460f      	mov	r7, r1
 8019f30:	f7e6 fb82 	bl	8000638 <__aeabi_dmul>
 8019f34:	a368      	add	r3, pc, #416	; (adr r3, 801a0d8 <__ieee754_exp+0x2a0>)
 8019f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f3a:	f7e6 f9c5 	bl	80002c8 <__aeabi_dsub>
 8019f3e:	4632      	mov	r2, r6
 8019f40:	463b      	mov	r3, r7
 8019f42:	f7e6 fb79 	bl	8000638 <__aeabi_dmul>
 8019f46:	a366      	add	r3, pc, #408	; (adr r3, 801a0e0 <__ieee754_exp+0x2a8>)
 8019f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f4c:	f7e6 f9be 	bl	80002cc <__adddf3>
 8019f50:	4632      	mov	r2, r6
 8019f52:	463b      	mov	r3, r7
 8019f54:	f7e6 fb70 	bl	8000638 <__aeabi_dmul>
 8019f58:	a363      	add	r3, pc, #396	; (adr r3, 801a0e8 <__ieee754_exp+0x2b0>)
 8019f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f5e:	f7e6 f9b3 	bl	80002c8 <__aeabi_dsub>
 8019f62:	4632      	mov	r2, r6
 8019f64:	463b      	mov	r3, r7
 8019f66:	f7e6 fb67 	bl	8000638 <__aeabi_dmul>
 8019f6a:	a361      	add	r3, pc, #388	; (adr r3, 801a0f0 <__ieee754_exp+0x2b8>)
 8019f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f70:	f7e6 f9ac 	bl	80002cc <__adddf3>
 8019f74:	4632      	mov	r2, r6
 8019f76:	463b      	mov	r3, r7
 8019f78:	f7e6 fb5e 	bl	8000638 <__aeabi_dmul>
 8019f7c:	4602      	mov	r2, r0
 8019f7e:	460b      	mov	r3, r1
 8019f80:	4620      	mov	r0, r4
 8019f82:	4629      	mov	r1, r5
 8019f84:	f7e6 f9a0 	bl	80002c8 <__aeabi_dsub>
 8019f88:	4602      	mov	r2, r0
 8019f8a:	460b      	mov	r3, r1
 8019f8c:	4606      	mov	r6, r0
 8019f8e:	460f      	mov	r7, r1
 8019f90:	4620      	mov	r0, r4
 8019f92:	4629      	mov	r1, r5
 8019f94:	f7e6 fb50 	bl	8000638 <__aeabi_dmul>
 8019f98:	ec41 0b19 	vmov	d9, r0, r1
 8019f9c:	f1ba 0f00 	cmp.w	sl, #0
 8019fa0:	d15d      	bne.n	801a05e <__ieee754_exp+0x226>
 8019fa2:	2200      	movs	r2, #0
 8019fa4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8019fa8:	4630      	mov	r0, r6
 8019faa:	4639      	mov	r1, r7
 8019fac:	f7e6 f98c 	bl	80002c8 <__aeabi_dsub>
 8019fb0:	4602      	mov	r2, r0
 8019fb2:	460b      	mov	r3, r1
 8019fb4:	ec51 0b19 	vmov	r0, r1, d9
 8019fb8:	f7e6 fc68 	bl	800088c <__aeabi_ddiv>
 8019fbc:	4622      	mov	r2, r4
 8019fbe:	462b      	mov	r3, r5
 8019fc0:	f7e6 f982 	bl	80002c8 <__aeabi_dsub>
 8019fc4:	4602      	mov	r2, r0
 8019fc6:	460b      	mov	r3, r1
 8019fc8:	2000      	movs	r0, #0
 8019fca:	4959      	ldr	r1, [pc, #356]	; (801a130 <__ieee754_exp+0x2f8>)
 8019fcc:	f7e6 f97c 	bl	80002c8 <__aeabi_dsub>
 8019fd0:	e74d      	b.n	8019e6e <__ieee754_exp+0x36>
 8019fd2:	4b58      	ldr	r3, [pc, #352]	; (801a134 <__ieee754_exp+0x2fc>)
 8019fd4:	4620      	mov	r0, r4
 8019fd6:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8019fda:	4629      	mov	r1, r5
 8019fdc:	a346      	add	r3, pc, #280	; (adr r3, 801a0f8 <__ieee754_exp+0x2c0>)
 8019fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fe2:	f7e6 fb29 	bl	8000638 <__aeabi_dmul>
 8019fe6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8019fea:	f7e6 f96f 	bl	80002cc <__adddf3>
 8019fee:	f7e6 fdd3 	bl	8000b98 <__aeabi_d2iz>
 8019ff2:	4682      	mov	sl, r0
 8019ff4:	f7e6 fab6 	bl	8000564 <__aeabi_i2d>
 8019ff8:	a341      	add	r3, pc, #260	; (adr r3, 801a100 <__ieee754_exp+0x2c8>)
 8019ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ffe:	4606      	mov	r6, r0
 801a000:	460f      	mov	r7, r1
 801a002:	f7e6 fb19 	bl	8000638 <__aeabi_dmul>
 801a006:	4602      	mov	r2, r0
 801a008:	460b      	mov	r3, r1
 801a00a:	4620      	mov	r0, r4
 801a00c:	4629      	mov	r1, r5
 801a00e:	f7e6 f95b 	bl	80002c8 <__aeabi_dsub>
 801a012:	a33d      	add	r3, pc, #244	; (adr r3, 801a108 <__ieee754_exp+0x2d0>)
 801a014:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a018:	4680      	mov	r8, r0
 801a01a:	4689      	mov	r9, r1
 801a01c:	4630      	mov	r0, r6
 801a01e:	4639      	mov	r1, r7
 801a020:	f7e6 fb0a 	bl	8000638 <__aeabi_dmul>
 801a024:	ec41 0b18 	vmov	d8, r0, r1
 801a028:	e76f      	b.n	8019f0a <__ieee754_exp+0xd2>
 801a02a:	4b43      	ldr	r3, [pc, #268]	; (801a138 <__ieee754_exp+0x300>)
 801a02c:	429a      	cmp	r2, r3
 801a02e:	d811      	bhi.n	801a054 <__ieee754_exp+0x21c>
 801a030:	a337      	add	r3, pc, #220	; (adr r3, 801a110 <__ieee754_exp+0x2d8>)
 801a032:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a036:	ee10 0a10 	vmov	r0, s0
 801a03a:	4629      	mov	r1, r5
 801a03c:	f7e6 f946 	bl	80002cc <__adddf3>
 801a040:	4b3b      	ldr	r3, [pc, #236]	; (801a130 <__ieee754_exp+0x2f8>)
 801a042:	2200      	movs	r2, #0
 801a044:	f7e6 fd88 	bl	8000b58 <__aeabi_dcmpgt>
 801a048:	b138      	cbz	r0, 801a05a <__ieee754_exp+0x222>
 801a04a:	4b39      	ldr	r3, [pc, #228]	; (801a130 <__ieee754_exp+0x2f8>)
 801a04c:	2200      	movs	r2, #0
 801a04e:	4620      	mov	r0, r4
 801a050:	4629      	mov	r1, r5
 801a052:	e70a      	b.n	8019e6a <__ieee754_exp+0x32>
 801a054:	f04f 0a00 	mov.w	sl, #0
 801a058:	e75f      	b.n	8019f1a <__ieee754_exp+0xe2>
 801a05a:	4682      	mov	sl, r0
 801a05c:	e75d      	b.n	8019f1a <__ieee754_exp+0xe2>
 801a05e:	4632      	mov	r2, r6
 801a060:	463b      	mov	r3, r7
 801a062:	2000      	movs	r0, #0
 801a064:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 801a068:	f7e6 f92e 	bl	80002c8 <__aeabi_dsub>
 801a06c:	4602      	mov	r2, r0
 801a06e:	460b      	mov	r3, r1
 801a070:	ec51 0b19 	vmov	r0, r1, d9
 801a074:	f7e6 fc0a 	bl	800088c <__aeabi_ddiv>
 801a078:	4602      	mov	r2, r0
 801a07a:	460b      	mov	r3, r1
 801a07c:	ec51 0b18 	vmov	r0, r1, d8
 801a080:	f7e6 f922 	bl	80002c8 <__aeabi_dsub>
 801a084:	4642      	mov	r2, r8
 801a086:	464b      	mov	r3, r9
 801a088:	f7e6 f91e 	bl	80002c8 <__aeabi_dsub>
 801a08c:	4602      	mov	r2, r0
 801a08e:	460b      	mov	r3, r1
 801a090:	2000      	movs	r0, #0
 801a092:	4927      	ldr	r1, [pc, #156]	; (801a130 <__ieee754_exp+0x2f8>)
 801a094:	f7e6 f918 	bl	80002c8 <__aeabi_dsub>
 801a098:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 801a09c:	4592      	cmp	sl, r2
 801a09e:	db02      	blt.n	801a0a6 <__ieee754_exp+0x26e>
 801a0a0:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 801a0a4:	e6e3      	b.n	8019e6e <__ieee754_exp+0x36>
 801a0a6:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 801a0aa:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 801a0ae:	2200      	movs	r2, #0
 801a0b0:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 801a0b4:	f7e6 fac0 	bl	8000638 <__aeabi_dmul>
 801a0b8:	e6d9      	b.n	8019e6e <__ieee754_exp+0x36>
 801a0ba:	bf00      	nop
 801a0bc:	f3af 8000 	nop.w
 801a0c0:	fefa39ef 	.word	0xfefa39ef
 801a0c4:	40862e42 	.word	0x40862e42
 801a0c8:	d52d3051 	.word	0xd52d3051
 801a0cc:	c0874910 	.word	0xc0874910
 801a0d0:	72bea4d0 	.word	0x72bea4d0
 801a0d4:	3e663769 	.word	0x3e663769
 801a0d8:	c5d26bf1 	.word	0xc5d26bf1
 801a0dc:	3ebbbd41 	.word	0x3ebbbd41
 801a0e0:	af25de2c 	.word	0xaf25de2c
 801a0e4:	3f11566a 	.word	0x3f11566a
 801a0e8:	16bebd93 	.word	0x16bebd93
 801a0ec:	3f66c16c 	.word	0x3f66c16c
 801a0f0:	5555553e 	.word	0x5555553e
 801a0f4:	3fc55555 	.word	0x3fc55555
 801a0f8:	652b82fe 	.word	0x652b82fe
 801a0fc:	3ff71547 	.word	0x3ff71547
 801a100:	fee00000 	.word	0xfee00000
 801a104:	3fe62e42 	.word	0x3fe62e42
 801a108:	35793c76 	.word	0x35793c76
 801a10c:	3dea39ef 	.word	0x3dea39ef
 801a110:	8800759c 	.word	0x8800759c
 801a114:	7e37e43c 	.word	0x7e37e43c
 801a118:	40862e41 	.word	0x40862e41
 801a11c:	7fefffff 	.word	0x7fefffff
 801a120:	3fd62e42 	.word	0x3fd62e42
 801a124:	3ff0a2b1 	.word	0x3ff0a2b1
 801a128:	08025790 	.word	0x08025790
 801a12c:	080257a0 	.word	0x080257a0
 801a130:	3ff00000 	.word	0x3ff00000
 801a134:	08025780 	.word	0x08025780
 801a138:	3defffff 	.word	0x3defffff
 801a13c:	00000000 	.word	0x00000000

0801a140 <__ieee754_log>:
 801a140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a144:	ec51 0b10 	vmov	r0, r1, d0
 801a148:	ed2d 8b04 	vpush	{d8-d9}
 801a14c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 801a150:	b083      	sub	sp, #12
 801a152:	460d      	mov	r5, r1
 801a154:	da29      	bge.n	801a1aa <__ieee754_log+0x6a>
 801a156:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801a15a:	4303      	orrs	r3, r0
 801a15c:	ee10 2a10 	vmov	r2, s0
 801a160:	d10c      	bne.n	801a17c <__ieee754_log+0x3c>
 801a162:	49cf      	ldr	r1, [pc, #828]	; (801a4a0 <__ieee754_log+0x360>)
 801a164:	2200      	movs	r2, #0
 801a166:	2300      	movs	r3, #0
 801a168:	2000      	movs	r0, #0
 801a16a:	f7e6 fb8f 	bl	800088c <__aeabi_ddiv>
 801a16e:	ec41 0b10 	vmov	d0, r0, r1
 801a172:	b003      	add	sp, #12
 801a174:	ecbd 8b04 	vpop	{d8-d9}
 801a178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a17c:	2900      	cmp	r1, #0
 801a17e:	da05      	bge.n	801a18c <__ieee754_log+0x4c>
 801a180:	460b      	mov	r3, r1
 801a182:	f7e6 f8a1 	bl	80002c8 <__aeabi_dsub>
 801a186:	2200      	movs	r2, #0
 801a188:	2300      	movs	r3, #0
 801a18a:	e7ee      	b.n	801a16a <__ieee754_log+0x2a>
 801a18c:	4bc5      	ldr	r3, [pc, #788]	; (801a4a4 <__ieee754_log+0x364>)
 801a18e:	2200      	movs	r2, #0
 801a190:	f7e6 fa52 	bl	8000638 <__aeabi_dmul>
 801a194:	f06f 0335 	mvn.w	r3, #53	; 0x35
 801a198:	460d      	mov	r5, r1
 801a19a:	4ac3      	ldr	r2, [pc, #780]	; (801a4a8 <__ieee754_log+0x368>)
 801a19c:	4295      	cmp	r5, r2
 801a19e:	dd06      	ble.n	801a1ae <__ieee754_log+0x6e>
 801a1a0:	4602      	mov	r2, r0
 801a1a2:	460b      	mov	r3, r1
 801a1a4:	f7e6 f892 	bl	80002cc <__adddf3>
 801a1a8:	e7e1      	b.n	801a16e <__ieee754_log+0x2e>
 801a1aa:	2300      	movs	r3, #0
 801a1ac:	e7f5      	b.n	801a19a <__ieee754_log+0x5a>
 801a1ae:	152c      	asrs	r4, r5, #20
 801a1b0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 801a1b4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 801a1b8:	441c      	add	r4, r3
 801a1ba:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 801a1be:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 801a1c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801a1c6:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 801a1ca:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 801a1ce:	ea42 0105 	orr.w	r1, r2, r5
 801a1d2:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 801a1d6:	2200      	movs	r2, #0
 801a1d8:	4bb4      	ldr	r3, [pc, #720]	; (801a4ac <__ieee754_log+0x36c>)
 801a1da:	f7e6 f875 	bl	80002c8 <__aeabi_dsub>
 801a1de:	1cab      	adds	r3, r5, #2
 801a1e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801a1e4:	2b02      	cmp	r3, #2
 801a1e6:	4682      	mov	sl, r0
 801a1e8:	468b      	mov	fp, r1
 801a1ea:	f04f 0200 	mov.w	r2, #0
 801a1ee:	dc53      	bgt.n	801a298 <__ieee754_log+0x158>
 801a1f0:	2300      	movs	r3, #0
 801a1f2:	f7e6 fc89 	bl	8000b08 <__aeabi_dcmpeq>
 801a1f6:	b1d0      	cbz	r0, 801a22e <__ieee754_log+0xee>
 801a1f8:	2c00      	cmp	r4, #0
 801a1fa:	f000 8122 	beq.w	801a442 <__ieee754_log+0x302>
 801a1fe:	4620      	mov	r0, r4
 801a200:	f7e6 f9b0 	bl	8000564 <__aeabi_i2d>
 801a204:	a390      	add	r3, pc, #576	; (adr r3, 801a448 <__ieee754_log+0x308>)
 801a206:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a20a:	4606      	mov	r6, r0
 801a20c:	460f      	mov	r7, r1
 801a20e:	f7e6 fa13 	bl	8000638 <__aeabi_dmul>
 801a212:	a38f      	add	r3, pc, #572	; (adr r3, 801a450 <__ieee754_log+0x310>)
 801a214:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a218:	4604      	mov	r4, r0
 801a21a:	460d      	mov	r5, r1
 801a21c:	4630      	mov	r0, r6
 801a21e:	4639      	mov	r1, r7
 801a220:	f7e6 fa0a 	bl	8000638 <__aeabi_dmul>
 801a224:	4602      	mov	r2, r0
 801a226:	460b      	mov	r3, r1
 801a228:	4620      	mov	r0, r4
 801a22a:	4629      	mov	r1, r5
 801a22c:	e7ba      	b.n	801a1a4 <__ieee754_log+0x64>
 801a22e:	a38a      	add	r3, pc, #552	; (adr r3, 801a458 <__ieee754_log+0x318>)
 801a230:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a234:	4650      	mov	r0, sl
 801a236:	4659      	mov	r1, fp
 801a238:	f7e6 f9fe 	bl	8000638 <__aeabi_dmul>
 801a23c:	4602      	mov	r2, r0
 801a23e:	460b      	mov	r3, r1
 801a240:	2000      	movs	r0, #0
 801a242:	499b      	ldr	r1, [pc, #620]	; (801a4b0 <__ieee754_log+0x370>)
 801a244:	f7e6 f840 	bl	80002c8 <__aeabi_dsub>
 801a248:	4652      	mov	r2, sl
 801a24a:	4606      	mov	r6, r0
 801a24c:	460f      	mov	r7, r1
 801a24e:	465b      	mov	r3, fp
 801a250:	4650      	mov	r0, sl
 801a252:	4659      	mov	r1, fp
 801a254:	f7e6 f9f0 	bl	8000638 <__aeabi_dmul>
 801a258:	4602      	mov	r2, r0
 801a25a:	460b      	mov	r3, r1
 801a25c:	4630      	mov	r0, r6
 801a25e:	4639      	mov	r1, r7
 801a260:	f7e6 f9ea 	bl	8000638 <__aeabi_dmul>
 801a264:	4606      	mov	r6, r0
 801a266:	460f      	mov	r7, r1
 801a268:	b914      	cbnz	r4, 801a270 <__ieee754_log+0x130>
 801a26a:	4632      	mov	r2, r6
 801a26c:	463b      	mov	r3, r7
 801a26e:	e0a2      	b.n	801a3b6 <__ieee754_log+0x276>
 801a270:	4620      	mov	r0, r4
 801a272:	f7e6 f977 	bl	8000564 <__aeabi_i2d>
 801a276:	a374      	add	r3, pc, #464	; (adr r3, 801a448 <__ieee754_log+0x308>)
 801a278:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a27c:	4680      	mov	r8, r0
 801a27e:	4689      	mov	r9, r1
 801a280:	f7e6 f9da 	bl	8000638 <__aeabi_dmul>
 801a284:	a372      	add	r3, pc, #456	; (adr r3, 801a450 <__ieee754_log+0x310>)
 801a286:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a28a:	4604      	mov	r4, r0
 801a28c:	460d      	mov	r5, r1
 801a28e:	4640      	mov	r0, r8
 801a290:	4649      	mov	r1, r9
 801a292:	f7e6 f9d1 	bl	8000638 <__aeabi_dmul>
 801a296:	e0a7      	b.n	801a3e8 <__ieee754_log+0x2a8>
 801a298:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801a29c:	f7e6 f816 	bl	80002cc <__adddf3>
 801a2a0:	4602      	mov	r2, r0
 801a2a2:	460b      	mov	r3, r1
 801a2a4:	4650      	mov	r0, sl
 801a2a6:	4659      	mov	r1, fp
 801a2a8:	f7e6 faf0 	bl	800088c <__aeabi_ddiv>
 801a2ac:	ec41 0b18 	vmov	d8, r0, r1
 801a2b0:	4620      	mov	r0, r4
 801a2b2:	f7e6 f957 	bl	8000564 <__aeabi_i2d>
 801a2b6:	ec53 2b18 	vmov	r2, r3, d8
 801a2ba:	ec41 0b19 	vmov	d9, r0, r1
 801a2be:	ec51 0b18 	vmov	r0, r1, d8
 801a2c2:	f7e6 f9b9 	bl	8000638 <__aeabi_dmul>
 801a2c6:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 801a2ca:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 801a2ce:	9301      	str	r3, [sp, #4]
 801a2d0:	4602      	mov	r2, r0
 801a2d2:	460b      	mov	r3, r1
 801a2d4:	4680      	mov	r8, r0
 801a2d6:	4689      	mov	r9, r1
 801a2d8:	f7e6 f9ae 	bl	8000638 <__aeabi_dmul>
 801a2dc:	a360      	add	r3, pc, #384	; (adr r3, 801a460 <__ieee754_log+0x320>)
 801a2de:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2e2:	4606      	mov	r6, r0
 801a2e4:	460f      	mov	r7, r1
 801a2e6:	f7e6 f9a7 	bl	8000638 <__aeabi_dmul>
 801a2ea:	a35f      	add	r3, pc, #380	; (adr r3, 801a468 <__ieee754_log+0x328>)
 801a2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2f0:	f7e5 ffec 	bl	80002cc <__adddf3>
 801a2f4:	4632      	mov	r2, r6
 801a2f6:	463b      	mov	r3, r7
 801a2f8:	f7e6 f99e 	bl	8000638 <__aeabi_dmul>
 801a2fc:	a35c      	add	r3, pc, #368	; (adr r3, 801a470 <__ieee754_log+0x330>)
 801a2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a302:	f7e5 ffe3 	bl	80002cc <__adddf3>
 801a306:	4632      	mov	r2, r6
 801a308:	463b      	mov	r3, r7
 801a30a:	f7e6 f995 	bl	8000638 <__aeabi_dmul>
 801a30e:	a35a      	add	r3, pc, #360	; (adr r3, 801a478 <__ieee754_log+0x338>)
 801a310:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a314:	f7e5 ffda 	bl	80002cc <__adddf3>
 801a318:	4642      	mov	r2, r8
 801a31a:	464b      	mov	r3, r9
 801a31c:	f7e6 f98c 	bl	8000638 <__aeabi_dmul>
 801a320:	a357      	add	r3, pc, #348	; (adr r3, 801a480 <__ieee754_log+0x340>)
 801a322:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a326:	4680      	mov	r8, r0
 801a328:	4689      	mov	r9, r1
 801a32a:	4630      	mov	r0, r6
 801a32c:	4639      	mov	r1, r7
 801a32e:	f7e6 f983 	bl	8000638 <__aeabi_dmul>
 801a332:	a355      	add	r3, pc, #340	; (adr r3, 801a488 <__ieee754_log+0x348>)
 801a334:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a338:	f7e5 ffc8 	bl	80002cc <__adddf3>
 801a33c:	4632      	mov	r2, r6
 801a33e:	463b      	mov	r3, r7
 801a340:	f7e6 f97a 	bl	8000638 <__aeabi_dmul>
 801a344:	a352      	add	r3, pc, #328	; (adr r3, 801a490 <__ieee754_log+0x350>)
 801a346:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a34a:	f7e5 ffbf 	bl	80002cc <__adddf3>
 801a34e:	4632      	mov	r2, r6
 801a350:	463b      	mov	r3, r7
 801a352:	f7e6 f971 	bl	8000638 <__aeabi_dmul>
 801a356:	460b      	mov	r3, r1
 801a358:	4602      	mov	r2, r0
 801a35a:	4649      	mov	r1, r9
 801a35c:	4640      	mov	r0, r8
 801a35e:	f7e5 ffb5 	bl	80002cc <__adddf3>
 801a362:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 801a366:	9b01      	ldr	r3, [sp, #4]
 801a368:	3551      	adds	r5, #81	; 0x51
 801a36a:	431d      	orrs	r5, r3
 801a36c:	2d00      	cmp	r5, #0
 801a36e:	4680      	mov	r8, r0
 801a370:	4689      	mov	r9, r1
 801a372:	dd48      	ble.n	801a406 <__ieee754_log+0x2c6>
 801a374:	4b4e      	ldr	r3, [pc, #312]	; (801a4b0 <__ieee754_log+0x370>)
 801a376:	2200      	movs	r2, #0
 801a378:	4650      	mov	r0, sl
 801a37a:	4659      	mov	r1, fp
 801a37c:	f7e6 f95c 	bl	8000638 <__aeabi_dmul>
 801a380:	4652      	mov	r2, sl
 801a382:	465b      	mov	r3, fp
 801a384:	f7e6 f958 	bl	8000638 <__aeabi_dmul>
 801a388:	4602      	mov	r2, r0
 801a38a:	460b      	mov	r3, r1
 801a38c:	4606      	mov	r6, r0
 801a38e:	460f      	mov	r7, r1
 801a390:	4640      	mov	r0, r8
 801a392:	4649      	mov	r1, r9
 801a394:	f7e5 ff9a 	bl	80002cc <__adddf3>
 801a398:	ec53 2b18 	vmov	r2, r3, d8
 801a39c:	f7e6 f94c 	bl	8000638 <__aeabi_dmul>
 801a3a0:	4680      	mov	r8, r0
 801a3a2:	4689      	mov	r9, r1
 801a3a4:	b964      	cbnz	r4, 801a3c0 <__ieee754_log+0x280>
 801a3a6:	4602      	mov	r2, r0
 801a3a8:	460b      	mov	r3, r1
 801a3aa:	4630      	mov	r0, r6
 801a3ac:	4639      	mov	r1, r7
 801a3ae:	f7e5 ff8b 	bl	80002c8 <__aeabi_dsub>
 801a3b2:	4602      	mov	r2, r0
 801a3b4:	460b      	mov	r3, r1
 801a3b6:	4650      	mov	r0, sl
 801a3b8:	4659      	mov	r1, fp
 801a3ba:	f7e5 ff85 	bl	80002c8 <__aeabi_dsub>
 801a3be:	e6d6      	b.n	801a16e <__ieee754_log+0x2e>
 801a3c0:	a321      	add	r3, pc, #132	; (adr r3, 801a448 <__ieee754_log+0x308>)
 801a3c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3c6:	ec51 0b19 	vmov	r0, r1, d9
 801a3ca:	f7e6 f935 	bl	8000638 <__aeabi_dmul>
 801a3ce:	a320      	add	r3, pc, #128	; (adr r3, 801a450 <__ieee754_log+0x310>)
 801a3d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3d4:	4604      	mov	r4, r0
 801a3d6:	460d      	mov	r5, r1
 801a3d8:	ec51 0b19 	vmov	r0, r1, d9
 801a3dc:	f7e6 f92c 	bl	8000638 <__aeabi_dmul>
 801a3e0:	4642      	mov	r2, r8
 801a3e2:	464b      	mov	r3, r9
 801a3e4:	f7e5 ff72 	bl	80002cc <__adddf3>
 801a3e8:	4602      	mov	r2, r0
 801a3ea:	460b      	mov	r3, r1
 801a3ec:	4630      	mov	r0, r6
 801a3ee:	4639      	mov	r1, r7
 801a3f0:	f7e5 ff6a 	bl	80002c8 <__aeabi_dsub>
 801a3f4:	4652      	mov	r2, sl
 801a3f6:	465b      	mov	r3, fp
 801a3f8:	f7e5 ff66 	bl	80002c8 <__aeabi_dsub>
 801a3fc:	4602      	mov	r2, r0
 801a3fe:	460b      	mov	r3, r1
 801a400:	4620      	mov	r0, r4
 801a402:	4629      	mov	r1, r5
 801a404:	e7d9      	b.n	801a3ba <__ieee754_log+0x27a>
 801a406:	4602      	mov	r2, r0
 801a408:	460b      	mov	r3, r1
 801a40a:	4650      	mov	r0, sl
 801a40c:	4659      	mov	r1, fp
 801a40e:	f7e5 ff5b 	bl	80002c8 <__aeabi_dsub>
 801a412:	ec53 2b18 	vmov	r2, r3, d8
 801a416:	f7e6 f90f 	bl	8000638 <__aeabi_dmul>
 801a41a:	4606      	mov	r6, r0
 801a41c:	460f      	mov	r7, r1
 801a41e:	2c00      	cmp	r4, #0
 801a420:	f43f af23 	beq.w	801a26a <__ieee754_log+0x12a>
 801a424:	a308      	add	r3, pc, #32	; (adr r3, 801a448 <__ieee754_log+0x308>)
 801a426:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a42a:	ec51 0b19 	vmov	r0, r1, d9
 801a42e:	f7e6 f903 	bl	8000638 <__aeabi_dmul>
 801a432:	a307      	add	r3, pc, #28	; (adr r3, 801a450 <__ieee754_log+0x310>)
 801a434:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a438:	4604      	mov	r4, r0
 801a43a:	460d      	mov	r5, r1
 801a43c:	ec51 0b19 	vmov	r0, r1, d9
 801a440:	e727      	b.n	801a292 <__ieee754_log+0x152>
 801a442:	ed9f 0b15 	vldr	d0, [pc, #84]	; 801a498 <__ieee754_log+0x358>
 801a446:	e694      	b.n	801a172 <__ieee754_log+0x32>
 801a448:	fee00000 	.word	0xfee00000
 801a44c:	3fe62e42 	.word	0x3fe62e42
 801a450:	35793c76 	.word	0x35793c76
 801a454:	3dea39ef 	.word	0x3dea39ef
 801a458:	55555555 	.word	0x55555555
 801a45c:	3fd55555 	.word	0x3fd55555
 801a460:	df3e5244 	.word	0xdf3e5244
 801a464:	3fc2f112 	.word	0x3fc2f112
 801a468:	96cb03de 	.word	0x96cb03de
 801a46c:	3fc74664 	.word	0x3fc74664
 801a470:	94229359 	.word	0x94229359
 801a474:	3fd24924 	.word	0x3fd24924
 801a478:	55555593 	.word	0x55555593
 801a47c:	3fe55555 	.word	0x3fe55555
 801a480:	d078c69f 	.word	0xd078c69f
 801a484:	3fc39a09 	.word	0x3fc39a09
 801a488:	1d8e78af 	.word	0x1d8e78af
 801a48c:	3fcc71c5 	.word	0x3fcc71c5
 801a490:	9997fa04 	.word	0x9997fa04
 801a494:	3fd99999 	.word	0x3fd99999
	...
 801a4a0:	c3500000 	.word	0xc3500000
 801a4a4:	43500000 	.word	0x43500000
 801a4a8:	7fefffff 	.word	0x7fefffff
 801a4ac:	3ff00000 	.word	0x3ff00000
 801a4b0:	3fe00000 	.word	0x3fe00000

0801a4b4 <with_errno>:
 801a4b4:	b570      	push	{r4, r5, r6, lr}
 801a4b6:	4604      	mov	r4, r0
 801a4b8:	460d      	mov	r5, r1
 801a4ba:	4616      	mov	r6, r2
 801a4bc:	f001 fa04 	bl	801b8c8 <__errno>
 801a4c0:	4629      	mov	r1, r5
 801a4c2:	6006      	str	r6, [r0, #0]
 801a4c4:	4620      	mov	r0, r4
 801a4c6:	bd70      	pop	{r4, r5, r6, pc}

0801a4c8 <xflow>:
 801a4c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a4ca:	4614      	mov	r4, r2
 801a4cc:	461d      	mov	r5, r3
 801a4ce:	b108      	cbz	r0, 801a4d4 <xflow+0xc>
 801a4d0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801a4d4:	e9cd 2300 	strd	r2, r3, [sp]
 801a4d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a4dc:	4620      	mov	r0, r4
 801a4de:	4629      	mov	r1, r5
 801a4e0:	f7e6 f8aa 	bl	8000638 <__aeabi_dmul>
 801a4e4:	2222      	movs	r2, #34	; 0x22
 801a4e6:	b003      	add	sp, #12
 801a4e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a4ec:	f7ff bfe2 	b.w	801a4b4 <with_errno>

0801a4f0 <__math_uflow>:
 801a4f0:	b508      	push	{r3, lr}
 801a4f2:	2200      	movs	r2, #0
 801a4f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801a4f8:	f7ff ffe6 	bl	801a4c8 <xflow>
 801a4fc:	ec41 0b10 	vmov	d0, r0, r1
 801a500:	bd08      	pop	{r3, pc}

0801a502 <__math_oflow>:
 801a502:	b508      	push	{r3, lr}
 801a504:	2200      	movs	r2, #0
 801a506:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801a50a:	f7ff ffdd 	bl	801a4c8 <xflow>
 801a50e:	ec41 0b10 	vmov	d0, r0, r1
 801a512:	bd08      	pop	{r3, pc}

0801a514 <calloc>:
 801a514:	4b02      	ldr	r3, [pc, #8]	; (801a520 <calloc+0xc>)
 801a516:	460a      	mov	r2, r1
 801a518:	4601      	mov	r1, r0
 801a51a:	6818      	ldr	r0, [r3, #0]
 801a51c:	f000 b802 	b.w	801a524 <_calloc_r>
 801a520:	200001c0 	.word	0x200001c0

0801a524 <_calloc_r>:
 801a524:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a526:	fba1 2402 	umull	r2, r4, r1, r2
 801a52a:	b94c      	cbnz	r4, 801a540 <_calloc_r+0x1c>
 801a52c:	4611      	mov	r1, r2
 801a52e:	9201      	str	r2, [sp, #4]
 801a530:	f000 f850 	bl	801a5d4 <_malloc_r>
 801a534:	9a01      	ldr	r2, [sp, #4]
 801a536:	4605      	mov	r5, r0
 801a538:	b930      	cbnz	r0, 801a548 <_calloc_r+0x24>
 801a53a:	4628      	mov	r0, r5
 801a53c:	b003      	add	sp, #12
 801a53e:	bd30      	pop	{r4, r5, pc}
 801a540:	220c      	movs	r2, #12
 801a542:	6002      	str	r2, [r0, #0]
 801a544:	2500      	movs	r5, #0
 801a546:	e7f8      	b.n	801a53a <_calloc_r+0x16>
 801a548:	4621      	mov	r1, r4
 801a54a:	f001 f95b 	bl	801b804 <memset>
 801a54e:	e7f4      	b.n	801a53a <_calloc_r+0x16>

0801a550 <exit>:
 801a550:	b508      	push	{r3, lr}
 801a552:	4b06      	ldr	r3, [pc, #24]	; (801a56c <exit+0x1c>)
 801a554:	4604      	mov	r4, r0
 801a556:	b113      	cbz	r3, 801a55e <exit+0xe>
 801a558:	2100      	movs	r1, #0
 801a55a:	f3af 8000 	nop.w
 801a55e:	4b04      	ldr	r3, [pc, #16]	; (801a570 <exit+0x20>)
 801a560:	681b      	ldr	r3, [r3, #0]
 801a562:	b103      	cbz	r3, 801a566 <exit+0x16>
 801a564:	4798      	blx	r3
 801a566:	4620      	mov	r0, r4
 801a568:	f004 fc66 	bl	801ee38 <_exit>
 801a56c:	00000000 	.word	0x00000000
 801a570:	20013790 	.word	0x20013790

0801a574 <malloc>:
 801a574:	4b02      	ldr	r3, [pc, #8]	; (801a580 <malloc+0xc>)
 801a576:	4601      	mov	r1, r0
 801a578:	6818      	ldr	r0, [r3, #0]
 801a57a:	f000 b82b 	b.w	801a5d4 <_malloc_r>
 801a57e:	bf00      	nop
 801a580:	200001c0 	.word	0x200001c0

0801a584 <free>:
 801a584:	4b02      	ldr	r3, [pc, #8]	; (801a590 <free+0xc>)
 801a586:	4601      	mov	r1, r0
 801a588:	6818      	ldr	r0, [r3, #0]
 801a58a:	f002 b85b 	b.w	801c644 <_free_r>
 801a58e:	bf00      	nop
 801a590:	200001c0 	.word	0x200001c0

0801a594 <sbrk_aligned>:
 801a594:	b570      	push	{r4, r5, r6, lr}
 801a596:	4e0e      	ldr	r6, [pc, #56]	; (801a5d0 <sbrk_aligned+0x3c>)
 801a598:	460c      	mov	r4, r1
 801a59a:	6831      	ldr	r1, [r6, #0]
 801a59c:	4605      	mov	r5, r0
 801a59e:	b911      	cbnz	r1, 801a5a6 <sbrk_aligned+0x12>
 801a5a0:	f001 f970 	bl	801b884 <_sbrk_r>
 801a5a4:	6030      	str	r0, [r6, #0]
 801a5a6:	4621      	mov	r1, r4
 801a5a8:	4628      	mov	r0, r5
 801a5aa:	f001 f96b 	bl	801b884 <_sbrk_r>
 801a5ae:	1c43      	adds	r3, r0, #1
 801a5b0:	d00a      	beq.n	801a5c8 <sbrk_aligned+0x34>
 801a5b2:	1cc4      	adds	r4, r0, #3
 801a5b4:	f024 0403 	bic.w	r4, r4, #3
 801a5b8:	42a0      	cmp	r0, r4
 801a5ba:	d007      	beq.n	801a5cc <sbrk_aligned+0x38>
 801a5bc:	1a21      	subs	r1, r4, r0
 801a5be:	4628      	mov	r0, r5
 801a5c0:	f001 f960 	bl	801b884 <_sbrk_r>
 801a5c4:	3001      	adds	r0, #1
 801a5c6:	d101      	bne.n	801a5cc <sbrk_aligned+0x38>
 801a5c8:	f04f 34ff 	mov.w	r4, #4294967295
 801a5cc:	4620      	mov	r0, r4
 801a5ce:	bd70      	pop	{r4, r5, r6, pc}
 801a5d0:	20013654 	.word	0x20013654

0801a5d4 <_malloc_r>:
 801a5d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a5d8:	1ccd      	adds	r5, r1, #3
 801a5da:	f025 0503 	bic.w	r5, r5, #3
 801a5de:	3508      	adds	r5, #8
 801a5e0:	2d0c      	cmp	r5, #12
 801a5e2:	bf38      	it	cc
 801a5e4:	250c      	movcc	r5, #12
 801a5e6:	2d00      	cmp	r5, #0
 801a5e8:	4607      	mov	r7, r0
 801a5ea:	db01      	blt.n	801a5f0 <_malloc_r+0x1c>
 801a5ec:	42a9      	cmp	r1, r5
 801a5ee:	d905      	bls.n	801a5fc <_malloc_r+0x28>
 801a5f0:	230c      	movs	r3, #12
 801a5f2:	603b      	str	r3, [r7, #0]
 801a5f4:	2600      	movs	r6, #0
 801a5f6:	4630      	mov	r0, r6
 801a5f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a5fc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801a6d0 <_malloc_r+0xfc>
 801a600:	f000 f868 	bl	801a6d4 <__malloc_lock>
 801a604:	f8d8 3000 	ldr.w	r3, [r8]
 801a608:	461c      	mov	r4, r3
 801a60a:	bb5c      	cbnz	r4, 801a664 <_malloc_r+0x90>
 801a60c:	4629      	mov	r1, r5
 801a60e:	4638      	mov	r0, r7
 801a610:	f7ff ffc0 	bl	801a594 <sbrk_aligned>
 801a614:	1c43      	adds	r3, r0, #1
 801a616:	4604      	mov	r4, r0
 801a618:	d155      	bne.n	801a6c6 <_malloc_r+0xf2>
 801a61a:	f8d8 4000 	ldr.w	r4, [r8]
 801a61e:	4626      	mov	r6, r4
 801a620:	2e00      	cmp	r6, #0
 801a622:	d145      	bne.n	801a6b0 <_malloc_r+0xdc>
 801a624:	2c00      	cmp	r4, #0
 801a626:	d048      	beq.n	801a6ba <_malloc_r+0xe6>
 801a628:	6823      	ldr	r3, [r4, #0]
 801a62a:	4631      	mov	r1, r6
 801a62c:	4638      	mov	r0, r7
 801a62e:	eb04 0903 	add.w	r9, r4, r3
 801a632:	f001 f927 	bl	801b884 <_sbrk_r>
 801a636:	4581      	cmp	r9, r0
 801a638:	d13f      	bne.n	801a6ba <_malloc_r+0xe6>
 801a63a:	6821      	ldr	r1, [r4, #0]
 801a63c:	1a6d      	subs	r5, r5, r1
 801a63e:	4629      	mov	r1, r5
 801a640:	4638      	mov	r0, r7
 801a642:	f7ff ffa7 	bl	801a594 <sbrk_aligned>
 801a646:	3001      	adds	r0, #1
 801a648:	d037      	beq.n	801a6ba <_malloc_r+0xe6>
 801a64a:	6823      	ldr	r3, [r4, #0]
 801a64c:	442b      	add	r3, r5
 801a64e:	6023      	str	r3, [r4, #0]
 801a650:	f8d8 3000 	ldr.w	r3, [r8]
 801a654:	2b00      	cmp	r3, #0
 801a656:	d038      	beq.n	801a6ca <_malloc_r+0xf6>
 801a658:	685a      	ldr	r2, [r3, #4]
 801a65a:	42a2      	cmp	r2, r4
 801a65c:	d12b      	bne.n	801a6b6 <_malloc_r+0xe2>
 801a65e:	2200      	movs	r2, #0
 801a660:	605a      	str	r2, [r3, #4]
 801a662:	e00f      	b.n	801a684 <_malloc_r+0xb0>
 801a664:	6822      	ldr	r2, [r4, #0]
 801a666:	1b52      	subs	r2, r2, r5
 801a668:	d41f      	bmi.n	801a6aa <_malloc_r+0xd6>
 801a66a:	2a0b      	cmp	r2, #11
 801a66c:	d917      	bls.n	801a69e <_malloc_r+0xca>
 801a66e:	1961      	adds	r1, r4, r5
 801a670:	42a3      	cmp	r3, r4
 801a672:	6025      	str	r5, [r4, #0]
 801a674:	bf18      	it	ne
 801a676:	6059      	strne	r1, [r3, #4]
 801a678:	6863      	ldr	r3, [r4, #4]
 801a67a:	bf08      	it	eq
 801a67c:	f8c8 1000 	streq.w	r1, [r8]
 801a680:	5162      	str	r2, [r4, r5]
 801a682:	604b      	str	r3, [r1, #4]
 801a684:	4638      	mov	r0, r7
 801a686:	f104 060b 	add.w	r6, r4, #11
 801a68a:	f000 f829 	bl	801a6e0 <__malloc_unlock>
 801a68e:	f026 0607 	bic.w	r6, r6, #7
 801a692:	1d23      	adds	r3, r4, #4
 801a694:	1af2      	subs	r2, r6, r3
 801a696:	d0ae      	beq.n	801a5f6 <_malloc_r+0x22>
 801a698:	1b9b      	subs	r3, r3, r6
 801a69a:	50a3      	str	r3, [r4, r2]
 801a69c:	e7ab      	b.n	801a5f6 <_malloc_r+0x22>
 801a69e:	42a3      	cmp	r3, r4
 801a6a0:	6862      	ldr	r2, [r4, #4]
 801a6a2:	d1dd      	bne.n	801a660 <_malloc_r+0x8c>
 801a6a4:	f8c8 2000 	str.w	r2, [r8]
 801a6a8:	e7ec      	b.n	801a684 <_malloc_r+0xb0>
 801a6aa:	4623      	mov	r3, r4
 801a6ac:	6864      	ldr	r4, [r4, #4]
 801a6ae:	e7ac      	b.n	801a60a <_malloc_r+0x36>
 801a6b0:	4634      	mov	r4, r6
 801a6b2:	6876      	ldr	r6, [r6, #4]
 801a6b4:	e7b4      	b.n	801a620 <_malloc_r+0x4c>
 801a6b6:	4613      	mov	r3, r2
 801a6b8:	e7cc      	b.n	801a654 <_malloc_r+0x80>
 801a6ba:	230c      	movs	r3, #12
 801a6bc:	603b      	str	r3, [r7, #0]
 801a6be:	4638      	mov	r0, r7
 801a6c0:	f000 f80e 	bl	801a6e0 <__malloc_unlock>
 801a6c4:	e797      	b.n	801a5f6 <_malloc_r+0x22>
 801a6c6:	6025      	str	r5, [r4, #0]
 801a6c8:	e7dc      	b.n	801a684 <_malloc_r+0xb0>
 801a6ca:	605b      	str	r3, [r3, #4]
 801a6cc:	deff      	udf	#255	; 0xff
 801a6ce:	bf00      	nop
 801a6d0:	20013650 	.word	0x20013650

0801a6d4 <__malloc_lock>:
 801a6d4:	4801      	ldr	r0, [pc, #4]	; (801a6dc <__malloc_lock+0x8>)
 801a6d6:	f001 b922 	b.w	801b91e <__retarget_lock_acquire_recursive>
 801a6da:	bf00      	nop
 801a6dc:	20013798 	.word	0x20013798

0801a6e0 <__malloc_unlock>:
 801a6e0:	4801      	ldr	r0, [pc, #4]	; (801a6e8 <__malloc_unlock+0x8>)
 801a6e2:	f001 b91d 	b.w	801b920 <__retarget_lock_release_recursive>
 801a6e6:	bf00      	nop
 801a6e8:	20013798 	.word	0x20013798

0801a6ec <__cvt>:
 801a6ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a6f0:	ec55 4b10 	vmov	r4, r5, d0
 801a6f4:	2d00      	cmp	r5, #0
 801a6f6:	460e      	mov	r6, r1
 801a6f8:	4619      	mov	r1, r3
 801a6fa:	462b      	mov	r3, r5
 801a6fc:	bfbb      	ittet	lt
 801a6fe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801a702:	461d      	movlt	r5, r3
 801a704:	2300      	movge	r3, #0
 801a706:	232d      	movlt	r3, #45	; 0x2d
 801a708:	700b      	strb	r3, [r1, #0]
 801a70a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a70c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801a710:	4691      	mov	r9, r2
 801a712:	f023 0820 	bic.w	r8, r3, #32
 801a716:	bfbc      	itt	lt
 801a718:	4622      	movlt	r2, r4
 801a71a:	4614      	movlt	r4, r2
 801a71c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801a720:	d005      	beq.n	801a72e <__cvt+0x42>
 801a722:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801a726:	d100      	bne.n	801a72a <__cvt+0x3e>
 801a728:	3601      	adds	r6, #1
 801a72a:	2102      	movs	r1, #2
 801a72c:	e000      	b.n	801a730 <__cvt+0x44>
 801a72e:	2103      	movs	r1, #3
 801a730:	ab03      	add	r3, sp, #12
 801a732:	9301      	str	r3, [sp, #4]
 801a734:	ab02      	add	r3, sp, #8
 801a736:	9300      	str	r3, [sp, #0]
 801a738:	ec45 4b10 	vmov	d0, r4, r5
 801a73c:	4653      	mov	r3, sl
 801a73e:	4632      	mov	r2, r6
 801a740:	f001 f98e 	bl	801ba60 <_dtoa_r>
 801a744:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801a748:	4607      	mov	r7, r0
 801a74a:	d102      	bne.n	801a752 <__cvt+0x66>
 801a74c:	f019 0f01 	tst.w	r9, #1
 801a750:	d022      	beq.n	801a798 <__cvt+0xac>
 801a752:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801a756:	eb07 0906 	add.w	r9, r7, r6
 801a75a:	d110      	bne.n	801a77e <__cvt+0x92>
 801a75c:	783b      	ldrb	r3, [r7, #0]
 801a75e:	2b30      	cmp	r3, #48	; 0x30
 801a760:	d10a      	bne.n	801a778 <__cvt+0x8c>
 801a762:	2200      	movs	r2, #0
 801a764:	2300      	movs	r3, #0
 801a766:	4620      	mov	r0, r4
 801a768:	4629      	mov	r1, r5
 801a76a:	f7e6 f9cd 	bl	8000b08 <__aeabi_dcmpeq>
 801a76e:	b918      	cbnz	r0, 801a778 <__cvt+0x8c>
 801a770:	f1c6 0601 	rsb	r6, r6, #1
 801a774:	f8ca 6000 	str.w	r6, [sl]
 801a778:	f8da 3000 	ldr.w	r3, [sl]
 801a77c:	4499      	add	r9, r3
 801a77e:	2200      	movs	r2, #0
 801a780:	2300      	movs	r3, #0
 801a782:	4620      	mov	r0, r4
 801a784:	4629      	mov	r1, r5
 801a786:	f7e6 f9bf 	bl	8000b08 <__aeabi_dcmpeq>
 801a78a:	b108      	cbz	r0, 801a790 <__cvt+0xa4>
 801a78c:	f8cd 900c 	str.w	r9, [sp, #12]
 801a790:	2230      	movs	r2, #48	; 0x30
 801a792:	9b03      	ldr	r3, [sp, #12]
 801a794:	454b      	cmp	r3, r9
 801a796:	d307      	bcc.n	801a7a8 <__cvt+0xbc>
 801a798:	9b03      	ldr	r3, [sp, #12]
 801a79a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a79c:	1bdb      	subs	r3, r3, r7
 801a79e:	4638      	mov	r0, r7
 801a7a0:	6013      	str	r3, [r2, #0]
 801a7a2:	b004      	add	sp, #16
 801a7a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a7a8:	1c59      	adds	r1, r3, #1
 801a7aa:	9103      	str	r1, [sp, #12]
 801a7ac:	701a      	strb	r2, [r3, #0]
 801a7ae:	e7f0      	b.n	801a792 <__cvt+0xa6>

0801a7b0 <__exponent>:
 801a7b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a7b2:	4603      	mov	r3, r0
 801a7b4:	2900      	cmp	r1, #0
 801a7b6:	bfb8      	it	lt
 801a7b8:	4249      	neglt	r1, r1
 801a7ba:	f803 2b02 	strb.w	r2, [r3], #2
 801a7be:	bfb4      	ite	lt
 801a7c0:	222d      	movlt	r2, #45	; 0x2d
 801a7c2:	222b      	movge	r2, #43	; 0x2b
 801a7c4:	2909      	cmp	r1, #9
 801a7c6:	7042      	strb	r2, [r0, #1]
 801a7c8:	dd2a      	ble.n	801a820 <__exponent+0x70>
 801a7ca:	f10d 0207 	add.w	r2, sp, #7
 801a7ce:	4617      	mov	r7, r2
 801a7d0:	260a      	movs	r6, #10
 801a7d2:	4694      	mov	ip, r2
 801a7d4:	fb91 f5f6 	sdiv	r5, r1, r6
 801a7d8:	fb06 1415 	mls	r4, r6, r5, r1
 801a7dc:	3430      	adds	r4, #48	; 0x30
 801a7de:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801a7e2:	460c      	mov	r4, r1
 801a7e4:	2c63      	cmp	r4, #99	; 0x63
 801a7e6:	f102 32ff 	add.w	r2, r2, #4294967295
 801a7ea:	4629      	mov	r1, r5
 801a7ec:	dcf1      	bgt.n	801a7d2 <__exponent+0x22>
 801a7ee:	3130      	adds	r1, #48	; 0x30
 801a7f0:	f1ac 0402 	sub.w	r4, ip, #2
 801a7f4:	f802 1c01 	strb.w	r1, [r2, #-1]
 801a7f8:	1c41      	adds	r1, r0, #1
 801a7fa:	4622      	mov	r2, r4
 801a7fc:	42ba      	cmp	r2, r7
 801a7fe:	d30a      	bcc.n	801a816 <__exponent+0x66>
 801a800:	f10d 0209 	add.w	r2, sp, #9
 801a804:	eba2 020c 	sub.w	r2, r2, ip
 801a808:	42bc      	cmp	r4, r7
 801a80a:	bf88      	it	hi
 801a80c:	2200      	movhi	r2, #0
 801a80e:	4413      	add	r3, r2
 801a810:	1a18      	subs	r0, r3, r0
 801a812:	b003      	add	sp, #12
 801a814:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a816:	f812 5b01 	ldrb.w	r5, [r2], #1
 801a81a:	f801 5f01 	strb.w	r5, [r1, #1]!
 801a81e:	e7ed      	b.n	801a7fc <__exponent+0x4c>
 801a820:	2330      	movs	r3, #48	; 0x30
 801a822:	3130      	adds	r1, #48	; 0x30
 801a824:	7083      	strb	r3, [r0, #2]
 801a826:	70c1      	strb	r1, [r0, #3]
 801a828:	1d03      	adds	r3, r0, #4
 801a82a:	e7f1      	b.n	801a810 <__exponent+0x60>

0801a82c <_printf_float>:
 801a82c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a830:	ed2d 8b02 	vpush	{d8}
 801a834:	b08d      	sub	sp, #52	; 0x34
 801a836:	460c      	mov	r4, r1
 801a838:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801a83c:	4616      	mov	r6, r2
 801a83e:	461f      	mov	r7, r3
 801a840:	4605      	mov	r5, r0
 801a842:	f000 ffe7 	bl	801b814 <_localeconv_r>
 801a846:	f8d0 a000 	ldr.w	sl, [r0]
 801a84a:	4650      	mov	r0, sl
 801a84c:	f7e5 fd30 	bl	80002b0 <strlen>
 801a850:	2300      	movs	r3, #0
 801a852:	930a      	str	r3, [sp, #40]	; 0x28
 801a854:	6823      	ldr	r3, [r4, #0]
 801a856:	9305      	str	r3, [sp, #20]
 801a858:	f8d8 3000 	ldr.w	r3, [r8]
 801a85c:	f894 b018 	ldrb.w	fp, [r4, #24]
 801a860:	3307      	adds	r3, #7
 801a862:	f023 0307 	bic.w	r3, r3, #7
 801a866:	f103 0208 	add.w	r2, r3, #8
 801a86a:	f8c8 2000 	str.w	r2, [r8]
 801a86e:	e9d3 8900 	ldrd	r8, r9, [r3]
 801a872:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801a876:	9307      	str	r3, [sp, #28]
 801a878:	f8cd 8018 	str.w	r8, [sp, #24]
 801a87c:	ee08 0a10 	vmov	s16, r0
 801a880:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 801a884:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a888:	4b9e      	ldr	r3, [pc, #632]	; (801ab04 <_printf_float+0x2d8>)
 801a88a:	f04f 32ff 	mov.w	r2, #4294967295
 801a88e:	f7e6 f96d 	bl	8000b6c <__aeabi_dcmpun>
 801a892:	bb88      	cbnz	r0, 801a8f8 <_printf_float+0xcc>
 801a894:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a898:	4b9a      	ldr	r3, [pc, #616]	; (801ab04 <_printf_float+0x2d8>)
 801a89a:	f04f 32ff 	mov.w	r2, #4294967295
 801a89e:	f7e6 f947 	bl	8000b30 <__aeabi_dcmple>
 801a8a2:	bb48      	cbnz	r0, 801a8f8 <_printf_float+0xcc>
 801a8a4:	2200      	movs	r2, #0
 801a8a6:	2300      	movs	r3, #0
 801a8a8:	4640      	mov	r0, r8
 801a8aa:	4649      	mov	r1, r9
 801a8ac:	f7e6 f936 	bl	8000b1c <__aeabi_dcmplt>
 801a8b0:	b110      	cbz	r0, 801a8b8 <_printf_float+0x8c>
 801a8b2:	232d      	movs	r3, #45	; 0x2d
 801a8b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a8b8:	4a93      	ldr	r2, [pc, #588]	; (801ab08 <_printf_float+0x2dc>)
 801a8ba:	4b94      	ldr	r3, [pc, #592]	; (801ab0c <_printf_float+0x2e0>)
 801a8bc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801a8c0:	bf94      	ite	ls
 801a8c2:	4690      	movls	r8, r2
 801a8c4:	4698      	movhi	r8, r3
 801a8c6:	2303      	movs	r3, #3
 801a8c8:	6123      	str	r3, [r4, #16]
 801a8ca:	9b05      	ldr	r3, [sp, #20]
 801a8cc:	f023 0304 	bic.w	r3, r3, #4
 801a8d0:	6023      	str	r3, [r4, #0]
 801a8d2:	f04f 0900 	mov.w	r9, #0
 801a8d6:	9700      	str	r7, [sp, #0]
 801a8d8:	4633      	mov	r3, r6
 801a8da:	aa0b      	add	r2, sp, #44	; 0x2c
 801a8dc:	4621      	mov	r1, r4
 801a8de:	4628      	mov	r0, r5
 801a8e0:	f000 f9da 	bl	801ac98 <_printf_common>
 801a8e4:	3001      	adds	r0, #1
 801a8e6:	f040 8090 	bne.w	801aa0a <_printf_float+0x1de>
 801a8ea:	f04f 30ff 	mov.w	r0, #4294967295
 801a8ee:	b00d      	add	sp, #52	; 0x34
 801a8f0:	ecbd 8b02 	vpop	{d8}
 801a8f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a8f8:	4642      	mov	r2, r8
 801a8fa:	464b      	mov	r3, r9
 801a8fc:	4640      	mov	r0, r8
 801a8fe:	4649      	mov	r1, r9
 801a900:	f7e6 f934 	bl	8000b6c <__aeabi_dcmpun>
 801a904:	b140      	cbz	r0, 801a918 <_printf_float+0xec>
 801a906:	464b      	mov	r3, r9
 801a908:	2b00      	cmp	r3, #0
 801a90a:	bfbc      	itt	lt
 801a90c:	232d      	movlt	r3, #45	; 0x2d
 801a90e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801a912:	4a7f      	ldr	r2, [pc, #508]	; (801ab10 <_printf_float+0x2e4>)
 801a914:	4b7f      	ldr	r3, [pc, #508]	; (801ab14 <_printf_float+0x2e8>)
 801a916:	e7d1      	b.n	801a8bc <_printf_float+0x90>
 801a918:	6863      	ldr	r3, [r4, #4]
 801a91a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801a91e:	9206      	str	r2, [sp, #24]
 801a920:	1c5a      	adds	r2, r3, #1
 801a922:	d13f      	bne.n	801a9a4 <_printf_float+0x178>
 801a924:	2306      	movs	r3, #6
 801a926:	6063      	str	r3, [r4, #4]
 801a928:	9b05      	ldr	r3, [sp, #20]
 801a92a:	6861      	ldr	r1, [r4, #4]
 801a92c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801a930:	2300      	movs	r3, #0
 801a932:	9303      	str	r3, [sp, #12]
 801a934:	ab0a      	add	r3, sp, #40	; 0x28
 801a936:	e9cd b301 	strd	fp, r3, [sp, #4]
 801a93a:	ab09      	add	r3, sp, #36	; 0x24
 801a93c:	ec49 8b10 	vmov	d0, r8, r9
 801a940:	9300      	str	r3, [sp, #0]
 801a942:	6022      	str	r2, [r4, #0]
 801a944:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801a948:	4628      	mov	r0, r5
 801a94a:	f7ff fecf 	bl	801a6ec <__cvt>
 801a94e:	9b06      	ldr	r3, [sp, #24]
 801a950:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a952:	2b47      	cmp	r3, #71	; 0x47
 801a954:	4680      	mov	r8, r0
 801a956:	d108      	bne.n	801a96a <_printf_float+0x13e>
 801a958:	1cc8      	adds	r0, r1, #3
 801a95a:	db02      	blt.n	801a962 <_printf_float+0x136>
 801a95c:	6863      	ldr	r3, [r4, #4]
 801a95e:	4299      	cmp	r1, r3
 801a960:	dd41      	ble.n	801a9e6 <_printf_float+0x1ba>
 801a962:	f1ab 0302 	sub.w	r3, fp, #2
 801a966:	fa5f fb83 	uxtb.w	fp, r3
 801a96a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801a96e:	d820      	bhi.n	801a9b2 <_printf_float+0x186>
 801a970:	3901      	subs	r1, #1
 801a972:	465a      	mov	r2, fp
 801a974:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801a978:	9109      	str	r1, [sp, #36]	; 0x24
 801a97a:	f7ff ff19 	bl	801a7b0 <__exponent>
 801a97e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a980:	1813      	adds	r3, r2, r0
 801a982:	2a01      	cmp	r2, #1
 801a984:	4681      	mov	r9, r0
 801a986:	6123      	str	r3, [r4, #16]
 801a988:	dc02      	bgt.n	801a990 <_printf_float+0x164>
 801a98a:	6822      	ldr	r2, [r4, #0]
 801a98c:	07d2      	lsls	r2, r2, #31
 801a98e:	d501      	bpl.n	801a994 <_printf_float+0x168>
 801a990:	3301      	adds	r3, #1
 801a992:	6123      	str	r3, [r4, #16]
 801a994:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801a998:	2b00      	cmp	r3, #0
 801a99a:	d09c      	beq.n	801a8d6 <_printf_float+0xaa>
 801a99c:	232d      	movs	r3, #45	; 0x2d
 801a99e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a9a2:	e798      	b.n	801a8d6 <_printf_float+0xaa>
 801a9a4:	9a06      	ldr	r2, [sp, #24]
 801a9a6:	2a47      	cmp	r2, #71	; 0x47
 801a9a8:	d1be      	bne.n	801a928 <_printf_float+0xfc>
 801a9aa:	2b00      	cmp	r3, #0
 801a9ac:	d1bc      	bne.n	801a928 <_printf_float+0xfc>
 801a9ae:	2301      	movs	r3, #1
 801a9b0:	e7b9      	b.n	801a926 <_printf_float+0xfa>
 801a9b2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801a9b6:	d118      	bne.n	801a9ea <_printf_float+0x1be>
 801a9b8:	2900      	cmp	r1, #0
 801a9ba:	6863      	ldr	r3, [r4, #4]
 801a9bc:	dd0b      	ble.n	801a9d6 <_printf_float+0x1aa>
 801a9be:	6121      	str	r1, [r4, #16]
 801a9c0:	b913      	cbnz	r3, 801a9c8 <_printf_float+0x19c>
 801a9c2:	6822      	ldr	r2, [r4, #0]
 801a9c4:	07d0      	lsls	r0, r2, #31
 801a9c6:	d502      	bpl.n	801a9ce <_printf_float+0x1a2>
 801a9c8:	3301      	adds	r3, #1
 801a9ca:	440b      	add	r3, r1
 801a9cc:	6123      	str	r3, [r4, #16]
 801a9ce:	65a1      	str	r1, [r4, #88]	; 0x58
 801a9d0:	f04f 0900 	mov.w	r9, #0
 801a9d4:	e7de      	b.n	801a994 <_printf_float+0x168>
 801a9d6:	b913      	cbnz	r3, 801a9de <_printf_float+0x1b2>
 801a9d8:	6822      	ldr	r2, [r4, #0]
 801a9da:	07d2      	lsls	r2, r2, #31
 801a9dc:	d501      	bpl.n	801a9e2 <_printf_float+0x1b6>
 801a9de:	3302      	adds	r3, #2
 801a9e0:	e7f4      	b.n	801a9cc <_printf_float+0x1a0>
 801a9e2:	2301      	movs	r3, #1
 801a9e4:	e7f2      	b.n	801a9cc <_printf_float+0x1a0>
 801a9e6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801a9ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a9ec:	4299      	cmp	r1, r3
 801a9ee:	db05      	blt.n	801a9fc <_printf_float+0x1d0>
 801a9f0:	6823      	ldr	r3, [r4, #0]
 801a9f2:	6121      	str	r1, [r4, #16]
 801a9f4:	07d8      	lsls	r0, r3, #31
 801a9f6:	d5ea      	bpl.n	801a9ce <_printf_float+0x1a2>
 801a9f8:	1c4b      	adds	r3, r1, #1
 801a9fa:	e7e7      	b.n	801a9cc <_printf_float+0x1a0>
 801a9fc:	2900      	cmp	r1, #0
 801a9fe:	bfd4      	ite	le
 801aa00:	f1c1 0202 	rsble	r2, r1, #2
 801aa04:	2201      	movgt	r2, #1
 801aa06:	4413      	add	r3, r2
 801aa08:	e7e0      	b.n	801a9cc <_printf_float+0x1a0>
 801aa0a:	6823      	ldr	r3, [r4, #0]
 801aa0c:	055a      	lsls	r2, r3, #21
 801aa0e:	d407      	bmi.n	801aa20 <_printf_float+0x1f4>
 801aa10:	6923      	ldr	r3, [r4, #16]
 801aa12:	4642      	mov	r2, r8
 801aa14:	4631      	mov	r1, r6
 801aa16:	4628      	mov	r0, r5
 801aa18:	47b8      	blx	r7
 801aa1a:	3001      	adds	r0, #1
 801aa1c:	d12c      	bne.n	801aa78 <_printf_float+0x24c>
 801aa1e:	e764      	b.n	801a8ea <_printf_float+0xbe>
 801aa20:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801aa24:	f240 80e0 	bls.w	801abe8 <_printf_float+0x3bc>
 801aa28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801aa2c:	2200      	movs	r2, #0
 801aa2e:	2300      	movs	r3, #0
 801aa30:	f7e6 f86a 	bl	8000b08 <__aeabi_dcmpeq>
 801aa34:	2800      	cmp	r0, #0
 801aa36:	d034      	beq.n	801aaa2 <_printf_float+0x276>
 801aa38:	4a37      	ldr	r2, [pc, #220]	; (801ab18 <_printf_float+0x2ec>)
 801aa3a:	2301      	movs	r3, #1
 801aa3c:	4631      	mov	r1, r6
 801aa3e:	4628      	mov	r0, r5
 801aa40:	47b8      	blx	r7
 801aa42:	3001      	adds	r0, #1
 801aa44:	f43f af51 	beq.w	801a8ea <_printf_float+0xbe>
 801aa48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801aa4c:	429a      	cmp	r2, r3
 801aa4e:	db02      	blt.n	801aa56 <_printf_float+0x22a>
 801aa50:	6823      	ldr	r3, [r4, #0]
 801aa52:	07d8      	lsls	r0, r3, #31
 801aa54:	d510      	bpl.n	801aa78 <_printf_float+0x24c>
 801aa56:	ee18 3a10 	vmov	r3, s16
 801aa5a:	4652      	mov	r2, sl
 801aa5c:	4631      	mov	r1, r6
 801aa5e:	4628      	mov	r0, r5
 801aa60:	47b8      	blx	r7
 801aa62:	3001      	adds	r0, #1
 801aa64:	f43f af41 	beq.w	801a8ea <_printf_float+0xbe>
 801aa68:	f04f 0800 	mov.w	r8, #0
 801aa6c:	f104 091a 	add.w	r9, r4, #26
 801aa70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801aa72:	3b01      	subs	r3, #1
 801aa74:	4543      	cmp	r3, r8
 801aa76:	dc09      	bgt.n	801aa8c <_printf_float+0x260>
 801aa78:	6823      	ldr	r3, [r4, #0]
 801aa7a:	079b      	lsls	r3, r3, #30
 801aa7c:	f100 8107 	bmi.w	801ac8e <_printf_float+0x462>
 801aa80:	68e0      	ldr	r0, [r4, #12]
 801aa82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801aa84:	4298      	cmp	r0, r3
 801aa86:	bfb8      	it	lt
 801aa88:	4618      	movlt	r0, r3
 801aa8a:	e730      	b.n	801a8ee <_printf_float+0xc2>
 801aa8c:	2301      	movs	r3, #1
 801aa8e:	464a      	mov	r2, r9
 801aa90:	4631      	mov	r1, r6
 801aa92:	4628      	mov	r0, r5
 801aa94:	47b8      	blx	r7
 801aa96:	3001      	adds	r0, #1
 801aa98:	f43f af27 	beq.w	801a8ea <_printf_float+0xbe>
 801aa9c:	f108 0801 	add.w	r8, r8, #1
 801aaa0:	e7e6      	b.n	801aa70 <_printf_float+0x244>
 801aaa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aaa4:	2b00      	cmp	r3, #0
 801aaa6:	dc39      	bgt.n	801ab1c <_printf_float+0x2f0>
 801aaa8:	4a1b      	ldr	r2, [pc, #108]	; (801ab18 <_printf_float+0x2ec>)
 801aaaa:	2301      	movs	r3, #1
 801aaac:	4631      	mov	r1, r6
 801aaae:	4628      	mov	r0, r5
 801aab0:	47b8      	blx	r7
 801aab2:	3001      	adds	r0, #1
 801aab4:	f43f af19 	beq.w	801a8ea <_printf_float+0xbe>
 801aab8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801aabc:	4313      	orrs	r3, r2
 801aabe:	d102      	bne.n	801aac6 <_printf_float+0x29a>
 801aac0:	6823      	ldr	r3, [r4, #0]
 801aac2:	07d9      	lsls	r1, r3, #31
 801aac4:	d5d8      	bpl.n	801aa78 <_printf_float+0x24c>
 801aac6:	ee18 3a10 	vmov	r3, s16
 801aaca:	4652      	mov	r2, sl
 801aacc:	4631      	mov	r1, r6
 801aace:	4628      	mov	r0, r5
 801aad0:	47b8      	blx	r7
 801aad2:	3001      	adds	r0, #1
 801aad4:	f43f af09 	beq.w	801a8ea <_printf_float+0xbe>
 801aad8:	f04f 0900 	mov.w	r9, #0
 801aadc:	f104 0a1a 	add.w	sl, r4, #26
 801aae0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aae2:	425b      	negs	r3, r3
 801aae4:	454b      	cmp	r3, r9
 801aae6:	dc01      	bgt.n	801aaec <_printf_float+0x2c0>
 801aae8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801aaea:	e792      	b.n	801aa12 <_printf_float+0x1e6>
 801aaec:	2301      	movs	r3, #1
 801aaee:	4652      	mov	r2, sl
 801aaf0:	4631      	mov	r1, r6
 801aaf2:	4628      	mov	r0, r5
 801aaf4:	47b8      	blx	r7
 801aaf6:	3001      	adds	r0, #1
 801aaf8:	f43f aef7 	beq.w	801a8ea <_printf_float+0xbe>
 801aafc:	f109 0901 	add.w	r9, r9, #1
 801ab00:	e7ee      	b.n	801aae0 <_printf_float+0x2b4>
 801ab02:	bf00      	nop
 801ab04:	7fefffff 	.word	0x7fefffff
 801ab08:	080257b0 	.word	0x080257b0
 801ab0c:	080257b4 	.word	0x080257b4
 801ab10:	080257b8 	.word	0x080257b8
 801ab14:	080257bc 	.word	0x080257bc
 801ab18:	080257c0 	.word	0x080257c0
 801ab1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ab1e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801ab20:	429a      	cmp	r2, r3
 801ab22:	bfa8      	it	ge
 801ab24:	461a      	movge	r2, r3
 801ab26:	2a00      	cmp	r2, #0
 801ab28:	4691      	mov	r9, r2
 801ab2a:	dc37      	bgt.n	801ab9c <_printf_float+0x370>
 801ab2c:	f04f 0b00 	mov.w	fp, #0
 801ab30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801ab34:	f104 021a 	add.w	r2, r4, #26
 801ab38:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801ab3a:	9305      	str	r3, [sp, #20]
 801ab3c:	eba3 0309 	sub.w	r3, r3, r9
 801ab40:	455b      	cmp	r3, fp
 801ab42:	dc33      	bgt.n	801abac <_printf_float+0x380>
 801ab44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801ab48:	429a      	cmp	r2, r3
 801ab4a:	db3b      	blt.n	801abc4 <_printf_float+0x398>
 801ab4c:	6823      	ldr	r3, [r4, #0]
 801ab4e:	07da      	lsls	r2, r3, #31
 801ab50:	d438      	bmi.n	801abc4 <_printf_float+0x398>
 801ab52:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801ab56:	eba2 0903 	sub.w	r9, r2, r3
 801ab5a:	9b05      	ldr	r3, [sp, #20]
 801ab5c:	1ad2      	subs	r2, r2, r3
 801ab5e:	4591      	cmp	r9, r2
 801ab60:	bfa8      	it	ge
 801ab62:	4691      	movge	r9, r2
 801ab64:	f1b9 0f00 	cmp.w	r9, #0
 801ab68:	dc35      	bgt.n	801abd6 <_printf_float+0x3aa>
 801ab6a:	f04f 0800 	mov.w	r8, #0
 801ab6e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801ab72:	f104 0a1a 	add.w	sl, r4, #26
 801ab76:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801ab7a:	1a9b      	subs	r3, r3, r2
 801ab7c:	eba3 0309 	sub.w	r3, r3, r9
 801ab80:	4543      	cmp	r3, r8
 801ab82:	f77f af79 	ble.w	801aa78 <_printf_float+0x24c>
 801ab86:	2301      	movs	r3, #1
 801ab88:	4652      	mov	r2, sl
 801ab8a:	4631      	mov	r1, r6
 801ab8c:	4628      	mov	r0, r5
 801ab8e:	47b8      	blx	r7
 801ab90:	3001      	adds	r0, #1
 801ab92:	f43f aeaa 	beq.w	801a8ea <_printf_float+0xbe>
 801ab96:	f108 0801 	add.w	r8, r8, #1
 801ab9a:	e7ec      	b.n	801ab76 <_printf_float+0x34a>
 801ab9c:	4613      	mov	r3, r2
 801ab9e:	4631      	mov	r1, r6
 801aba0:	4642      	mov	r2, r8
 801aba2:	4628      	mov	r0, r5
 801aba4:	47b8      	blx	r7
 801aba6:	3001      	adds	r0, #1
 801aba8:	d1c0      	bne.n	801ab2c <_printf_float+0x300>
 801abaa:	e69e      	b.n	801a8ea <_printf_float+0xbe>
 801abac:	2301      	movs	r3, #1
 801abae:	4631      	mov	r1, r6
 801abb0:	4628      	mov	r0, r5
 801abb2:	9205      	str	r2, [sp, #20]
 801abb4:	47b8      	blx	r7
 801abb6:	3001      	adds	r0, #1
 801abb8:	f43f ae97 	beq.w	801a8ea <_printf_float+0xbe>
 801abbc:	9a05      	ldr	r2, [sp, #20]
 801abbe:	f10b 0b01 	add.w	fp, fp, #1
 801abc2:	e7b9      	b.n	801ab38 <_printf_float+0x30c>
 801abc4:	ee18 3a10 	vmov	r3, s16
 801abc8:	4652      	mov	r2, sl
 801abca:	4631      	mov	r1, r6
 801abcc:	4628      	mov	r0, r5
 801abce:	47b8      	blx	r7
 801abd0:	3001      	adds	r0, #1
 801abd2:	d1be      	bne.n	801ab52 <_printf_float+0x326>
 801abd4:	e689      	b.n	801a8ea <_printf_float+0xbe>
 801abd6:	9a05      	ldr	r2, [sp, #20]
 801abd8:	464b      	mov	r3, r9
 801abda:	4442      	add	r2, r8
 801abdc:	4631      	mov	r1, r6
 801abde:	4628      	mov	r0, r5
 801abe0:	47b8      	blx	r7
 801abe2:	3001      	adds	r0, #1
 801abe4:	d1c1      	bne.n	801ab6a <_printf_float+0x33e>
 801abe6:	e680      	b.n	801a8ea <_printf_float+0xbe>
 801abe8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801abea:	2a01      	cmp	r2, #1
 801abec:	dc01      	bgt.n	801abf2 <_printf_float+0x3c6>
 801abee:	07db      	lsls	r3, r3, #31
 801abf0:	d53a      	bpl.n	801ac68 <_printf_float+0x43c>
 801abf2:	2301      	movs	r3, #1
 801abf4:	4642      	mov	r2, r8
 801abf6:	4631      	mov	r1, r6
 801abf8:	4628      	mov	r0, r5
 801abfa:	47b8      	blx	r7
 801abfc:	3001      	adds	r0, #1
 801abfe:	f43f ae74 	beq.w	801a8ea <_printf_float+0xbe>
 801ac02:	ee18 3a10 	vmov	r3, s16
 801ac06:	4652      	mov	r2, sl
 801ac08:	4631      	mov	r1, r6
 801ac0a:	4628      	mov	r0, r5
 801ac0c:	47b8      	blx	r7
 801ac0e:	3001      	adds	r0, #1
 801ac10:	f43f ae6b 	beq.w	801a8ea <_printf_float+0xbe>
 801ac14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801ac18:	2200      	movs	r2, #0
 801ac1a:	2300      	movs	r3, #0
 801ac1c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 801ac20:	f7e5 ff72 	bl	8000b08 <__aeabi_dcmpeq>
 801ac24:	b9d8      	cbnz	r0, 801ac5e <_printf_float+0x432>
 801ac26:	f10a 33ff 	add.w	r3, sl, #4294967295
 801ac2a:	f108 0201 	add.w	r2, r8, #1
 801ac2e:	4631      	mov	r1, r6
 801ac30:	4628      	mov	r0, r5
 801ac32:	47b8      	blx	r7
 801ac34:	3001      	adds	r0, #1
 801ac36:	d10e      	bne.n	801ac56 <_printf_float+0x42a>
 801ac38:	e657      	b.n	801a8ea <_printf_float+0xbe>
 801ac3a:	2301      	movs	r3, #1
 801ac3c:	4652      	mov	r2, sl
 801ac3e:	4631      	mov	r1, r6
 801ac40:	4628      	mov	r0, r5
 801ac42:	47b8      	blx	r7
 801ac44:	3001      	adds	r0, #1
 801ac46:	f43f ae50 	beq.w	801a8ea <_printf_float+0xbe>
 801ac4a:	f108 0801 	add.w	r8, r8, #1
 801ac4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ac50:	3b01      	subs	r3, #1
 801ac52:	4543      	cmp	r3, r8
 801ac54:	dcf1      	bgt.n	801ac3a <_printf_float+0x40e>
 801ac56:	464b      	mov	r3, r9
 801ac58:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801ac5c:	e6da      	b.n	801aa14 <_printf_float+0x1e8>
 801ac5e:	f04f 0800 	mov.w	r8, #0
 801ac62:	f104 0a1a 	add.w	sl, r4, #26
 801ac66:	e7f2      	b.n	801ac4e <_printf_float+0x422>
 801ac68:	2301      	movs	r3, #1
 801ac6a:	4642      	mov	r2, r8
 801ac6c:	e7df      	b.n	801ac2e <_printf_float+0x402>
 801ac6e:	2301      	movs	r3, #1
 801ac70:	464a      	mov	r2, r9
 801ac72:	4631      	mov	r1, r6
 801ac74:	4628      	mov	r0, r5
 801ac76:	47b8      	blx	r7
 801ac78:	3001      	adds	r0, #1
 801ac7a:	f43f ae36 	beq.w	801a8ea <_printf_float+0xbe>
 801ac7e:	f108 0801 	add.w	r8, r8, #1
 801ac82:	68e3      	ldr	r3, [r4, #12]
 801ac84:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801ac86:	1a5b      	subs	r3, r3, r1
 801ac88:	4543      	cmp	r3, r8
 801ac8a:	dcf0      	bgt.n	801ac6e <_printf_float+0x442>
 801ac8c:	e6f8      	b.n	801aa80 <_printf_float+0x254>
 801ac8e:	f04f 0800 	mov.w	r8, #0
 801ac92:	f104 0919 	add.w	r9, r4, #25
 801ac96:	e7f4      	b.n	801ac82 <_printf_float+0x456>

0801ac98 <_printf_common>:
 801ac98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ac9c:	4616      	mov	r6, r2
 801ac9e:	4699      	mov	r9, r3
 801aca0:	688a      	ldr	r2, [r1, #8]
 801aca2:	690b      	ldr	r3, [r1, #16]
 801aca4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801aca8:	4293      	cmp	r3, r2
 801acaa:	bfb8      	it	lt
 801acac:	4613      	movlt	r3, r2
 801acae:	6033      	str	r3, [r6, #0]
 801acb0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801acb4:	4607      	mov	r7, r0
 801acb6:	460c      	mov	r4, r1
 801acb8:	b10a      	cbz	r2, 801acbe <_printf_common+0x26>
 801acba:	3301      	adds	r3, #1
 801acbc:	6033      	str	r3, [r6, #0]
 801acbe:	6823      	ldr	r3, [r4, #0]
 801acc0:	0699      	lsls	r1, r3, #26
 801acc2:	bf42      	ittt	mi
 801acc4:	6833      	ldrmi	r3, [r6, #0]
 801acc6:	3302      	addmi	r3, #2
 801acc8:	6033      	strmi	r3, [r6, #0]
 801acca:	6825      	ldr	r5, [r4, #0]
 801accc:	f015 0506 	ands.w	r5, r5, #6
 801acd0:	d106      	bne.n	801ace0 <_printf_common+0x48>
 801acd2:	f104 0a19 	add.w	sl, r4, #25
 801acd6:	68e3      	ldr	r3, [r4, #12]
 801acd8:	6832      	ldr	r2, [r6, #0]
 801acda:	1a9b      	subs	r3, r3, r2
 801acdc:	42ab      	cmp	r3, r5
 801acde:	dc26      	bgt.n	801ad2e <_printf_common+0x96>
 801ace0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801ace4:	1e13      	subs	r3, r2, #0
 801ace6:	6822      	ldr	r2, [r4, #0]
 801ace8:	bf18      	it	ne
 801acea:	2301      	movne	r3, #1
 801acec:	0692      	lsls	r2, r2, #26
 801acee:	d42b      	bmi.n	801ad48 <_printf_common+0xb0>
 801acf0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801acf4:	4649      	mov	r1, r9
 801acf6:	4638      	mov	r0, r7
 801acf8:	47c0      	blx	r8
 801acfa:	3001      	adds	r0, #1
 801acfc:	d01e      	beq.n	801ad3c <_printf_common+0xa4>
 801acfe:	6823      	ldr	r3, [r4, #0]
 801ad00:	6922      	ldr	r2, [r4, #16]
 801ad02:	f003 0306 	and.w	r3, r3, #6
 801ad06:	2b04      	cmp	r3, #4
 801ad08:	bf02      	ittt	eq
 801ad0a:	68e5      	ldreq	r5, [r4, #12]
 801ad0c:	6833      	ldreq	r3, [r6, #0]
 801ad0e:	1aed      	subeq	r5, r5, r3
 801ad10:	68a3      	ldr	r3, [r4, #8]
 801ad12:	bf0c      	ite	eq
 801ad14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801ad18:	2500      	movne	r5, #0
 801ad1a:	4293      	cmp	r3, r2
 801ad1c:	bfc4      	itt	gt
 801ad1e:	1a9b      	subgt	r3, r3, r2
 801ad20:	18ed      	addgt	r5, r5, r3
 801ad22:	2600      	movs	r6, #0
 801ad24:	341a      	adds	r4, #26
 801ad26:	42b5      	cmp	r5, r6
 801ad28:	d11a      	bne.n	801ad60 <_printf_common+0xc8>
 801ad2a:	2000      	movs	r0, #0
 801ad2c:	e008      	b.n	801ad40 <_printf_common+0xa8>
 801ad2e:	2301      	movs	r3, #1
 801ad30:	4652      	mov	r2, sl
 801ad32:	4649      	mov	r1, r9
 801ad34:	4638      	mov	r0, r7
 801ad36:	47c0      	blx	r8
 801ad38:	3001      	adds	r0, #1
 801ad3a:	d103      	bne.n	801ad44 <_printf_common+0xac>
 801ad3c:	f04f 30ff 	mov.w	r0, #4294967295
 801ad40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ad44:	3501      	adds	r5, #1
 801ad46:	e7c6      	b.n	801acd6 <_printf_common+0x3e>
 801ad48:	18e1      	adds	r1, r4, r3
 801ad4a:	1c5a      	adds	r2, r3, #1
 801ad4c:	2030      	movs	r0, #48	; 0x30
 801ad4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801ad52:	4422      	add	r2, r4
 801ad54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801ad58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801ad5c:	3302      	adds	r3, #2
 801ad5e:	e7c7      	b.n	801acf0 <_printf_common+0x58>
 801ad60:	2301      	movs	r3, #1
 801ad62:	4622      	mov	r2, r4
 801ad64:	4649      	mov	r1, r9
 801ad66:	4638      	mov	r0, r7
 801ad68:	47c0      	blx	r8
 801ad6a:	3001      	adds	r0, #1
 801ad6c:	d0e6      	beq.n	801ad3c <_printf_common+0xa4>
 801ad6e:	3601      	adds	r6, #1
 801ad70:	e7d9      	b.n	801ad26 <_printf_common+0x8e>
	...

0801ad74 <_printf_i>:
 801ad74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ad78:	7e0f      	ldrb	r7, [r1, #24]
 801ad7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801ad7c:	2f78      	cmp	r7, #120	; 0x78
 801ad7e:	4691      	mov	r9, r2
 801ad80:	4680      	mov	r8, r0
 801ad82:	460c      	mov	r4, r1
 801ad84:	469a      	mov	sl, r3
 801ad86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801ad8a:	d807      	bhi.n	801ad9c <_printf_i+0x28>
 801ad8c:	2f62      	cmp	r7, #98	; 0x62
 801ad8e:	d80a      	bhi.n	801ada6 <_printf_i+0x32>
 801ad90:	2f00      	cmp	r7, #0
 801ad92:	f000 80d4 	beq.w	801af3e <_printf_i+0x1ca>
 801ad96:	2f58      	cmp	r7, #88	; 0x58
 801ad98:	f000 80c0 	beq.w	801af1c <_printf_i+0x1a8>
 801ad9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ada0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801ada4:	e03a      	b.n	801ae1c <_printf_i+0xa8>
 801ada6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801adaa:	2b15      	cmp	r3, #21
 801adac:	d8f6      	bhi.n	801ad9c <_printf_i+0x28>
 801adae:	a101      	add	r1, pc, #4	; (adr r1, 801adb4 <_printf_i+0x40>)
 801adb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801adb4:	0801ae0d 	.word	0x0801ae0d
 801adb8:	0801ae21 	.word	0x0801ae21
 801adbc:	0801ad9d 	.word	0x0801ad9d
 801adc0:	0801ad9d 	.word	0x0801ad9d
 801adc4:	0801ad9d 	.word	0x0801ad9d
 801adc8:	0801ad9d 	.word	0x0801ad9d
 801adcc:	0801ae21 	.word	0x0801ae21
 801add0:	0801ad9d 	.word	0x0801ad9d
 801add4:	0801ad9d 	.word	0x0801ad9d
 801add8:	0801ad9d 	.word	0x0801ad9d
 801addc:	0801ad9d 	.word	0x0801ad9d
 801ade0:	0801af25 	.word	0x0801af25
 801ade4:	0801ae4d 	.word	0x0801ae4d
 801ade8:	0801aedf 	.word	0x0801aedf
 801adec:	0801ad9d 	.word	0x0801ad9d
 801adf0:	0801ad9d 	.word	0x0801ad9d
 801adf4:	0801af47 	.word	0x0801af47
 801adf8:	0801ad9d 	.word	0x0801ad9d
 801adfc:	0801ae4d 	.word	0x0801ae4d
 801ae00:	0801ad9d 	.word	0x0801ad9d
 801ae04:	0801ad9d 	.word	0x0801ad9d
 801ae08:	0801aee7 	.word	0x0801aee7
 801ae0c:	682b      	ldr	r3, [r5, #0]
 801ae0e:	1d1a      	adds	r2, r3, #4
 801ae10:	681b      	ldr	r3, [r3, #0]
 801ae12:	602a      	str	r2, [r5, #0]
 801ae14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ae18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801ae1c:	2301      	movs	r3, #1
 801ae1e:	e09f      	b.n	801af60 <_printf_i+0x1ec>
 801ae20:	6820      	ldr	r0, [r4, #0]
 801ae22:	682b      	ldr	r3, [r5, #0]
 801ae24:	0607      	lsls	r7, r0, #24
 801ae26:	f103 0104 	add.w	r1, r3, #4
 801ae2a:	6029      	str	r1, [r5, #0]
 801ae2c:	d501      	bpl.n	801ae32 <_printf_i+0xbe>
 801ae2e:	681e      	ldr	r6, [r3, #0]
 801ae30:	e003      	b.n	801ae3a <_printf_i+0xc6>
 801ae32:	0646      	lsls	r6, r0, #25
 801ae34:	d5fb      	bpl.n	801ae2e <_printf_i+0xba>
 801ae36:	f9b3 6000 	ldrsh.w	r6, [r3]
 801ae3a:	2e00      	cmp	r6, #0
 801ae3c:	da03      	bge.n	801ae46 <_printf_i+0xd2>
 801ae3e:	232d      	movs	r3, #45	; 0x2d
 801ae40:	4276      	negs	r6, r6
 801ae42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ae46:	485a      	ldr	r0, [pc, #360]	; (801afb0 <_printf_i+0x23c>)
 801ae48:	230a      	movs	r3, #10
 801ae4a:	e012      	b.n	801ae72 <_printf_i+0xfe>
 801ae4c:	682b      	ldr	r3, [r5, #0]
 801ae4e:	6820      	ldr	r0, [r4, #0]
 801ae50:	1d19      	adds	r1, r3, #4
 801ae52:	6029      	str	r1, [r5, #0]
 801ae54:	0605      	lsls	r5, r0, #24
 801ae56:	d501      	bpl.n	801ae5c <_printf_i+0xe8>
 801ae58:	681e      	ldr	r6, [r3, #0]
 801ae5a:	e002      	b.n	801ae62 <_printf_i+0xee>
 801ae5c:	0641      	lsls	r1, r0, #25
 801ae5e:	d5fb      	bpl.n	801ae58 <_printf_i+0xe4>
 801ae60:	881e      	ldrh	r6, [r3, #0]
 801ae62:	4853      	ldr	r0, [pc, #332]	; (801afb0 <_printf_i+0x23c>)
 801ae64:	2f6f      	cmp	r7, #111	; 0x6f
 801ae66:	bf0c      	ite	eq
 801ae68:	2308      	moveq	r3, #8
 801ae6a:	230a      	movne	r3, #10
 801ae6c:	2100      	movs	r1, #0
 801ae6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801ae72:	6865      	ldr	r5, [r4, #4]
 801ae74:	60a5      	str	r5, [r4, #8]
 801ae76:	2d00      	cmp	r5, #0
 801ae78:	bfa2      	ittt	ge
 801ae7a:	6821      	ldrge	r1, [r4, #0]
 801ae7c:	f021 0104 	bicge.w	r1, r1, #4
 801ae80:	6021      	strge	r1, [r4, #0]
 801ae82:	b90e      	cbnz	r6, 801ae88 <_printf_i+0x114>
 801ae84:	2d00      	cmp	r5, #0
 801ae86:	d04b      	beq.n	801af20 <_printf_i+0x1ac>
 801ae88:	4615      	mov	r5, r2
 801ae8a:	fbb6 f1f3 	udiv	r1, r6, r3
 801ae8e:	fb03 6711 	mls	r7, r3, r1, r6
 801ae92:	5dc7      	ldrb	r7, [r0, r7]
 801ae94:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801ae98:	4637      	mov	r7, r6
 801ae9a:	42bb      	cmp	r3, r7
 801ae9c:	460e      	mov	r6, r1
 801ae9e:	d9f4      	bls.n	801ae8a <_printf_i+0x116>
 801aea0:	2b08      	cmp	r3, #8
 801aea2:	d10b      	bne.n	801aebc <_printf_i+0x148>
 801aea4:	6823      	ldr	r3, [r4, #0]
 801aea6:	07de      	lsls	r6, r3, #31
 801aea8:	d508      	bpl.n	801aebc <_printf_i+0x148>
 801aeaa:	6923      	ldr	r3, [r4, #16]
 801aeac:	6861      	ldr	r1, [r4, #4]
 801aeae:	4299      	cmp	r1, r3
 801aeb0:	bfde      	ittt	le
 801aeb2:	2330      	movle	r3, #48	; 0x30
 801aeb4:	f805 3c01 	strble.w	r3, [r5, #-1]
 801aeb8:	f105 35ff 	addle.w	r5, r5, #4294967295
 801aebc:	1b52      	subs	r2, r2, r5
 801aebe:	6122      	str	r2, [r4, #16]
 801aec0:	f8cd a000 	str.w	sl, [sp]
 801aec4:	464b      	mov	r3, r9
 801aec6:	aa03      	add	r2, sp, #12
 801aec8:	4621      	mov	r1, r4
 801aeca:	4640      	mov	r0, r8
 801aecc:	f7ff fee4 	bl	801ac98 <_printf_common>
 801aed0:	3001      	adds	r0, #1
 801aed2:	d14a      	bne.n	801af6a <_printf_i+0x1f6>
 801aed4:	f04f 30ff 	mov.w	r0, #4294967295
 801aed8:	b004      	add	sp, #16
 801aeda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801aede:	6823      	ldr	r3, [r4, #0]
 801aee0:	f043 0320 	orr.w	r3, r3, #32
 801aee4:	6023      	str	r3, [r4, #0]
 801aee6:	4833      	ldr	r0, [pc, #204]	; (801afb4 <_printf_i+0x240>)
 801aee8:	2778      	movs	r7, #120	; 0x78
 801aeea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801aeee:	6823      	ldr	r3, [r4, #0]
 801aef0:	6829      	ldr	r1, [r5, #0]
 801aef2:	061f      	lsls	r7, r3, #24
 801aef4:	f851 6b04 	ldr.w	r6, [r1], #4
 801aef8:	d402      	bmi.n	801af00 <_printf_i+0x18c>
 801aefa:	065f      	lsls	r7, r3, #25
 801aefc:	bf48      	it	mi
 801aefe:	b2b6      	uxthmi	r6, r6
 801af00:	07df      	lsls	r7, r3, #31
 801af02:	bf48      	it	mi
 801af04:	f043 0320 	orrmi.w	r3, r3, #32
 801af08:	6029      	str	r1, [r5, #0]
 801af0a:	bf48      	it	mi
 801af0c:	6023      	strmi	r3, [r4, #0]
 801af0e:	b91e      	cbnz	r6, 801af18 <_printf_i+0x1a4>
 801af10:	6823      	ldr	r3, [r4, #0]
 801af12:	f023 0320 	bic.w	r3, r3, #32
 801af16:	6023      	str	r3, [r4, #0]
 801af18:	2310      	movs	r3, #16
 801af1a:	e7a7      	b.n	801ae6c <_printf_i+0xf8>
 801af1c:	4824      	ldr	r0, [pc, #144]	; (801afb0 <_printf_i+0x23c>)
 801af1e:	e7e4      	b.n	801aeea <_printf_i+0x176>
 801af20:	4615      	mov	r5, r2
 801af22:	e7bd      	b.n	801aea0 <_printf_i+0x12c>
 801af24:	682b      	ldr	r3, [r5, #0]
 801af26:	6826      	ldr	r6, [r4, #0]
 801af28:	6961      	ldr	r1, [r4, #20]
 801af2a:	1d18      	adds	r0, r3, #4
 801af2c:	6028      	str	r0, [r5, #0]
 801af2e:	0635      	lsls	r5, r6, #24
 801af30:	681b      	ldr	r3, [r3, #0]
 801af32:	d501      	bpl.n	801af38 <_printf_i+0x1c4>
 801af34:	6019      	str	r1, [r3, #0]
 801af36:	e002      	b.n	801af3e <_printf_i+0x1ca>
 801af38:	0670      	lsls	r0, r6, #25
 801af3a:	d5fb      	bpl.n	801af34 <_printf_i+0x1c0>
 801af3c:	8019      	strh	r1, [r3, #0]
 801af3e:	2300      	movs	r3, #0
 801af40:	6123      	str	r3, [r4, #16]
 801af42:	4615      	mov	r5, r2
 801af44:	e7bc      	b.n	801aec0 <_printf_i+0x14c>
 801af46:	682b      	ldr	r3, [r5, #0]
 801af48:	1d1a      	adds	r2, r3, #4
 801af4a:	602a      	str	r2, [r5, #0]
 801af4c:	681d      	ldr	r5, [r3, #0]
 801af4e:	6862      	ldr	r2, [r4, #4]
 801af50:	2100      	movs	r1, #0
 801af52:	4628      	mov	r0, r5
 801af54:	f7e5 f95c 	bl	8000210 <memchr>
 801af58:	b108      	cbz	r0, 801af5e <_printf_i+0x1ea>
 801af5a:	1b40      	subs	r0, r0, r5
 801af5c:	6060      	str	r0, [r4, #4]
 801af5e:	6863      	ldr	r3, [r4, #4]
 801af60:	6123      	str	r3, [r4, #16]
 801af62:	2300      	movs	r3, #0
 801af64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801af68:	e7aa      	b.n	801aec0 <_printf_i+0x14c>
 801af6a:	6923      	ldr	r3, [r4, #16]
 801af6c:	462a      	mov	r2, r5
 801af6e:	4649      	mov	r1, r9
 801af70:	4640      	mov	r0, r8
 801af72:	47d0      	blx	sl
 801af74:	3001      	adds	r0, #1
 801af76:	d0ad      	beq.n	801aed4 <_printf_i+0x160>
 801af78:	6823      	ldr	r3, [r4, #0]
 801af7a:	079b      	lsls	r3, r3, #30
 801af7c:	d413      	bmi.n	801afa6 <_printf_i+0x232>
 801af7e:	68e0      	ldr	r0, [r4, #12]
 801af80:	9b03      	ldr	r3, [sp, #12]
 801af82:	4298      	cmp	r0, r3
 801af84:	bfb8      	it	lt
 801af86:	4618      	movlt	r0, r3
 801af88:	e7a6      	b.n	801aed8 <_printf_i+0x164>
 801af8a:	2301      	movs	r3, #1
 801af8c:	4632      	mov	r2, r6
 801af8e:	4649      	mov	r1, r9
 801af90:	4640      	mov	r0, r8
 801af92:	47d0      	blx	sl
 801af94:	3001      	adds	r0, #1
 801af96:	d09d      	beq.n	801aed4 <_printf_i+0x160>
 801af98:	3501      	adds	r5, #1
 801af9a:	68e3      	ldr	r3, [r4, #12]
 801af9c:	9903      	ldr	r1, [sp, #12]
 801af9e:	1a5b      	subs	r3, r3, r1
 801afa0:	42ab      	cmp	r3, r5
 801afa2:	dcf2      	bgt.n	801af8a <_printf_i+0x216>
 801afa4:	e7eb      	b.n	801af7e <_printf_i+0x20a>
 801afa6:	2500      	movs	r5, #0
 801afa8:	f104 0619 	add.w	r6, r4, #25
 801afac:	e7f5      	b.n	801af9a <_printf_i+0x226>
 801afae:	bf00      	nop
 801afb0:	080257c2 	.word	0x080257c2
 801afb4:	080257d3 	.word	0x080257d3

0801afb8 <_scanf_float>:
 801afb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801afbc:	b087      	sub	sp, #28
 801afbe:	4617      	mov	r7, r2
 801afc0:	9303      	str	r3, [sp, #12]
 801afc2:	688b      	ldr	r3, [r1, #8]
 801afc4:	1e5a      	subs	r2, r3, #1
 801afc6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801afca:	bf83      	ittte	hi
 801afcc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801afd0:	195b      	addhi	r3, r3, r5
 801afd2:	9302      	strhi	r3, [sp, #8]
 801afd4:	2300      	movls	r3, #0
 801afd6:	bf86      	itte	hi
 801afd8:	f240 135d 	movwhi	r3, #349	; 0x15d
 801afdc:	608b      	strhi	r3, [r1, #8]
 801afde:	9302      	strls	r3, [sp, #8]
 801afe0:	680b      	ldr	r3, [r1, #0]
 801afe2:	468b      	mov	fp, r1
 801afe4:	2500      	movs	r5, #0
 801afe6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801afea:	f84b 3b1c 	str.w	r3, [fp], #28
 801afee:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801aff2:	4680      	mov	r8, r0
 801aff4:	460c      	mov	r4, r1
 801aff6:	465e      	mov	r6, fp
 801aff8:	46aa      	mov	sl, r5
 801affa:	46a9      	mov	r9, r5
 801affc:	9501      	str	r5, [sp, #4]
 801affe:	68a2      	ldr	r2, [r4, #8]
 801b000:	b152      	cbz	r2, 801b018 <_scanf_float+0x60>
 801b002:	683b      	ldr	r3, [r7, #0]
 801b004:	781b      	ldrb	r3, [r3, #0]
 801b006:	2b4e      	cmp	r3, #78	; 0x4e
 801b008:	d864      	bhi.n	801b0d4 <_scanf_float+0x11c>
 801b00a:	2b40      	cmp	r3, #64	; 0x40
 801b00c:	d83c      	bhi.n	801b088 <_scanf_float+0xd0>
 801b00e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801b012:	b2c8      	uxtb	r0, r1
 801b014:	280e      	cmp	r0, #14
 801b016:	d93a      	bls.n	801b08e <_scanf_float+0xd6>
 801b018:	f1b9 0f00 	cmp.w	r9, #0
 801b01c:	d003      	beq.n	801b026 <_scanf_float+0x6e>
 801b01e:	6823      	ldr	r3, [r4, #0]
 801b020:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801b024:	6023      	str	r3, [r4, #0]
 801b026:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b02a:	f1ba 0f01 	cmp.w	sl, #1
 801b02e:	f200 8113 	bhi.w	801b258 <_scanf_float+0x2a0>
 801b032:	455e      	cmp	r6, fp
 801b034:	f200 8105 	bhi.w	801b242 <_scanf_float+0x28a>
 801b038:	2501      	movs	r5, #1
 801b03a:	4628      	mov	r0, r5
 801b03c:	b007      	add	sp, #28
 801b03e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b042:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801b046:	2a0d      	cmp	r2, #13
 801b048:	d8e6      	bhi.n	801b018 <_scanf_float+0x60>
 801b04a:	a101      	add	r1, pc, #4	; (adr r1, 801b050 <_scanf_float+0x98>)
 801b04c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801b050:	0801b18f 	.word	0x0801b18f
 801b054:	0801b019 	.word	0x0801b019
 801b058:	0801b019 	.word	0x0801b019
 801b05c:	0801b019 	.word	0x0801b019
 801b060:	0801b1ef 	.word	0x0801b1ef
 801b064:	0801b1c7 	.word	0x0801b1c7
 801b068:	0801b019 	.word	0x0801b019
 801b06c:	0801b019 	.word	0x0801b019
 801b070:	0801b19d 	.word	0x0801b19d
 801b074:	0801b019 	.word	0x0801b019
 801b078:	0801b019 	.word	0x0801b019
 801b07c:	0801b019 	.word	0x0801b019
 801b080:	0801b019 	.word	0x0801b019
 801b084:	0801b155 	.word	0x0801b155
 801b088:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801b08c:	e7db      	b.n	801b046 <_scanf_float+0x8e>
 801b08e:	290e      	cmp	r1, #14
 801b090:	d8c2      	bhi.n	801b018 <_scanf_float+0x60>
 801b092:	a001      	add	r0, pc, #4	; (adr r0, 801b098 <_scanf_float+0xe0>)
 801b094:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801b098:	0801b147 	.word	0x0801b147
 801b09c:	0801b019 	.word	0x0801b019
 801b0a0:	0801b147 	.word	0x0801b147
 801b0a4:	0801b1db 	.word	0x0801b1db
 801b0a8:	0801b019 	.word	0x0801b019
 801b0ac:	0801b0f5 	.word	0x0801b0f5
 801b0b0:	0801b131 	.word	0x0801b131
 801b0b4:	0801b131 	.word	0x0801b131
 801b0b8:	0801b131 	.word	0x0801b131
 801b0bc:	0801b131 	.word	0x0801b131
 801b0c0:	0801b131 	.word	0x0801b131
 801b0c4:	0801b131 	.word	0x0801b131
 801b0c8:	0801b131 	.word	0x0801b131
 801b0cc:	0801b131 	.word	0x0801b131
 801b0d0:	0801b131 	.word	0x0801b131
 801b0d4:	2b6e      	cmp	r3, #110	; 0x6e
 801b0d6:	d809      	bhi.n	801b0ec <_scanf_float+0x134>
 801b0d8:	2b60      	cmp	r3, #96	; 0x60
 801b0da:	d8b2      	bhi.n	801b042 <_scanf_float+0x8a>
 801b0dc:	2b54      	cmp	r3, #84	; 0x54
 801b0de:	d077      	beq.n	801b1d0 <_scanf_float+0x218>
 801b0e0:	2b59      	cmp	r3, #89	; 0x59
 801b0e2:	d199      	bne.n	801b018 <_scanf_float+0x60>
 801b0e4:	2d07      	cmp	r5, #7
 801b0e6:	d197      	bne.n	801b018 <_scanf_float+0x60>
 801b0e8:	2508      	movs	r5, #8
 801b0ea:	e029      	b.n	801b140 <_scanf_float+0x188>
 801b0ec:	2b74      	cmp	r3, #116	; 0x74
 801b0ee:	d06f      	beq.n	801b1d0 <_scanf_float+0x218>
 801b0f0:	2b79      	cmp	r3, #121	; 0x79
 801b0f2:	e7f6      	b.n	801b0e2 <_scanf_float+0x12a>
 801b0f4:	6821      	ldr	r1, [r4, #0]
 801b0f6:	05c8      	lsls	r0, r1, #23
 801b0f8:	d51a      	bpl.n	801b130 <_scanf_float+0x178>
 801b0fa:	9b02      	ldr	r3, [sp, #8]
 801b0fc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801b100:	6021      	str	r1, [r4, #0]
 801b102:	f109 0901 	add.w	r9, r9, #1
 801b106:	b11b      	cbz	r3, 801b110 <_scanf_float+0x158>
 801b108:	3b01      	subs	r3, #1
 801b10a:	3201      	adds	r2, #1
 801b10c:	9302      	str	r3, [sp, #8]
 801b10e:	60a2      	str	r2, [r4, #8]
 801b110:	68a3      	ldr	r3, [r4, #8]
 801b112:	3b01      	subs	r3, #1
 801b114:	60a3      	str	r3, [r4, #8]
 801b116:	6923      	ldr	r3, [r4, #16]
 801b118:	3301      	adds	r3, #1
 801b11a:	6123      	str	r3, [r4, #16]
 801b11c:	687b      	ldr	r3, [r7, #4]
 801b11e:	3b01      	subs	r3, #1
 801b120:	2b00      	cmp	r3, #0
 801b122:	607b      	str	r3, [r7, #4]
 801b124:	f340 8084 	ble.w	801b230 <_scanf_float+0x278>
 801b128:	683b      	ldr	r3, [r7, #0]
 801b12a:	3301      	adds	r3, #1
 801b12c:	603b      	str	r3, [r7, #0]
 801b12e:	e766      	b.n	801affe <_scanf_float+0x46>
 801b130:	eb1a 0f05 	cmn.w	sl, r5
 801b134:	f47f af70 	bne.w	801b018 <_scanf_float+0x60>
 801b138:	6822      	ldr	r2, [r4, #0]
 801b13a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801b13e:	6022      	str	r2, [r4, #0]
 801b140:	f806 3b01 	strb.w	r3, [r6], #1
 801b144:	e7e4      	b.n	801b110 <_scanf_float+0x158>
 801b146:	6822      	ldr	r2, [r4, #0]
 801b148:	0610      	lsls	r0, r2, #24
 801b14a:	f57f af65 	bpl.w	801b018 <_scanf_float+0x60>
 801b14e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801b152:	e7f4      	b.n	801b13e <_scanf_float+0x186>
 801b154:	f1ba 0f00 	cmp.w	sl, #0
 801b158:	d10e      	bne.n	801b178 <_scanf_float+0x1c0>
 801b15a:	f1b9 0f00 	cmp.w	r9, #0
 801b15e:	d10e      	bne.n	801b17e <_scanf_float+0x1c6>
 801b160:	6822      	ldr	r2, [r4, #0]
 801b162:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801b166:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801b16a:	d108      	bne.n	801b17e <_scanf_float+0x1c6>
 801b16c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801b170:	6022      	str	r2, [r4, #0]
 801b172:	f04f 0a01 	mov.w	sl, #1
 801b176:	e7e3      	b.n	801b140 <_scanf_float+0x188>
 801b178:	f1ba 0f02 	cmp.w	sl, #2
 801b17c:	d055      	beq.n	801b22a <_scanf_float+0x272>
 801b17e:	2d01      	cmp	r5, #1
 801b180:	d002      	beq.n	801b188 <_scanf_float+0x1d0>
 801b182:	2d04      	cmp	r5, #4
 801b184:	f47f af48 	bne.w	801b018 <_scanf_float+0x60>
 801b188:	3501      	adds	r5, #1
 801b18a:	b2ed      	uxtb	r5, r5
 801b18c:	e7d8      	b.n	801b140 <_scanf_float+0x188>
 801b18e:	f1ba 0f01 	cmp.w	sl, #1
 801b192:	f47f af41 	bne.w	801b018 <_scanf_float+0x60>
 801b196:	f04f 0a02 	mov.w	sl, #2
 801b19a:	e7d1      	b.n	801b140 <_scanf_float+0x188>
 801b19c:	b97d      	cbnz	r5, 801b1be <_scanf_float+0x206>
 801b19e:	f1b9 0f00 	cmp.w	r9, #0
 801b1a2:	f47f af3c 	bne.w	801b01e <_scanf_float+0x66>
 801b1a6:	6822      	ldr	r2, [r4, #0]
 801b1a8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801b1ac:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801b1b0:	f47f af39 	bne.w	801b026 <_scanf_float+0x6e>
 801b1b4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801b1b8:	6022      	str	r2, [r4, #0]
 801b1ba:	2501      	movs	r5, #1
 801b1bc:	e7c0      	b.n	801b140 <_scanf_float+0x188>
 801b1be:	2d03      	cmp	r5, #3
 801b1c0:	d0e2      	beq.n	801b188 <_scanf_float+0x1d0>
 801b1c2:	2d05      	cmp	r5, #5
 801b1c4:	e7de      	b.n	801b184 <_scanf_float+0x1cc>
 801b1c6:	2d02      	cmp	r5, #2
 801b1c8:	f47f af26 	bne.w	801b018 <_scanf_float+0x60>
 801b1cc:	2503      	movs	r5, #3
 801b1ce:	e7b7      	b.n	801b140 <_scanf_float+0x188>
 801b1d0:	2d06      	cmp	r5, #6
 801b1d2:	f47f af21 	bne.w	801b018 <_scanf_float+0x60>
 801b1d6:	2507      	movs	r5, #7
 801b1d8:	e7b2      	b.n	801b140 <_scanf_float+0x188>
 801b1da:	6822      	ldr	r2, [r4, #0]
 801b1dc:	0591      	lsls	r1, r2, #22
 801b1de:	f57f af1b 	bpl.w	801b018 <_scanf_float+0x60>
 801b1e2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801b1e6:	6022      	str	r2, [r4, #0]
 801b1e8:	f8cd 9004 	str.w	r9, [sp, #4]
 801b1ec:	e7a8      	b.n	801b140 <_scanf_float+0x188>
 801b1ee:	6822      	ldr	r2, [r4, #0]
 801b1f0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801b1f4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801b1f8:	d006      	beq.n	801b208 <_scanf_float+0x250>
 801b1fa:	0550      	lsls	r0, r2, #21
 801b1fc:	f57f af0c 	bpl.w	801b018 <_scanf_float+0x60>
 801b200:	f1b9 0f00 	cmp.w	r9, #0
 801b204:	f43f af0f 	beq.w	801b026 <_scanf_float+0x6e>
 801b208:	0591      	lsls	r1, r2, #22
 801b20a:	bf58      	it	pl
 801b20c:	9901      	ldrpl	r1, [sp, #4]
 801b20e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801b212:	bf58      	it	pl
 801b214:	eba9 0101 	subpl.w	r1, r9, r1
 801b218:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801b21c:	bf58      	it	pl
 801b21e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801b222:	6022      	str	r2, [r4, #0]
 801b224:	f04f 0900 	mov.w	r9, #0
 801b228:	e78a      	b.n	801b140 <_scanf_float+0x188>
 801b22a:	f04f 0a03 	mov.w	sl, #3
 801b22e:	e787      	b.n	801b140 <_scanf_float+0x188>
 801b230:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801b234:	4639      	mov	r1, r7
 801b236:	4640      	mov	r0, r8
 801b238:	4798      	blx	r3
 801b23a:	2800      	cmp	r0, #0
 801b23c:	f43f aedf 	beq.w	801affe <_scanf_float+0x46>
 801b240:	e6ea      	b.n	801b018 <_scanf_float+0x60>
 801b242:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b246:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b24a:	463a      	mov	r2, r7
 801b24c:	4640      	mov	r0, r8
 801b24e:	4798      	blx	r3
 801b250:	6923      	ldr	r3, [r4, #16]
 801b252:	3b01      	subs	r3, #1
 801b254:	6123      	str	r3, [r4, #16]
 801b256:	e6ec      	b.n	801b032 <_scanf_float+0x7a>
 801b258:	1e6b      	subs	r3, r5, #1
 801b25a:	2b06      	cmp	r3, #6
 801b25c:	d825      	bhi.n	801b2aa <_scanf_float+0x2f2>
 801b25e:	2d02      	cmp	r5, #2
 801b260:	d836      	bhi.n	801b2d0 <_scanf_float+0x318>
 801b262:	455e      	cmp	r6, fp
 801b264:	f67f aee8 	bls.w	801b038 <_scanf_float+0x80>
 801b268:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b26c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b270:	463a      	mov	r2, r7
 801b272:	4640      	mov	r0, r8
 801b274:	4798      	blx	r3
 801b276:	6923      	ldr	r3, [r4, #16]
 801b278:	3b01      	subs	r3, #1
 801b27a:	6123      	str	r3, [r4, #16]
 801b27c:	e7f1      	b.n	801b262 <_scanf_float+0x2aa>
 801b27e:	9802      	ldr	r0, [sp, #8]
 801b280:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b284:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801b288:	9002      	str	r0, [sp, #8]
 801b28a:	463a      	mov	r2, r7
 801b28c:	4640      	mov	r0, r8
 801b28e:	4798      	blx	r3
 801b290:	6923      	ldr	r3, [r4, #16]
 801b292:	3b01      	subs	r3, #1
 801b294:	6123      	str	r3, [r4, #16]
 801b296:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b29a:	fa5f fa8a 	uxtb.w	sl, sl
 801b29e:	f1ba 0f02 	cmp.w	sl, #2
 801b2a2:	d1ec      	bne.n	801b27e <_scanf_float+0x2c6>
 801b2a4:	3d03      	subs	r5, #3
 801b2a6:	b2ed      	uxtb	r5, r5
 801b2a8:	1b76      	subs	r6, r6, r5
 801b2aa:	6823      	ldr	r3, [r4, #0]
 801b2ac:	05da      	lsls	r2, r3, #23
 801b2ae:	d52f      	bpl.n	801b310 <_scanf_float+0x358>
 801b2b0:	055b      	lsls	r3, r3, #21
 801b2b2:	d510      	bpl.n	801b2d6 <_scanf_float+0x31e>
 801b2b4:	455e      	cmp	r6, fp
 801b2b6:	f67f aebf 	bls.w	801b038 <_scanf_float+0x80>
 801b2ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b2be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b2c2:	463a      	mov	r2, r7
 801b2c4:	4640      	mov	r0, r8
 801b2c6:	4798      	blx	r3
 801b2c8:	6923      	ldr	r3, [r4, #16]
 801b2ca:	3b01      	subs	r3, #1
 801b2cc:	6123      	str	r3, [r4, #16]
 801b2ce:	e7f1      	b.n	801b2b4 <_scanf_float+0x2fc>
 801b2d0:	46aa      	mov	sl, r5
 801b2d2:	9602      	str	r6, [sp, #8]
 801b2d4:	e7df      	b.n	801b296 <_scanf_float+0x2de>
 801b2d6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801b2da:	6923      	ldr	r3, [r4, #16]
 801b2dc:	2965      	cmp	r1, #101	; 0x65
 801b2de:	f103 33ff 	add.w	r3, r3, #4294967295
 801b2e2:	f106 35ff 	add.w	r5, r6, #4294967295
 801b2e6:	6123      	str	r3, [r4, #16]
 801b2e8:	d00c      	beq.n	801b304 <_scanf_float+0x34c>
 801b2ea:	2945      	cmp	r1, #69	; 0x45
 801b2ec:	d00a      	beq.n	801b304 <_scanf_float+0x34c>
 801b2ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b2f2:	463a      	mov	r2, r7
 801b2f4:	4640      	mov	r0, r8
 801b2f6:	4798      	blx	r3
 801b2f8:	6923      	ldr	r3, [r4, #16]
 801b2fa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801b2fe:	3b01      	subs	r3, #1
 801b300:	1eb5      	subs	r5, r6, #2
 801b302:	6123      	str	r3, [r4, #16]
 801b304:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b308:	463a      	mov	r2, r7
 801b30a:	4640      	mov	r0, r8
 801b30c:	4798      	blx	r3
 801b30e:	462e      	mov	r6, r5
 801b310:	6825      	ldr	r5, [r4, #0]
 801b312:	f015 0510 	ands.w	r5, r5, #16
 801b316:	d158      	bne.n	801b3ca <_scanf_float+0x412>
 801b318:	7035      	strb	r5, [r6, #0]
 801b31a:	6823      	ldr	r3, [r4, #0]
 801b31c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801b320:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801b324:	d11c      	bne.n	801b360 <_scanf_float+0x3a8>
 801b326:	9b01      	ldr	r3, [sp, #4]
 801b328:	454b      	cmp	r3, r9
 801b32a:	eba3 0209 	sub.w	r2, r3, r9
 801b32e:	d124      	bne.n	801b37a <_scanf_float+0x3c2>
 801b330:	2200      	movs	r2, #0
 801b332:	4659      	mov	r1, fp
 801b334:	4640      	mov	r0, r8
 801b336:	f002 fc8b 	bl	801dc50 <_strtod_r>
 801b33a:	9b03      	ldr	r3, [sp, #12]
 801b33c:	6821      	ldr	r1, [r4, #0]
 801b33e:	681b      	ldr	r3, [r3, #0]
 801b340:	f011 0f02 	tst.w	r1, #2
 801b344:	ec57 6b10 	vmov	r6, r7, d0
 801b348:	f103 0204 	add.w	r2, r3, #4
 801b34c:	d020      	beq.n	801b390 <_scanf_float+0x3d8>
 801b34e:	9903      	ldr	r1, [sp, #12]
 801b350:	600a      	str	r2, [r1, #0]
 801b352:	681b      	ldr	r3, [r3, #0]
 801b354:	e9c3 6700 	strd	r6, r7, [r3]
 801b358:	68e3      	ldr	r3, [r4, #12]
 801b35a:	3301      	adds	r3, #1
 801b35c:	60e3      	str	r3, [r4, #12]
 801b35e:	e66c      	b.n	801b03a <_scanf_float+0x82>
 801b360:	9b04      	ldr	r3, [sp, #16]
 801b362:	2b00      	cmp	r3, #0
 801b364:	d0e4      	beq.n	801b330 <_scanf_float+0x378>
 801b366:	9905      	ldr	r1, [sp, #20]
 801b368:	230a      	movs	r3, #10
 801b36a:	462a      	mov	r2, r5
 801b36c:	3101      	adds	r1, #1
 801b36e:	4640      	mov	r0, r8
 801b370:	f002 fcf6 	bl	801dd60 <_strtol_r>
 801b374:	9b04      	ldr	r3, [sp, #16]
 801b376:	9e05      	ldr	r6, [sp, #20]
 801b378:	1ac2      	subs	r2, r0, r3
 801b37a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801b37e:	429e      	cmp	r6, r3
 801b380:	bf28      	it	cs
 801b382:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801b386:	4912      	ldr	r1, [pc, #72]	; (801b3d0 <_scanf_float+0x418>)
 801b388:	4630      	mov	r0, r6
 801b38a:	f000 f943 	bl	801b614 <siprintf>
 801b38e:	e7cf      	b.n	801b330 <_scanf_float+0x378>
 801b390:	f011 0f04 	tst.w	r1, #4
 801b394:	9903      	ldr	r1, [sp, #12]
 801b396:	600a      	str	r2, [r1, #0]
 801b398:	d1db      	bne.n	801b352 <_scanf_float+0x39a>
 801b39a:	f8d3 8000 	ldr.w	r8, [r3]
 801b39e:	ee10 2a10 	vmov	r2, s0
 801b3a2:	ee10 0a10 	vmov	r0, s0
 801b3a6:	463b      	mov	r3, r7
 801b3a8:	4639      	mov	r1, r7
 801b3aa:	f7e5 fbdf 	bl	8000b6c <__aeabi_dcmpun>
 801b3ae:	b128      	cbz	r0, 801b3bc <_scanf_float+0x404>
 801b3b0:	4808      	ldr	r0, [pc, #32]	; (801b3d4 <_scanf_float+0x41c>)
 801b3b2:	f000 fac5 	bl	801b940 <nanf>
 801b3b6:	ed88 0a00 	vstr	s0, [r8]
 801b3ba:	e7cd      	b.n	801b358 <_scanf_float+0x3a0>
 801b3bc:	4630      	mov	r0, r6
 801b3be:	4639      	mov	r1, r7
 801b3c0:	f7e5 fc32 	bl	8000c28 <__aeabi_d2f>
 801b3c4:	f8c8 0000 	str.w	r0, [r8]
 801b3c8:	e7c6      	b.n	801b358 <_scanf_float+0x3a0>
 801b3ca:	2500      	movs	r5, #0
 801b3cc:	e635      	b.n	801b03a <_scanf_float+0x82>
 801b3ce:	bf00      	nop
 801b3d0:	080257e4 	.word	0x080257e4
 801b3d4:	08025b75 	.word	0x08025b75

0801b3d8 <std>:
 801b3d8:	2300      	movs	r3, #0
 801b3da:	b510      	push	{r4, lr}
 801b3dc:	4604      	mov	r4, r0
 801b3de:	e9c0 3300 	strd	r3, r3, [r0]
 801b3e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b3e6:	6083      	str	r3, [r0, #8]
 801b3e8:	8181      	strh	r1, [r0, #12]
 801b3ea:	6643      	str	r3, [r0, #100]	; 0x64
 801b3ec:	81c2      	strh	r2, [r0, #14]
 801b3ee:	6183      	str	r3, [r0, #24]
 801b3f0:	4619      	mov	r1, r3
 801b3f2:	2208      	movs	r2, #8
 801b3f4:	305c      	adds	r0, #92	; 0x5c
 801b3f6:	f000 fa05 	bl	801b804 <memset>
 801b3fa:	4b0d      	ldr	r3, [pc, #52]	; (801b430 <std+0x58>)
 801b3fc:	6263      	str	r3, [r4, #36]	; 0x24
 801b3fe:	4b0d      	ldr	r3, [pc, #52]	; (801b434 <std+0x5c>)
 801b400:	62a3      	str	r3, [r4, #40]	; 0x28
 801b402:	4b0d      	ldr	r3, [pc, #52]	; (801b438 <std+0x60>)
 801b404:	62e3      	str	r3, [r4, #44]	; 0x2c
 801b406:	4b0d      	ldr	r3, [pc, #52]	; (801b43c <std+0x64>)
 801b408:	6323      	str	r3, [r4, #48]	; 0x30
 801b40a:	4b0d      	ldr	r3, [pc, #52]	; (801b440 <std+0x68>)
 801b40c:	6224      	str	r4, [r4, #32]
 801b40e:	429c      	cmp	r4, r3
 801b410:	d006      	beq.n	801b420 <std+0x48>
 801b412:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801b416:	4294      	cmp	r4, r2
 801b418:	d002      	beq.n	801b420 <std+0x48>
 801b41a:	33d0      	adds	r3, #208	; 0xd0
 801b41c:	429c      	cmp	r4, r3
 801b41e:	d105      	bne.n	801b42c <std+0x54>
 801b420:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801b424:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b428:	f000 ba78 	b.w	801b91c <__retarget_lock_init_recursive>
 801b42c:	bd10      	pop	{r4, pc}
 801b42e:	bf00      	nop
 801b430:	0801b655 	.word	0x0801b655
 801b434:	0801b677 	.word	0x0801b677
 801b438:	0801b6af 	.word	0x0801b6af
 801b43c:	0801b6d3 	.word	0x0801b6d3
 801b440:	20013658 	.word	0x20013658

0801b444 <stdio_exit_handler>:
 801b444:	4a02      	ldr	r2, [pc, #8]	; (801b450 <stdio_exit_handler+0xc>)
 801b446:	4903      	ldr	r1, [pc, #12]	; (801b454 <stdio_exit_handler+0x10>)
 801b448:	4803      	ldr	r0, [pc, #12]	; (801b458 <stdio_exit_handler+0x14>)
 801b44a:	f000 b869 	b.w	801b520 <_fwalk_sglue>
 801b44e:	bf00      	nop
 801b450:	20000168 	.word	0x20000168
 801b454:	0801e3a9 	.word	0x0801e3a9
 801b458:	20000174 	.word	0x20000174

0801b45c <cleanup_stdio>:
 801b45c:	6841      	ldr	r1, [r0, #4]
 801b45e:	4b0c      	ldr	r3, [pc, #48]	; (801b490 <cleanup_stdio+0x34>)
 801b460:	4299      	cmp	r1, r3
 801b462:	b510      	push	{r4, lr}
 801b464:	4604      	mov	r4, r0
 801b466:	d001      	beq.n	801b46c <cleanup_stdio+0x10>
 801b468:	f002 ff9e 	bl	801e3a8 <_fflush_r>
 801b46c:	68a1      	ldr	r1, [r4, #8]
 801b46e:	4b09      	ldr	r3, [pc, #36]	; (801b494 <cleanup_stdio+0x38>)
 801b470:	4299      	cmp	r1, r3
 801b472:	d002      	beq.n	801b47a <cleanup_stdio+0x1e>
 801b474:	4620      	mov	r0, r4
 801b476:	f002 ff97 	bl	801e3a8 <_fflush_r>
 801b47a:	68e1      	ldr	r1, [r4, #12]
 801b47c:	4b06      	ldr	r3, [pc, #24]	; (801b498 <cleanup_stdio+0x3c>)
 801b47e:	4299      	cmp	r1, r3
 801b480:	d004      	beq.n	801b48c <cleanup_stdio+0x30>
 801b482:	4620      	mov	r0, r4
 801b484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b488:	f002 bf8e 	b.w	801e3a8 <_fflush_r>
 801b48c:	bd10      	pop	{r4, pc}
 801b48e:	bf00      	nop
 801b490:	20013658 	.word	0x20013658
 801b494:	200136c0 	.word	0x200136c0
 801b498:	20013728 	.word	0x20013728

0801b49c <global_stdio_init.part.0>:
 801b49c:	b510      	push	{r4, lr}
 801b49e:	4b0b      	ldr	r3, [pc, #44]	; (801b4cc <global_stdio_init.part.0+0x30>)
 801b4a0:	4c0b      	ldr	r4, [pc, #44]	; (801b4d0 <global_stdio_init.part.0+0x34>)
 801b4a2:	4a0c      	ldr	r2, [pc, #48]	; (801b4d4 <global_stdio_init.part.0+0x38>)
 801b4a4:	601a      	str	r2, [r3, #0]
 801b4a6:	4620      	mov	r0, r4
 801b4a8:	2200      	movs	r2, #0
 801b4aa:	2104      	movs	r1, #4
 801b4ac:	f7ff ff94 	bl	801b3d8 <std>
 801b4b0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801b4b4:	2201      	movs	r2, #1
 801b4b6:	2109      	movs	r1, #9
 801b4b8:	f7ff ff8e 	bl	801b3d8 <std>
 801b4bc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801b4c0:	2202      	movs	r2, #2
 801b4c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b4c6:	2112      	movs	r1, #18
 801b4c8:	f7ff bf86 	b.w	801b3d8 <std>
 801b4cc:	20013790 	.word	0x20013790
 801b4d0:	20013658 	.word	0x20013658
 801b4d4:	0801b445 	.word	0x0801b445

0801b4d8 <__sfp_lock_acquire>:
 801b4d8:	4801      	ldr	r0, [pc, #4]	; (801b4e0 <__sfp_lock_acquire+0x8>)
 801b4da:	f000 ba20 	b.w	801b91e <__retarget_lock_acquire_recursive>
 801b4de:	bf00      	nop
 801b4e0:	20013799 	.word	0x20013799

0801b4e4 <__sfp_lock_release>:
 801b4e4:	4801      	ldr	r0, [pc, #4]	; (801b4ec <__sfp_lock_release+0x8>)
 801b4e6:	f000 ba1b 	b.w	801b920 <__retarget_lock_release_recursive>
 801b4ea:	bf00      	nop
 801b4ec:	20013799 	.word	0x20013799

0801b4f0 <__sinit>:
 801b4f0:	b510      	push	{r4, lr}
 801b4f2:	4604      	mov	r4, r0
 801b4f4:	f7ff fff0 	bl	801b4d8 <__sfp_lock_acquire>
 801b4f8:	6a23      	ldr	r3, [r4, #32]
 801b4fa:	b11b      	cbz	r3, 801b504 <__sinit+0x14>
 801b4fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b500:	f7ff bff0 	b.w	801b4e4 <__sfp_lock_release>
 801b504:	4b04      	ldr	r3, [pc, #16]	; (801b518 <__sinit+0x28>)
 801b506:	6223      	str	r3, [r4, #32]
 801b508:	4b04      	ldr	r3, [pc, #16]	; (801b51c <__sinit+0x2c>)
 801b50a:	681b      	ldr	r3, [r3, #0]
 801b50c:	2b00      	cmp	r3, #0
 801b50e:	d1f5      	bne.n	801b4fc <__sinit+0xc>
 801b510:	f7ff ffc4 	bl	801b49c <global_stdio_init.part.0>
 801b514:	e7f2      	b.n	801b4fc <__sinit+0xc>
 801b516:	bf00      	nop
 801b518:	0801b45d 	.word	0x0801b45d
 801b51c:	20013790 	.word	0x20013790

0801b520 <_fwalk_sglue>:
 801b520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b524:	4607      	mov	r7, r0
 801b526:	4688      	mov	r8, r1
 801b528:	4614      	mov	r4, r2
 801b52a:	2600      	movs	r6, #0
 801b52c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b530:	f1b9 0901 	subs.w	r9, r9, #1
 801b534:	d505      	bpl.n	801b542 <_fwalk_sglue+0x22>
 801b536:	6824      	ldr	r4, [r4, #0]
 801b538:	2c00      	cmp	r4, #0
 801b53a:	d1f7      	bne.n	801b52c <_fwalk_sglue+0xc>
 801b53c:	4630      	mov	r0, r6
 801b53e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b542:	89ab      	ldrh	r3, [r5, #12]
 801b544:	2b01      	cmp	r3, #1
 801b546:	d907      	bls.n	801b558 <_fwalk_sglue+0x38>
 801b548:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b54c:	3301      	adds	r3, #1
 801b54e:	d003      	beq.n	801b558 <_fwalk_sglue+0x38>
 801b550:	4629      	mov	r1, r5
 801b552:	4638      	mov	r0, r7
 801b554:	47c0      	blx	r8
 801b556:	4306      	orrs	r6, r0
 801b558:	3568      	adds	r5, #104	; 0x68
 801b55a:	e7e9      	b.n	801b530 <_fwalk_sglue+0x10>

0801b55c <_puts_r>:
 801b55c:	6a03      	ldr	r3, [r0, #32]
 801b55e:	b570      	push	{r4, r5, r6, lr}
 801b560:	6884      	ldr	r4, [r0, #8]
 801b562:	4605      	mov	r5, r0
 801b564:	460e      	mov	r6, r1
 801b566:	b90b      	cbnz	r3, 801b56c <_puts_r+0x10>
 801b568:	f7ff ffc2 	bl	801b4f0 <__sinit>
 801b56c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b56e:	07db      	lsls	r3, r3, #31
 801b570:	d405      	bmi.n	801b57e <_puts_r+0x22>
 801b572:	89a3      	ldrh	r3, [r4, #12]
 801b574:	0598      	lsls	r0, r3, #22
 801b576:	d402      	bmi.n	801b57e <_puts_r+0x22>
 801b578:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b57a:	f000 f9d0 	bl	801b91e <__retarget_lock_acquire_recursive>
 801b57e:	89a3      	ldrh	r3, [r4, #12]
 801b580:	0719      	lsls	r1, r3, #28
 801b582:	d513      	bpl.n	801b5ac <_puts_r+0x50>
 801b584:	6923      	ldr	r3, [r4, #16]
 801b586:	b18b      	cbz	r3, 801b5ac <_puts_r+0x50>
 801b588:	3e01      	subs	r6, #1
 801b58a:	68a3      	ldr	r3, [r4, #8]
 801b58c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801b590:	3b01      	subs	r3, #1
 801b592:	60a3      	str	r3, [r4, #8]
 801b594:	b9e9      	cbnz	r1, 801b5d2 <_puts_r+0x76>
 801b596:	2b00      	cmp	r3, #0
 801b598:	da2e      	bge.n	801b5f8 <_puts_r+0x9c>
 801b59a:	4622      	mov	r2, r4
 801b59c:	210a      	movs	r1, #10
 801b59e:	4628      	mov	r0, r5
 801b5a0:	f000 f89b 	bl	801b6da <__swbuf_r>
 801b5a4:	3001      	adds	r0, #1
 801b5a6:	d007      	beq.n	801b5b8 <_puts_r+0x5c>
 801b5a8:	250a      	movs	r5, #10
 801b5aa:	e007      	b.n	801b5bc <_puts_r+0x60>
 801b5ac:	4621      	mov	r1, r4
 801b5ae:	4628      	mov	r0, r5
 801b5b0:	f000 f8d0 	bl	801b754 <__swsetup_r>
 801b5b4:	2800      	cmp	r0, #0
 801b5b6:	d0e7      	beq.n	801b588 <_puts_r+0x2c>
 801b5b8:	f04f 35ff 	mov.w	r5, #4294967295
 801b5bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b5be:	07da      	lsls	r2, r3, #31
 801b5c0:	d405      	bmi.n	801b5ce <_puts_r+0x72>
 801b5c2:	89a3      	ldrh	r3, [r4, #12]
 801b5c4:	059b      	lsls	r3, r3, #22
 801b5c6:	d402      	bmi.n	801b5ce <_puts_r+0x72>
 801b5c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b5ca:	f000 f9a9 	bl	801b920 <__retarget_lock_release_recursive>
 801b5ce:	4628      	mov	r0, r5
 801b5d0:	bd70      	pop	{r4, r5, r6, pc}
 801b5d2:	2b00      	cmp	r3, #0
 801b5d4:	da04      	bge.n	801b5e0 <_puts_r+0x84>
 801b5d6:	69a2      	ldr	r2, [r4, #24]
 801b5d8:	429a      	cmp	r2, r3
 801b5da:	dc06      	bgt.n	801b5ea <_puts_r+0x8e>
 801b5dc:	290a      	cmp	r1, #10
 801b5de:	d004      	beq.n	801b5ea <_puts_r+0x8e>
 801b5e0:	6823      	ldr	r3, [r4, #0]
 801b5e2:	1c5a      	adds	r2, r3, #1
 801b5e4:	6022      	str	r2, [r4, #0]
 801b5e6:	7019      	strb	r1, [r3, #0]
 801b5e8:	e7cf      	b.n	801b58a <_puts_r+0x2e>
 801b5ea:	4622      	mov	r2, r4
 801b5ec:	4628      	mov	r0, r5
 801b5ee:	f000 f874 	bl	801b6da <__swbuf_r>
 801b5f2:	3001      	adds	r0, #1
 801b5f4:	d1c9      	bne.n	801b58a <_puts_r+0x2e>
 801b5f6:	e7df      	b.n	801b5b8 <_puts_r+0x5c>
 801b5f8:	6823      	ldr	r3, [r4, #0]
 801b5fa:	250a      	movs	r5, #10
 801b5fc:	1c5a      	adds	r2, r3, #1
 801b5fe:	6022      	str	r2, [r4, #0]
 801b600:	701d      	strb	r5, [r3, #0]
 801b602:	e7db      	b.n	801b5bc <_puts_r+0x60>

0801b604 <puts>:
 801b604:	4b02      	ldr	r3, [pc, #8]	; (801b610 <puts+0xc>)
 801b606:	4601      	mov	r1, r0
 801b608:	6818      	ldr	r0, [r3, #0]
 801b60a:	f7ff bfa7 	b.w	801b55c <_puts_r>
 801b60e:	bf00      	nop
 801b610:	200001c0 	.word	0x200001c0

0801b614 <siprintf>:
 801b614:	b40e      	push	{r1, r2, r3}
 801b616:	b500      	push	{lr}
 801b618:	b09c      	sub	sp, #112	; 0x70
 801b61a:	ab1d      	add	r3, sp, #116	; 0x74
 801b61c:	9002      	str	r0, [sp, #8]
 801b61e:	9006      	str	r0, [sp, #24]
 801b620:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801b624:	4809      	ldr	r0, [pc, #36]	; (801b64c <siprintf+0x38>)
 801b626:	9107      	str	r1, [sp, #28]
 801b628:	9104      	str	r1, [sp, #16]
 801b62a:	4909      	ldr	r1, [pc, #36]	; (801b650 <siprintf+0x3c>)
 801b62c:	f853 2b04 	ldr.w	r2, [r3], #4
 801b630:	9105      	str	r1, [sp, #20]
 801b632:	6800      	ldr	r0, [r0, #0]
 801b634:	9301      	str	r3, [sp, #4]
 801b636:	a902      	add	r1, sp, #8
 801b638:	f002 fbee 	bl	801de18 <_svfiprintf_r>
 801b63c:	9b02      	ldr	r3, [sp, #8]
 801b63e:	2200      	movs	r2, #0
 801b640:	701a      	strb	r2, [r3, #0]
 801b642:	b01c      	add	sp, #112	; 0x70
 801b644:	f85d eb04 	ldr.w	lr, [sp], #4
 801b648:	b003      	add	sp, #12
 801b64a:	4770      	bx	lr
 801b64c:	200001c0 	.word	0x200001c0
 801b650:	ffff0208 	.word	0xffff0208

0801b654 <__sread>:
 801b654:	b510      	push	{r4, lr}
 801b656:	460c      	mov	r4, r1
 801b658:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b65c:	f000 f900 	bl	801b860 <_read_r>
 801b660:	2800      	cmp	r0, #0
 801b662:	bfab      	itete	ge
 801b664:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801b666:	89a3      	ldrhlt	r3, [r4, #12]
 801b668:	181b      	addge	r3, r3, r0
 801b66a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b66e:	bfac      	ite	ge
 801b670:	6563      	strge	r3, [r4, #84]	; 0x54
 801b672:	81a3      	strhlt	r3, [r4, #12]
 801b674:	bd10      	pop	{r4, pc}

0801b676 <__swrite>:
 801b676:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b67a:	461f      	mov	r7, r3
 801b67c:	898b      	ldrh	r3, [r1, #12]
 801b67e:	05db      	lsls	r3, r3, #23
 801b680:	4605      	mov	r5, r0
 801b682:	460c      	mov	r4, r1
 801b684:	4616      	mov	r6, r2
 801b686:	d505      	bpl.n	801b694 <__swrite+0x1e>
 801b688:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b68c:	2302      	movs	r3, #2
 801b68e:	2200      	movs	r2, #0
 801b690:	f000 f8d4 	bl	801b83c <_lseek_r>
 801b694:	89a3      	ldrh	r3, [r4, #12]
 801b696:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b69a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b69e:	81a3      	strh	r3, [r4, #12]
 801b6a0:	4632      	mov	r2, r6
 801b6a2:	463b      	mov	r3, r7
 801b6a4:	4628      	mov	r0, r5
 801b6a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b6aa:	f000 b8fb 	b.w	801b8a4 <_write_r>

0801b6ae <__sseek>:
 801b6ae:	b510      	push	{r4, lr}
 801b6b0:	460c      	mov	r4, r1
 801b6b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b6b6:	f000 f8c1 	bl	801b83c <_lseek_r>
 801b6ba:	1c43      	adds	r3, r0, #1
 801b6bc:	89a3      	ldrh	r3, [r4, #12]
 801b6be:	bf15      	itete	ne
 801b6c0:	6560      	strne	r0, [r4, #84]	; 0x54
 801b6c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b6c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b6ca:	81a3      	strheq	r3, [r4, #12]
 801b6cc:	bf18      	it	ne
 801b6ce:	81a3      	strhne	r3, [r4, #12]
 801b6d0:	bd10      	pop	{r4, pc}

0801b6d2 <__sclose>:
 801b6d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b6d6:	f000 b8a1 	b.w	801b81c <_close_r>

0801b6da <__swbuf_r>:
 801b6da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b6dc:	460e      	mov	r6, r1
 801b6de:	4614      	mov	r4, r2
 801b6e0:	4605      	mov	r5, r0
 801b6e2:	b118      	cbz	r0, 801b6ec <__swbuf_r+0x12>
 801b6e4:	6a03      	ldr	r3, [r0, #32]
 801b6e6:	b90b      	cbnz	r3, 801b6ec <__swbuf_r+0x12>
 801b6e8:	f7ff ff02 	bl	801b4f0 <__sinit>
 801b6ec:	69a3      	ldr	r3, [r4, #24]
 801b6ee:	60a3      	str	r3, [r4, #8]
 801b6f0:	89a3      	ldrh	r3, [r4, #12]
 801b6f2:	071a      	lsls	r2, r3, #28
 801b6f4:	d525      	bpl.n	801b742 <__swbuf_r+0x68>
 801b6f6:	6923      	ldr	r3, [r4, #16]
 801b6f8:	b31b      	cbz	r3, 801b742 <__swbuf_r+0x68>
 801b6fa:	6823      	ldr	r3, [r4, #0]
 801b6fc:	6922      	ldr	r2, [r4, #16]
 801b6fe:	1a98      	subs	r0, r3, r2
 801b700:	6963      	ldr	r3, [r4, #20]
 801b702:	b2f6      	uxtb	r6, r6
 801b704:	4283      	cmp	r3, r0
 801b706:	4637      	mov	r7, r6
 801b708:	dc04      	bgt.n	801b714 <__swbuf_r+0x3a>
 801b70a:	4621      	mov	r1, r4
 801b70c:	4628      	mov	r0, r5
 801b70e:	f002 fe4b 	bl	801e3a8 <_fflush_r>
 801b712:	b9e0      	cbnz	r0, 801b74e <__swbuf_r+0x74>
 801b714:	68a3      	ldr	r3, [r4, #8]
 801b716:	3b01      	subs	r3, #1
 801b718:	60a3      	str	r3, [r4, #8]
 801b71a:	6823      	ldr	r3, [r4, #0]
 801b71c:	1c5a      	adds	r2, r3, #1
 801b71e:	6022      	str	r2, [r4, #0]
 801b720:	701e      	strb	r6, [r3, #0]
 801b722:	6962      	ldr	r2, [r4, #20]
 801b724:	1c43      	adds	r3, r0, #1
 801b726:	429a      	cmp	r2, r3
 801b728:	d004      	beq.n	801b734 <__swbuf_r+0x5a>
 801b72a:	89a3      	ldrh	r3, [r4, #12]
 801b72c:	07db      	lsls	r3, r3, #31
 801b72e:	d506      	bpl.n	801b73e <__swbuf_r+0x64>
 801b730:	2e0a      	cmp	r6, #10
 801b732:	d104      	bne.n	801b73e <__swbuf_r+0x64>
 801b734:	4621      	mov	r1, r4
 801b736:	4628      	mov	r0, r5
 801b738:	f002 fe36 	bl	801e3a8 <_fflush_r>
 801b73c:	b938      	cbnz	r0, 801b74e <__swbuf_r+0x74>
 801b73e:	4638      	mov	r0, r7
 801b740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b742:	4621      	mov	r1, r4
 801b744:	4628      	mov	r0, r5
 801b746:	f000 f805 	bl	801b754 <__swsetup_r>
 801b74a:	2800      	cmp	r0, #0
 801b74c:	d0d5      	beq.n	801b6fa <__swbuf_r+0x20>
 801b74e:	f04f 37ff 	mov.w	r7, #4294967295
 801b752:	e7f4      	b.n	801b73e <__swbuf_r+0x64>

0801b754 <__swsetup_r>:
 801b754:	b538      	push	{r3, r4, r5, lr}
 801b756:	4b2a      	ldr	r3, [pc, #168]	; (801b800 <__swsetup_r+0xac>)
 801b758:	4605      	mov	r5, r0
 801b75a:	6818      	ldr	r0, [r3, #0]
 801b75c:	460c      	mov	r4, r1
 801b75e:	b118      	cbz	r0, 801b768 <__swsetup_r+0x14>
 801b760:	6a03      	ldr	r3, [r0, #32]
 801b762:	b90b      	cbnz	r3, 801b768 <__swsetup_r+0x14>
 801b764:	f7ff fec4 	bl	801b4f0 <__sinit>
 801b768:	89a3      	ldrh	r3, [r4, #12]
 801b76a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b76e:	0718      	lsls	r0, r3, #28
 801b770:	d422      	bmi.n	801b7b8 <__swsetup_r+0x64>
 801b772:	06d9      	lsls	r1, r3, #27
 801b774:	d407      	bmi.n	801b786 <__swsetup_r+0x32>
 801b776:	2309      	movs	r3, #9
 801b778:	602b      	str	r3, [r5, #0]
 801b77a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801b77e:	81a3      	strh	r3, [r4, #12]
 801b780:	f04f 30ff 	mov.w	r0, #4294967295
 801b784:	e034      	b.n	801b7f0 <__swsetup_r+0x9c>
 801b786:	0758      	lsls	r0, r3, #29
 801b788:	d512      	bpl.n	801b7b0 <__swsetup_r+0x5c>
 801b78a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b78c:	b141      	cbz	r1, 801b7a0 <__swsetup_r+0x4c>
 801b78e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b792:	4299      	cmp	r1, r3
 801b794:	d002      	beq.n	801b79c <__swsetup_r+0x48>
 801b796:	4628      	mov	r0, r5
 801b798:	f000 ff54 	bl	801c644 <_free_r>
 801b79c:	2300      	movs	r3, #0
 801b79e:	6363      	str	r3, [r4, #52]	; 0x34
 801b7a0:	89a3      	ldrh	r3, [r4, #12]
 801b7a2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801b7a6:	81a3      	strh	r3, [r4, #12]
 801b7a8:	2300      	movs	r3, #0
 801b7aa:	6063      	str	r3, [r4, #4]
 801b7ac:	6923      	ldr	r3, [r4, #16]
 801b7ae:	6023      	str	r3, [r4, #0]
 801b7b0:	89a3      	ldrh	r3, [r4, #12]
 801b7b2:	f043 0308 	orr.w	r3, r3, #8
 801b7b6:	81a3      	strh	r3, [r4, #12]
 801b7b8:	6923      	ldr	r3, [r4, #16]
 801b7ba:	b94b      	cbnz	r3, 801b7d0 <__swsetup_r+0x7c>
 801b7bc:	89a3      	ldrh	r3, [r4, #12]
 801b7be:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801b7c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b7c6:	d003      	beq.n	801b7d0 <__swsetup_r+0x7c>
 801b7c8:	4621      	mov	r1, r4
 801b7ca:	4628      	mov	r0, r5
 801b7cc:	f002 fe3a 	bl	801e444 <__smakebuf_r>
 801b7d0:	89a0      	ldrh	r0, [r4, #12]
 801b7d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b7d6:	f010 0301 	ands.w	r3, r0, #1
 801b7da:	d00a      	beq.n	801b7f2 <__swsetup_r+0x9e>
 801b7dc:	2300      	movs	r3, #0
 801b7de:	60a3      	str	r3, [r4, #8]
 801b7e0:	6963      	ldr	r3, [r4, #20]
 801b7e2:	425b      	negs	r3, r3
 801b7e4:	61a3      	str	r3, [r4, #24]
 801b7e6:	6923      	ldr	r3, [r4, #16]
 801b7e8:	b943      	cbnz	r3, 801b7fc <__swsetup_r+0xa8>
 801b7ea:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801b7ee:	d1c4      	bne.n	801b77a <__swsetup_r+0x26>
 801b7f0:	bd38      	pop	{r3, r4, r5, pc}
 801b7f2:	0781      	lsls	r1, r0, #30
 801b7f4:	bf58      	it	pl
 801b7f6:	6963      	ldrpl	r3, [r4, #20]
 801b7f8:	60a3      	str	r3, [r4, #8]
 801b7fa:	e7f4      	b.n	801b7e6 <__swsetup_r+0x92>
 801b7fc:	2000      	movs	r0, #0
 801b7fe:	e7f7      	b.n	801b7f0 <__swsetup_r+0x9c>
 801b800:	200001c0 	.word	0x200001c0

0801b804 <memset>:
 801b804:	4402      	add	r2, r0
 801b806:	4603      	mov	r3, r0
 801b808:	4293      	cmp	r3, r2
 801b80a:	d100      	bne.n	801b80e <memset+0xa>
 801b80c:	4770      	bx	lr
 801b80e:	f803 1b01 	strb.w	r1, [r3], #1
 801b812:	e7f9      	b.n	801b808 <memset+0x4>

0801b814 <_localeconv_r>:
 801b814:	4800      	ldr	r0, [pc, #0]	; (801b818 <_localeconv_r+0x4>)
 801b816:	4770      	bx	lr
 801b818:	200002b4 	.word	0x200002b4

0801b81c <_close_r>:
 801b81c:	b538      	push	{r3, r4, r5, lr}
 801b81e:	4d06      	ldr	r5, [pc, #24]	; (801b838 <_close_r+0x1c>)
 801b820:	2300      	movs	r3, #0
 801b822:	4604      	mov	r4, r0
 801b824:	4608      	mov	r0, r1
 801b826:	602b      	str	r3, [r5, #0]
 801b828:	f003 fac0 	bl	801edac <_close>
 801b82c:	1c43      	adds	r3, r0, #1
 801b82e:	d102      	bne.n	801b836 <_close_r+0x1a>
 801b830:	682b      	ldr	r3, [r5, #0]
 801b832:	b103      	cbz	r3, 801b836 <_close_r+0x1a>
 801b834:	6023      	str	r3, [r4, #0]
 801b836:	bd38      	pop	{r3, r4, r5, pc}
 801b838:	20013794 	.word	0x20013794

0801b83c <_lseek_r>:
 801b83c:	b538      	push	{r3, r4, r5, lr}
 801b83e:	4d07      	ldr	r5, [pc, #28]	; (801b85c <_lseek_r+0x20>)
 801b840:	4604      	mov	r4, r0
 801b842:	4608      	mov	r0, r1
 801b844:	4611      	mov	r1, r2
 801b846:	2200      	movs	r2, #0
 801b848:	602a      	str	r2, [r5, #0]
 801b84a:	461a      	mov	r2, r3
 801b84c:	f003 fad6 	bl	801edfc <_lseek>
 801b850:	1c43      	adds	r3, r0, #1
 801b852:	d102      	bne.n	801b85a <_lseek_r+0x1e>
 801b854:	682b      	ldr	r3, [r5, #0]
 801b856:	b103      	cbz	r3, 801b85a <_lseek_r+0x1e>
 801b858:	6023      	str	r3, [r4, #0]
 801b85a:	bd38      	pop	{r3, r4, r5, pc}
 801b85c:	20013794 	.word	0x20013794

0801b860 <_read_r>:
 801b860:	b538      	push	{r3, r4, r5, lr}
 801b862:	4d07      	ldr	r5, [pc, #28]	; (801b880 <_read_r+0x20>)
 801b864:	4604      	mov	r4, r0
 801b866:	4608      	mov	r0, r1
 801b868:	4611      	mov	r1, r2
 801b86a:	2200      	movs	r2, #0
 801b86c:	602a      	str	r2, [r5, #0]
 801b86e:	461a      	mov	r2, r3
 801b870:	f003 facc 	bl	801ee0c <_read>
 801b874:	1c43      	adds	r3, r0, #1
 801b876:	d102      	bne.n	801b87e <_read_r+0x1e>
 801b878:	682b      	ldr	r3, [r5, #0]
 801b87a:	b103      	cbz	r3, 801b87e <_read_r+0x1e>
 801b87c:	6023      	str	r3, [r4, #0]
 801b87e:	bd38      	pop	{r3, r4, r5, pc}
 801b880:	20013794 	.word	0x20013794

0801b884 <_sbrk_r>:
 801b884:	b538      	push	{r3, r4, r5, lr}
 801b886:	4d06      	ldr	r5, [pc, #24]	; (801b8a0 <_sbrk_r+0x1c>)
 801b888:	2300      	movs	r3, #0
 801b88a:	4604      	mov	r4, r0
 801b88c:	4608      	mov	r0, r1
 801b88e:	602b      	str	r3, [r5, #0]
 801b890:	f003 fac4 	bl	801ee1c <_sbrk>
 801b894:	1c43      	adds	r3, r0, #1
 801b896:	d102      	bne.n	801b89e <_sbrk_r+0x1a>
 801b898:	682b      	ldr	r3, [r5, #0]
 801b89a:	b103      	cbz	r3, 801b89e <_sbrk_r+0x1a>
 801b89c:	6023      	str	r3, [r4, #0]
 801b89e:	bd38      	pop	{r3, r4, r5, pc}
 801b8a0:	20013794 	.word	0x20013794

0801b8a4 <_write_r>:
 801b8a4:	b538      	push	{r3, r4, r5, lr}
 801b8a6:	4d07      	ldr	r5, [pc, #28]	; (801b8c4 <_write_r+0x20>)
 801b8a8:	4604      	mov	r4, r0
 801b8aa:	4608      	mov	r0, r1
 801b8ac:	4611      	mov	r1, r2
 801b8ae:	2200      	movs	r2, #0
 801b8b0:	602a      	str	r2, [r5, #0]
 801b8b2:	461a      	mov	r2, r3
 801b8b4:	f7ee faf4 	bl	8009ea0 <_write>
 801b8b8:	1c43      	adds	r3, r0, #1
 801b8ba:	d102      	bne.n	801b8c2 <_write_r+0x1e>
 801b8bc:	682b      	ldr	r3, [r5, #0]
 801b8be:	b103      	cbz	r3, 801b8c2 <_write_r+0x1e>
 801b8c0:	6023      	str	r3, [r4, #0]
 801b8c2:	bd38      	pop	{r3, r4, r5, pc}
 801b8c4:	20013794 	.word	0x20013794

0801b8c8 <__errno>:
 801b8c8:	4b01      	ldr	r3, [pc, #4]	; (801b8d0 <__errno+0x8>)
 801b8ca:	6818      	ldr	r0, [r3, #0]
 801b8cc:	4770      	bx	lr
 801b8ce:	bf00      	nop
 801b8d0:	200001c0 	.word	0x200001c0

0801b8d4 <__libc_init_array>:
 801b8d4:	b570      	push	{r4, r5, r6, lr}
 801b8d6:	4d0d      	ldr	r5, [pc, #52]	; (801b90c <__libc_init_array+0x38>)
 801b8d8:	4c0d      	ldr	r4, [pc, #52]	; (801b910 <__libc_init_array+0x3c>)
 801b8da:	1b64      	subs	r4, r4, r5
 801b8dc:	10a4      	asrs	r4, r4, #2
 801b8de:	2600      	movs	r6, #0
 801b8e0:	42a6      	cmp	r6, r4
 801b8e2:	d109      	bne.n	801b8f8 <__libc_init_array+0x24>
 801b8e4:	4d0b      	ldr	r5, [pc, #44]	; (801b914 <__libc_init_array+0x40>)
 801b8e6:	4c0c      	ldr	r4, [pc, #48]	; (801b918 <__libc_init_array+0x44>)
 801b8e8:	f003 faa8 	bl	801ee3c <_init>
 801b8ec:	1b64      	subs	r4, r4, r5
 801b8ee:	10a4      	asrs	r4, r4, #2
 801b8f0:	2600      	movs	r6, #0
 801b8f2:	42a6      	cmp	r6, r4
 801b8f4:	d105      	bne.n	801b902 <__libc_init_array+0x2e>
 801b8f6:	bd70      	pop	{r4, r5, r6, pc}
 801b8f8:	f855 3b04 	ldr.w	r3, [r5], #4
 801b8fc:	4798      	blx	r3
 801b8fe:	3601      	adds	r6, #1
 801b900:	e7ee      	b.n	801b8e0 <__libc_init_array+0xc>
 801b902:	f855 3b04 	ldr.w	r3, [r5], #4
 801b906:	4798      	blx	r3
 801b908:	3601      	adds	r6, #1
 801b90a:	e7f2      	b.n	801b8f2 <__libc_init_array+0x1e>
 801b90c:	08025be0 	.word	0x08025be0
 801b910:	08025be0 	.word	0x08025be0
 801b914:	08025be0 	.word	0x08025be0
 801b918:	08025be4 	.word	0x08025be4

0801b91c <__retarget_lock_init_recursive>:
 801b91c:	4770      	bx	lr

0801b91e <__retarget_lock_acquire_recursive>:
 801b91e:	4770      	bx	lr

0801b920 <__retarget_lock_release_recursive>:
 801b920:	4770      	bx	lr

0801b922 <memcpy>:
 801b922:	440a      	add	r2, r1
 801b924:	4291      	cmp	r1, r2
 801b926:	f100 33ff 	add.w	r3, r0, #4294967295
 801b92a:	d100      	bne.n	801b92e <memcpy+0xc>
 801b92c:	4770      	bx	lr
 801b92e:	b510      	push	{r4, lr}
 801b930:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b934:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b938:	4291      	cmp	r1, r2
 801b93a:	d1f9      	bne.n	801b930 <memcpy+0xe>
 801b93c:	bd10      	pop	{r4, pc}
	...

0801b940 <nanf>:
 801b940:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801b948 <nanf+0x8>
 801b944:	4770      	bx	lr
 801b946:	bf00      	nop
 801b948:	7fc00000 	.word	0x7fc00000

0801b94c <quorem>:
 801b94c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b950:	6903      	ldr	r3, [r0, #16]
 801b952:	690c      	ldr	r4, [r1, #16]
 801b954:	42a3      	cmp	r3, r4
 801b956:	4607      	mov	r7, r0
 801b958:	db7e      	blt.n	801ba58 <quorem+0x10c>
 801b95a:	3c01      	subs	r4, #1
 801b95c:	f101 0814 	add.w	r8, r1, #20
 801b960:	f100 0514 	add.w	r5, r0, #20
 801b964:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b968:	9301      	str	r3, [sp, #4]
 801b96a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801b96e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b972:	3301      	adds	r3, #1
 801b974:	429a      	cmp	r2, r3
 801b976:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801b97a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801b97e:	fbb2 f6f3 	udiv	r6, r2, r3
 801b982:	d331      	bcc.n	801b9e8 <quorem+0x9c>
 801b984:	f04f 0e00 	mov.w	lr, #0
 801b988:	4640      	mov	r0, r8
 801b98a:	46ac      	mov	ip, r5
 801b98c:	46f2      	mov	sl, lr
 801b98e:	f850 2b04 	ldr.w	r2, [r0], #4
 801b992:	b293      	uxth	r3, r2
 801b994:	fb06 e303 	mla	r3, r6, r3, lr
 801b998:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801b99c:	0c1a      	lsrs	r2, r3, #16
 801b99e:	b29b      	uxth	r3, r3
 801b9a0:	ebaa 0303 	sub.w	r3, sl, r3
 801b9a4:	f8dc a000 	ldr.w	sl, [ip]
 801b9a8:	fa13 f38a 	uxtah	r3, r3, sl
 801b9ac:	fb06 220e 	mla	r2, r6, lr, r2
 801b9b0:	9300      	str	r3, [sp, #0]
 801b9b2:	9b00      	ldr	r3, [sp, #0]
 801b9b4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801b9b8:	b292      	uxth	r2, r2
 801b9ba:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801b9be:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b9c2:	f8bd 3000 	ldrh.w	r3, [sp]
 801b9c6:	4581      	cmp	r9, r0
 801b9c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b9cc:	f84c 3b04 	str.w	r3, [ip], #4
 801b9d0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801b9d4:	d2db      	bcs.n	801b98e <quorem+0x42>
 801b9d6:	f855 300b 	ldr.w	r3, [r5, fp]
 801b9da:	b92b      	cbnz	r3, 801b9e8 <quorem+0x9c>
 801b9dc:	9b01      	ldr	r3, [sp, #4]
 801b9de:	3b04      	subs	r3, #4
 801b9e0:	429d      	cmp	r5, r3
 801b9e2:	461a      	mov	r2, r3
 801b9e4:	d32c      	bcc.n	801ba40 <quorem+0xf4>
 801b9e6:	613c      	str	r4, [r7, #16]
 801b9e8:	4638      	mov	r0, r7
 801b9ea:	f001 f93d 	bl	801cc68 <__mcmp>
 801b9ee:	2800      	cmp	r0, #0
 801b9f0:	db22      	blt.n	801ba38 <quorem+0xec>
 801b9f2:	3601      	adds	r6, #1
 801b9f4:	4629      	mov	r1, r5
 801b9f6:	2000      	movs	r0, #0
 801b9f8:	f858 2b04 	ldr.w	r2, [r8], #4
 801b9fc:	f8d1 c000 	ldr.w	ip, [r1]
 801ba00:	b293      	uxth	r3, r2
 801ba02:	1ac3      	subs	r3, r0, r3
 801ba04:	0c12      	lsrs	r2, r2, #16
 801ba06:	fa13 f38c 	uxtah	r3, r3, ip
 801ba0a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801ba0e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801ba12:	b29b      	uxth	r3, r3
 801ba14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801ba18:	45c1      	cmp	r9, r8
 801ba1a:	f841 3b04 	str.w	r3, [r1], #4
 801ba1e:	ea4f 4022 	mov.w	r0, r2, asr #16
 801ba22:	d2e9      	bcs.n	801b9f8 <quorem+0xac>
 801ba24:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801ba28:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801ba2c:	b922      	cbnz	r2, 801ba38 <quorem+0xec>
 801ba2e:	3b04      	subs	r3, #4
 801ba30:	429d      	cmp	r5, r3
 801ba32:	461a      	mov	r2, r3
 801ba34:	d30a      	bcc.n	801ba4c <quorem+0x100>
 801ba36:	613c      	str	r4, [r7, #16]
 801ba38:	4630      	mov	r0, r6
 801ba3a:	b003      	add	sp, #12
 801ba3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba40:	6812      	ldr	r2, [r2, #0]
 801ba42:	3b04      	subs	r3, #4
 801ba44:	2a00      	cmp	r2, #0
 801ba46:	d1ce      	bne.n	801b9e6 <quorem+0x9a>
 801ba48:	3c01      	subs	r4, #1
 801ba4a:	e7c9      	b.n	801b9e0 <quorem+0x94>
 801ba4c:	6812      	ldr	r2, [r2, #0]
 801ba4e:	3b04      	subs	r3, #4
 801ba50:	2a00      	cmp	r2, #0
 801ba52:	d1f0      	bne.n	801ba36 <quorem+0xea>
 801ba54:	3c01      	subs	r4, #1
 801ba56:	e7eb      	b.n	801ba30 <quorem+0xe4>
 801ba58:	2000      	movs	r0, #0
 801ba5a:	e7ee      	b.n	801ba3a <quorem+0xee>
 801ba5c:	0000      	movs	r0, r0
	...

0801ba60 <_dtoa_r>:
 801ba60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba64:	ed2d 8b04 	vpush	{d8-d9}
 801ba68:	69c5      	ldr	r5, [r0, #28]
 801ba6a:	b093      	sub	sp, #76	; 0x4c
 801ba6c:	ed8d 0b02 	vstr	d0, [sp, #8]
 801ba70:	ec57 6b10 	vmov	r6, r7, d0
 801ba74:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801ba78:	9107      	str	r1, [sp, #28]
 801ba7a:	4604      	mov	r4, r0
 801ba7c:	920a      	str	r2, [sp, #40]	; 0x28
 801ba7e:	930d      	str	r3, [sp, #52]	; 0x34
 801ba80:	b975      	cbnz	r5, 801baa0 <_dtoa_r+0x40>
 801ba82:	2010      	movs	r0, #16
 801ba84:	f7fe fd76 	bl	801a574 <malloc>
 801ba88:	4602      	mov	r2, r0
 801ba8a:	61e0      	str	r0, [r4, #28]
 801ba8c:	b920      	cbnz	r0, 801ba98 <_dtoa_r+0x38>
 801ba8e:	4bae      	ldr	r3, [pc, #696]	; (801bd48 <_dtoa_r+0x2e8>)
 801ba90:	21ef      	movs	r1, #239	; 0xef
 801ba92:	48ae      	ldr	r0, [pc, #696]	; (801bd4c <_dtoa_r+0x2ec>)
 801ba94:	f002 fd60 	bl	801e558 <__assert_func>
 801ba98:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801ba9c:	6005      	str	r5, [r0, #0]
 801ba9e:	60c5      	str	r5, [r0, #12]
 801baa0:	69e3      	ldr	r3, [r4, #28]
 801baa2:	6819      	ldr	r1, [r3, #0]
 801baa4:	b151      	cbz	r1, 801babc <_dtoa_r+0x5c>
 801baa6:	685a      	ldr	r2, [r3, #4]
 801baa8:	604a      	str	r2, [r1, #4]
 801baaa:	2301      	movs	r3, #1
 801baac:	4093      	lsls	r3, r2
 801baae:	608b      	str	r3, [r1, #8]
 801bab0:	4620      	mov	r0, r4
 801bab2:	f000 fe53 	bl	801c75c <_Bfree>
 801bab6:	69e3      	ldr	r3, [r4, #28]
 801bab8:	2200      	movs	r2, #0
 801baba:	601a      	str	r2, [r3, #0]
 801babc:	1e3b      	subs	r3, r7, #0
 801babe:	bfbb      	ittet	lt
 801bac0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801bac4:	9303      	strlt	r3, [sp, #12]
 801bac6:	2300      	movge	r3, #0
 801bac8:	2201      	movlt	r2, #1
 801baca:	bfac      	ite	ge
 801bacc:	f8c8 3000 	strge.w	r3, [r8]
 801bad0:	f8c8 2000 	strlt.w	r2, [r8]
 801bad4:	4b9e      	ldr	r3, [pc, #632]	; (801bd50 <_dtoa_r+0x2f0>)
 801bad6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801bada:	ea33 0308 	bics.w	r3, r3, r8
 801bade:	d11b      	bne.n	801bb18 <_dtoa_r+0xb8>
 801bae0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801bae2:	f242 730f 	movw	r3, #9999	; 0x270f
 801bae6:	6013      	str	r3, [r2, #0]
 801bae8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 801baec:	4333      	orrs	r3, r6
 801baee:	f000 8593 	beq.w	801c618 <_dtoa_r+0xbb8>
 801baf2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801baf4:	b963      	cbnz	r3, 801bb10 <_dtoa_r+0xb0>
 801baf6:	4b97      	ldr	r3, [pc, #604]	; (801bd54 <_dtoa_r+0x2f4>)
 801baf8:	e027      	b.n	801bb4a <_dtoa_r+0xea>
 801bafa:	4b97      	ldr	r3, [pc, #604]	; (801bd58 <_dtoa_r+0x2f8>)
 801bafc:	9300      	str	r3, [sp, #0]
 801bafe:	3308      	adds	r3, #8
 801bb00:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801bb02:	6013      	str	r3, [r2, #0]
 801bb04:	9800      	ldr	r0, [sp, #0]
 801bb06:	b013      	add	sp, #76	; 0x4c
 801bb08:	ecbd 8b04 	vpop	{d8-d9}
 801bb0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bb10:	4b90      	ldr	r3, [pc, #576]	; (801bd54 <_dtoa_r+0x2f4>)
 801bb12:	9300      	str	r3, [sp, #0]
 801bb14:	3303      	adds	r3, #3
 801bb16:	e7f3      	b.n	801bb00 <_dtoa_r+0xa0>
 801bb18:	ed9d 7b02 	vldr	d7, [sp, #8]
 801bb1c:	2200      	movs	r2, #0
 801bb1e:	ec51 0b17 	vmov	r0, r1, d7
 801bb22:	eeb0 8a47 	vmov.f32	s16, s14
 801bb26:	eef0 8a67 	vmov.f32	s17, s15
 801bb2a:	2300      	movs	r3, #0
 801bb2c:	f7e4 ffec 	bl	8000b08 <__aeabi_dcmpeq>
 801bb30:	4681      	mov	r9, r0
 801bb32:	b160      	cbz	r0, 801bb4e <_dtoa_r+0xee>
 801bb34:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801bb36:	2301      	movs	r3, #1
 801bb38:	6013      	str	r3, [r2, #0]
 801bb3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801bb3c:	2b00      	cmp	r3, #0
 801bb3e:	f000 8568 	beq.w	801c612 <_dtoa_r+0xbb2>
 801bb42:	4b86      	ldr	r3, [pc, #536]	; (801bd5c <_dtoa_r+0x2fc>)
 801bb44:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801bb46:	6013      	str	r3, [r2, #0]
 801bb48:	3b01      	subs	r3, #1
 801bb4a:	9300      	str	r3, [sp, #0]
 801bb4c:	e7da      	b.n	801bb04 <_dtoa_r+0xa4>
 801bb4e:	aa10      	add	r2, sp, #64	; 0x40
 801bb50:	a911      	add	r1, sp, #68	; 0x44
 801bb52:	4620      	mov	r0, r4
 801bb54:	eeb0 0a48 	vmov.f32	s0, s16
 801bb58:	eef0 0a68 	vmov.f32	s1, s17
 801bb5c:	f001 f99a 	bl	801ce94 <__d2b>
 801bb60:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801bb64:	4682      	mov	sl, r0
 801bb66:	2d00      	cmp	r5, #0
 801bb68:	d07f      	beq.n	801bc6a <_dtoa_r+0x20a>
 801bb6a:	ee18 3a90 	vmov	r3, s17
 801bb6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801bb72:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801bb76:	ec51 0b18 	vmov	r0, r1, d8
 801bb7a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801bb7e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801bb82:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801bb86:	4619      	mov	r1, r3
 801bb88:	2200      	movs	r2, #0
 801bb8a:	4b75      	ldr	r3, [pc, #468]	; (801bd60 <_dtoa_r+0x300>)
 801bb8c:	f7e4 fb9c 	bl	80002c8 <__aeabi_dsub>
 801bb90:	a367      	add	r3, pc, #412	; (adr r3, 801bd30 <_dtoa_r+0x2d0>)
 801bb92:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb96:	f7e4 fd4f 	bl	8000638 <__aeabi_dmul>
 801bb9a:	a367      	add	r3, pc, #412	; (adr r3, 801bd38 <_dtoa_r+0x2d8>)
 801bb9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bba0:	f7e4 fb94 	bl	80002cc <__adddf3>
 801bba4:	4606      	mov	r6, r0
 801bba6:	4628      	mov	r0, r5
 801bba8:	460f      	mov	r7, r1
 801bbaa:	f7e4 fcdb 	bl	8000564 <__aeabi_i2d>
 801bbae:	a364      	add	r3, pc, #400	; (adr r3, 801bd40 <_dtoa_r+0x2e0>)
 801bbb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bbb4:	f7e4 fd40 	bl	8000638 <__aeabi_dmul>
 801bbb8:	4602      	mov	r2, r0
 801bbba:	460b      	mov	r3, r1
 801bbbc:	4630      	mov	r0, r6
 801bbbe:	4639      	mov	r1, r7
 801bbc0:	f7e4 fb84 	bl	80002cc <__adddf3>
 801bbc4:	4606      	mov	r6, r0
 801bbc6:	460f      	mov	r7, r1
 801bbc8:	f7e4 ffe6 	bl	8000b98 <__aeabi_d2iz>
 801bbcc:	2200      	movs	r2, #0
 801bbce:	4683      	mov	fp, r0
 801bbd0:	2300      	movs	r3, #0
 801bbd2:	4630      	mov	r0, r6
 801bbd4:	4639      	mov	r1, r7
 801bbd6:	f7e4 ffa1 	bl	8000b1c <__aeabi_dcmplt>
 801bbda:	b148      	cbz	r0, 801bbf0 <_dtoa_r+0x190>
 801bbdc:	4658      	mov	r0, fp
 801bbde:	f7e4 fcc1 	bl	8000564 <__aeabi_i2d>
 801bbe2:	4632      	mov	r2, r6
 801bbe4:	463b      	mov	r3, r7
 801bbe6:	f7e4 ff8f 	bl	8000b08 <__aeabi_dcmpeq>
 801bbea:	b908      	cbnz	r0, 801bbf0 <_dtoa_r+0x190>
 801bbec:	f10b 3bff 	add.w	fp, fp, #4294967295
 801bbf0:	f1bb 0f16 	cmp.w	fp, #22
 801bbf4:	d857      	bhi.n	801bca6 <_dtoa_r+0x246>
 801bbf6:	4b5b      	ldr	r3, [pc, #364]	; (801bd64 <_dtoa_r+0x304>)
 801bbf8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801bbfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc00:	ec51 0b18 	vmov	r0, r1, d8
 801bc04:	f7e4 ff8a 	bl	8000b1c <__aeabi_dcmplt>
 801bc08:	2800      	cmp	r0, #0
 801bc0a:	d04e      	beq.n	801bcaa <_dtoa_r+0x24a>
 801bc0c:	f10b 3bff 	add.w	fp, fp, #4294967295
 801bc10:	2300      	movs	r3, #0
 801bc12:	930c      	str	r3, [sp, #48]	; 0x30
 801bc14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bc16:	1b5b      	subs	r3, r3, r5
 801bc18:	1e5a      	subs	r2, r3, #1
 801bc1a:	bf45      	ittet	mi
 801bc1c:	f1c3 0301 	rsbmi	r3, r3, #1
 801bc20:	9305      	strmi	r3, [sp, #20]
 801bc22:	2300      	movpl	r3, #0
 801bc24:	2300      	movmi	r3, #0
 801bc26:	9206      	str	r2, [sp, #24]
 801bc28:	bf54      	ite	pl
 801bc2a:	9305      	strpl	r3, [sp, #20]
 801bc2c:	9306      	strmi	r3, [sp, #24]
 801bc2e:	f1bb 0f00 	cmp.w	fp, #0
 801bc32:	db3c      	blt.n	801bcae <_dtoa_r+0x24e>
 801bc34:	9b06      	ldr	r3, [sp, #24]
 801bc36:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801bc3a:	445b      	add	r3, fp
 801bc3c:	9306      	str	r3, [sp, #24]
 801bc3e:	2300      	movs	r3, #0
 801bc40:	9308      	str	r3, [sp, #32]
 801bc42:	9b07      	ldr	r3, [sp, #28]
 801bc44:	2b09      	cmp	r3, #9
 801bc46:	d868      	bhi.n	801bd1a <_dtoa_r+0x2ba>
 801bc48:	2b05      	cmp	r3, #5
 801bc4a:	bfc4      	itt	gt
 801bc4c:	3b04      	subgt	r3, #4
 801bc4e:	9307      	strgt	r3, [sp, #28]
 801bc50:	9b07      	ldr	r3, [sp, #28]
 801bc52:	f1a3 0302 	sub.w	r3, r3, #2
 801bc56:	bfcc      	ite	gt
 801bc58:	2500      	movgt	r5, #0
 801bc5a:	2501      	movle	r5, #1
 801bc5c:	2b03      	cmp	r3, #3
 801bc5e:	f200 8085 	bhi.w	801bd6c <_dtoa_r+0x30c>
 801bc62:	e8df f003 	tbb	[pc, r3]
 801bc66:	3b2e      	.short	0x3b2e
 801bc68:	5839      	.short	0x5839
 801bc6a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801bc6e:	441d      	add	r5, r3
 801bc70:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801bc74:	2b20      	cmp	r3, #32
 801bc76:	bfc1      	itttt	gt
 801bc78:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801bc7c:	fa08 f803 	lslgt.w	r8, r8, r3
 801bc80:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 801bc84:	fa26 f303 	lsrgt.w	r3, r6, r3
 801bc88:	bfd6      	itet	le
 801bc8a:	f1c3 0320 	rsble	r3, r3, #32
 801bc8e:	ea48 0003 	orrgt.w	r0, r8, r3
 801bc92:	fa06 f003 	lslle.w	r0, r6, r3
 801bc96:	f7e4 fc55 	bl	8000544 <__aeabi_ui2d>
 801bc9a:	2201      	movs	r2, #1
 801bc9c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 801bca0:	3d01      	subs	r5, #1
 801bca2:	920e      	str	r2, [sp, #56]	; 0x38
 801bca4:	e76f      	b.n	801bb86 <_dtoa_r+0x126>
 801bca6:	2301      	movs	r3, #1
 801bca8:	e7b3      	b.n	801bc12 <_dtoa_r+0x1b2>
 801bcaa:	900c      	str	r0, [sp, #48]	; 0x30
 801bcac:	e7b2      	b.n	801bc14 <_dtoa_r+0x1b4>
 801bcae:	9b05      	ldr	r3, [sp, #20]
 801bcb0:	eba3 030b 	sub.w	r3, r3, fp
 801bcb4:	9305      	str	r3, [sp, #20]
 801bcb6:	f1cb 0300 	rsb	r3, fp, #0
 801bcba:	9308      	str	r3, [sp, #32]
 801bcbc:	2300      	movs	r3, #0
 801bcbe:	930b      	str	r3, [sp, #44]	; 0x2c
 801bcc0:	e7bf      	b.n	801bc42 <_dtoa_r+0x1e2>
 801bcc2:	2300      	movs	r3, #0
 801bcc4:	9309      	str	r3, [sp, #36]	; 0x24
 801bcc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bcc8:	2b00      	cmp	r3, #0
 801bcca:	dc52      	bgt.n	801bd72 <_dtoa_r+0x312>
 801bccc:	2301      	movs	r3, #1
 801bcce:	9301      	str	r3, [sp, #4]
 801bcd0:	9304      	str	r3, [sp, #16]
 801bcd2:	461a      	mov	r2, r3
 801bcd4:	920a      	str	r2, [sp, #40]	; 0x28
 801bcd6:	e00b      	b.n	801bcf0 <_dtoa_r+0x290>
 801bcd8:	2301      	movs	r3, #1
 801bcda:	e7f3      	b.n	801bcc4 <_dtoa_r+0x264>
 801bcdc:	2300      	movs	r3, #0
 801bcde:	9309      	str	r3, [sp, #36]	; 0x24
 801bce0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bce2:	445b      	add	r3, fp
 801bce4:	9301      	str	r3, [sp, #4]
 801bce6:	3301      	adds	r3, #1
 801bce8:	2b01      	cmp	r3, #1
 801bcea:	9304      	str	r3, [sp, #16]
 801bcec:	bfb8      	it	lt
 801bcee:	2301      	movlt	r3, #1
 801bcf0:	69e0      	ldr	r0, [r4, #28]
 801bcf2:	2100      	movs	r1, #0
 801bcf4:	2204      	movs	r2, #4
 801bcf6:	f102 0614 	add.w	r6, r2, #20
 801bcfa:	429e      	cmp	r6, r3
 801bcfc:	d93d      	bls.n	801bd7a <_dtoa_r+0x31a>
 801bcfe:	6041      	str	r1, [r0, #4]
 801bd00:	4620      	mov	r0, r4
 801bd02:	f000 fceb 	bl	801c6dc <_Balloc>
 801bd06:	9000      	str	r0, [sp, #0]
 801bd08:	2800      	cmp	r0, #0
 801bd0a:	d139      	bne.n	801bd80 <_dtoa_r+0x320>
 801bd0c:	4b16      	ldr	r3, [pc, #88]	; (801bd68 <_dtoa_r+0x308>)
 801bd0e:	4602      	mov	r2, r0
 801bd10:	f240 11af 	movw	r1, #431	; 0x1af
 801bd14:	e6bd      	b.n	801ba92 <_dtoa_r+0x32>
 801bd16:	2301      	movs	r3, #1
 801bd18:	e7e1      	b.n	801bcde <_dtoa_r+0x27e>
 801bd1a:	2501      	movs	r5, #1
 801bd1c:	2300      	movs	r3, #0
 801bd1e:	9307      	str	r3, [sp, #28]
 801bd20:	9509      	str	r5, [sp, #36]	; 0x24
 801bd22:	f04f 33ff 	mov.w	r3, #4294967295
 801bd26:	9301      	str	r3, [sp, #4]
 801bd28:	9304      	str	r3, [sp, #16]
 801bd2a:	2200      	movs	r2, #0
 801bd2c:	2312      	movs	r3, #18
 801bd2e:	e7d1      	b.n	801bcd4 <_dtoa_r+0x274>
 801bd30:	636f4361 	.word	0x636f4361
 801bd34:	3fd287a7 	.word	0x3fd287a7
 801bd38:	8b60c8b3 	.word	0x8b60c8b3
 801bd3c:	3fc68a28 	.word	0x3fc68a28
 801bd40:	509f79fb 	.word	0x509f79fb
 801bd44:	3fd34413 	.word	0x3fd34413
 801bd48:	080257f6 	.word	0x080257f6
 801bd4c:	0802580d 	.word	0x0802580d
 801bd50:	7ff00000 	.word	0x7ff00000
 801bd54:	080257f2 	.word	0x080257f2
 801bd58:	080257e9 	.word	0x080257e9
 801bd5c:	080257c1 	.word	0x080257c1
 801bd60:	3ff80000 	.word	0x3ff80000
 801bd64:	080258f8 	.word	0x080258f8
 801bd68:	08025865 	.word	0x08025865
 801bd6c:	2301      	movs	r3, #1
 801bd6e:	9309      	str	r3, [sp, #36]	; 0x24
 801bd70:	e7d7      	b.n	801bd22 <_dtoa_r+0x2c2>
 801bd72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bd74:	9301      	str	r3, [sp, #4]
 801bd76:	9304      	str	r3, [sp, #16]
 801bd78:	e7ba      	b.n	801bcf0 <_dtoa_r+0x290>
 801bd7a:	3101      	adds	r1, #1
 801bd7c:	0052      	lsls	r2, r2, #1
 801bd7e:	e7ba      	b.n	801bcf6 <_dtoa_r+0x296>
 801bd80:	69e3      	ldr	r3, [r4, #28]
 801bd82:	9a00      	ldr	r2, [sp, #0]
 801bd84:	601a      	str	r2, [r3, #0]
 801bd86:	9b04      	ldr	r3, [sp, #16]
 801bd88:	2b0e      	cmp	r3, #14
 801bd8a:	f200 80a8 	bhi.w	801bede <_dtoa_r+0x47e>
 801bd8e:	2d00      	cmp	r5, #0
 801bd90:	f000 80a5 	beq.w	801bede <_dtoa_r+0x47e>
 801bd94:	f1bb 0f00 	cmp.w	fp, #0
 801bd98:	dd38      	ble.n	801be0c <_dtoa_r+0x3ac>
 801bd9a:	4bc0      	ldr	r3, [pc, #768]	; (801c09c <_dtoa_r+0x63c>)
 801bd9c:	f00b 020f 	and.w	r2, fp, #15
 801bda0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801bda4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801bda8:	e9d3 6700 	ldrd	r6, r7, [r3]
 801bdac:	ea4f 182b 	mov.w	r8, fp, asr #4
 801bdb0:	d019      	beq.n	801bde6 <_dtoa_r+0x386>
 801bdb2:	4bbb      	ldr	r3, [pc, #748]	; (801c0a0 <_dtoa_r+0x640>)
 801bdb4:	ec51 0b18 	vmov	r0, r1, d8
 801bdb8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801bdbc:	f7e4 fd66 	bl	800088c <__aeabi_ddiv>
 801bdc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bdc4:	f008 080f 	and.w	r8, r8, #15
 801bdc8:	2503      	movs	r5, #3
 801bdca:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 801c0a0 <_dtoa_r+0x640>
 801bdce:	f1b8 0f00 	cmp.w	r8, #0
 801bdd2:	d10a      	bne.n	801bdea <_dtoa_r+0x38a>
 801bdd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bdd8:	4632      	mov	r2, r6
 801bdda:	463b      	mov	r3, r7
 801bddc:	f7e4 fd56 	bl	800088c <__aeabi_ddiv>
 801bde0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bde4:	e02b      	b.n	801be3e <_dtoa_r+0x3de>
 801bde6:	2502      	movs	r5, #2
 801bde8:	e7ef      	b.n	801bdca <_dtoa_r+0x36a>
 801bdea:	f018 0f01 	tst.w	r8, #1
 801bdee:	d008      	beq.n	801be02 <_dtoa_r+0x3a2>
 801bdf0:	4630      	mov	r0, r6
 801bdf2:	4639      	mov	r1, r7
 801bdf4:	e9d9 2300 	ldrd	r2, r3, [r9]
 801bdf8:	f7e4 fc1e 	bl	8000638 <__aeabi_dmul>
 801bdfc:	3501      	adds	r5, #1
 801bdfe:	4606      	mov	r6, r0
 801be00:	460f      	mov	r7, r1
 801be02:	ea4f 0868 	mov.w	r8, r8, asr #1
 801be06:	f109 0908 	add.w	r9, r9, #8
 801be0a:	e7e0      	b.n	801bdce <_dtoa_r+0x36e>
 801be0c:	f000 809f 	beq.w	801bf4e <_dtoa_r+0x4ee>
 801be10:	f1cb 0600 	rsb	r6, fp, #0
 801be14:	4ba1      	ldr	r3, [pc, #644]	; (801c09c <_dtoa_r+0x63c>)
 801be16:	4fa2      	ldr	r7, [pc, #648]	; (801c0a0 <_dtoa_r+0x640>)
 801be18:	f006 020f 	and.w	r2, r6, #15
 801be1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801be20:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be24:	ec51 0b18 	vmov	r0, r1, d8
 801be28:	f7e4 fc06 	bl	8000638 <__aeabi_dmul>
 801be2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801be30:	1136      	asrs	r6, r6, #4
 801be32:	2300      	movs	r3, #0
 801be34:	2502      	movs	r5, #2
 801be36:	2e00      	cmp	r6, #0
 801be38:	d17e      	bne.n	801bf38 <_dtoa_r+0x4d8>
 801be3a:	2b00      	cmp	r3, #0
 801be3c:	d1d0      	bne.n	801bde0 <_dtoa_r+0x380>
 801be3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801be40:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801be44:	2b00      	cmp	r3, #0
 801be46:	f000 8084 	beq.w	801bf52 <_dtoa_r+0x4f2>
 801be4a:	4b96      	ldr	r3, [pc, #600]	; (801c0a4 <_dtoa_r+0x644>)
 801be4c:	2200      	movs	r2, #0
 801be4e:	4640      	mov	r0, r8
 801be50:	4649      	mov	r1, r9
 801be52:	f7e4 fe63 	bl	8000b1c <__aeabi_dcmplt>
 801be56:	2800      	cmp	r0, #0
 801be58:	d07b      	beq.n	801bf52 <_dtoa_r+0x4f2>
 801be5a:	9b04      	ldr	r3, [sp, #16]
 801be5c:	2b00      	cmp	r3, #0
 801be5e:	d078      	beq.n	801bf52 <_dtoa_r+0x4f2>
 801be60:	9b01      	ldr	r3, [sp, #4]
 801be62:	2b00      	cmp	r3, #0
 801be64:	dd39      	ble.n	801beda <_dtoa_r+0x47a>
 801be66:	4b90      	ldr	r3, [pc, #576]	; (801c0a8 <_dtoa_r+0x648>)
 801be68:	2200      	movs	r2, #0
 801be6a:	4640      	mov	r0, r8
 801be6c:	4649      	mov	r1, r9
 801be6e:	f7e4 fbe3 	bl	8000638 <__aeabi_dmul>
 801be72:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801be76:	9e01      	ldr	r6, [sp, #4]
 801be78:	f10b 37ff 	add.w	r7, fp, #4294967295
 801be7c:	3501      	adds	r5, #1
 801be7e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801be82:	4628      	mov	r0, r5
 801be84:	f7e4 fb6e 	bl	8000564 <__aeabi_i2d>
 801be88:	4642      	mov	r2, r8
 801be8a:	464b      	mov	r3, r9
 801be8c:	f7e4 fbd4 	bl	8000638 <__aeabi_dmul>
 801be90:	4b86      	ldr	r3, [pc, #536]	; (801c0ac <_dtoa_r+0x64c>)
 801be92:	2200      	movs	r2, #0
 801be94:	f7e4 fa1a 	bl	80002cc <__adddf3>
 801be98:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801be9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bea0:	9303      	str	r3, [sp, #12]
 801bea2:	2e00      	cmp	r6, #0
 801bea4:	d158      	bne.n	801bf58 <_dtoa_r+0x4f8>
 801bea6:	4b82      	ldr	r3, [pc, #520]	; (801c0b0 <_dtoa_r+0x650>)
 801bea8:	2200      	movs	r2, #0
 801beaa:	4640      	mov	r0, r8
 801beac:	4649      	mov	r1, r9
 801beae:	f7e4 fa0b 	bl	80002c8 <__aeabi_dsub>
 801beb2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801beb6:	4680      	mov	r8, r0
 801beb8:	4689      	mov	r9, r1
 801beba:	f7e4 fe4d 	bl	8000b58 <__aeabi_dcmpgt>
 801bebe:	2800      	cmp	r0, #0
 801bec0:	f040 8296 	bne.w	801c3f0 <_dtoa_r+0x990>
 801bec4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801bec8:	4640      	mov	r0, r8
 801beca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801bece:	4649      	mov	r1, r9
 801bed0:	f7e4 fe24 	bl	8000b1c <__aeabi_dcmplt>
 801bed4:	2800      	cmp	r0, #0
 801bed6:	f040 8289 	bne.w	801c3ec <_dtoa_r+0x98c>
 801beda:	ed8d 8b02 	vstr	d8, [sp, #8]
 801bede:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801bee0:	2b00      	cmp	r3, #0
 801bee2:	f2c0 814e 	blt.w	801c182 <_dtoa_r+0x722>
 801bee6:	f1bb 0f0e 	cmp.w	fp, #14
 801beea:	f300 814a 	bgt.w	801c182 <_dtoa_r+0x722>
 801beee:	4b6b      	ldr	r3, [pc, #428]	; (801c09c <_dtoa_r+0x63c>)
 801bef0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801bef4:	e9d3 8900 	ldrd	r8, r9, [r3]
 801bef8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801befa:	2b00      	cmp	r3, #0
 801befc:	f280 80dc 	bge.w	801c0b8 <_dtoa_r+0x658>
 801bf00:	9b04      	ldr	r3, [sp, #16]
 801bf02:	2b00      	cmp	r3, #0
 801bf04:	f300 80d8 	bgt.w	801c0b8 <_dtoa_r+0x658>
 801bf08:	f040 826f 	bne.w	801c3ea <_dtoa_r+0x98a>
 801bf0c:	4b68      	ldr	r3, [pc, #416]	; (801c0b0 <_dtoa_r+0x650>)
 801bf0e:	2200      	movs	r2, #0
 801bf10:	4640      	mov	r0, r8
 801bf12:	4649      	mov	r1, r9
 801bf14:	f7e4 fb90 	bl	8000638 <__aeabi_dmul>
 801bf18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801bf1c:	f7e4 fe12 	bl	8000b44 <__aeabi_dcmpge>
 801bf20:	9e04      	ldr	r6, [sp, #16]
 801bf22:	4637      	mov	r7, r6
 801bf24:	2800      	cmp	r0, #0
 801bf26:	f040 8245 	bne.w	801c3b4 <_dtoa_r+0x954>
 801bf2a:	9d00      	ldr	r5, [sp, #0]
 801bf2c:	2331      	movs	r3, #49	; 0x31
 801bf2e:	f805 3b01 	strb.w	r3, [r5], #1
 801bf32:	f10b 0b01 	add.w	fp, fp, #1
 801bf36:	e241      	b.n	801c3bc <_dtoa_r+0x95c>
 801bf38:	07f2      	lsls	r2, r6, #31
 801bf3a:	d505      	bpl.n	801bf48 <_dtoa_r+0x4e8>
 801bf3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 801bf40:	f7e4 fb7a 	bl	8000638 <__aeabi_dmul>
 801bf44:	3501      	adds	r5, #1
 801bf46:	2301      	movs	r3, #1
 801bf48:	1076      	asrs	r6, r6, #1
 801bf4a:	3708      	adds	r7, #8
 801bf4c:	e773      	b.n	801be36 <_dtoa_r+0x3d6>
 801bf4e:	2502      	movs	r5, #2
 801bf50:	e775      	b.n	801be3e <_dtoa_r+0x3de>
 801bf52:	9e04      	ldr	r6, [sp, #16]
 801bf54:	465f      	mov	r7, fp
 801bf56:	e792      	b.n	801be7e <_dtoa_r+0x41e>
 801bf58:	9900      	ldr	r1, [sp, #0]
 801bf5a:	4b50      	ldr	r3, [pc, #320]	; (801c09c <_dtoa_r+0x63c>)
 801bf5c:	ed9d 7b02 	vldr	d7, [sp, #8]
 801bf60:	4431      	add	r1, r6
 801bf62:	9102      	str	r1, [sp, #8]
 801bf64:	9909      	ldr	r1, [sp, #36]	; 0x24
 801bf66:	eeb0 9a47 	vmov.f32	s18, s14
 801bf6a:	eef0 9a67 	vmov.f32	s19, s15
 801bf6e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801bf72:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801bf76:	2900      	cmp	r1, #0
 801bf78:	d044      	beq.n	801c004 <_dtoa_r+0x5a4>
 801bf7a:	494e      	ldr	r1, [pc, #312]	; (801c0b4 <_dtoa_r+0x654>)
 801bf7c:	2000      	movs	r0, #0
 801bf7e:	f7e4 fc85 	bl	800088c <__aeabi_ddiv>
 801bf82:	ec53 2b19 	vmov	r2, r3, d9
 801bf86:	f7e4 f99f 	bl	80002c8 <__aeabi_dsub>
 801bf8a:	9d00      	ldr	r5, [sp, #0]
 801bf8c:	ec41 0b19 	vmov	d9, r0, r1
 801bf90:	4649      	mov	r1, r9
 801bf92:	4640      	mov	r0, r8
 801bf94:	f7e4 fe00 	bl	8000b98 <__aeabi_d2iz>
 801bf98:	4606      	mov	r6, r0
 801bf9a:	f7e4 fae3 	bl	8000564 <__aeabi_i2d>
 801bf9e:	4602      	mov	r2, r0
 801bfa0:	460b      	mov	r3, r1
 801bfa2:	4640      	mov	r0, r8
 801bfa4:	4649      	mov	r1, r9
 801bfa6:	f7e4 f98f 	bl	80002c8 <__aeabi_dsub>
 801bfaa:	3630      	adds	r6, #48	; 0x30
 801bfac:	f805 6b01 	strb.w	r6, [r5], #1
 801bfb0:	ec53 2b19 	vmov	r2, r3, d9
 801bfb4:	4680      	mov	r8, r0
 801bfb6:	4689      	mov	r9, r1
 801bfb8:	f7e4 fdb0 	bl	8000b1c <__aeabi_dcmplt>
 801bfbc:	2800      	cmp	r0, #0
 801bfbe:	d164      	bne.n	801c08a <_dtoa_r+0x62a>
 801bfc0:	4642      	mov	r2, r8
 801bfc2:	464b      	mov	r3, r9
 801bfc4:	4937      	ldr	r1, [pc, #220]	; (801c0a4 <_dtoa_r+0x644>)
 801bfc6:	2000      	movs	r0, #0
 801bfc8:	f7e4 f97e 	bl	80002c8 <__aeabi_dsub>
 801bfcc:	ec53 2b19 	vmov	r2, r3, d9
 801bfd0:	f7e4 fda4 	bl	8000b1c <__aeabi_dcmplt>
 801bfd4:	2800      	cmp	r0, #0
 801bfd6:	f040 80b6 	bne.w	801c146 <_dtoa_r+0x6e6>
 801bfda:	9b02      	ldr	r3, [sp, #8]
 801bfdc:	429d      	cmp	r5, r3
 801bfde:	f43f af7c 	beq.w	801beda <_dtoa_r+0x47a>
 801bfe2:	4b31      	ldr	r3, [pc, #196]	; (801c0a8 <_dtoa_r+0x648>)
 801bfe4:	ec51 0b19 	vmov	r0, r1, d9
 801bfe8:	2200      	movs	r2, #0
 801bfea:	f7e4 fb25 	bl	8000638 <__aeabi_dmul>
 801bfee:	4b2e      	ldr	r3, [pc, #184]	; (801c0a8 <_dtoa_r+0x648>)
 801bff0:	ec41 0b19 	vmov	d9, r0, r1
 801bff4:	2200      	movs	r2, #0
 801bff6:	4640      	mov	r0, r8
 801bff8:	4649      	mov	r1, r9
 801bffa:	f7e4 fb1d 	bl	8000638 <__aeabi_dmul>
 801bffe:	4680      	mov	r8, r0
 801c000:	4689      	mov	r9, r1
 801c002:	e7c5      	b.n	801bf90 <_dtoa_r+0x530>
 801c004:	ec51 0b17 	vmov	r0, r1, d7
 801c008:	f7e4 fb16 	bl	8000638 <__aeabi_dmul>
 801c00c:	9b02      	ldr	r3, [sp, #8]
 801c00e:	9d00      	ldr	r5, [sp, #0]
 801c010:	930f      	str	r3, [sp, #60]	; 0x3c
 801c012:	ec41 0b19 	vmov	d9, r0, r1
 801c016:	4649      	mov	r1, r9
 801c018:	4640      	mov	r0, r8
 801c01a:	f7e4 fdbd 	bl	8000b98 <__aeabi_d2iz>
 801c01e:	4606      	mov	r6, r0
 801c020:	f7e4 faa0 	bl	8000564 <__aeabi_i2d>
 801c024:	3630      	adds	r6, #48	; 0x30
 801c026:	4602      	mov	r2, r0
 801c028:	460b      	mov	r3, r1
 801c02a:	4640      	mov	r0, r8
 801c02c:	4649      	mov	r1, r9
 801c02e:	f7e4 f94b 	bl	80002c8 <__aeabi_dsub>
 801c032:	f805 6b01 	strb.w	r6, [r5], #1
 801c036:	9b02      	ldr	r3, [sp, #8]
 801c038:	429d      	cmp	r5, r3
 801c03a:	4680      	mov	r8, r0
 801c03c:	4689      	mov	r9, r1
 801c03e:	f04f 0200 	mov.w	r2, #0
 801c042:	d124      	bne.n	801c08e <_dtoa_r+0x62e>
 801c044:	4b1b      	ldr	r3, [pc, #108]	; (801c0b4 <_dtoa_r+0x654>)
 801c046:	ec51 0b19 	vmov	r0, r1, d9
 801c04a:	f7e4 f93f 	bl	80002cc <__adddf3>
 801c04e:	4602      	mov	r2, r0
 801c050:	460b      	mov	r3, r1
 801c052:	4640      	mov	r0, r8
 801c054:	4649      	mov	r1, r9
 801c056:	f7e4 fd7f 	bl	8000b58 <__aeabi_dcmpgt>
 801c05a:	2800      	cmp	r0, #0
 801c05c:	d173      	bne.n	801c146 <_dtoa_r+0x6e6>
 801c05e:	ec53 2b19 	vmov	r2, r3, d9
 801c062:	4914      	ldr	r1, [pc, #80]	; (801c0b4 <_dtoa_r+0x654>)
 801c064:	2000      	movs	r0, #0
 801c066:	f7e4 f92f 	bl	80002c8 <__aeabi_dsub>
 801c06a:	4602      	mov	r2, r0
 801c06c:	460b      	mov	r3, r1
 801c06e:	4640      	mov	r0, r8
 801c070:	4649      	mov	r1, r9
 801c072:	f7e4 fd53 	bl	8000b1c <__aeabi_dcmplt>
 801c076:	2800      	cmp	r0, #0
 801c078:	f43f af2f 	beq.w	801beda <_dtoa_r+0x47a>
 801c07c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801c07e:	1e6b      	subs	r3, r5, #1
 801c080:	930f      	str	r3, [sp, #60]	; 0x3c
 801c082:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801c086:	2b30      	cmp	r3, #48	; 0x30
 801c088:	d0f8      	beq.n	801c07c <_dtoa_r+0x61c>
 801c08a:	46bb      	mov	fp, r7
 801c08c:	e04a      	b.n	801c124 <_dtoa_r+0x6c4>
 801c08e:	4b06      	ldr	r3, [pc, #24]	; (801c0a8 <_dtoa_r+0x648>)
 801c090:	f7e4 fad2 	bl	8000638 <__aeabi_dmul>
 801c094:	4680      	mov	r8, r0
 801c096:	4689      	mov	r9, r1
 801c098:	e7bd      	b.n	801c016 <_dtoa_r+0x5b6>
 801c09a:	bf00      	nop
 801c09c:	080258f8 	.word	0x080258f8
 801c0a0:	080258d0 	.word	0x080258d0
 801c0a4:	3ff00000 	.word	0x3ff00000
 801c0a8:	40240000 	.word	0x40240000
 801c0ac:	401c0000 	.word	0x401c0000
 801c0b0:	40140000 	.word	0x40140000
 801c0b4:	3fe00000 	.word	0x3fe00000
 801c0b8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801c0bc:	9d00      	ldr	r5, [sp, #0]
 801c0be:	4642      	mov	r2, r8
 801c0c0:	464b      	mov	r3, r9
 801c0c2:	4630      	mov	r0, r6
 801c0c4:	4639      	mov	r1, r7
 801c0c6:	f7e4 fbe1 	bl	800088c <__aeabi_ddiv>
 801c0ca:	f7e4 fd65 	bl	8000b98 <__aeabi_d2iz>
 801c0ce:	9001      	str	r0, [sp, #4]
 801c0d0:	f7e4 fa48 	bl	8000564 <__aeabi_i2d>
 801c0d4:	4642      	mov	r2, r8
 801c0d6:	464b      	mov	r3, r9
 801c0d8:	f7e4 faae 	bl	8000638 <__aeabi_dmul>
 801c0dc:	4602      	mov	r2, r0
 801c0de:	460b      	mov	r3, r1
 801c0e0:	4630      	mov	r0, r6
 801c0e2:	4639      	mov	r1, r7
 801c0e4:	f7e4 f8f0 	bl	80002c8 <__aeabi_dsub>
 801c0e8:	9e01      	ldr	r6, [sp, #4]
 801c0ea:	9f04      	ldr	r7, [sp, #16]
 801c0ec:	3630      	adds	r6, #48	; 0x30
 801c0ee:	f805 6b01 	strb.w	r6, [r5], #1
 801c0f2:	9e00      	ldr	r6, [sp, #0]
 801c0f4:	1bae      	subs	r6, r5, r6
 801c0f6:	42b7      	cmp	r7, r6
 801c0f8:	4602      	mov	r2, r0
 801c0fa:	460b      	mov	r3, r1
 801c0fc:	d134      	bne.n	801c168 <_dtoa_r+0x708>
 801c0fe:	f7e4 f8e5 	bl	80002cc <__adddf3>
 801c102:	4642      	mov	r2, r8
 801c104:	464b      	mov	r3, r9
 801c106:	4606      	mov	r6, r0
 801c108:	460f      	mov	r7, r1
 801c10a:	f7e4 fd25 	bl	8000b58 <__aeabi_dcmpgt>
 801c10e:	b9c8      	cbnz	r0, 801c144 <_dtoa_r+0x6e4>
 801c110:	4642      	mov	r2, r8
 801c112:	464b      	mov	r3, r9
 801c114:	4630      	mov	r0, r6
 801c116:	4639      	mov	r1, r7
 801c118:	f7e4 fcf6 	bl	8000b08 <__aeabi_dcmpeq>
 801c11c:	b110      	cbz	r0, 801c124 <_dtoa_r+0x6c4>
 801c11e:	9b01      	ldr	r3, [sp, #4]
 801c120:	07db      	lsls	r3, r3, #31
 801c122:	d40f      	bmi.n	801c144 <_dtoa_r+0x6e4>
 801c124:	4651      	mov	r1, sl
 801c126:	4620      	mov	r0, r4
 801c128:	f000 fb18 	bl	801c75c <_Bfree>
 801c12c:	2300      	movs	r3, #0
 801c12e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c130:	702b      	strb	r3, [r5, #0]
 801c132:	f10b 0301 	add.w	r3, fp, #1
 801c136:	6013      	str	r3, [r2, #0]
 801c138:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c13a:	2b00      	cmp	r3, #0
 801c13c:	f43f ace2 	beq.w	801bb04 <_dtoa_r+0xa4>
 801c140:	601d      	str	r5, [r3, #0]
 801c142:	e4df      	b.n	801bb04 <_dtoa_r+0xa4>
 801c144:	465f      	mov	r7, fp
 801c146:	462b      	mov	r3, r5
 801c148:	461d      	mov	r5, r3
 801c14a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c14e:	2a39      	cmp	r2, #57	; 0x39
 801c150:	d106      	bne.n	801c160 <_dtoa_r+0x700>
 801c152:	9a00      	ldr	r2, [sp, #0]
 801c154:	429a      	cmp	r2, r3
 801c156:	d1f7      	bne.n	801c148 <_dtoa_r+0x6e8>
 801c158:	9900      	ldr	r1, [sp, #0]
 801c15a:	2230      	movs	r2, #48	; 0x30
 801c15c:	3701      	adds	r7, #1
 801c15e:	700a      	strb	r2, [r1, #0]
 801c160:	781a      	ldrb	r2, [r3, #0]
 801c162:	3201      	adds	r2, #1
 801c164:	701a      	strb	r2, [r3, #0]
 801c166:	e790      	b.n	801c08a <_dtoa_r+0x62a>
 801c168:	4ba3      	ldr	r3, [pc, #652]	; (801c3f8 <_dtoa_r+0x998>)
 801c16a:	2200      	movs	r2, #0
 801c16c:	f7e4 fa64 	bl	8000638 <__aeabi_dmul>
 801c170:	2200      	movs	r2, #0
 801c172:	2300      	movs	r3, #0
 801c174:	4606      	mov	r6, r0
 801c176:	460f      	mov	r7, r1
 801c178:	f7e4 fcc6 	bl	8000b08 <__aeabi_dcmpeq>
 801c17c:	2800      	cmp	r0, #0
 801c17e:	d09e      	beq.n	801c0be <_dtoa_r+0x65e>
 801c180:	e7d0      	b.n	801c124 <_dtoa_r+0x6c4>
 801c182:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c184:	2a00      	cmp	r2, #0
 801c186:	f000 80ca 	beq.w	801c31e <_dtoa_r+0x8be>
 801c18a:	9a07      	ldr	r2, [sp, #28]
 801c18c:	2a01      	cmp	r2, #1
 801c18e:	f300 80ad 	bgt.w	801c2ec <_dtoa_r+0x88c>
 801c192:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c194:	2a00      	cmp	r2, #0
 801c196:	f000 80a5 	beq.w	801c2e4 <_dtoa_r+0x884>
 801c19a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801c19e:	9e08      	ldr	r6, [sp, #32]
 801c1a0:	9d05      	ldr	r5, [sp, #20]
 801c1a2:	9a05      	ldr	r2, [sp, #20]
 801c1a4:	441a      	add	r2, r3
 801c1a6:	9205      	str	r2, [sp, #20]
 801c1a8:	9a06      	ldr	r2, [sp, #24]
 801c1aa:	2101      	movs	r1, #1
 801c1ac:	441a      	add	r2, r3
 801c1ae:	4620      	mov	r0, r4
 801c1b0:	9206      	str	r2, [sp, #24]
 801c1b2:	f000 fbd3 	bl	801c95c <__i2b>
 801c1b6:	4607      	mov	r7, r0
 801c1b8:	b165      	cbz	r5, 801c1d4 <_dtoa_r+0x774>
 801c1ba:	9b06      	ldr	r3, [sp, #24]
 801c1bc:	2b00      	cmp	r3, #0
 801c1be:	dd09      	ble.n	801c1d4 <_dtoa_r+0x774>
 801c1c0:	42ab      	cmp	r3, r5
 801c1c2:	9a05      	ldr	r2, [sp, #20]
 801c1c4:	bfa8      	it	ge
 801c1c6:	462b      	movge	r3, r5
 801c1c8:	1ad2      	subs	r2, r2, r3
 801c1ca:	9205      	str	r2, [sp, #20]
 801c1cc:	9a06      	ldr	r2, [sp, #24]
 801c1ce:	1aed      	subs	r5, r5, r3
 801c1d0:	1ad3      	subs	r3, r2, r3
 801c1d2:	9306      	str	r3, [sp, #24]
 801c1d4:	9b08      	ldr	r3, [sp, #32]
 801c1d6:	b1f3      	cbz	r3, 801c216 <_dtoa_r+0x7b6>
 801c1d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c1da:	2b00      	cmp	r3, #0
 801c1dc:	f000 80a3 	beq.w	801c326 <_dtoa_r+0x8c6>
 801c1e0:	2e00      	cmp	r6, #0
 801c1e2:	dd10      	ble.n	801c206 <_dtoa_r+0x7a6>
 801c1e4:	4639      	mov	r1, r7
 801c1e6:	4632      	mov	r2, r6
 801c1e8:	4620      	mov	r0, r4
 801c1ea:	f000 fc77 	bl	801cadc <__pow5mult>
 801c1ee:	4652      	mov	r2, sl
 801c1f0:	4601      	mov	r1, r0
 801c1f2:	4607      	mov	r7, r0
 801c1f4:	4620      	mov	r0, r4
 801c1f6:	f000 fbc7 	bl	801c988 <__multiply>
 801c1fa:	4651      	mov	r1, sl
 801c1fc:	4680      	mov	r8, r0
 801c1fe:	4620      	mov	r0, r4
 801c200:	f000 faac 	bl	801c75c <_Bfree>
 801c204:	46c2      	mov	sl, r8
 801c206:	9b08      	ldr	r3, [sp, #32]
 801c208:	1b9a      	subs	r2, r3, r6
 801c20a:	d004      	beq.n	801c216 <_dtoa_r+0x7b6>
 801c20c:	4651      	mov	r1, sl
 801c20e:	4620      	mov	r0, r4
 801c210:	f000 fc64 	bl	801cadc <__pow5mult>
 801c214:	4682      	mov	sl, r0
 801c216:	2101      	movs	r1, #1
 801c218:	4620      	mov	r0, r4
 801c21a:	f000 fb9f 	bl	801c95c <__i2b>
 801c21e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c220:	2b00      	cmp	r3, #0
 801c222:	4606      	mov	r6, r0
 801c224:	f340 8081 	ble.w	801c32a <_dtoa_r+0x8ca>
 801c228:	461a      	mov	r2, r3
 801c22a:	4601      	mov	r1, r0
 801c22c:	4620      	mov	r0, r4
 801c22e:	f000 fc55 	bl	801cadc <__pow5mult>
 801c232:	9b07      	ldr	r3, [sp, #28]
 801c234:	2b01      	cmp	r3, #1
 801c236:	4606      	mov	r6, r0
 801c238:	dd7a      	ble.n	801c330 <_dtoa_r+0x8d0>
 801c23a:	f04f 0800 	mov.w	r8, #0
 801c23e:	6933      	ldr	r3, [r6, #16]
 801c240:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801c244:	6918      	ldr	r0, [r3, #16]
 801c246:	f000 fb3b 	bl	801c8c0 <__hi0bits>
 801c24a:	f1c0 0020 	rsb	r0, r0, #32
 801c24e:	9b06      	ldr	r3, [sp, #24]
 801c250:	4418      	add	r0, r3
 801c252:	f010 001f 	ands.w	r0, r0, #31
 801c256:	f000 8094 	beq.w	801c382 <_dtoa_r+0x922>
 801c25a:	f1c0 0320 	rsb	r3, r0, #32
 801c25e:	2b04      	cmp	r3, #4
 801c260:	f340 8085 	ble.w	801c36e <_dtoa_r+0x90e>
 801c264:	9b05      	ldr	r3, [sp, #20]
 801c266:	f1c0 001c 	rsb	r0, r0, #28
 801c26a:	4403      	add	r3, r0
 801c26c:	9305      	str	r3, [sp, #20]
 801c26e:	9b06      	ldr	r3, [sp, #24]
 801c270:	4403      	add	r3, r0
 801c272:	4405      	add	r5, r0
 801c274:	9306      	str	r3, [sp, #24]
 801c276:	9b05      	ldr	r3, [sp, #20]
 801c278:	2b00      	cmp	r3, #0
 801c27a:	dd05      	ble.n	801c288 <_dtoa_r+0x828>
 801c27c:	4651      	mov	r1, sl
 801c27e:	461a      	mov	r2, r3
 801c280:	4620      	mov	r0, r4
 801c282:	f000 fc85 	bl	801cb90 <__lshift>
 801c286:	4682      	mov	sl, r0
 801c288:	9b06      	ldr	r3, [sp, #24]
 801c28a:	2b00      	cmp	r3, #0
 801c28c:	dd05      	ble.n	801c29a <_dtoa_r+0x83a>
 801c28e:	4631      	mov	r1, r6
 801c290:	461a      	mov	r2, r3
 801c292:	4620      	mov	r0, r4
 801c294:	f000 fc7c 	bl	801cb90 <__lshift>
 801c298:	4606      	mov	r6, r0
 801c29a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c29c:	2b00      	cmp	r3, #0
 801c29e:	d072      	beq.n	801c386 <_dtoa_r+0x926>
 801c2a0:	4631      	mov	r1, r6
 801c2a2:	4650      	mov	r0, sl
 801c2a4:	f000 fce0 	bl	801cc68 <__mcmp>
 801c2a8:	2800      	cmp	r0, #0
 801c2aa:	da6c      	bge.n	801c386 <_dtoa_r+0x926>
 801c2ac:	2300      	movs	r3, #0
 801c2ae:	4651      	mov	r1, sl
 801c2b0:	220a      	movs	r2, #10
 801c2b2:	4620      	mov	r0, r4
 801c2b4:	f000 fa74 	bl	801c7a0 <__multadd>
 801c2b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c2ba:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c2be:	4682      	mov	sl, r0
 801c2c0:	2b00      	cmp	r3, #0
 801c2c2:	f000 81b0 	beq.w	801c626 <_dtoa_r+0xbc6>
 801c2c6:	2300      	movs	r3, #0
 801c2c8:	4639      	mov	r1, r7
 801c2ca:	220a      	movs	r2, #10
 801c2cc:	4620      	mov	r0, r4
 801c2ce:	f000 fa67 	bl	801c7a0 <__multadd>
 801c2d2:	9b01      	ldr	r3, [sp, #4]
 801c2d4:	2b00      	cmp	r3, #0
 801c2d6:	4607      	mov	r7, r0
 801c2d8:	f300 8096 	bgt.w	801c408 <_dtoa_r+0x9a8>
 801c2dc:	9b07      	ldr	r3, [sp, #28]
 801c2de:	2b02      	cmp	r3, #2
 801c2e0:	dc59      	bgt.n	801c396 <_dtoa_r+0x936>
 801c2e2:	e091      	b.n	801c408 <_dtoa_r+0x9a8>
 801c2e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c2e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801c2ea:	e758      	b.n	801c19e <_dtoa_r+0x73e>
 801c2ec:	9b04      	ldr	r3, [sp, #16]
 801c2ee:	1e5e      	subs	r6, r3, #1
 801c2f0:	9b08      	ldr	r3, [sp, #32]
 801c2f2:	42b3      	cmp	r3, r6
 801c2f4:	bfbf      	itttt	lt
 801c2f6:	9b08      	ldrlt	r3, [sp, #32]
 801c2f8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 801c2fa:	9608      	strlt	r6, [sp, #32]
 801c2fc:	1af3      	sublt	r3, r6, r3
 801c2fe:	bfb4      	ite	lt
 801c300:	18d2      	addlt	r2, r2, r3
 801c302:	1b9e      	subge	r6, r3, r6
 801c304:	9b04      	ldr	r3, [sp, #16]
 801c306:	bfbc      	itt	lt
 801c308:	920b      	strlt	r2, [sp, #44]	; 0x2c
 801c30a:	2600      	movlt	r6, #0
 801c30c:	2b00      	cmp	r3, #0
 801c30e:	bfb7      	itett	lt
 801c310:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 801c314:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 801c318:	1a9d      	sublt	r5, r3, r2
 801c31a:	2300      	movlt	r3, #0
 801c31c:	e741      	b.n	801c1a2 <_dtoa_r+0x742>
 801c31e:	9e08      	ldr	r6, [sp, #32]
 801c320:	9d05      	ldr	r5, [sp, #20]
 801c322:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801c324:	e748      	b.n	801c1b8 <_dtoa_r+0x758>
 801c326:	9a08      	ldr	r2, [sp, #32]
 801c328:	e770      	b.n	801c20c <_dtoa_r+0x7ac>
 801c32a:	9b07      	ldr	r3, [sp, #28]
 801c32c:	2b01      	cmp	r3, #1
 801c32e:	dc19      	bgt.n	801c364 <_dtoa_r+0x904>
 801c330:	9b02      	ldr	r3, [sp, #8]
 801c332:	b9bb      	cbnz	r3, 801c364 <_dtoa_r+0x904>
 801c334:	9b03      	ldr	r3, [sp, #12]
 801c336:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801c33a:	b99b      	cbnz	r3, 801c364 <_dtoa_r+0x904>
 801c33c:	9b03      	ldr	r3, [sp, #12]
 801c33e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801c342:	0d1b      	lsrs	r3, r3, #20
 801c344:	051b      	lsls	r3, r3, #20
 801c346:	b183      	cbz	r3, 801c36a <_dtoa_r+0x90a>
 801c348:	9b05      	ldr	r3, [sp, #20]
 801c34a:	3301      	adds	r3, #1
 801c34c:	9305      	str	r3, [sp, #20]
 801c34e:	9b06      	ldr	r3, [sp, #24]
 801c350:	3301      	adds	r3, #1
 801c352:	9306      	str	r3, [sp, #24]
 801c354:	f04f 0801 	mov.w	r8, #1
 801c358:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c35a:	2b00      	cmp	r3, #0
 801c35c:	f47f af6f 	bne.w	801c23e <_dtoa_r+0x7de>
 801c360:	2001      	movs	r0, #1
 801c362:	e774      	b.n	801c24e <_dtoa_r+0x7ee>
 801c364:	f04f 0800 	mov.w	r8, #0
 801c368:	e7f6      	b.n	801c358 <_dtoa_r+0x8f8>
 801c36a:	4698      	mov	r8, r3
 801c36c:	e7f4      	b.n	801c358 <_dtoa_r+0x8f8>
 801c36e:	d082      	beq.n	801c276 <_dtoa_r+0x816>
 801c370:	9a05      	ldr	r2, [sp, #20]
 801c372:	331c      	adds	r3, #28
 801c374:	441a      	add	r2, r3
 801c376:	9205      	str	r2, [sp, #20]
 801c378:	9a06      	ldr	r2, [sp, #24]
 801c37a:	441a      	add	r2, r3
 801c37c:	441d      	add	r5, r3
 801c37e:	9206      	str	r2, [sp, #24]
 801c380:	e779      	b.n	801c276 <_dtoa_r+0x816>
 801c382:	4603      	mov	r3, r0
 801c384:	e7f4      	b.n	801c370 <_dtoa_r+0x910>
 801c386:	9b04      	ldr	r3, [sp, #16]
 801c388:	2b00      	cmp	r3, #0
 801c38a:	dc37      	bgt.n	801c3fc <_dtoa_r+0x99c>
 801c38c:	9b07      	ldr	r3, [sp, #28]
 801c38e:	2b02      	cmp	r3, #2
 801c390:	dd34      	ble.n	801c3fc <_dtoa_r+0x99c>
 801c392:	9b04      	ldr	r3, [sp, #16]
 801c394:	9301      	str	r3, [sp, #4]
 801c396:	9b01      	ldr	r3, [sp, #4]
 801c398:	b963      	cbnz	r3, 801c3b4 <_dtoa_r+0x954>
 801c39a:	4631      	mov	r1, r6
 801c39c:	2205      	movs	r2, #5
 801c39e:	4620      	mov	r0, r4
 801c3a0:	f000 f9fe 	bl	801c7a0 <__multadd>
 801c3a4:	4601      	mov	r1, r0
 801c3a6:	4606      	mov	r6, r0
 801c3a8:	4650      	mov	r0, sl
 801c3aa:	f000 fc5d 	bl	801cc68 <__mcmp>
 801c3ae:	2800      	cmp	r0, #0
 801c3b0:	f73f adbb 	bgt.w	801bf2a <_dtoa_r+0x4ca>
 801c3b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c3b6:	9d00      	ldr	r5, [sp, #0]
 801c3b8:	ea6f 0b03 	mvn.w	fp, r3
 801c3bc:	f04f 0800 	mov.w	r8, #0
 801c3c0:	4631      	mov	r1, r6
 801c3c2:	4620      	mov	r0, r4
 801c3c4:	f000 f9ca 	bl	801c75c <_Bfree>
 801c3c8:	2f00      	cmp	r7, #0
 801c3ca:	f43f aeab 	beq.w	801c124 <_dtoa_r+0x6c4>
 801c3ce:	f1b8 0f00 	cmp.w	r8, #0
 801c3d2:	d005      	beq.n	801c3e0 <_dtoa_r+0x980>
 801c3d4:	45b8      	cmp	r8, r7
 801c3d6:	d003      	beq.n	801c3e0 <_dtoa_r+0x980>
 801c3d8:	4641      	mov	r1, r8
 801c3da:	4620      	mov	r0, r4
 801c3dc:	f000 f9be 	bl	801c75c <_Bfree>
 801c3e0:	4639      	mov	r1, r7
 801c3e2:	4620      	mov	r0, r4
 801c3e4:	f000 f9ba 	bl	801c75c <_Bfree>
 801c3e8:	e69c      	b.n	801c124 <_dtoa_r+0x6c4>
 801c3ea:	2600      	movs	r6, #0
 801c3ec:	4637      	mov	r7, r6
 801c3ee:	e7e1      	b.n	801c3b4 <_dtoa_r+0x954>
 801c3f0:	46bb      	mov	fp, r7
 801c3f2:	4637      	mov	r7, r6
 801c3f4:	e599      	b.n	801bf2a <_dtoa_r+0x4ca>
 801c3f6:	bf00      	nop
 801c3f8:	40240000 	.word	0x40240000
 801c3fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c3fe:	2b00      	cmp	r3, #0
 801c400:	f000 80c8 	beq.w	801c594 <_dtoa_r+0xb34>
 801c404:	9b04      	ldr	r3, [sp, #16]
 801c406:	9301      	str	r3, [sp, #4]
 801c408:	2d00      	cmp	r5, #0
 801c40a:	dd05      	ble.n	801c418 <_dtoa_r+0x9b8>
 801c40c:	4639      	mov	r1, r7
 801c40e:	462a      	mov	r2, r5
 801c410:	4620      	mov	r0, r4
 801c412:	f000 fbbd 	bl	801cb90 <__lshift>
 801c416:	4607      	mov	r7, r0
 801c418:	f1b8 0f00 	cmp.w	r8, #0
 801c41c:	d05b      	beq.n	801c4d6 <_dtoa_r+0xa76>
 801c41e:	6879      	ldr	r1, [r7, #4]
 801c420:	4620      	mov	r0, r4
 801c422:	f000 f95b 	bl	801c6dc <_Balloc>
 801c426:	4605      	mov	r5, r0
 801c428:	b928      	cbnz	r0, 801c436 <_dtoa_r+0x9d6>
 801c42a:	4b83      	ldr	r3, [pc, #524]	; (801c638 <_dtoa_r+0xbd8>)
 801c42c:	4602      	mov	r2, r0
 801c42e:	f240 21ef 	movw	r1, #751	; 0x2ef
 801c432:	f7ff bb2e 	b.w	801ba92 <_dtoa_r+0x32>
 801c436:	693a      	ldr	r2, [r7, #16]
 801c438:	3202      	adds	r2, #2
 801c43a:	0092      	lsls	r2, r2, #2
 801c43c:	f107 010c 	add.w	r1, r7, #12
 801c440:	300c      	adds	r0, #12
 801c442:	f7ff fa6e 	bl	801b922 <memcpy>
 801c446:	2201      	movs	r2, #1
 801c448:	4629      	mov	r1, r5
 801c44a:	4620      	mov	r0, r4
 801c44c:	f000 fba0 	bl	801cb90 <__lshift>
 801c450:	9b00      	ldr	r3, [sp, #0]
 801c452:	3301      	adds	r3, #1
 801c454:	9304      	str	r3, [sp, #16]
 801c456:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c45a:	4413      	add	r3, r2
 801c45c:	9308      	str	r3, [sp, #32]
 801c45e:	9b02      	ldr	r3, [sp, #8]
 801c460:	f003 0301 	and.w	r3, r3, #1
 801c464:	46b8      	mov	r8, r7
 801c466:	9306      	str	r3, [sp, #24]
 801c468:	4607      	mov	r7, r0
 801c46a:	9b04      	ldr	r3, [sp, #16]
 801c46c:	4631      	mov	r1, r6
 801c46e:	3b01      	subs	r3, #1
 801c470:	4650      	mov	r0, sl
 801c472:	9301      	str	r3, [sp, #4]
 801c474:	f7ff fa6a 	bl	801b94c <quorem>
 801c478:	4641      	mov	r1, r8
 801c47a:	9002      	str	r0, [sp, #8]
 801c47c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801c480:	4650      	mov	r0, sl
 801c482:	f000 fbf1 	bl	801cc68 <__mcmp>
 801c486:	463a      	mov	r2, r7
 801c488:	9005      	str	r0, [sp, #20]
 801c48a:	4631      	mov	r1, r6
 801c48c:	4620      	mov	r0, r4
 801c48e:	f000 fc07 	bl	801cca0 <__mdiff>
 801c492:	68c2      	ldr	r2, [r0, #12]
 801c494:	4605      	mov	r5, r0
 801c496:	bb02      	cbnz	r2, 801c4da <_dtoa_r+0xa7a>
 801c498:	4601      	mov	r1, r0
 801c49a:	4650      	mov	r0, sl
 801c49c:	f000 fbe4 	bl	801cc68 <__mcmp>
 801c4a0:	4602      	mov	r2, r0
 801c4a2:	4629      	mov	r1, r5
 801c4a4:	4620      	mov	r0, r4
 801c4a6:	9209      	str	r2, [sp, #36]	; 0x24
 801c4a8:	f000 f958 	bl	801c75c <_Bfree>
 801c4ac:	9b07      	ldr	r3, [sp, #28]
 801c4ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c4b0:	9d04      	ldr	r5, [sp, #16]
 801c4b2:	ea43 0102 	orr.w	r1, r3, r2
 801c4b6:	9b06      	ldr	r3, [sp, #24]
 801c4b8:	4319      	orrs	r1, r3
 801c4ba:	d110      	bne.n	801c4de <_dtoa_r+0xa7e>
 801c4bc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801c4c0:	d029      	beq.n	801c516 <_dtoa_r+0xab6>
 801c4c2:	9b05      	ldr	r3, [sp, #20]
 801c4c4:	2b00      	cmp	r3, #0
 801c4c6:	dd02      	ble.n	801c4ce <_dtoa_r+0xa6e>
 801c4c8:	9b02      	ldr	r3, [sp, #8]
 801c4ca:	f103 0931 	add.w	r9, r3, #49	; 0x31
 801c4ce:	9b01      	ldr	r3, [sp, #4]
 801c4d0:	f883 9000 	strb.w	r9, [r3]
 801c4d4:	e774      	b.n	801c3c0 <_dtoa_r+0x960>
 801c4d6:	4638      	mov	r0, r7
 801c4d8:	e7ba      	b.n	801c450 <_dtoa_r+0x9f0>
 801c4da:	2201      	movs	r2, #1
 801c4dc:	e7e1      	b.n	801c4a2 <_dtoa_r+0xa42>
 801c4de:	9b05      	ldr	r3, [sp, #20]
 801c4e0:	2b00      	cmp	r3, #0
 801c4e2:	db04      	blt.n	801c4ee <_dtoa_r+0xa8e>
 801c4e4:	9907      	ldr	r1, [sp, #28]
 801c4e6:	430b      	orrs	r3, r1
 801c4e8:	9906      	ldr	r1, [sp, #24]
 801c4ea:	430b      	orrs	r3, r1
 801c4ec:	d120      	bne.n	801c530 <_dtoa_r+0xad0>
 801c4ee:	2a00      	cmp	r2, #0
 801c4f0:	dded      	ble.n	801c4ce <_dtoa_r+0xa6e>
 801c4f2:	4651      	mov	r1, sl
 801c4f4:	2201      	movs	r2, #1
 801c4f6:	4620      	mov	r0, r4
 801c4f8:	f000 fb4a 	bl	801cb90 <__lshift>
 801c4fc:	4631      	mov	r1, r6
 801c4fe:	4682      	mov	sl, r0
 801c500:	f000 fbb2 	bl	801cc68 <__mcmp>
 801c504:	2800      	cmp	r0, #0
 801c506:	dc03      	bgt.n	801c510 <_dtoa_r+0xab0>
 801c508:	d1e1      	bne.n	801c4ce <_dtoa_r+0xa6e>
 801c50a:	f019 0f01 	tst.w	r9, #1
 801c50e:	d0de      	beq.n	801c4ce <_dtoa_r+0xa6e>
 801c510:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801c514:	d1d8      	bne.n	801c4c8 <_dtoa_r+0xa68>
 801c516:	9a01      	ldr	r2, [sp, #4]
 801c518:	2339      	movs	r3, #57	; 0x39
 801c51a:	7013      	strb	r3, [r2, #0]
 801c51c:	462b      	mov	r3, r5
 801c51e:	461d      	mov	r5, r3
 801c520:	3b01      	subs	r3, #1
 801c522:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801c526:	2a39      	cmp	r2, #57	; 0x39
 801c528:	d06c      	beq.n	801c604 <_dtoa_r+0xba4>
 801c52a:	3201      	adds	r2, #1
 801c52c:	701a      	strb	r2, [r3, #0]
 801c52e:	e747      	b.n	801c3c0 <_dtoa_r+0x960>
 801c530:	2a00      	cmp	r2, #0
 801c532:	dd07      	ble.n	801c544 <_dtoa_r+0xae4>
 801c534:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801c538:	d0ed      	beq.n	801c516 <_dtoa_r+0xab6>
 801c53a:	9a01      	ldr	r2, [sp, #4]
 801c53c:	f109 0301 	add.w	r3, r9, #1
 801c540:	7013      	strb	r3, [r2, #0]
 801c542:	e73d      	b.n	801c3c0 <_dtoa_r+0x960>
 801c544:	9b04      	ldr	r3, [sp, #16]
 801c546:	9a08      	ldr	r2, [sp, #32]
 801c548:	f803 9c01 	strb.w	r9, [r3, #-1]
 801c54c:	4293      	cmp	r3, r2
 801c54e:	d043      	beq.n	801c5d8 <_dtoa_r+0xb78>
 801c550:	4651      	mov	r1, sl
 801c552:	2300      	movs	r3, #0
 801c554:	220a      	movs	r2, #10
 801c556:	4620      	mov	r0, r4
 801c558:	f000 f922 	bl	801c7a0 <__multadd>
 801c55c:	45b8      	cmp	r8, r7
 801c55e:	4682      	mov	sl, r0
 801c560:	f04f 0300 	mov.w	r3, #0
 801c564:	f04f 020a 	mov.w	r2, #10
 801c568:	4641      	mov	r1, r8
 801c56a:	4620      	mov	r0, r4
 801c56c:	d107      	bne.n	801c57e <_dtoa_r+0xb1e>
 801c56e:	f000 f917 	bl	801c7a0 <__multadd>
 801c572:	4680      	mov	r8, r0
 801c574:	4607      	mov	r7, r0
 801c576:	9b04      	ldr	r3, [sp, #16]
 801c578:	3301      	adds	r3, #1
 801c57a:	9304      	str	r3, [sp, #16]
 801c57c:	e775      	b.n	801c46a <_dtoa_r+0xa0a>
 801c57e:	f000 f90f 	bl	801c7a0 <__multadd>
 801c582:	4639      	mov	r1, r7
 801c584:	4680      	mov	r8, r0
 801c586:	2300      	movs	r3, #0
 801c588:	220a      	movs	r2, #10
 801c58a:	4620      	mov	r0, r4
 801c58c:	f000 f908 	bl	801c7a0 <__multadd>
 801c590:	4607      	mov	r7, r0
 801c592:	e7f0      	b.n	801c576 <_dtoa_r+0xb16>
 801c594:	9b04      	ldr	r3, [sp, #16]
 801c596:	9301      	str	r3, [sp, #4]
 801c598:	9d00      	ldr	r5, [sp, #0]
 801c59a:	4631      	mov	r1, r6
 801c59c:	4650      	mov	r0, sl
 801c59e:	f7ff f9d5 	bl	801b94c <quorem>
 801c5a2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801c5a6:	9b00      	ldr	r3, [sp, #0]
 801c5a8:	f805 9b01 	strb.w	r9, [r5], #1
 801c5ac:	1aea      	subs	r2, r5, r3
 801c5ae:	9b01      	ldr	r3, [sp, #4]
 801c5b0:	4293      	cmp	r3, r2
 801c5b2:	dd07      	ble.n	801c5c4 <_dtoa_r+0xb64>
 801c5b4:	4651      	mov	r1, sl
 801c5b6:	2300      	movs	r3, #0
 801c5b8:	220a      	movs	r2, #10
 801c5ba:	4620      	mov	r0, r4
 801c5bc:	f000 f8f0 	bl	801c7a0 <__multadd>
 801c5c0:	4682      	mov	sl, r0
 801c5c2:	e7ea      	b.n	801c59a <_dtoa_r+0xb3a>
 801c5c4:	9b01      	ldr	r3, [sp, #4]
 801c5c6:	2b00      	cmp	r3, #0
 801c5c8:	bfc8      	it	gt
 801c5ca:	461d      	movgt	r5, r3
 801c5cc:	9b00      	ldr	r3, [sp, #0]
 801c5ce:	bfd8      	it	le
 801c5d0:	2501      	movle	r5, #1
 801c5d2:	441d      	add	r5, r3
 801c5d4:	f04f 0800 	mov.w	r8, #0
 801c5d8:	4651      	mov	r1, sl
 801c5da:	2201      	movs	r2, #1
 801c5dc:	4620      	mov	r0, r4
 801c5de:	f000 fad7 	bl	801cb90 <__lshift>
 801c5e2:	4631      	mov	r1, r6
 801c5e4:	4682      	mov	sl, r0
 801c5e6:	f000 fb3f 	bl	801cc68 <__mcmp>
 801c5ea:	2800      	cmp	r0, #0
 801c5ec:	dc96      	bgt.n	801c51c <_dtoa_r+0xabc>
 801c5ee:	d102      	bne.n	801c5f6 <_dtoa_r+0xb96>
 801c5f0:	f019 0f01 	tst.w	r9, #1
 801c5f4:	d192      	bne.n	801c51c <_dtoa_r+0xabc>
 801c5f6:	462b      	mov	r3, r5
 801c5f8:	461d      	mov	r5, r3
 801c5fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c5fe:	2a30      	cmp	r2, #48	; 0x30
 801c600:	d0fa      	beq.n	801c5f8 <_dtoa_r+0xb98>
 801c602:	e6dd      	b.n	801c3c0 <_dtoa_r+0x960>
 801c604:	9a00      	ldr	r2, [sp, #0]
 801c606:	429a      	cmp	r2, r3
 801c608:	d189      	bne.n	801c51e <_dtoa_r+0xabe>
 801c60a:	f10b 0b01 	add.w	fp, fp, #1
 801c60e:	2331      	movs	r3, #49	; 0x31
 801c610:	e796      	b.n	801c540 <_dtoa_r+0xae0>
 801c612:	4b0a      	ldr	r3, [pc, #40]	; (801c63c <_dtoa_r+0xbdc>)
 801c614:	f7ff ba99 	b.w	801bb4a <_dtoa_r+0xea>
 801c618:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c61a:	2b00      	cmp	r3, #0
 801c61c:	f47f aa6d 	bne.w	801bafa <_dtoa_r+0x9a>
 801c620:	4b07      	ldr	r3, [pc, #28]	; (801c640 <_dtoa_r+0xbe0>)
 801c622:	f7ff ba92 	b.w	801bb4a <_dtoa_r+0xea>
 801c626:	9b01      	ldr	r3, [sp, #4]
 801c628:	2b00      	cmp	r3, #0
 801c62a:	dcb5      	bgt.n	801c598 <_dtoa_r+0xb38>
 801c62c:	9b07      	ldr	r3, [sp, #28]
 801c62e:	2b02      	cmp	r3, #2
 801c630:	f73f aeb1 	bgt.w	801c396 <_dtoa_r+0x936>
 801c634:	e7b0      	b.n	801c598 <_dtoa_r+0xb38>
 801c636:	bf00      	nop
 801c638:	08025865 	.word	0x08025865
 801c63c:	080257c0 	.word	0x080257c0
 801c640:	080257e9 	.word	0x080257e9

0801c644 <_free_r>:
 801c644:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c646:	2900      	cmp	r1, #0
 801c648:	d044      	beq.n	801c6d4 <_free_r+0x90>
 801c64a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c64e:	9001      	str	r0, [sp, #4]
 801c650:	2b00      	cmp	r3, #0
 801c652:	f1a1 0404 	sub.w	r4, r1, #4
 801c656:	bfb8      	it	lt
 801c658:	18e4      	addlt	r4, r4, r3
 801c65a:	f7fe f83b 	bl	801a6d4 <__malloc_lock>
 801c65e:	4a1e      	ldr	r2, [pc, #120]	; (801c6d8 <_free_r+0x94>)
 801c660:	9801      	ldr	r0, [sp, #4]
 801c662:	6813      	ldr	r3, [r2, #0]
 801c664:	b933      	cbnz	r3, 801c674 <_free_r+0x30>
 801c666:	6063      	str	r3, [r4, #4]
 801c668:	6014      	str	r4, [r2, #0]
 801c66a:	b003      	add	sp, #12
 801c66c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c670:	f7fe b836 	b.w	801a6e0 <__malloc_unlock>
 801c674:	42a3      	cmp	r3, r4
 801c676:	d908      	bls.n	801c68a <_free_r+0x46>
 801c678:	6825      	ldr	r5, [r4, #0]
 801c67a:	1961      	adds	r1, r4, r5
 801c67c:	428b      	cmp	r3, r1
 801c67e:	bf01      	itttt	eq
 801c680:	6819      	ldreq	r1, [r3, #0]
 801c682:	685b      	ldreq	r3, [r3, #4]
 801c684:	1949      	addeq	r1, r1, r5
 801c686:	6021      	streq	r1, [r4, #0]
 801c688:	e7ed      	b.n	801c666 <_free_r+0x22>
 801c68a:	461a      	mov	r2, r3
 801c68c:	685b      	ldr	r3, [r3, #4]
 801c68e:	b10b      	cbz	r3, 801c694 <_free_r+0x50>
 801c690:	42a3      	cmp	r3, r4
 801c692:	d9fa      	bls.n	801c68a <_free_r+0x46>
 801c694:	6811      	ldr	r1, [r2, #0]
 801c696:	1855      	adds	r5, r2, r1
 801c698:	42a5      	cmp	r5, r4
 801c69a:	d10b      	bne.n	801c6b4 <_free_r+0x70>
 801c69c:	6824      	ldr	r4, [r4, #0]
 801c69e:	4421      	add	r1, r4
 801c6a0:	1854      	adds	r4, r2, r1
 801c6a2:	42a3      	cmp	r3, r4
 801c6a4:	6011      	str	r1, [r2, #0]
 801c6a6:	d1e0      	bne.n	801c66a <_free_r+0x26>
 801c6a8:	681c      	ldr	r4, [r3, #0]
 801c6aa:	685b      	ldr	r3, [r3, #4]
 801c6ac:	6053      	str	r3, [r2, #4]
 801c6ae:	440c      	add	r4, r1
 801c6b0:	6014      	str	r4, [r2, #0]
 801c6b2:	e7da      	b.n	801c66a <_free_r+0x26>
 801c6b4:	d902      	bls.n	801c6bc <_free_r+0x78>
 801c6b6:	230c      	movs	r3, #12
 801c6b8:	6003      	str	r3, [r0, #0]
 801c6ba:	e7d6      	b.n	801c66a <_free_r+0x26>
 801c6bc:	6825      	ldr	r5, [r4, #0]
 801c6be:	1961      	adds	r1, r4, r5
 801c6c0:	428b      	cmp	r3, r1
 801c6c2:	bf04      	itt	eq
 801c6c4:	6819      	ldreq	r1, [r3, #0]
 801c6c6:	685b      	ldreq	r3, [r3, #4]
 801c6c8:	6063      	str	r3, [r4, #4]
 801c6ca:	bf04      	itt	eq
 801c6cc:	1949      	addeq	r1, r1, r5
 801c6ce:	6021      	streq	r1, [r4, #0]
 801c6d0:	6054      	str	r4, [r2, #4]
 801c6d2:	e7ca      	b.n	801c66a <_free_r+0x26>
 801c6d4:	b003      	add	sp, #12
 801c6d6:	bd30      	pop	{r4, r5, pc}
 801c6d8:	20013650 	.word	0x20013650

0801c6dc <_Balloc>:
 801c6dc:	b570      	push	{r4, r5, r6, lr}
 801c6de:	69c6      	ldr	r6, [r0, #28]
 801c6e0:	4604      	mov	r4, r0
 801c6e2:	460d      	mov	r5, r1
 801c6e4:	b976      	cbnz	r6, 801c704 <_Balloc+0x28>
 801c6e6:	2010      	movs	r0, #16
 801c6e8:	f7fd ff44 	bl	801a574 <malloc>
 801c6ec:	4602      	mov	r2, r0
 801c6ee:	61e0      	str	r0, [r4, #28]
 801c6f0:	b920      	cbnz	r0, 801c6fc <_Balloc+0x20>
 801c6f2:	4b18      	ldr	r3, [pc, #96]	; (801c754 <_Balloc+0x78>)
 801c6f4:	4818      	ldr	r0, [pc, #96]	; (801c758 <_Balloc+0x7c>)
 801c6f6:	216b      	movs	r1, #107	; 0x6b
 801c6f8:	f001 ff2e 	bl	801e558 <__assert_func>
 801c6fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c700:	6006      	str	r6, [r0, #0]
 801c702:	60c6      	str	r6, [r0, #12]
 801c704:	69e6      	ldr	r6, [r4, #28]
 801c706:	68f3      	ldr	r3, [r6, #12]
 801c708:	b183      	cbz	r3, 801c72c <_Balloc+0x50>
 801c70a:	69e3      	ldr	r3, [r4, #28]
 801c70c:	68db      	ldr	r3, [r3, #12]
 801c70e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801c712:	b9b8      	cbnz	r0, 801c744 <_Balloc+0x68>
 801c714:	2101      	movs	r1, #1
 801c716:	fa01 f605 	lsl.w	r6, r1, r5
 801c71a:	1d72      	adds	r2, r6, #5
 801c71c:	0092      	lsls	r2, r2, #2
 801c71e:	4620      	mov	r0, r4
 801c720:	f7fd ff00 	bl	801a524 <_calloc_r>
 801c724:	b160      	cbz	r0, 801c740 <_Balloc+0x64>
 801c726:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801c72a:	e00e      	b.n	801c74a <_Balloc+0x6e>
 801c72c:	2221      	movs	r2, #33	; 0x21
 801c72e:	2104      	movs	r1, #4
 801c730:	4620      	mov	r0, r4
 801c732:	f7fd fef7 	bl	801a524 <_calloc_r>
 801c736:	69e3      	ldr	r3, [r4, #28]
 801c738:	60f0      	str	r0, [r6, #12]
 801c73a:	68db      	ldr	r3, [r3, #12]
 801c73c:	2b00      	cmp	r3, #0
 801c73e:	d1e4      	bne.n	801c70a <_Balloc+0x2e>
 801c740:	2000      	movs	r0, #0
 801c742:	bd70      	pop	{r4, r5, r6, pc}
 801c744:	6802      	ldr	r2, [r0, #0]
 801c746:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c74a:	2300      	movs	r3, #0
 801c74c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801c750:	e7f7      	b.n	801c742 <_Balloc+0x66>
 801c752:	bf00      	nop
 801c754:	080257f6 	.word	0x080257f6
 801c758:	08025876 	.word	0x08025876

0801c75c <_Bfree>:
 801c75c:	b570      	push	{r4, r5, r6, lr}
 801c75e:	69c6      	ldr	r6, [r0, #28]
 801c760:	4605      	mov	r5, r0
 801c762:	460c      	mov	r4, r1
 801c764:	b976      	cbnz	r6, 801c784 <_Bfree+0x28>
 801c766:	2010      	movs	r0, #16
 801c768:	f7fd ff04 	bl	801a574 <malloc>
 801c76c:	4602      	mov	r2, r0
 801c76e:	61e8      	str	r0, [r5, #28]
 801c770:	b920      	cbnz	r0, 801c77c <_Bfree+0x20>
 801c772:	4b09      	ldr	r3, [pc, #36]	; (801c798 <_Bfree+0x3c>)
 801c774:	4809      	ldr	r0, [pc, #36]	; (801c79c <_Bfree+0x40>)
 801c776:	218f      	movs	r1, #143	; 0x8f
 801c778:	f001 feee 	bl	801e558 <__assert_func>
 801c77c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c780:	6006      	str	r6, [r0, #0]
 801c782:	60c6      	str	r6, [r0, #12]
 801c784:	b13c      	cbz	r4, 801c796 <_Bfree+0x3a>
 801c786:	69eb      	ldr	r3, [r5, #28]
 801c788:	6862      	ldr	r2, [r4, #4]
 801c78a:	68db      	ldr	r3, [r3, #12]
 801c78c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801c790:	6021      	str	r1, [r4, #0]
 801c792:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801c796:	bd70      	pop	{r4, r5, r6, pc}
 801c798:	080257f6 	.word	0x080257f6
 801c79c:	08025876 	.word	0x08025876

0801c7a0 <__multadd>:
 801c7a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c7a4:	690d      	ldr	r5, [r1, #16]
 801c7a6:	4607      	mov	r7, r0
 801c7a8:	460c      	mov	r4, r1
 801c7aa:	461e      	mov	r6, r3
 801c7ac:	f101 0c14 	add.w	ip, r1, #20
 801c7b0:	2000      	movs	r0, #0
 801c7b2:	f8dc 3000 	ldr.w	r3, [ip]
 801c7b6:	b299      	uxth	r1, r3
 801c7b8:	fb02 6101 	mla	r1, r2, r1, r6
 801c7bc:	0c1e      	lsrs	r6, r3, #16
 801c7be:	0c0b      	lsrs	r3, r1, #16
 801c7c0:	fb02 3306 	mla	r3, r2, r6, r3
 801c7c4:	b289      	uxth	r1, r1
 801c7c6:	3001      	adds	r0, #1
 801c7c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801c7cc:	4285      	cmp	r5, r0
 801c7ce:	f84c 1b04 	str.w	r1, [ip], #4
 801c7d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801c7d6:	dcec      	bgt.n	801c7b2 <__multadd+0x12>
 801c7d8:	b30e      	cbz	r6, 801c81e <__multadd+0x7e>
 801c7da:	68a3      	ldr	r3, [r4, #8]
 801c7dc:	42ab      	cmp	r3, r5
 801c7de:	dc19      	bgt.n	801c814 <__multadd+0x74>
 801c7e0:	6861      	ldr	r1, [r4, #4]
 801c7e2:	4638      	mov	r0, r7
 801c7e4:	3101      	adds	r1, #1
 801c7e6:	f7ff ff79 	bl	801c6dc <_Balloc>
 801c7ea:	4680      	mov	r8, r0
 801c7ec:	b928      	cbnz	r0, 801c7fa <__multadd+0x5a>
 801c7ee:	4602      	mov	r2, r0
 801c7f0:	4b0c      	ldr	r3, [pc, #48]	; (801c824 <__multadd+0x84>)
 801c7f2:	480d      	ldr	r0, [pc, #52]	; (801c828 <__multadd+0x88>)
 801c7f4:	21ba      	movs	r1, #186	; 0xba
 801c7f6:	f001 feaf 	bl	801e558 <__assert_func>
 801c7fa:	6922      	ldr	r2, [r4, #16]
 801c7fc:	3202      	adds	r2, #2
 801c7fe:	f104 010c 	add.w	r1, r4, #12
 801c802:	0092      	lsls	r2, r2, #2
 801c804:	300c      	adds	r0, #12
 801c806:	f7ff f88c 	bl	801b922 <memcpy>
 801c80a:	4621      	mov	r1, r4
 801c80c:	4638      	mov	r0, r7
 801c80e:	f7ff ffa5 	bl	801c75c <_Bfree>
 801c812:	4644      	mov	r4, r8
 801c814:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801c818:	3501      	adds	r5, #1
 801c81a:	615e      	str	r6, [r3, #20]
 801c81c:	6125      	str	r5, [r4, #16]
 801c81e:	4620      	mov	r0, r4
 801c820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c824:	08025865 	.word	0x08025865
 801c828:	08025876 	.word	0x08025876

0801c82c <__s2b>:
 801c82c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c830:	460c      	mov	r4, r1
 801c832:	4615      	mov	r5, r2
 801c834:	461f      	mov	r7, r3
 801c836:	2209      	movs	r2, #9
 801c838:	3308      	adds	r3, #8
 801c83a:	4606      	mov	r6, r0
 801c83c:	fb93 f3f2 	sdiv	r3, r3, r2
 801c840:	2100      	movs	r1, #0
 801c842:	2201      	movs	r2, #1
 801c844:	429a      	cmp	r2, r3
 801c846:	db09      	blt.n	801c85c <__s2b+0x30>
 801c848:	4630      	mov	r0, r6
 801c84a:	f7ff ff47 	bl	801c6dc <_Balloc>
 801c84e:	b940      	cbnz	r0, 801c862 <__s2b+0x36>
 801c850:	4602      	mov	r2, r0
 801c852:	4b19      	ldr	r3, [pc, #100]	; (801c8b8 <__s2b+0x8c>)
 801c854:	4819      	ldr	r0, [pc, #100]	; (801c8bc <__s2b+0x90>)
 801c856:	21d3      	movs	r1, #211	; 0xd3
 801c858:	f001 fe7e 	bl	801e558 <__assert_func>
 801c85c:	0052      	lsls	r2, r2, #1
 801c85e:	3101      	adds	r1, #1
 801c860:	e7f0      	b.n	801c844 <__s2b+0x18>
 801c862:	9b08      	ldr	r3, [sp, #32]
 801c864:	6143      	str	r3, [r0, #20]
 801c866:	2d09      	cmp	r5, #9
 801c868:	f04f 0301 	mov.w	r3, #1
 801c86c:	6103      	str	r3, [r0, #16]
 801c86e:	dd16      	ble.n	801c89e <__s2b+0x72>
 801c870:	f104 0909 	add.w	r9, r4, #9
 801c874:	46c8      	mov	r8, r9
 801c876:	442c      	add	r4, r5
 801c878:	f818 3b01 	ldrb.w	r3, [r8], #1
 801c87c:	4601      	mov	r1, r0
 801c87e:	3b30      	subs	r3, #48	; 0x30
 801c880:	220a      	movs	r2, #10
 801c882:	4630      	mov	r0, r6
 801c884:	f7ff ff8c 	bl	801c7a0 <__multadd>
 801c888:	45a0      	cmp	r8, r4
 801c88a:	d1f5      	bne.n	801c878 <__s2b+0x4c>
 801c88c:	f1a5 0408 	sub.w	r4, r5, #8
 801c890:	444c      	add	r4, r9
 801c892:	1b2d      	subs	r5, r5, r4
 801c894:	1963      	adds	r3, r4, r5
 801c896:	42bb      	cmp	r3, r7
 801c898:	db04      	blt.n	801c8a4 <__s2b+0x78>
 801c89a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c89e:	340a      	adds	r4, #10
 801c8a0:	2509      	movs	r5, #9
 801c8a2:	e7f6      	b.n	801c892 <__s2b+0x66>
 801c8a4:	f814 3b01 	ldrb.w	r3, [r4], #1
 801c8a8:	4601      	mov	r1, r0
 801c8aa:	3b30      	subs	r3, #48	; 0x30
 801c8ac:	220a      	movs	r2, #10
 801c8ae:	4630      	mov	r0, r6
 801c8b0:	f7ff ff76 	bl	801c7a0 <__multadd>
 801c8b4:	e7ee      	b.n	801c894 <__s2b+0x68>
 801c8b6:	bf00      	nop
 801c8b8:	08025865 	.word	0x08025865
 801c8bc:	08025876 	.word	0x08025876

0801c8c0 <__hi0bits>:
 801c8c0:	0c03      	lsrs	r3, r0, #16
 801c8c2:	041b      	lsls	r3, r3, #16
 801c8c4:	b9d3      	cbnz	r3, 801c8fc <__hi0bits+0x3c>
 801c8c6:	0400      	lsls	r0, r0, #16
 801c8c8:	2310      	movs	r3, #16
 801c8ca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801c8ce:	bf04      	itt	eq
 801c8d0:	0200      	lsleq	r0, r0, #8
 801c8d2:	3308      	addeq	r3, #8
 801c8d4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801c8d8:	bf04      	itt	eq
 801c8da:	0100      	lsleq	r0, r0, #4
 801c8dc:	3304      	addeq	r3, #4
 801c8de:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801c8e2:	bf04      	itt	eq
 801c8e4:	0080      	lsleq	r0, r0, #2
 801c8e6:	3302      	addeq	r3, #2
 801c8e8:	2800      	cmp	r0, #0
 801c8ea:	db05      	blt.n	801c8f8 <__hi0bits+0x38>
 801c8ec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801c8f0:	f103 0301 	add.w	r3, r3, #1
 801c8f4:	bf08      	it	eq
 801c8f6:	2320      	moveq	r3, #32
 801c8f8:	4618      	mov	r0, r3
 801c8fa:	4770      	bx	lr
 801c8fc:	2300      	movs	r3, #0
 801c8fe:	e7e4      	b.n	801c8ca <__hi0bits+0xa>

0801c900 <__lo0bits>:
 801c900:	6803      	ldr	r3, [r0, #0]
 801c902:	f013 0207 	ands.w	r2, r3, #7
 801c906:	d00c      	beq.n	801c922 <__lo0bits+0x22>
 801c908:	07d9      	lsls	r1, r3, #31
 801c90a:	d422      	bmi.n	801c952 <__lo0bits+0x52>
 801c90c:	079a      	lsls	r2, r3, #30
 801c90e:	bf49      	itett	mi
 801c910:	085b      	lsrmi	r3, r3, #1
 801c912:	089b      	lsrpl	r3, r3, #2
 801c914:	6003      	strmi	r3, [r0, #0]
 801c916:	2201      	movmi	r2, #1
 801c918:	bf5c      	itt	pl
 801c91a:	6003      	strpl	r3, [r0, #0]
 801c91c:	2202      	movpl	r2, #2
 801c91e:	4610      	mov	r0, r2
 801c920:	4770      	bx	lr
 801c922:	b299      	uxth	r1, r3
 801c924:	b909      	cbnz	r1, 801c92a <__lo0bits+0x2a>
 801c926:	0c1b      	lsrs	r3, r3, #16
 801c928:	2210      	movs	r2, #16
 801c92a:	b2d9      	uxtb	r1, r3
 801c92c:	b909      	cbnz	r1, 801c932 <__lo0bits+0x32>
 801c92e:	3208      	adds	r2, #8
 801c930:	0a1b      	lsrs	r3, r3, #8
 801c932:	0719      	lsls	r1, r3, #28
 801c934:	bf04      	itt	eq
 801c936:	091b      	lsreq	r3, r3, #4
 801c938:	3204      	addeq	r2, #4
 801c93a:	0799      	lsls	r1, r3, #30
 801c93c:	bf04      	itt	eq
 801c93e:	089b      	lsreq	r3, r3, #2
 801c940:	3202      	addeq	r2, #2
 801c942:	07d9      	lsls	r1, r3, #31
 801c944:	d403      	bmi.n	801c94e <__lo0bits+0x4e>
 801c946:	085b      	lsrs	r3, r3, #1
 801c948:	f102 0201 	add.w	r2, r2, #1
 801c94c:	d003      	beq.n	801c956 <__lo0bits+0x56>
 801c94e:	6003      	str	r3, [r0, #0]
 801c950:	e7e5      	b.n	801c91e <__lo0bits+0x1e>
 801c952:	2200      	movs	r2, #0
 801c954:	e7e3      	b.n	801c91e <__lo0bits+0x1e>
 801c956:	2220      	movs	r2, #32
 801c958:	e7e1      	b.n	801c91e <__lo0bits+0x1e>
	...

0801c95c <__i2b>:
 801c95c:	b510      	push	{r4, lr}
 801c95e:	460c      	mov	r4, r1
 801c960:	2101      	movs	r1, #1
 801c962:	f7ff febb 	bl	801c6dc <_Balloc>
 801c966:	4602      	mov	r2, r0
 801c968:	b928      	cbnz	r0, 801c976 <__i2b+0x1a>
 801c96a:	4b05      	ldr	r3, [pc, #20]	; (801c980 <__i2b+0x24>)
 801c96c:	4805      	ldr	r0, [pc, #20]	; (801c984 <__i2b+0x28>)
 801c96e:	f240 1145 	movw	r1, #325	; 0x145
 801c972:	f001 fdf1 	bl	801e558 <__assert_func>
 801c976:	2301      	movs	r3, #1
 801c978:	6144      	str	r4, [r0, #20]
 801c97a:	6103      	str	r3, [r0, #16]
 801c97c:	bd10      	pop	{r4, pc}
 801c97e:	bf00      	nop
 801c980:	08025865 	.word	0x08025865
 801c984:	08025876 	.word	0x08025876

0801c988 <__multiply>:
 801c988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c98c:	4691      	mov	r9, r2
 801c98e:	690a      	ldr	r2, [r1, #16]
 801c990:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801c994:	429a      	cmp	r2, r3
 801c996:	bfb8      	it	lt
 801c998:	460b      	movlt	r3, r1
 801c99a:	460c      	mov	r4, r1
 801c99c:	bfbc      	itt	lt
 801c99e:	464c      	movlt	r4, r9
 801c9a0:	4699      	movlt	r9, r3
 801c9a2:	6927      	ldr	r7, [r4, #16]
 801c9a4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801c9a8:	68a3      	ldr	r3, [r4, #8]
 801c9aa:	6861      	ldr	r1, [r4, #4]
 801c9ac:	eb07 060a 	add.w	r6, r7, sl
 801c9b0:	42b3      	cmp	r3, r6
 801c9b2:	b085      	sub	sp, #20
 801c9b4:	bfb8      	it	lt
 801c9b6:	3101      	addlt	r1, #1
 801c9b8:	f7ff fe90 	bl	801c6dc <_Balloc>
 801c9bc:	b930      	cbnz	r0, 801c9cc <__multiply+0x44>
 801c9be:	4602      	mov	r2, r0
 801c9c0:	4b44      	ldr	r3, [pc, #272]	; (801cad4 <__multiply+0x14c>)
 801c9c2:	4845      	ldr	r0, [pc, #276]	; (801cad8 <__multiply+0x150>)
 801c9c4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801c9c8:	f001 fdc6 	bl	801e558 <__assert_func>
 801c9cc:	f100 0514 	add.w	r5, r0, #20
 801c9d0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801c9d4:	462b      	mov	r3, r5
 801c9d6:	2200      	movs	r2, #0
 801c9d8:	4543      	cmp	r3, r8
 801c9da:	d321      	bcc.n	801ca20 <__multiply+0x98>
 801c9dc:	f104 0314 	add.w	r3, r4, #20
 801c9e0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801c9e4:	f109 0314 	add.w	r3, r9, #20
 801c9e8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801c9ec:	9202      	str	r2, [sp, #8]
 801c9ee:	1b3a      	subs	r2, r7, r4
 801c9f0:	3a15      	subs	r2, #21
 801c9f2:	f022 0203 	bic.w	r2, r2, #3
 801c9f6:	3204      	adds	r2, #4
 801c9f8:	f104 0115 	add.w	r1, r4, #21
 801c9fc:	428f      	cmp	r7, r1
 801c9fe:	bf38      	it	cc
 801ca00:	2204      	movcc	r2, #4
 801ca02:	9201      	str	r2, [sp, #4]
 801ca04:	9a02      	ldr	r2, [sp, #8]
 801ca06:	9303      	str	r3, [sp, #12]
 801ca08:	429a      	cmp	r2, r3
 801ca0a:	d80c      	bhi.n	801ca26 <__multiply+0x9e>
 801ca0c:	2e00      	cmp	r6, #0
 801ca0e:	dd03      	ble.n	801ca18 <__multiply+0x90>
 801ca10:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801ca14:	2b00      	cmp	r3, #0
 801ca16:	d05b      	beq.n	801cad0 <__multiply+0x148>
 801ca18:	6106      	str	r6, [r0, #16]
 801ca1a:	b005      	add	sp, #20
 801ca1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ca20:	f843 2b04 	str.w	r2, [r3], #4
 801ca24:	e7d8      	b.n	801c9d8 <__multiply+0x50>
 801ca26:	f8b3 a000 	ldrh.w	sl, [r3]
 801ca2a:	f1ba 0f00 	cmp.w	sl, #0
 801ca2e:	d024      	beq.n	801ca7a <__multiply+0xf2>
 801ca30:	f104 0e14 	add.w	lr, r4, #20
 801ca34:	46a9      	mov	r9, r5
 801ca36:	f04f 0c00 	mov.w	ip, #0
 801ca3a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801ca3e:	f8d9 1000 	ldr.w	r1, [r9]
 801ca42:	fa1f fb82 	uxth.w	fp, r2
 801ca46:	b289      	uxth	r1, r1
 801ca48:	fb0a 110b 	mla	r1, sl, fp, r1
 801ca4c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801ca50:	f8d9 2000 	ldr.w	r2, [r9]
 801ca54:	4461      	add	r1, ip
 801ca56:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801ca5a:	fb0a c20b 	mla	r2, sl, fp, ip
 801ca5e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801ca62:	b289      	uxth	r1, r1
 801ca64:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801ca68:	4577      	cmp	r7, lr
 801ca6a:	f849 1b04 	str.w	r1, [r9], #4
 801ca6e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801ca72:	d8e2      	bhi.n	801ca3a <__multiply+0xb2>
 801ca74:	9a01      	ldr	r2, [sp, #4]
 801ca76:	f845 c002 	str.w	ip, [r5, r2]
 801ca7a:	9a03      	ldr	r2, [sp, #12]
 801ca7c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801ca80:	3304      	adds	r3, #4
 801ca82:	f1b9 0f00 	cmp.w	r9, #0
 801ca86:	d021      	beq.n	801cacc <__multiply+0x144>
 801ca88:	6829      	ldr	r1, [r5, #0]
 801ca8a:	f104 0c14 	add.w	ip, r4, #20
 801ca8e:	46ae      	mov	lr, r5
 801ca90:	f04f 0a00 	mov.w	sl, #0
 801ca94:	f8bc b000 	ldrh.w	fp, [ip]
 801ca98:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801ca9c:	fb09 220b 	mla	r2, r9, fp, r2
 801caa0:	4452      	add	r2, sl
 801caa2:	b289      	uxth	r1, r1
 801caa4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801caa8:	f84e 1b04 	str.w	r1, [lr], #4
 801caac:	f85c 1b04 	ldr.w	r1, [ip], #4
 801cab0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801cab4:	f8be 1000 	ldrh.w	r1, [lr]
 801cab8:	fb09 110a 	mla	r1, r9, sl, r1
 801cabc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801cac0:	4567      	cmp	r7, ip
 801cac2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801cac6:	d8e5      	bhi.n	801ca94 <__multiply+0x10c>
 801cac8:	9a01      	ldr	r2, [sp, #4]
 801caca:	50a9      	str	r1, [r5, r2]
 801cacc:	3504      	adds	r5, #4
 801cace:	e799      	b.n	801ca04 <__multiply+0x7c>
 801cad0:	3e01      	subs	r6, #1
 801cad2:	e79b      	b.n	801ca0c <__multiply+0x84>
 801cad4:	08025865 	.word	0x08025865
 801cad8:	08025876 	.word	0x08025876

0801cadc <__pow5mult>:
 801cadc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cae0:	4615      	mov	r5, r2
 801cae2:	f012 0203 	ands.w	r2, r2, #3
 801cae6:	4606      	mov	r6, r0
 801cae8:	460f      	mov	r7, r1
 801caea:	d007      	beq.n	801cafc <__pow5mult+0x20>
 801caec:	4c25      	ldr	r4, [pc, #148]	; (801cb84 <__pow5mult+0xa8>)
 801caee:	3a01      	subs	r2, #1
 801caf0:	2300      	movs	r3, #0
 801caf2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801caf6:	f7ff fe53 	bl	801c7a0 <__multadd>
 801cafa:	4607      	mov	r7, r0
 801cafc:	10ad      	asrs	r5, r5, #2
 801cafe:	d03d      	beq.n	801cb7c <__pow5mult+0xa0>
 801cb00:	69f4      	ldr	r4, [r6, #28]
 801cb02:	b97c      	cbnz	r4, 801cb24 <__pow5mult+0x48>
 801cb04:	2010      	movs	r0, #16
 801cb06:	f7fd fd35 	bl	801a574 <malloc>
 801cb0a:	4602      	mov	r2, r0
 801cb0c:	61f0      	str	r0, [r6, #28]
 801cb0e:	b928      	cbnz	r0, 801cb1c <__pow5mult+0x40>
 801cb10:	4b1d      	ldr	r3, [pc, #116]	; (801cb88 <__pow5mult+0xac>)
 801cb12:	481e      	ldr	r0, [pc, #120]	; (801cb8c <__pow5mult+0xb0>)
 801cb14:	f240 11b3 	movw	r1, #435	; 0x1b3
 801cb18:	f001 fd1e 	bl	801e558 <__assert_func>
 801cb1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801cb20:	6004      	str	r4, [r0, #0]
 801cb22:	60c4      	str	r4, [r0, #12]
 801cb24:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801cb28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801cb2c:	b94c      	cbnz	r4, 801cb42 <__pow5mult+0x66>
 801cb2e:	f240 2171 	movw	r1, #625	; 0x271
 801cb32:	4630      	mov	r0, r6
 801cb34:	f7ff ff12 	bl	801c95c <__i2b>
 801cb38:	2300      	movs	r3, #0
 801cb3a:	f8c8 0008 	str.w	r0, [r8, #8]
 801cb3e:	4604      	mov	r4, r0
 801cb40:	6003      	str	r3, [r0, #0]
 801cb42:	f04f 0900 	mov.w	r9, #0
 801cb46:	07eb      	lsls	r3, r5, #31
 801cb48:	d50a      	bpl.n	801cb60 <__pow5mult+0x84>
 801cb4a:	4639      	mov	r1, r7
 801cb4c:	4622      	mov	r2, r4
 801cb4e:	4630      	mov	r0, r6
 801cb50:	f7ff ff1a 	bl	801c988 <__multiply>
 801cb54:	4639      	mov	r1, r7
 801cb56:	4680      	mov	r8, r0
 801cb58:	4630      	mov	r0, r6
 801cb5a:	f7ff fdff 	bl	801c75c <_Bfree>
 801cb5e:	4647      	mov	r7, r8
 801cb60:	106d      	asrs	r5, r5, #1
 801cb62:	d00b      	beq.n	801cb7c <__pow5mult+0xa0>
 801cb64:	6820      	ldr	r0, [r4, #0]
 801cb66:	b938      	cbnz	r0, 801cb78 <__pow5mult+0x9c>
 801cb68:	4622      	mov	r2, r4
 801cb6a:	4621      	mov	r1, r4
 801cb6c:	4630      	mov	r0, r6
 801cb6e:	f7ff ff0b 	bl	801c988 <__multiply>
 801cb72:	6020      	str	r0, [r4, #0]
 801cb74:	f8c0 9000 	str.w	r9, [r0]
 801cb78:	4604      	mov	r4, r0
 801cb7a:	e7e4      	b.n	801cb46 <__pow5mult+0x6a>
 801cb7c:	4638      	mov	r0, r7
 801cb7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cb82:	bf00      	nop
 801cb84:	080259c0 	.word	0x080259c0
 801cb88:	080257f6 	.word	0x080257f6
 801cb8c:	08025876 	.word	0x08025876

0801cb90 <__lshift>:
 801cb90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cb94:	460c      	mov	r4, r1
 801cb96:	6849      	ldr	r1, [r1, #4]
 801cb98:	6923      	ldr	r3, [r4, #16]
 801cb9a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801cb9e:	68a3      	ldr	r3, [r4, #8]
 801cba0:	4607      	mov	r7, r0
 801cba2:	4691      	mov	r9, r2
 801cba4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801cba8:	f108 0601 	add.w	r6, r8, #1
 801cbac:	42b3      	cmp	r3, r6
 801cbae:	db0b      	blt.n	801cbc8 <__lshift+0x38>
 801cbb0:	4638      	mov	r0, r7
 801cbb2:	f7ff fd93 	bl	801c6dc <_Balloc>
 801cbb6:	4605      	mov	r5, r0
 801cbb8:	b948      	cbnz	r0, 801cbce <__lshift+0x3e>
 801cbba:	4602      	mov	r2, r0
 801cbbc:	4b28      	ldr	r3, [pc, #160]	; (801cc60 <__lshift+0xd0>)
 801cbbe:	4829      	ldr	r0, [pc, #164]	; (801cc64 <__lshift+0xd4>)
 801cbc0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801cbc4:	f001 fcc8 	bl	801e558 <__assert_func>
 801cbc8:	3101      	adds	r1, #1
 801cbca:	005b      	lsls	r3, r3, #1
 801cbcc:	e7ee      	b.n	801cbac <__lshift+0x1c>
 801cbce:	2300      	movs	r3, #0
 801cbd0:	f100 0114 	add.w	r1, r0, #20
 801cbd4:	f100 0210 	add.w	r2, r0, #16
 801cbd8:	4618      	mov	r0, r3
 801cbda:	4553      	cmp	r3, sl
 801cbdc:	db33      	blt.n	801cc46 <__lshift+0xb6>
 801cbde:	6920      	ldr	r0, [r4, #16]
 801cbe0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801cbe4:	f104 0314 	add.w	r3, r4, #20
 801cbe8:	f019 091f 	ands.w	r9, r9, #31
 801cbec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801cbf0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801cbf4:	d02b      	beq.n	801cc4e <__lshift+0xbe>
 801cbf6:	f1c9 0e20 	rsb	lr, r9, #32
 801cbfa:	468a      	mov	sl, r1
 801cbfc:	2200      	movs	r2, #0
 801cbfe:	6818      	ldr	r0, [r3, #0]
 801cc00:	fa00 f009 	lsl.w	r0, r0, r9
 801cc04:	4310      	orrs	r0, r2
 801cc06:	f84a 0b04 	str.w	r0, [sl], #4
 801cc0a:	f853 2b04 	ldr.w	r2, [r3], #4
 801cc0e:	459c      	cmp	ip, r3
 801cc10:	fa22 f20e 	lsr.w	r2, r2, lr
 801cc14:	d8f3      	bhi.n	801cbfe <__lshift+0x6e>
 801cc16:	ebac 0304 	sub.w	r3, ip, r4
 801cc1a:	3b15      	subs	r3, #21
 801cc1c:	f023 0303 	bic.w	r3, r3, #3
 801cc20:	3304      	adds	r3, #4
 801cc22:	f104 0015 	add.w	r0, r4, #21
 801cc26:	4584      	cmp	ip, r0
 801cc28:	bf38      	it	cc
 801cc2a:	2304      	movcc	r3, #4
 801cc2c:	50ca      	str	r2, [r1, r3]
 801cc2e:	b10a      	cbz	r2, 801cc34 <__lshift+0xa4>
 801cc30:	f108 0602 	add.w	r6, r8, #2
 801cc34:	3e01      	subs	r6, #1
 801cc36:	4638      	mov	r0, r7
 801cc38:	612e      	str	r6, [r5, #16]
 801cc3a:	4621      	mov	r1, r4
 801cc3c:	f7ff fd8e 	bl	801c75c <_Bfree>
 801cc40:	4628      	mov	r0, r5
 801cc42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cc46:	f842 0f04 	str.w	r0, [r2, #4]!
 801cc4a:	3301      	adds	r3, #1
 801cc4c:	e7c5      	b.n	801cbda <__lshift+0x4a>
 801cc4e:	3904      	subs	r1, #4
 801cc50:	f853 2b04 	ldr.w	r2, [r3], #4
 801cc54:	f841 2f04 	str.w	r2, [r1, #4]!
 801cc58:	459c      	cmp	ip, r3
 801cc5a:	d8f9      	bhi.n	801cc50 <__lshift+0xc0>
 801cc5c:	e7ea      	b.n	801cc34 <__lshift+0xa4>
 801cc5e:	bf00      	nop
 801cc60:	08025865 	.word	0x08025865
 801cc64:	08025876 	.word	0x08025876

0801cc68 <__mcmp>:
 801cc68:	b530      	push	{r4, r5, lr}
 801cc6a:	6902      	ldr	r2, [r0, #16]
 801cc6c:	690c      	ldr	r4, [r1, #16]
 801cc6e:	1b12      	subs	r2, r2, r4
 801cc70:	d10e      	bne.n	801cc90 <__mcmp+0x28>
 801cc72:	f100 0314 	add.w	r3, r0, #20
 801cc76:	3114      	adds	r1, #20
 801cc78:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801cc7c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801cc80:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801cc84:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801cc88:	42a5      	cmp	r5, r4
 801cc8a:	d003      	beq.n	801cc94 <__mcmp+0x2c>
 801cc8c:	d305      	bcc.n	801cc9a <__mcmp+0x32>
 801cc8e:	2201      	movs	r2, #1
 801cc90:	4610      	mov	r0, r2
 801cc92:	bd30      	pop	{r4, r5, pc}
 801cc94:	4283      	cmp	r3, r0
 801cc96:	d3f3      	bcc.n	801cc80 <__mcmp+0x18>
 801cc98:	e7fa      	b.n	801cc90 <__mcmp+0x28>
 801cc9a:	f04f 32ff 	mov.w	r2, #4294967295
 801cc9e:	e7f7      	b.n	801cc90 <__mcmp+0x28>

0801cca0 <__mdiff>:
 801cca0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cca4:	460c      	mov	r4, r1
 801cca6:	4606      	mov	r6, r0
 801cca8:	4611      	mov	r1, r2
 801ccaa:	4620      	mov	r0, r4
 801ccac:	4690      	mov	r8, r2
 801ccae:	f7ff ffdb 	bl	801cc68 <__mcmp>
 801ccb2:	1e05      	subs	r5, r0, #0
 801ccb4:	d110      	bne.n	801ccd8 <__mdiff+0x38>
 801ccb6:	4629      	mov	r1, r5
 801ccb8:	4630      	mov	r0, r6
 801ccba:	f7ff fd0f 	bl	801c6dc <_Balloc>
 801ccbe:	b930      	cbnz	r0, 801ccce <__mdiff+0x2e>
 801ccc0:	4b3a      	ldr	r3, [pc, #232]	; (801cdac <__mdiff+0x10c>)
 801ccc2:	4602      	mov	r2, r0
 801ccc4:	f240 2137 	movw	r1, #567	; 0x237
 801ccc8:	4839      	ldr	r0, [pc, #228]	; (801cdb0 <__mdiff+0x110>)
 801ccca:	f001 fc45 	bl	801e558 <__assert_func>
 801ccce:	2301      	movs	r3, #1
 801ccd0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801ccd4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ccd8:	bfa4      	itt	ge
 801ccda:	4643      	movge	r3, r8
 801ccdc:	46a0      	movge	r8, r4
 801ccde:	4630      	mov	r0, r6
 801cce0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801cce4:	bfa6      	itte	ge
 801cce6:	461c      	movge	r4, r3
 801cce8:	2500      	movge	r5, #0
 801ccea:	2501      	movlt	r5, #1
 801ccec:	f7ff fcf6 	bl	801c6dc <_Balloc>
 801ccf0:	b920      	cbnz	r0, 801ccfc <__mdiff+0x5c>
 801ccf2:	4b2e      	ldr	r3, [pc, #184]	; (801cdac <__mdiff+0x10c>)
 801ccf4:	4602      	mov	r2, r0
 801ccf6:	f240 2145 	movw	r1, #581	; 0x245
 801ccfa:	e7e5      	b.n	801ccc8 <__mdiff+0x28>
 801ccfc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801cd00:	6926      	ldr	r6, [r4, #16]
 801cd02:	60c5      	str	r5, [r0, #12]
 801cd04:	f104 0914 	add.w	r9, r4, #20
 801cd08:	f108 0514 	add.w	r5, r8, #20
 801cd0c:	f100 0e14 	add.w	lr, r0, #20
 801cd10:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801cd14:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801cd18:	f108 0210 	add.w	r2, r8, #16
 801cd1c:	46f2      	mov	sl, lr
 801cd1e:	2100      	movs	r1, #0
 801cd20:	f859 3b04 	ldr.w	r3, [r9], #4
 801cd24:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801cd28:	fa11 f88b 	uxtah	r8, r1, fp
 801cd2c:	b299      	uxth	r1, r3
 801cd2e:	0c1b      	lsrs	r3, r3, #16
 801cd30:	eba8 0801 	sub.w	r8, r8, r1
 801cd34:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801cd38:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801cd3c:	fa1f f888 	uxth.w	r8, r8
 801cd40:	1419      	asrs	r1, r3, #16
 801cd42:	454e      	cmp	r6, r9
 801cd44:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801cd48:	f84a 3b04 	str.w	r3, [sl], #4
 801cd4c:	d8e8      	bhi.n	801cd20 <__mdiff+0x80>
 801cd4e:	1b33      	subs	r3, r6, r4
 801cd50:	3b15      	subs	r3, #21
 801cd52:	f023 0303 	bic.w	r3, r3, #3
 801cd56:	3304      	adds	r3, #4
 801cd58:	3415      	adds	r4, #21
 801cd5a:	42a6      	cmp	r6, r4
 801cd5c:	bf38      	it	cc
 801cd5e:	2304      	movcc	r3, #4
 801cd60:	441d      	add	r5, r3
 801cd62:	4473      	add	r3, lr
 801cd64:	469e      	mov	lr, r3
 801cd66:	462e      	mov	r6, r5
 801cd68:	4566      	cmp	r6, ip
 801cd6a:	d30e      	bcc.n	801cd8a <__mdiff+0xea>
 801cd6c:	f10c 0203 	add.w	r2, ip, #3
 801cd70:	1b52      	subs	r2, r2, r5
 801cd72:	f022 0203 	bic.w	r2, r2, #3
 801cd76:	3d03      	subs	r5, #3
 801cd78:	45ac      	cmp	ip, r5
 801cd7a:	bf38      	it	cc
 801cd7c:	2200      	movcc	r2, #0
 801cd7e:	4413      	add	r3, r2
 801cd80:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801cd84:	b17a      	cbz	r2, 801cda6 <__mdiff+0x106>
 801cd86:	6107      	str	r7, [r0, #16]
 801cd88:	e7a4      	b.n	801ccd4 <__mdiff+0x34>
 801cd8a:	f856 8b04 	ldr.w	r8, [r6], #4
 801cd8e:	fa11 f288 	uxtah	r2, r1, r8
 801cd92:	1414      	asrs	r4, r2, #16
 801cd94:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801cd98:	b292      	uxth	r2, r2
 801cd9a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801cd9e:	f84e 2b04 	str.w	r2, [lr], #4
 801cda2:	1421      	asrs	r1, r4, #16
 801cda4:	e7e0      	b.n	801cd68 <__mdiff+0xc8>
 801cda6:	3f01      	subs	r7, #1
 801cda8:	e7ea      	b.n	801cd80 <__mdiff+0xe0>
 801cdaa:	bf00      	nop
 801cdac:	08025865 	.word	0x08025865
 801cdb0:	08025876 	.word	0x08025876

0801cdb4 <__ulp>:
 801cdb4:	b082      	sub	sp, #8
 801cdb6:	ed8d 0b00 	vstr	d0, [sp]
 801cdba:	9a01      	ldr	r2, [sp, #4]
 801cdbc:	4b0f      	ldr	r3, [pc, #60]	; (801cdfc <__ulp+0x48>)
 801cdbe:	4013      	ands	r3, r2
 801cdc0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 801cdc4:	2b00      	cmp	r3, #0
 801cdc6:	dc08      	bgt.n	801cdda <__ulp+0x26>
 801cdc8:	425b      	negs	r3, r3
 801cdca:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801cdce:	ea4f 5223 	mov.w	r2, r3, asr #20
 801cdd2:	da04      	bge.n	801cdde <__ulp+0x2a>
 801cdd4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801cdd8:	4113      	asrs	r3, r2
 801cdda:	2200      	movs	r2, #0
 801cddc:	e008      	b.n	801cdf0 <__ulp+0x3c>
 801cdde:	f1a2 0314 	sub.w	r3, r2, #20
 801cde2:	2b1e      	cmp	r3, #30
 801cde4:	bfda      	itte	le
 801cde6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 801cdea:	40da      	lsrle	r2, r3
 801cdec:	2201      	movgt	r2, #1
 801cdee:	2300      	movs	r3, #0
 801cdf0:	4619      	mov	r1, r3
 801cdf2:	4610      	mov	r0, r2
 801cdf4:	ec41 0b10 	vmov	d0, r0, r1
 801cdf8:	b002      	add	sp, #8
 801cdfa:	4770      	bx	lr
 801cdfc:	7ff00000 	.word	0x7ff00000

0801ce00 <__b2d>:
 801ce00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ce04:	6906      	ldr	r6, [r0, #16]
 801ce06:	f100 0814 	add.w	r8, r0, #20
 801ce0a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801ce0e:	1f37      	subs	r7, r6, #4
 801ce10:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801ce14:	4610      	mov	r0, r2
 801ce16:	f7ff fd53 	bl	801c8c0 <__hi0bits>
 801ce1a:	f1c0 0320 	rsb	r3, r0, #32
 801ce1e:	280a      	cmp	r0, #10
 801ce20:	600b      	str	r3, [r1, #0]
 801ce22:	491b      	ldr	r1, [pc, #108]	; (801ce90 <__b2d+0x90>)
 801ce24:	dc15      	bgt.n	801ce52 <__b2d+0x52>
 801ce26:	f1c0 0c0b 	rsb	ip, r0, #11
 801ce2a:	fa22 f30c 	lsr.w	r3, r2, ip
 801ce2e:	45b8      	cmp	r8, r7
 801ce30:	ea43 0501 	orr.w	r5, r3, r1
 801ce34:	bf34      	ite	cc
 801ce36:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801ce3a:	2300      	movcs	r3, #0
 801ce3c:	3015      	adds	r0, #21
 801ce3e:	fa02 f000 	lsl.w	r0, r2, r0
 801ce42:	fa23 f30c 	lsr.w	r3, r3, ip
 801ce46:	4303      	orrs	r3, r0
 801ce48:	461c      	mov	r4, r3
 801ce4a:	ec45 4b10 	vmov	d0, r4, r5
 801ce4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ce52:	45b8      	cmp	r8, r7
 801ce54:	bf3a      	itte	cc
 801ce56:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801ce5a:	f1a6 0708 	subcc.w	r7, r6, #8
 801ce5e:	2300      	movcs	r3, #0
 801ce60:	380b      	subs	r0, #11
 801ce62:	d012      	beq.n	801ce8a <__b2d+0x8a>
 801ce64:	f1c0 0120 	rsb	r1, r0, #32
 801ce68:	fa23 f401 	lsr.w	r4, r3, r1
 801ce6c:	4082      	lsls	r2, r0
 801ce6e:	4322      	orrs	r2, r4
 801ce70:	4547      	cmp	r7, r8
 801ce72:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 801ce76:	bf8c      	ite	hi
 801ce78:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801ce7c:	2200      	movls	r2, #0
 801ce7e:	4083      	lsls	r3, r0
 801ce80:	40ca      	lsrs	r2, r1
 801ce82:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801ce86:	4313      	orrs	r3, r2
 801ce88:	e7de      	b.n	801ce48 <__b2d+0x48>
 801ce8a:	ea42 0501 	orr.w	r5, r2, r1
 801ce8e:	e7db      	b.n	801ce48 <__b2d+0x48>
 801ce90:	3ff00000 	.word	0x3ff00000

0801ce94 <__d2b>:
 801ce94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801ce98:	460f      	mov	r7, r1
 801ce9a:	2101      	movs	r1, #1
 801ce9c:	ec59 8b10 	vmov	r8, r9, d0
 801cea0:	4616      	mov	r6, r2
 801cea2:	f7ff fc1b 	bl	801c6dc <_Balloc>
 801cea6:	4604      	mov	r4, r0
 801cea8:	b930      	cbnz	r0, 801ceb8 <__d2b+0x24>
 801ceaa:	4602      	mov	r2, r0
 801ceac:	4b24      	ldr	r3, [pc, #144]	; (801cf40 <__d2b+0xac>)
 801ceae:	4825      	ldr	r0, [pc, #148]	; (801cf44 <__d2b+0xb0>)
 801ceb0:	f240 310f 	movw	r1, #783	; 0x30f
 801ceb4:	f001 fb50 	bl	801e558 <__assert_func>
 801ceb8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801cebc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801cec0:	bb2d      	cbnz	r5, 801cf0e <__d2b+0x7a>
 801cec2:	9301      	str	r3, [sp, #4]
 801cec4:	f1b8 0300 	subs.w	r3, r8, #0
 801cec8:	d026      	beq.n	801cf18 <__d2b+0x84>
 801ceca:	4668      	mov	r0, sp
 801cecc:	9300      	str	r3, [sp, #0]
 801cece:	f7ff fd17 	bl	801c900 <__lo0bits>
 801ced2:	e9dd 1200 	ldrd	r1, r2, [sp]
 801ced6:	b1e8      	cbz	r0, 801cf14 <__d2b+0x80>
 801ced8:	f1c0 0320 	rsb	r3, r0, #32
 801cedc:	fa02 f303 	lsl.w	r3, r2, r3
 801cee0:	430b      	orrs	r3, r1
 801cee2:	40c2      	lsrs	r2, r0
 801cee4:	6163      	str	r3, [r4, #20]
 801cee6:	9201      	str	r2, [sp, #4]
 801cee8:	9b01      	ldr	r3, [sp, #4]
 801ceea:	61a3      	str	r3, [r4, #24]
 801ceec:	2b00      	cmp	r3, #0
 801ceee:	bf14      	ite	ne
 801cef0:	2202      	movne	r2, #2
 801cef2:	2201      	moveq	r2, #1
 801cef4:	6122      	str	r2, [r4, #16]
 801cef6:	b1bd      	cbz	r5, 801cf28 <__d2b+0x94>
 801cef8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801cefc:	4405      	add	r5, r0
 801cefe:	603d      	str	r5, [r7, #0]
 801cf00:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801cf04:	6030      	str	r0, [r6, #0]
 801cf06:	4620      	mov	r0, r4
 801cf08:	b003      	add	sp, #12
 801cf0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cf0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801cf12:	e7d6      	b.n	801cec2 <__d2b+0x2e>
 801cf14:	6161      	str	r1, [r4, #20]
 801cf16:	e7e7      	b.n	801cee8 <__d2b+0x54>
 801cf18:	a801      	add	r0, sp, #4
 801cf1a:	f7ff fcf1 	bl	801c900 <__lo0bits>
 801cf1e:	9b01      	ldr	r3, [sp, #4]
 801cf20:	6163      	str	r3, [r4, #20]
 801cf22:	3020      	adds	r0, #32
 801cf24:	2201      	movs	r2, #1
 801cf26:	e7e5      	b.n	801cef4 <__d2b+0x60>
 801cf28:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801cf2c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801cf30:	6038      	str	r0, [r7, #0]
 801cf32:	6918      	ldr	r0, [r3, #16]
 801cf34:	f7ff fcc4 	bl	801c8c0 <__hi0bits>
 801cf38:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801cf3c:	e7e2      	b.n	801cf04 <__d2b+0x70>
 801cf3e:	bf00      	nop
 801cf40:	08025865 	.word	0x08025865
 801cf44:	08025876 	.word	0x08025876

0801cf48 <__ratio>:
 801cf48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf4c:	4688      	mov	r8, r1
 801cf4e:	4669      	mov	r1, sp
 801cf50:	4681      	mov	r9, r0
 801cf52:	f7ff ff55 	bl	801ce00 <__b2d>
 801cf56:	a901      	add	r1, sp, #4
 801cf58:	4640      	mov	r0, r8
 801cf5a:	ec55 4b10 	vmov	r4, r5, d0
 801cf5e:	f7ff ff4f 	bl	801ce00 <__b2d>
 801cf62:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801cf66:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801cf6a:	eba3 0c02 	sub.w	ip, r3, r2
 801cf6e:	e9dd 3200 	ldrd	r3, r2, [sp]
 801cf72:	1a9b      	subs	r3, r3, r2
 801cf74:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801cf78:	ec51 0b10 	vmov	r0, r1, d0
 801cf7c:	2b00      	cmp	r3, #0
 801cf7e:	bfd6      	itet	le
 801cf80:	460a      	movle	r2, r1
 801cf82:	462a      	movgt	r2, r5
 801cf84:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801cf88:	468b      	mov	fp, r1
 801cf8a:	462f      	mov	r7, r5
 801cf8c:	bfd4      	ite	le
 801cf8e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801cf92:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801cf96:	4620      	mov	r0, r4
 801cf98:	ee10 2a10 	vmov	r2, s0
 801cf9c:	465b      	mov	r3, fp
 801cf9e:	4639      	mov	r1, r7
 801cfa0:	f7e3 fc74 	bl	800088c <__aeabi_ddiv>
 801cfa4:	ec41 0b10 	vmov	d0, r0, r1
 801cfa8:	b003      	add	sp, #12
 801cfaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cfae <__copybits>:
 801cfae:	3901      	subs	r1, #1
 801cfb0:	b570      	push	{r4, r5, r6, lr}
 801cfb2:	1149      	asrs	r1, r1, #5
 801cfb4:	6914      	ldr	r4, [r2, #16]
 801cfb6:	3101      	adds	r1, #1
 801cfb8:	f102 0314 	add.w	r3, r2, #20
 801cfbc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801cfc0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801cfc4:	1f05      	subs	r5, r0, #4
 801cfc6:	42a3      	cmp	r3, r4
 801cfc8:	d30c      	bcc.n	801cfe4 <__copybits+0x36>
 801cfca:	1aa3      	subs	r3, r4, r2
 801cfcc:	3b11      	subs	r3, #17
 801cfce:	f023 0303 	bic.w	r3, r3, #3
 801cfd2:	3211      	adds	r2, #17
 801cfd4:	42a2      	cmp	r2, r4
 801cfd6:	bf88      	it	hi
 801cfd8:	2300      	movhi	r3, #0
 801cfda:	4418      	add	r0, r3
 801cfdc:	2300      	movs	r3, #0
 801cfde:	4288      	cmp	r0, r1
 801cfe0:	d305      	bcc.n	801cfee <__copybits+0x40>
 801cfe2:	bd70      	pop	{r4, r5, r6, pc}
 801cfe4:	f853 6b04 	ldr.w	r6, [r3], #4
 801cfe8:	f845 6f04 	str.w	r6, [r5, #4]!
 801cfec:	e7eb      	b.n	801cfc6 <__copybits+0x18>
 801cfee:	f840 3b04 	str.w	r3, [r0], #4
 801cff2:	e7f4      	b.n	801cfde <__copybits+0x30>

0801cff4 <__any_on>:
 801cff4:	f100 0214 	add.w	r2, r0, #20
 801cff8:	6900      	ldr	r0, [r0, #16]
 801cffa:	114b      	asrs	r3, r1, #5
 801cffc:	4298      	cmp	r0, r3
 801cffe:	b510      	push	{r4, lr}
 801d000:	db11      	blt.n	801d026 <__any_on+0x32>
 801d002:	dd0a      	ble.n	801d01a <__any_on+0x26>
 801d004:	f011 011f 	ands.w	r1, r1, #31
 801d008:	d007      	beq.n	801d01a <__any_on+0x26>
 801d00a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801d00e:	fa24 f001 	lsr.w	r0, r4, r1
 801d012:	fa00 f101 	lsl.w	r1, r0, r1
 801d016:	428c      	cmp	r4, r1
 801d018:	d10b      	bne.n	801d032 <__any_on+0x3e>
 801d01a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d01e:	4293      	cmp	r3, r2
 801d020:	d803      	bhi.n	801d02a <__any_on+0x36>
 801d022:	2000      	movs	r0, #0
 801d024:	bd10      	pop	{r4, pc}
 801d026:	4603      	mov	r3, r0
 801d028:	e7f7      	b.n	801d01a <__any_on+0x26>
 801d02a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801d02e:	2900      	cmp	r1, #0
 801d030:	d0f5      	beq.n	801d01e <__any_on+0x2a>
 801d032:	2001      	movs	r0, #1
 801d034:	e7f6      	b.n	801d024 <__any_on+0x30>

0801d036 <sulp>:
 801d036:	b570      	push	{r4, r5, r6, lr}
 801d038:	4604      	mov	r4, r0
 801d03a:	460d      	mov	r5, r1
 801d03c:	ec45 4b10 	vmov	d0, r4, r5
 801d040:	4616      	mov	r6, r2
 801d042:	f7ff feb7 	bl	801cdb4 <__ulp>
 801d046:	ec51 0b10 	vmov	r0, r1, d0
 801d04a:	b17e      	cbz	r6, 801d06c <sulp+0x36>
 801d04c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801d050:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801d054:	2b00      	cmp	r3, #0
 801d056:	dd09      	ble.n	801d06c <sulp+0x36>
 801d058:	051b      	lsls	r3, r3, #20
 801d05a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801d05e:	2400      	movs	r4, #0
 801d060:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801d064:	4622      	mov	r2, r4
 801d066:	462b      	mov	r3, r5
 801d068:	f7e3 fae6 	bl	8000638 <__aeabi_dmul>
 801d06c:	bd70      	pop	{r4, r5, r6, pc}
	...

0801d070 <_strtod_l>:
 801d070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d074:	ed2d 8b02 	vpush	{d8}
 801d078:	b09b      	sub	sp, #108	; 0x6c
 801d07a:	4604      	mov	r4, r0
 801d07c:	9213      	str	r2, [sp, #76]	; 0x4c
 801d07e:	2200      	movs	r2, #0
 801d080:	9216      	str	r2, [sp, #88]	; 0x58
 801d082:	460d      	mov	r5, r1
 801d084:	f04f 0800 	mov.w	r8, #0
 801d088:	f04f 0900 	mov.w	r9, #0
 801d08c:	460a      	mov	r2, r1
 801d08e:	9215      	str	r2, [sp, #84]	; 0x54
 801d090:	7811      	ldrb	r1, [r2, #0]
 801d092:	292b      	cmp	r1, #43	; 0x2b
 801d094:	d04c      	beq.n	801d130 <_strtod_l+0xc0>
 801d096:	d83a      	bhi.n	801d10e <_strtod_l+0x9e>
 801d098:	290d      	cmp	r1, #13
 801d09a:	d834      	bhi.n	801d106 <_strtod_l+0x96>
 801d09c:	2908      	cmp	r1, #8
 801d09e:	d834      	bhi.n	801d10a <_strtod_l+0x9a>
 801d0a0:	2900      	cmp	r1, #0
 801d0a2:	d03d      	beq.n	801d120 <_strtod_l+0xb0>
 801d0a4:	2200      	movs	r2, #0
 801d0a6:	920a      	str	r2, [sp, #40]	; 0x28
 801d0a8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801d0aa:	7832      	ldrb	r2, [r6, #0]
 801d0ac:	2a30      	cmp	r2, #48	; 0x30
 801d0ae:	f040 80b4 	bne.w	801d21a <_strtod_l+0x1aa>
 801d0b2:	7872      	ldrb	r2, [r6, #1]
 801d0b4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 801d0b8:	2a58      	cmp	r2, #88	; 0x58
 801d0ba:	d170      	bne.n	801d19e <_strtod_l+0x12e>
 801d0bc:	9302      	str	r3, [sp, #8]
 801d0be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d0c0:	9301      	str	r3, [sp, #4]
 801d0c2:	ab16      	add	r3, sp, #88	; 0x58
 801d0c4:	9300      	str	r3, [sp, #0]
 801d0c6:	4a8e      	ldr	r2, [pc, #568]	; (801d300 <_strtod_l+0x290>)
 801d0c8:	ab17      	add	r3, sp, #92	; 0x5c
 801d0ca:	a915      	add	r1, sp, #84	; 0x54
 801d0cc:	4620      	mov	r0, r4
 801d0ce:	f001 fac9 	bl	801e664 <__gethex>
 801d0d2:	f010 070f 	ands.w	r7, r0, #15
 801d0d6:	4605      	mov	r5, r0
 801d0d8:	d005      	beq.n	801d0e6 <_strtod_l+0x76>
 801d0da:	2f06      	cmp	r7, #6
 801d0dc:	d12a      	bne.n	801d134 <_strtod_l+0xc4>
 801d0de:	3601      	adds	r6, #1
 801d0e0:	2300      	movs	r3, #0
 801d0e2:	9615      	str	r6, [sp, #84]	; 0x54
 801d0e4:	930a      	str	r3, [sp, #40]	; 0x28
 801d0e6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801d0e8:	2b00      	cmp	r3, #0
 801d0ea:	f040 857f 	bne.w	801dbec <_strtod_l+0xb7c>
 801d0ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d0f0:	b1db      	cbz	r3, 801d12a <_strtod_l+0xba>
 801d0f2:	4642      	mov	r2, r8
 801d0f4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801d0f8:	ec43 2b10 	vmov	d0, r2, r3
 801d0fc:	b01b      	add	sp, #108	; 0x6c
 801d0fe:	ecbd 8b02 	vpop	{d8}
 801d102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d106:	2920      	cmp	r1, #32
 801d108:	d1cc      	bne.n	801d0a4 <_strtod_l+0x34>
 801d10a:	3201      	adds	r2, #1
 801d10c:	e7bf      	b.n	801d08e <_strtod_l+0x1e>
 801d10e:	292d      	cmp	r1, #45	; 0x2d
 801d110:	d1c8      	bne.n	801d0a4 <_strtod_l+0x34>
 801d112:	2101      	movs	r1, #1
 801d114:	910a      	str	r1, [sp, #40]	; 0x28
 801d116:	1c51      	adds	r1, r2, #1
 801d118:	9115      	str	r1, [sp, #84]	; 0x54
 801d11a:	7852      	ldrb	r2, [r2, #1]
 801d11c:	2a00      	cmp	r2, #0
 801d11e:	d1c3      	bne.n	801d0a8 <_strtod_l+0x38>
 801d120:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801d122:	9515      	str	r5, [sp, #84]	; 0x54
 801d124:	2b00      	cmp	r3, #0
 801d126:	f040 855f 	bne.w	801dbe8 <_strtod_l+0xb78>
 801d12a:	4642      	mov	r2, r8
 801d12c:	464b      	mov	r3, r9
 801d12e:	e7e3      	b.n	801d0f8 <_strtod_l+0x88>
 801d130:	2100      	movs	r1, #0
 801d132:	e7ef      	b.n	801d114 <_strtod_l+0xa4>
 801d134:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801d136:	b13a      	cbz	r2, 801d148 <_strtod_l+0xd8>
 801d138:	2135      	movs	r1, #53	; 0x35
 801d13a:	a818      	add	r0, sp, #96	; 0x60
 801d13c:	f7ff ff37 	bl	801cfae <__copybits>
 801d140:	9916      	ldr	r1, [sp, #88]	; 0x58
 801d142:	4620      	mov	r0, r4
 801d144:	f7ff fb0a 	bl	801c75c <_Bfree>
 801d148:	3f01      	subs	r7, #1
 801d14a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801d14c:	2f04      	cmp	r7, #4
 801d14e:	d806      	bhi.n	801d15e <_strtod_l+0xee>
 801d150:	e8df f007 	tbb	[pc, r7]
 801d154:	201d0314 	.word	0x201d0314
 801d158:	14          	.byte	0x14
 801d159:	00          	.byte	0x00
 801d15a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 801d15e:	05e9      	lsls	r1, r5, #23
 801d160:	bf48      	it	mi
 801d162:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 801d166:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801d16a:	0d1b      	lsrs	r3, r3, #20
 801d16c:	051b      	lsls	r3, r3, #20
 801d16e:	2b00      	cmp	r3, #0
 801d170:	d1b9      	bne.n	801d0e6 <_strtod_l+0x76>
 801d172:	f7fe fba9 	bl	801b8c8 <__errno>
 801d176:	2322      	movs	r3, #34	; 0x22
 801d178:	6003      	str	r3, [r0, #0]
 801d17a:	e7b4      	b.n	801d0e6 <_strtod_l+0x76>
 801d17c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 801d180:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801d184:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801d188:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801d18c:	e7e7      	b.n	801d15e <_strtod_l+0xee>
 801d18e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 801d308 <_strtod_l+0x298>
 801d192:	e7e4      	b.n	801d15e <_strtod_l+0xee>
 801d194:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 801d198:	f04f 38ff 	mov.w	r8, #4294967295
 801d19c:	e7df      	b.n	801d15e <_strtod_l+0xee>
 801d19e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d1a0:	1c5a      	adds	r2, r3, #1
 801d1a2:	9215      	str	r2, [sp, #84]	; 0x54
 801d1a4:	785b      	ldrb	r3, [r3, #1]
 801d1a6:	2b30      	cmp	r3, #48	; 0x30
 801d1a8:	d0f9      	beq.n	801d19e <_strtod_l+0x12e>
 801d1aa:	2b00      	cmp	r3, #0
 801d1ac:	d09b      	beq.n	801d0e6 <_strtod_l+0x76>
 801d1ae:	2301      	movs	r3, #1
 801d1b0:	f04f 0a00 	mov.w	sl, #0
 801d1b4:	9304      	str	r3, [sp, #16]
 801d1b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d1b8:	930b      	str	r3, [sp, #44]	; 0x2c
 801d1ba:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801d1be:	46d3      	mov	fp, sl
 801d1c0:	220a      	movs	r2, #10
 801d1c2:	9815      	ldr	r0, [sp, #84]	; 0x54
 801d1c4:	7806      	ldrb	r6, [r0, #0]
 801d1c6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801d1ca:	b2d9      	uxtb	r1, r3
 801d1cc:	2909      	cmp	r1, #9
 801d1ce:	d926      	bls.n	801d21e <_strtod_l+0x1ae>
 801d1d0:	494c      	ldr	r1, [pc, #304]	; (801d304 <_strtod_l+0x294>)
 801d1d2:	2201      	movs	r2, #1
 801d1d4:	f001 f98c 	bl	801e4f0 <strncmp>
 801d1d8:	2800      	cmp	r0, #0
 801d1da:	d030      	beq.n	801d23e <_strtod_l+0x1ce>
 801d1dc:	2000      	movs	r0, #0
 801d1de:	4632      	mov	r2, r6
 801d1e0:	9005      	str	r0, [sp, #20]
 801d1e2:	465e      	mov	r6, fp
 801d1e4:	4603      	mov	r3, r0
 801d1e6:	2a65      	cmp	r2, #101	; 0x65
 801d1e8:	d001      	beq.n	801d1ee <_strtod_l+0x17e>
 801d1ea:	2a45      	cmp	r2, #69	; 0x45
 801d1ec:	d113      	bne.n	801d216 <_strtod_l+0x1a6>
 801d1ee:	b91e      	cbnz	r6, 801d1f8 <_strtod_l+0x188>
 801d1f0:	9a04      	ldr	r2, [sp, #16]
 801d1f2:	4302      	orrs	r2, r0
 801d1f4:	d094      	beq.n	801d120 <_strtod_l+0xb0>
 801d1f6:	2600      	movs	r6, #0
 801d1f8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801d1fa:	1c6a      	adds	r2, r5, #1
 801d1fc:	9215      	str	r2, [sp, #84]	; 0x54
 801d1fe:	786a      	ldrb	r2, [r5, #1]
 801d200:	2a2b      	cmp	r2, #43	; 0x2b
 801d202:	d074      	beq.n	801d2ee <_strtod_l+0x27e>
 801d204:	2a2d      	cmp	r2, #45	; 0x2d
 801d206:	d078      	beq.n	801d2fa <_strtod_l+0x28a>
 801d208:	f04f 0c00 	mov.w	ip, #0
 801d20c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801d210:	2909      	cmp	r1, #9
 801d212:	d97f      	bls.n	801d314 <_strtod_l+0x2a4>
 801d214:	9515      	str	r5, [sp, #84]	; 0x54
 801d216:	2700      	movs	r7, #0
 801d218:	e09e      	b.n	801d358 <_strtod_l+0x2e8>
 801d21a:	2300      	movs	r3, #0
 801d21c:	e7c8      	b.n	801d1b0 <_strtod_l+0x140>
 801d21e:	f1bb 0f08 	cmp.w	fp, #8
 801d222:	bfd8      	it	le
 801d224:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801d226:	f100 0001 	add.w	r0, r0, #1
 801d22a:	bfda      	itte	le
 801d22c:	fb02 3301 	mlale	r3, r2, r1, r3
 801d230:	9309      	strle	r3, [sp, #36]	; 0x24
 801d232:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 801d236:	f10b 0b01 	add.w	fp, fp, #1
 801d23a:	9015      	str	r0, [sp, #84]	; 0x54
 801d23c:	e7c1      	b.n	801d1c2 <_strtod_l+0x152>
 801d23e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d240:	1c5a      	adds	r2, r3, #1
 801d242:	9215      	str	r2, [sp, #84]	; 0x54
 801d244:	785a      	ldrb	r2, [r3, #1]
 801d246:	f1bb 0f00 	cmp.w	fp, #0
 801d24a:	d037      	beq.n	801d2bc <_strtod_l+0x24c>
 801d24c:	9005      	str	r0, [sp, #20]
 801d24e:	465e      	mov	r6, fp
 801d250:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801d254:	2b09      	cmp	r3, #9
 801d256:	d912      	bls.n	801d27e <_strtod_l+0x20e>
 801d258:	2301      	movs	r3, #1
 801d25a:	e7c4      	b.n	801d1e6 <_strtod_l+0x176>
 801d25c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d25e:	1c5a      	adds	r2, r3, #1
 801d260:	9215      	str	r2, [sp, #84]	; 0x54
 801d262:	785a      	ldrb	r2, [r3, #1]
 801d264:	3001      	adds	r0, #1
 801d266:	2a30      	cmp	r2, #48	; 0x30
 801d268:	d0f8      	beq.n	801d25c <_strtod_l+0x1ec>
 801d26a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801d26e:	2b08      	cmp	r3, #8
 801d270:	f200 84c1 	bhi.w	801dbf6 <_strtod_l+0xb86>
 801d274:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d276:	9005      	str	r0, [sp, #20]
 801d278:	2000      	movs	r0, #0
 801d27a:	930b      	str	r3, [sp, #44]	; 0x2c
 801d27c:	4606      	mov	r6, r0
 801d27e:	3a30      	subs	r2, #48	; 0x30
 801d280:	f100 0301 	add.w	r3, r0, #1
 801d284:	d014      	beq.n	801d2b0 <_strtod_l+0x240>
 801d286:	9905      	ldr	r1, [sp, #20]
 801d288:	4419      	add	r1, r3
 801d28a:	9105      	str	r1, [sp, #20]
 801d28c:	4633      	mov	r3, r6
 801d28e:	eb00 0c06 	add.w	ip, r0, r6
 801d292:	210a      	movs	r1, #10
 801d294:	4563      	cmp	r3, ip
 801d296:	d113      	bne.n	801d2c0 <_strtod_l+0x250>
 801d298:	1833      	adds	r3, r6, r0
 801d29a:	2b08      	cmp	r3, #8
 801d29c:	f106 0601 	add.w	r6, r6, #1
 801d2a0:	4406      	add	r6, r0
 801d2a2:	dc1a      	bgt.n	801d2da <_strtod_l+0x26a>
 801d2a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 801d2a6:	230a      	movs	r3, #10
 801d2a8:	fb03 2301 	mla	r3, r3, r1, r2
 801d2ac:	9309      	str	r3, [sp, #36]	; 0x24
 801d2ae:	2300      	movs	r3, #0
 801d2b0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801d2b2:	1c51      	adds	r1, r2, #1
 801d2b4:	9115      	str	r1, [sp, #84]	; 0x54
 801d2b6:	7852      	ldrb	r2, [r2, #1]
 801d2b8:	4618      	mov	r0, r3
 801d2ba:	e7c9      	b.n	801d250 <_strtod_l+0x1e0>
 801d2bc:	4658      	mov	r0, fp
 801d2be:	e7d2      	b.n	801d266 <_strtod_l+0x1f6>
 801d2c0:	2b08      	cmp	r3, #8
 801d2c2:	f103 0301 	add.w	r3, r3, #1
 801d2c6:	dc03      	bgt.n	801d2d0 <_strtod_l+0x260>
 801d2c8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801d2ca:	434f      	muls	r7, r1
 801d2cc:	9709      	str	r7, [sp, #36]	; 0x24
 801d2ce:	e7e1      	b.n	801d294 <_strtod_l+0x224>
 801d2d0:	2b10      	cmp	r3, #16
 801d2d2:	bfd8      	it	le
 801d2d4:	fb01 fa0a 	mulle.w	sl, r1, sl
 801d2d8:	e7dc      	b.n	801d294 <_strtod_l+0x224>
 801d2da:	2e10      	cmp	r6, #16
 801d2dc:	bfdc      	itt	le
 801d2de:	230a      	movle	r3, #10
 801d2e0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 801d2e4:	e7e3      	b.n	801d2ae <_strtod_l+0x23e>
 801d2e6:	2300      	movs	r3, #0
 801d2e8:	9305      	str	r3, [sp, #20]
 801d2ea:	2301      	movs	r3, #1
 801d2ec:	e780      	b.n	801d1f0 <_strtod_l+0x180>
 801d2ee:	f04f 0c00 	mov.w	ip, #0
 801d2f2:	1caa      	adds	r2, r5, #2
 801d2f4:	9215      	str	r2, [sp, #84]	; 0x54
 801d2f6:	78aa      	ldrb	r2, [r5, #2]
 801d2f8:	e788      	b.n	801d20c <_strtod_l+0x19c>
 801d2fa:	f04f 0c01 	mov.w	ip, #1
 801d2fe:	e7f8      	b.n	801d2f2 <_strtod_l+0x282>
 801d300:	080259d0 	.word	0x080259d0
 801d304:	080259cc 	.word	0x080259cc
 801d308:	7ff00000 	.word	0x7ff00000
 801d30c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801d30e:	1c51      	adds	r1, r2, #1
 801d310:	9115      	str	r1, [sp, #84]	; 0x54
 801d312:	7852      	ldrb	r2, [r2, #1]
 801d314:	2a30      	cmp	r2, #48	; 0x30
 801d316:	d0f9      	beq.n	801d30c <_strtod_l+0x29c>
 801d318:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801d31c:	2908      	cmp	r1, #8
 801d31e:	f63f af7a 	bhi.w	801d216 <_strtod_l+0x1a6>
 801d322:	3a30      	subs	r2, #48	; 0x30
 801d324:	9208      	str	r2, [sp, #32]
 801d326:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801d328:	920c      	str	r2, [sp, #48]	; 0x30
 801d32a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801d32c:	1c57      	adds	r7, r2, #1
 801d32e:	9715      	str	r7, [sp, #84]	; 0x54
 801d330:	7852      	ldrb	r2, [r2, #1]
 801d332:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801d336:	f1be 0f09 	cmp.w	lr, #9
 801d33a:	d938      	bls.n	801d3ae <_strtod_l+0x33e>
 801d33c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801d33e:	1a7f      	subs	r7, r7, r1
 801d340:	2f08      	cmp	r7, #8
 801d342:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801d346:	dc03      	bgt.n	801d350 <_strtod_l+0x2e0>
 801d348:	9908      	ldr	r1, [sp, #32]
 801d34a:	428f      	cmp	r7, r1
 801d34c:	bfa8      	it	ge
 801d34e:	460f      	movge	r7, r1
 801d350:	f1bc 0f00 	cmp.w	ip, #0
 801d354:	d000      	beq.n	801d358 <_strtod_l+0x2e8>
 801d356:	427f      	negs	r7, r7
 801d358:	2e00      	cmp	r6, #0
 801d35a:	d14f      	bne.n	801d3fc <_strtod_l+0x38c>
 801d35c:	9904      	ldr	r1, [sp, #16]
 801d35e:	4301      	orrs	r1, r0
 801d360:	f47f aec1 	bne.w	801d0e6 <_strtod_l+0x76>
 801d364:	2b00      	cmp	r3, #0
 801d366:	f47f aedb 	bne.w	801d120 <_strtod_l+0xb0>
 801d36a:	2a69      	cmp	r2, #105	; 0x69
 801d36c:	d029      	beq.n	801d3c2 <_strtod_l+0x352>
 801d36e:	dc26      	bgt.n	801d3be <_strtod_l+0x34e>
 801d370:	2a49      	cmp	r2, #73	; 0x49
 801d372:	d026      	beq.n	801d3c2 <_strtod_l+0x352>
 801d374:	2a4e      	cmp	r2, #78	; 0x4e
 801d376:	f47f aed3 	bne.w	801d120 <_strtod_l+0xb0>
 801d37a:	499b      	ldr	r1, [pc, #620]	; (801d5e8 <_strtod_l+0x578>)
 801d37c:	a815      	add	r0, sp, #84	; 0x54
 801d37e:	f001 fbb1 	bl	801eae4 <__match>
 801d382:	2800      	cmp	r0, #0
 801d384:	f43f aecc 	beq.w	801d120 <_strtod_l+0xb0>
 801d388:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d38a:	781b      	ldrb	r3, [r3, #0]
 801d38c:	2b28      	cmp	r3, #40	; 0x28
 801d38e:	d12f      	bne.n	801d3f0 <_strtod_l+0x380>
 801d390:	4996      	ldr	r1, [pc, #600]	; (801d5ec <_strtod_l+0x57c>)
 801d392:	aa18      	add	r2, sp, #96	; 0x60
 801d394:	a815      	add	r0, sp, #84	; 0x54
 801d396:	f001 fbb9 	bl	801eb0c <__hexnan>
 801d39a:	2805      	cmp	r0, #5
 801d39c:	d128      	bne.n	801d3f0 <_strtod_l+0x380>
 801d39e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801d3a0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801d3a4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 801d3a8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801d3ac:	e69b      	b.n	801d0e6 <_strtod_l+0x76>
 801d3ae:	9f08      	ldr	r7, [sp, #32]
 801d3b0:	210a      	movs	r1, #10
 801d3b2:	fb01 2107 	mla	r1, r1, r7, r2
 801d3b6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801d3ba:	9208      	str	r2, [sp, #32]
 801d3bc:	e7b5      	b.n	801d32a <_strtod_l+0x2ba>
 801d3be:	2a6e      	cmp	r2, #110	; 0x6e
 801d3c0:	e7d9      	b.n	801d376 <_strtod_l+0x306>
 801d3c2:	498b      	ldr	r1, [pc, #556]	; (801d5f0 <_strtod_l+0x580>)
 801d3c4:	a815      	add	r0, sp, #84	; 0x54
 801d3c6:	f001 fb8d 	bl	801eae4 <__match>
 801d3ca:	2800      	cmp	r0, #0
 801d3cc:	f43f aea8 	beq.w	801d120 <_strtod_l+0xb0>
 801d3d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d3d2:	4988      	ldr	r1, [pc, #544]	; (801d5f4 <_strtod_l+0x584>)
 801d3d4:	3b01      	subs	r3, #1
 801d3d6:	a815      	add	r0, sp, #84	; 0x54
 801d3d8:	9315      	str	r3, [sp, #84]	; 0x54
 801d3da:	f001 fb83 	bl	801eae4 <__match>
 801d3de:	b910      	cbnz	r0, 801d3e6 <_strtod_l+0x376>
 801d3e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d3e2:	3301      	adds	r3, #1
 801d3e4:	9315      	str	r3, [sp, #84]	; 0x54
 801d3e6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 801d604 <_strtod_l+0x594>
 801d3ea:	f04f 0800 	mov.w	r8, #0
 801d3ee:	e67a      	b.n	801d0e6 <_strtod_l+0x76>
 801d3f0:	4881      	ldr	r0, [pc, #516]	; (801d5f8 <_strtod_l+0x588>)
 801d3f2:	f7fc fd19 	bl	8019e28 <nan>
 801d3f6:	ec59 8b10 	vmov	r8, r9, d0
 801d3fa:	e674      	b.n	801d0e6 <_strtod_l+0x76>
 801d3fc:	9b05      	ldr	r3, [sp, #20]
 801d3fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d400:	1afb      	subs	r3, r7, r3
 801d402:	f1bb 0f00 	cmp.w	fp, #0
 801d406:	bf08      	it	eq
 801d408:	46b3      	moveq	fp, r6
 801d40a:	2e10      	cmp	r6, #16
 801d40c:	9308      	str	r3, [sp, #32]
 801d40e:	4635      	mov	r5, r6
 801d410:	bfa8      	it	ge
 801d412:	2510      	movge	r5, #16
 801d414:	f7e3 f896 	bl	8000544 <__aeabi_ui2d>
 801d418:	2e09      	cmp	r6, #9
 801d41a:	4680      	mov	r8, r0
 801d41c:	4689      	mov	r9, r1
 801d41e:	dd13      	ble.n	801d448 <_strtod_l+0x3d8>
 801d420:	4b76      	ldr	r3, [pc, #472]	; (801d5fc <_strtod_l+0x58c>)
 801d422:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801d426:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801d42a:	f7e3 f905 	bl	8000638 <__aeabi_dmul>
 801d42e:	4680      	mov	r8, r0
 801d430:	4650      	mov	r0, sl
 801d432:	4689      	mov	r9, r1
 801d434:	f7e3 f886 	bl	8000544 <__aeabi_ui2d>
 801d438:	4602      	mov	r2, r0
 801d43a:	460b      	mov	r3, r1
 801d43c:	4640      	mov	r0, r8
 801d43e:	4649      	mov	r1, r9
 801d440:	f7e2 ff44 	bl	80002cc <__adddf3>
 801d444:	4680      	mov	r8, r0
 801d446:	4689      	mov	r9, r1
 801d448:	2e0f      	cmp	r6, #15
 801d44a:	dc38      	bgt.n	801d4be <_strtod_l+0x44e>
 801d44c:	9b08      	ldr	r3, [sp, #32]
 801d44e:	2b00      	cmp	r3, #0
 801d450:	f43f ae49 	beq.w	801d0e6 <_strtod_l+0x76>
 801d454:	dd24      	ble.n	801d4a0 <_strtod_l+0x430>
 801d456:	2b16      	cmp	r3, #22
 801d458:	dc0b      	bgt.n	801d472 <_strtod_l+0x402>
 801d45a:	4968      	ldr	r1, [pc, #416]	; (801d5fc <_strtod_l+0x58c>)
 801d45c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801d460:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d464:	4642      	mov	r2, r8
 801d466:	464b      	mov	r3, r9
 801d468:	f7e3 f8e6 	bl	8000638 <__aeabi_dmul>
 801d46c:	4680      	mov	r8, r0
 801d46e:	4689      	mov	r9, r1
 801d470:	e639      	b.n	801d0e6 <_strtod_l+0x76>
 801d472:	9a08      	ldr	r2, [sp, #32]
 801d474:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 801d478:	4293      	cmp	r3, r2
 801d47a:	db20      	blt.n	801d4be <_strtod_l+0x44e>
 801d47c:	4c5f      	ldr	r4, [pc, #380]	; (801d5fc <_strtod_l+0x58c>)
 801d47e:	f1c6 060f 	rsb	r6, r6, #15
 801d482:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 801d486:	4642      	mov	r2, r8
 801d488:	464b      	mov	r3, r9
 801d48a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d48e:	f7e3 f8d3 	bl	8000638 <__aeabi_dmul>
 801d492:	9b08      	ldr	r3, [sp, #32]
 801d494:	1b9e      	subs	r6, r3, r6
 801d496:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 801d49a:	e9d4 2300 	ldrd	r2, r3, [r4]
 801d49e:	e7e3      	b.n	801d468 <_strtod_l+0x3f8>
 801d4a0:	9b08      	ldr	r3, [sp, #32]
 801d4a2:	3316      	adds	r3, #22
 801d4a4:	db0b      	blt.n	801d4be <_strtod_l+0x44e>
 801d4a6:	9b05      	ldr	r3, [sp, #20]
 801d4a8:	1bdf      	subs	r7, r3, r7
 801d4aa:	4b54      	ldr	r3, [pc, #336]	; (801d5fc <_strtod_l+0x58c>)
 801d4ac:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 801d4b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d4b4:	4640      	mov	r0, r8
 801d4b6:	4649      	mov	r1, r9
 801d4b8:	f7e3 f9e8 	bl	800088c <__aeabi_ddiv>
 801d4bc:	e7d6      	b.n	801d46c <_strtod_l+0x3fc>
 801d4be:	9b08      	ldr	r3, [sp, #32]
 801d4c0:	1b75      	subs	r5, r6, r5
 801d4c2:	441d      	add	r5, r3
 801d4c4:	2d00      	cmp	r5, #0
 801d4c6:	dd70      	ble.n	801d5aa <_strtod_l+0x53a>
 801d4c8:	f015 030f 	ands.w	r3, r5, #15
 801d4cc:	d00a      	beq.n	801d4e4 <_strtod_l+0x474>
 801d4ce:	494b      	ldr	r1, [pc, #300]	; (801d5fc <_strtod_l+0x58c>)
 801d4d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801d4d4:	4642      	mov	r2, r8
 801d4d6:	464b      	mov	r3, r9
 801d4d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d4dc:	f7e3 f8ac 	bl	8000638 <__aeabi_dmul>
 801d4e0:	4680      	mov	r8, r0
 801d4e2:	4689      	mov	r9, r1
 801d4e4:	f035 050f 	bics.w	r5, r5, #15
 801d4e8:	d04d      	beq.n	801d586 <_strtod_l+0x516>
 801d4ea:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 801d4ee:	dd22      	ble.n	801d536 <_strtod_l+0x4c6>
 801d4f0:	2500      	movs	r5, #0
 801d4f2:	46ab      	mov	fp, r5
 801d4f4:	9509      	str	r5, [sp, #36]	; 0x24
 801d4f6:	9505      	str	r5, [sp, #20]
 801d4f8:	2322      	movs	r3, #34	; 0x22
 801d4fa:	f8df 9108 	ldr.w	r9, [pc, #264]	; 801d604 <_strtod_l+0x594>
 801d4fe:	6023      	str	r3, [r4, #0]
 801d500:	f04f 0800 	mov.w	r8, #0
 801d504:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d506:	2b00      	cmp	r3, #0
 801d508:	f43f aded 	beq.w	801d0e6 <_strtod_l+0x76>
 801d50c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801d50e:	4620      	mov	r0, r4
 801d510:	f7ff f924 	bl	801c75c <_Bfree>
 801d514:	9905      	ldr	r1, [sp, #20]
 801d516:	4620      	mov	r0, r4
 801d518:	f7ff f920 	bl	801c75c <_Bfree>
 801d51c:	4659      	mov	r1, fp
 801d51e:	4620      	mov	r0, r4
 801d520:	f7ff f91c 	bl	801c75c <_Bfree>
 801d524:	9909      	ldr	r1, [sp, #36]	; 0x24
 801d526:	4620      	mov	r0, r4
 801d528:	f7ff f918 	bl	801c75c <_Bfree>
 801d52c:	4629      	mov	r1, r5
 801d52e:	4620      	mov	r0, r4
 801d530:	f7ff f914 	bl	801c75c <_Bfree>
 801d534:	e5d7      	b.n	801d0e6 <_strtod_l+0x76>
 801d536:	4b32      	ldr	r3, [pc, #200]	; (801d600 <_strtod_l+0x590>)
 801d538:	9304      	str	r3, [sp, #16]
 801d53a:	2300      	movs	r3, #0
 801d53c:	112d      	asrs	r5, r5, #4
 801d53e:	4640      	mov	r0, r8
 801d540:	4649      	mov	r1, r9
 801d542:	469a      	mov	sl, r3
 801d544:	2d01      	cmp	r5, #1
 801d546:	dc21      	bgt.n	801d58c <_strtod_l+0x51c>
 801d548:	b10b      	cbz	r3, 801d54e <_strtod_l+0x4de>
 801d54a:	4680      	mov	r8, r0
 801d54c:	4689      	mov	r9, r1
 801d54e:	492c      	ldr	r1, [pc, #176]	; (801d600 <_strtod_l+0x590>)
 801d550:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801d554:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801d558:	4642      	mov	r2, r8
 801d55a:	464b      	mov	r3, r9
 801d55c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d560:	f7e3 f86a 	bl	8000638 <__aeabi_dmul>
 801d564:	4b27      	ldr	r3, [pc, #156]	; (801d604 <_strtod_l+0x594>)
 801d566:	460a      	mov	r2, r1
 801d568:	400b      	ands	r3, r1
 801d56a:	4927      	ldr	r1, [pc, #156]	; (801d608 <_strtod_l+0x598>)
 801d56c:	428b      	cmp	r3, r1
 801d56e:	4680      	mov	r8, r0
 801d570:	d8be      	bhi.n	801d4f0 <_strtod_l+0x480>
 801d572:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801d576:	428b      	cmp	r3, r1
 801d578:	bf86      	itte	hi
 801d57a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 801d60c <_strtod_l+0x59c>
 801d57e:	f04f 38ff 	movhi.w	r8, #4294967295
 801d582:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 801d586:	2300      	movs	r3, #0
 801d588:	9304      	str	r3, [sp, #16]
 801d58a:	e07b      	b.n	801d684 <_strtod_l+0x614>
 801d58c:	07ea      	lsls	r2, r5, #31
 801d58e:	d505      	bpl.n	801d59c <_strtod_l+0x52c>
 801d590:	9b04      	ldr	r3, [sp, #16]
 801d592:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d596:	f7e3 f84f 	bl	8000638 <__aeabi_dmul>
 801d59a:	2301      	movs	r3, #1
 801d59c:	9a04      	ldr	r2, [sp, #16]
 801d59e:	3208      	adds	r2, #8
 801d5a0:	f10a 0a01 	add.w	sl, sl, #1
 801d5a4:	106d      	asrs	r5, r5, #1
 801d5a6:	9204      	str	r2, [sp, #16]
 801d5a8:	e7cc      	b.n	801d544 <_strtod_l+0x4d4>
 801d5aa:	d0ec      	beq.n	801d586 <_strtod_l+0x516>
 801d5ac:	426d      	negs	r5, r5
 801d5ae:	f015 020f 	ands.w	r2, r5, #15
 801d5b2:	d00a      	beq.n	801d5ca <_strtod_l+0x55a>
 801d5b4:	4b11      	ldr	r3, [pc, #68]	; (801d5fc <_strtod_l+0x58c>)
 801d5b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d5ba:	4640      	mov	r0, r8
 801d5bc:	4649      	mov	r1, r9
 801d5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d5c2:	f7e3 f963 	bl	800088c <__aeabi_ddiv>
 801d5c6:	4680      	mov	r8, r0
 801d5c8:	4689      	mov	r9, r1
 801d5ca:	112d      	asrs	r5, r5, #4
 801d5cc:	d0db      	beq.n	801d586 <_strtod_l+0x516>
 801d5ce:	2d1f      	cmp	r5, #31
 801d5d0:	dd1e      	ble.n	801d610 <_strtod_l+0x5a0>
 801d5d2:	2500      	movs	r5, #0
 801d5d4:	46ab      	mov	fp, r5
 801d5d6:	9509      	str	r5, [sp, #36]	; 0x24
 801d5d8:	9505      	str	r5, [sp, #20]
 801d5da:	2322      	movs	r3, #34	; 0x22
 801d5dc:	f04f 0800 	mov.w	r8, #0
 801d5e0:	f04f 0900 	mov.w	r9, #0
 801d5e4:	6023      	str	r3, [r4, #0]
 801d5e6:	e78d      	b.n	801d504 <_strtod_l+0x494>
 801d5e8:	080257bd 	.word	0x080257bd
 801d5ec:	080259e4 	.word	0x080259e4
 801d5f0:	080257b5 	.word	0x080257b5
 801d5f4:	080257ec 	.word	0x080257ec
 801d5f8:	08025b75 	.word	0x08025b75
 801d5fc:	080258f8 	.word	0x080258f8
 801d600:	080258d0 	.word	0x080258d0
 801d604:	7ff00000 	.word	0x7ff00000
 801d608:	7ca00000 	.word	0x7ca00000
 801d60c:	7fefffff 	.word	0x7fefffff
 801d610:	f015 0310 	ands.w	r3, r5, #16
 801d614:	bf18      	it	ne
 801d616:	236a      	movne	r3, #106	; 0x6a
 801d618:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 801d9bc <_strtod_l+0x94c>
 801d61c:	9304      	str	r3, [sp, #16]
 801d61e:	4640      	mov	r0, r8
 801d620:	4649      	mov	r1, r9
 801d622:	2300      	movs	r3, #0
 801d624:	07ea      	lsls	r2, r5, #31
 801d626:	d504      	bpl.n	801d632 <_strtod_l+0x5c2>
 801d628:	e9da 2300 	ldrd	r2, r3, [sl]
 801d62c:	f7e3 f804 	bl	8000638 <__aeabi_dmul>
 801d630:	2301      	movs	r3, #1
 801d632:	106d      	asrs	r5, r5, #1
 801d634:	f10a 0a08 	add.w	sl, sl, #8
 801d638:	d1f4      	bne.n	801d624 <_strtod_l+0x5b4>
 801d63a:	b10b      	cbz	r3, 801d640 <_strtod_l+0x5d0>
 801d63c:	4680      	mov	r8, r0
 801d63e:	4689      	mov	r9, r1
 801d640:	9b04      	ldr	r3, [sp, #16]
 801d642:	b1bb      	cbz	r3, 801d674 <_strtod_l+0x604>
 801d644:	f3c9 520a 	ubfx	r2, r9, #20, #11
 801d648:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801d64c:	2b00      	cmp	r3, #0
 801d64e:	4649      	mov	r1, r9
 801d650:	dd10      	ble.n	801d674 <_strtod_l+0x604>
 801d652:	2b1f      	cmp	r3, #31
 801d654:	f340 811e 	ble.w	801d894 <_strtod_l+0x824>
 801d658:	2b34      	cmp	r3, #52	; 0x34
 801d65a:	bfde      	ittt	le
 801d65c:	f04f 33ff 	movle.w	r3, #4294967295
 801d660:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801d664:	4093      	lslle	r3, r2
 801d666:	f04f 0800 	mov.w	r8, #0
 801d66a:	bfcc      	ite	gt
 801d66c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 801d670:	ea03 0901 	andle.w	r9, r3, r1
 801d674:	2200      	movs	r2, #0
 801d676:	2300      	movs	r3, #0
 801d678:	4640      	mov	r0, r8
 801d67a:	4649      	mov	r1, r9
 801d67c:	f7e3 fa44 	bl	8000b08 <__aeabi_dcmpeq>
 801d680:	2800      	cmp	r0, #0
 801d682:	d1a6      	bne.n	801d5d2 <_strtod_l+0x562>
 801d684:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d686:	9300      	str	r3, [sp, #0]
 801d688:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801d68a:	4633      	mov	r3, r6
 801d68c:	465a      	mov	r2, fp
 801d68e:	4620      	mov	r0, r4
 801d690:	f7ff f8cc 	bl	801c82c <__s2b>
 801d694:	9009      	str	r0, [sp, #36]	; 0x24
 801d696:	2800      	cmp	r0, #0
 801d698:	f43f af2a 	beq.w	801d4f0 <_strtod_l+0x480>
 801d69c:	9a08      	ldr	r2, [sp, #32]
 801d69e:	9b05      	ldr	r3, [sp, #20]
 801d6a0:	2a00      	cmp	r2, #0
 801d6a2:	eba3 0307 	sub.w	r3, r3, r7
 801d6a6:	bfa8      	it	ge
 801d6a8:	2300      	movge	r3, #0
 801d6aa:	930c      	str	r3, [sp, #48]	; 0x30
 801d6ac:	2500      	movs	r5, #0
 801d6ae:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801d6b2:	9312      	str	r3, [sp, #72]	; 0x48
 801d6b4:	46ab      	mov	fp, r5
 801d6b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d6b8:	4620      	mov	r0, r4
 801d6ba:	6859      	ldr	r1, [r3, #4]
 801d6bc:	f7ff f80e 	bl	801c6dc <_Balloc>
 801d6c0:	9005      	str	r0, [sp, #20]
 801d6c2:	2800      	cmp	r0, #0
 801d6c4:	f43f af18 	beq.w	801d4f8 <_strtod_l+0x488>
 801d6c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d6ca:	691a      	ldr	r2, [r3, #16]
 801d6cc:	3202      	adds	r2, #2
 801d6ce:	f103 010c 	add.w	r1, r3, #12
 801d6d2:	0092      	lsls	r2, r2, #2
 801d6d4:	300c      	adds	r0, #12
 801d6d6:	f7fe f924 	bl	801b922 <memcpy>
 801d6da:	ec49 8b10 	vmov	d0, r8, r9
 801d6de:	aa18      	add	r2, sp, #96	; 0x60
 801d6e0:	a917      	add	r1, sp, #92	; 0x5c
 801d6e2:	4620      	mov	r0, r4
 801d6e4:	f7ff fbd6 	bl	801ce94 <__d2b>
 801d6e8:	ec49 8b18 	vmov	d8, r8, r9
 801d6ec:	9016      	str	r0, [sp, #88]	; 0x58
 801d6ee:	2800      	cmp	r0, #0
 801d6f0:	f43f af02 	beq.w	801d4f8 <_strtod_l+0x488>
 801d6f4:	2101      	movs	r1, #1
 801d6f6:	4620      	mov	r0, r4
 801d6f8:	f7ff f930 	bl	801c95c <__i2b>
 801d6fc:	4683      	mov	fp, r0
 801d6fe:	2800      	cmp	r0, #0
 801d700:	f43f aefa 	beq.w	801d4f8 <_strtod_l+0x488>
 801d704:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801d706:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801d708:	2e00      	cmp	r6, #0
 801d70a:	bfab      	itete	ge
 801d70c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 801d70e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 801d710:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801d712:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 801d716:	bfac      	ite	ge
 801d718:	eb06 0a03 	addge.w	sl, r6, r3
 801d71c:	1b9f      	sublt	r7, r3, r6
 801d71e:	9b04      	ldr	r3, [sp, #16]
 801d720:	1af6      	subs	r6, r6, r3
 801d722:	4416      	add	r6, r2
 801d724:	4ba0      	ldr	r3, [pc, #640]	; (801d9a8 <_strtod_l+0x938>)
 801d726:	3e01      	subs	r6, #1
 801d728:	429e      	cmp	r6, r3
 801d72a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801d72e:	f280 80c4 	bge.w	801d8ba <_strtod_l+0x84a>
 801d732:	1b9b      	subs	r3, r3, r6
 801d734:	2b1f      	cmp	r3, #31
 801d736:	eba2 0203 	sub.w	r2, r2, r3
 801d73a:	f04f 0101 	mov.w	r1, #1
 801d73e:	f300 80b0 	bgt.w	801d8a2 <_strtod_l+0x832>
 801d742:	fa01 f303 	lsl.w	r3, r1, r3
 801d746:	930e      	str	r3, [sp, #56]	; 0x38
 801d748:	2300      	movs	r3, #0
 801d74a:	930d      	str	r3, [sp, #52]	; 0x34
 801d74c:	eb0a 0602 	add.w	r6, sl, r2
 801d750:	9b04      	ldr	r3, [sp, #16]
 801d752:	45b2      	cmp	sl, r6
 801d754:	4417      	add	r7, r2
 801d756:	441f      	add	r7, r3
 801d758:	4653      	mov	r3, sl
 801d75a:	bfa8      	it	ge
 801d75c:	4633      	movge	r3, r6
 801d75e:	42bb      	cmp	r3, r7
 801d760:	bfa8      	it	ge
 801d762:	463b      	movge	r3, r7
 801d764:	2b00      	cmp	r3, #0
 801d766:	bfc2      	ittt	gt
 801d768:	1af6      	subgt	r6, r6, r3
 801d76a:	1aff      	subgt	r7, r7, r3
 801d76c:	ebaa 0a03 	subgt.w	sl, sl, r3
 801d770:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d772:	2b00      	cmp	r3, #0
 801d774:	dd17      	ble.n	801d7a6 <_strtod_l+0x736>
 801d776:	4659      	mov	r1, fp
 801d778:	461a      	mov	r2, r3
 801d77a:	4620      	mov	r0, r4
 801d77c:	f7ff f9ae 	bl	801cadc <__pow5mult>
 801d780:	4683      	mov	fp, r0
 801d782:	2800      	cmp	r0, #0
 801d784:	f43f aeb8 	beq.w	801d4f8 <_strtod_l+0x488>
 801d788:	4601      	mov	r1, r0
 801d78a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801d78c:	4620      	mov	r0, r4
 801d78e:	f7ff f8fb 	bl	801c988 <__multiply>
 801d792:	900b      	str	r0, [sp, #44]	; 0x2c
 801d794:	2800      	cmp	r0, #0
 801d796:	f43f aeaf 	beq.w	801d4f8 <_strtod_l+0x488>
 801d79a:	9916      	ldr	r1, [sp, #88]	; 0x58
 801d79c:	4620      	mov	r0, r4
 801d79e:	f7fe ffdd 	bl	801c75c <_Bfree>
 801d7a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d7a4:	9316      	str	r3, [sp, #88]	; 0x58
 801d7a6:	2e00      	cmp	r6, #0
 801d7a8:	f300 808c 	bgt.w	801d8c4 <_strtod_l+0x854>
 801d7ac:	9b08      	ldr	r3, [sp, #32]
 801d7ae:	2b00      	cmp	r3, #0
 801d7b0:	dd08      	ble.n	801d7c4 <_strtod_l+0x754>
 801d7b2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d7b4:	9905      	ldr	r1, [sp, #20]
 801d7b6:	4620      	mov	r0, r4
 801d7b8:	f7ff f990 	bl	801cadc <__pow5mult>
 801d7bc:	9005      	str	r0, [sp, #20]
 801d7be:	2800      	cmp	r0, #0
 801d7c0:	f43f ae9a 	beq.w	801d4f8 <_strtod_l+0x488>
 801d7c4:	2f00      	cmp	r7, #0
 801d7c6:	dd08      	ble.n	801d7da <_strtod_l+0x76a>
 801d7c8:	9905      	ldr	r1, [sp, #20]
 801d7ca:	463a      	mov	r2, r7
 801d7cc:	4620      	mov	r0, r4
 801d7ce:	f7ff f9df 	bl	801cb90 <__lshift>
 801d7d2:	9005      	str	r0, [sp, #20]
 801d7d4:	2800      	cmp	r0, #0
 801d7d6:	f43f ae8f 	beq.w	801d4f8 <_strtod_l+0x488>
 801d7da:	f1ba 0f00 	cmp.w	sl, #0
 801d7de:	dd08      	ble.n	801d7f2 <_strtod_l+0x782>
 801d7e0:	4659      	mov	r1, fp
 801d7e2:	4652      	mov	r2, sl
 801d7e4:	4620      	mov	r0, r4
 801d7e6:	f7ff f9d3 	bl	801cb90 <__lshift>
 801d7ea:	4683      	mov	fp, r0
 801d7ec:	2800      	cmp	r0, #0
 801d7ee:	f43f ae83 	beq.w	801d4f8 <_strtod_l+0x488>
 801d7f2:	9a05      	ldr	r2, [sp, #20]
 801d7f4:	9916      	ldr	r1, [sp, #88]	; 0x58
 801d7f6:	4620      	mov	r0, r4
 801d7f8:	f7ff fa52 	bl	801cca0 <__mdiff>
 801d7fc:	4605      	mov	r5, r0
 801d7fe:	2800      	cmp	r0, #0
 801d800:	f43f ae7a 	beq.w	801d4f8 <_strtod_l+0x488>
 801d804:	68c3      	ldr	r3, [r0, #12]
 801d806:	930b      	str	r3, [sp, #44]	; 0x2c
 801d808:	2300      	movs	r3, #0
 801d80a:	60c3      	str	r3, [r0, #12]
 801d80c:	4659      	mov	r1, fp
 801d80e:	f7ff fa2b 	bl	801cc68 <__mcmp>
 801d812:	2800      	cmp	r0, #0
 801d814:	da60      	bge.n	801d8d8 <_strtod_l+0x868>
 801d816:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d818:	ea53 0308 	orrs.w	r3, r3, r8
 801d81c:	f040 8084 	bne.w	801d928 <_strtod_l+0x8b8>
 801d820:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801d824:	2b00      	cmp	r3, #0
 801d826:	d17f      	bne.n	801d928 <_strtod_l+0x8b8>
 801d828:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801d82c:	0d1b      	lsrs	r3, r3, #20
 801d82e:	051b      	lsls	r3, r3, #20
 801d830:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801d834:	d978      	bls.n	801d928 <_strtod_l+0x8b8>
 801d836:	696b      	ldr	r3, [r5, #20]
 801d838:	b913      	cbnz	r3, 801d840 <_strtod_l+0x7d0>
 801d83a:	692b      	ldr	r3, [r5, #16]
 801d83c:	2b01      	cmp	r3, #1
 801d83e:	dd73      	ble.n	801d928 <_strtod_l+0x8b8>
 801d840:	4629      	mov	r1, r5
 801d842:	2201      	movs	r2, #1
 801d844:	4620      	mov	r0, r4
 801d846:	f7ff f9a3 	bl	801cb90 <__lshift>
 801d84a:	4659      	mov	r1, fp
 801d84c:	4605      	mov	r5, r0
 801d84e:	f7ff fa0b 	bl	801cc68 <__mcmp>
 801d852:	2800      	cmp	r0, #0
 801d854:	dd68      	ble.n	801d928 <_strtod_l+0x8b8>
 801d856:	9904      	ldr	r1, [sp, #16]
 801d858:	4a54      	ldr	r2, [pc, #336]	; (801d9ac <_strtod_l+0x93c>)
 801d85a:	464b      	mov	r3, r9
 801d85c:	2900      	cmp	r1, #0
 801d85e:	f000 8084 	beq.w	801d96a <_strtod_l+0x8fa>
 801d862:	ea02 0109 	and.w	r1, r2, r9
 801d866:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801d86a:	dc7e      	bgt.n	801d96a <_strtod_l+0x8fa>
 801d86c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801d870:	f77f aeb3 	ble.w	801d5da <_strtod_l+0x56a>
 801d874:	4b4e      	ldr	r3, [pc, #312]	; (801d9b0 <_strtod_l+0x940>)
 801d876:	4640      	mov	r0, r8
 801d878:	4649      	mov	r1, r9
 801d87a:	2200      	movs	r2, #0
 801d87c:	f7e2 fedc 	bl	8000638 <__aeabi_dmul>
 801d880:	4b4a      	ldr	r3, [pc, #296]	; (801d9ac <_strtod_l+0x93c>)
 801d882:	400b      	ands	r3, r1
 801d884:	4680      	mov	r8, r0
 801d886:	4689      	mov	r9, r1
 801d888:	2b00      	cmp	r3, #0
 801d88a:	f47f ae3f 	bne.w	801d50c <_strtod_l+0x49c>
 801d88e:	2322      	movs	r3, #34	; 0x22
 801d890:	6023      	str	r3, [r4, #0]
 801d892:	e63b      	b.n	801d50c <_strtod_l+0x49c>
 801d894:	f04f 32ff 	mov.w	r2, #4294967295
 801d898:	fa02 f303 	lsl.w	r3, r2, r3
 801d89c:	ea03 0808 	and.w	r8, r3, r8
 801d8a0:	e6e8      	b.n	801d674 <_strtod_l+0x604>
 801d8a2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 801d8a6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801d8aa:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 801d8ae:	36e2      	adds	r6, #226	; 0xe2
 801d8b0:	fa01 f306 	lsl.w	r3, r1, r6
 801d8b4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 801d8b8:	e748      	b.n	801d74c <_strtod_l+0x6dc>
 801d8ba:	2100      	movs	r1, #0
 801d8bc:	2301      	movs	r3, #1
 801d8be:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 801d8c2:	e743      	b.n	801d74c <_strtod_l+0x6dc>
 801d8c4:	9916      	ldr	r1, [sp, #88]	; 0x58
 801d8c6:	4632      	mov	r2, r6
 801d8c8:	4620      	mov	r0, r4
 801d8ca:	f7ff f961 	bl	801cb90 <__lshift>
 801d8ce:	9016      	str	r0, [sp, #88]	; 0x58
 801d8d0:	2800      	cmp	r0, #0
 801d8d2:	f47f af6b 	bne.w	801d7ac <_strtod_l+0x73c>
 801d8d6:	e60f      	b.n	801d4f8 <_strtod_l+0x488>
 801d8d8:	46ca      	mov	sl, r9
 801d8da:	d171      	bne.n	801d9c0 <_strtod_l+0x950>
 801d8dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d8de:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801d8e2:	b352      	cbz	r2, 801d93a <_strtod_l+0x8ca>
 801d8e4:	4a33      	ldr	r2, [pc, #204]	; (801d9b4 <_strtod_l+0x944>)
 801d8e6:	4293      	cmp	r3, r2
 801d8e8:	d12a      	bne.n	801d940 <_strtod_l+0x8d0>
 801d8ea:	9b04      	ldr	r3, [sp, #16]
 801d8ec:	4641      	mov	r1, r8
 801d8ee:	b1fb      	cbz	r3, 801d930 <_strtod_l+0x8c0>
 801d8f0:	4b2e      	ldr	r3, [pc, #184]	; (801d9ac <_strtod_l+0x93c>)
 801d8f2:	ea09 0303 	and.w	r3, r9, r3
 801d8f6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801d8fa:	f04f 32ff 	mov.w	r2, #4294967295
 801d8fe:	d81a      	bhi.n	801d936 <_strtod_l+0x8c6>
 801d900:	0d1b      	lsrs	r3, r3, #20
 801d902:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801d906:	fa02 f303 	lsl.w	r3, r2, r3
 801d90a:	4299      	cmp	r1, r3
 801d90c:	d118      	bne.n	801d940 <_strtod_l+0x8d0>
 801d90e:	4b2a      	ldr	r3, [pc, #168]	; (801d9b8 <_strtod_l+0x948>)
 801d910:	459a      	cmp	sl, r3
 801d912:	d102      	bne.n	801d91a <_strtod_l+0x8aa>
 801d914:	3101      	adds	r1, #1
 801d916:	f43f adef 	beq.w	801d4f8 <_strtod_l+0x488>
 801d91a:	4b24      	ldr	r3, [pc, #144]	; (801d9ac <_strtod_l+0x93c>)
 801d91c:	ea0a 0303 	and.w	r3, sl, r3
 801d920:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 801d924:	f04f 0800 	mov.w	r8, #0
 801d928:	9b04      	ldr	r3, [sp, #16]
 801d92a:	2b00      	cmp	r3, #0
 801d92c:	d1a2      	bne.n	801d874 <_strtod_l+0x804>
 801d92e:	e5ed      	b.n	801d50c <_strtod_l+0x49c>
 801d930:	f04f 33ff 	mov.w	r3, #4294967295
 801d934:	e7e9      	b.n	801d90a <_strtod_l+0x89a>
 801d936:	4613      	mov	r3, r2
 801d938:	e7e7      	b.n	801d90a <_strtod_l+0x89a>
 801d93a:	ea53 0308 	orrs.w	r3, r3, r8
 801d93e:	d08a      	beq.n	801d856 <_strtod_l+0x7e6>
 801d940:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d942:	b1e3      	cbz	r3, 801d97e <_strtod_l+0x90e>
 801d944:	ea13 0f0a 	tst.w	r3, sl
 801d948:	d0ee      	beq.n	801d928 <_strtod_l+0x8b8>
 801d94a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d94c:	9a04      	ldr	r2, [sp, #16]
 801d94e:	4640      	mov	r0, r8
 801d950:	4649      	mov	r1, r9
 801d952:	b1c3      	cbz	r3, 801d986 <_strtod_l+0x916>
 801d954:	f7ff fb6f 	bl	801d036 <sulp>
 801d958:	4602      	mov	r2, r0
 801d95a:	460b      	mov	r3, r1
 801d95c:	ec51 0b18 	vmov	r0, r1, d8
 801d960:	f7e2 fcb4 	bl	80002cc <__adddf3>
 801d964:	4680      	mov	r8, r0
 801d966:	4689      	mov	r9, r1
 801d968:	e7de      	b.n	801d928 <_strtod_l+0x8b8>
 801d96a:	4013      	ands	r3, r2
 801d96c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801d970:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801d974:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 801d978:	f04f 38ff 	mov.w	r8, #4294967295
 801d97c:	e7d4      	b.n	801d928 <_strtod_l+0x8b8>
 801d97e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d980:	ea13 0f08 	tst.w	r3, r8
 801d984:	e7e0      	b.n	801d948 <_strtod_l+0x8d8>
 801d986:	f7ff fb56 	bl	801d036 <sulp>
 801d98a:	4602      	mov	r2, r0
 801d98c:	460b      	mov	r3, r1
 801d98e:	ec51 0b18 	vmov	r0, r1, d8
 801d992:	f7e2 fc99 	bl	80002c8 <__aeabi_dsub>
 801d996:	2200      	movs	r2, #0
 801d998:	2300      	movs	r3, #0
 801d99a:	4680      	mov	r8, r0
 801d99c:	4689      	mov	r9, r1
 801d99e:	f7e3 f8b3 	bl	8000b08 <__aeabi_dcmpeq>
 801d9a2:	2800      	cmp	r0, #0
 801d9a4:	d0c0      	beq.n	801d928 <_strtod_l+0x8b8>
 801d9a6:	e618      	b.n	801d5da <_strtod_l+0x56a>
 801d9a8:	fffffc02 	.word	0xfffffc02
 801d9ac:	7ff00000 	.word	0x7ff00000
 801d9b0:	39500000 	.word	0x39500000
 801d9b4:	000fffff 	.word	0x000fffff
 801d9b8:	7fefffff 	.word	0x7fefffff
 801d9bc:	080259f8 	.word	0x080259f8
 801d9c0:	4659      	mov	r1, fp
 801d9c2:	4628      	mov	r0, r5
 801d9c4:	f7ff fac0 	bl	801cf48 <__ratio>
 801d9c8:	ec57 6b10 	vmov	r6, r7, d0
 801d9cc:	ee10 0a10 	vmov	r0, s0
 801d9d0:	2200      	movs	r2, #0
 801d9d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801d9d6:	4639      	mov	r1, r7
 801d9d8:	f7e3 f8aa 	bl	8000b30 <__aeabi_dcmple>
 801d9dc:	2800      	cmp	r0, #0
 801d9de:	d071      	beq.n	801dac4 <_strtod_l+0xa54>
 801d9e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d9e2:	2b00      	cmp	r3, #0
 801d9e4:	d17c      	bne.n	801dae0 <_strtod_l+0xa70>
 801d9e6:	f1b8 0f00 	cmp.w	r8, #0
 801d9ea:	d15a      	bne.n	801daa2 <_strtod_l+0xa32>
 801d9ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801d9f0:	2b00      	cmp	r3, #0
 801d9f2:	d15d      	bne.n	801dab0 <_strtod_l+0xa40>
 801d9f4:	4b90      	ldr	r3, [pc, #576]	; (801dc38 <_strtod_l+0xbc8>)
 801d9f6:	2200      	movs	r2, #0
 801d9f8:	4630      	mov	r0, r6
 801d9fa:	4639      	mov	r1, r7
 801d9fc:	f7e3 f88e 	bl	8000b1c <__aeabi_dcmplt>
 801da00:	2800      	cmp	r0, #0
 801da02:	d15c      	bne.n	801dabe <_strtod_l+0xa4e>
 801da04:	4630      	mov	r0, r6
 801da06:	4639      	mov	r1, r7
 801da08:	4b8c      	ldr	r3, [pc, #560]	; (801dc3c <_strtod_l+0xbcc>)
 801da0a:	2200      	movs	r2, #0
 801da0c:	f7e2 fe14 	bl	8000638 <__aeabi_dmul>
 801da10:	4606      	mov	r6, r0
 801da12:	460f      	mov	r7, r1
 801da14:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 801da18:	9606      	str	r6, [sp, #24]
 801da1a:	9307      	str	r3, [sp, #28]
 801da1c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801da20:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801da24:	4b86      	ldr	r3, [pc, #536]	; (801dc40 <_strtod_l+0xbd0>)
 801da26:	ea0a 0303 	and.w	r3, sl, r3
 801da2a:	930d      	str	r3, [sp, #52]	; 0x34
 801da2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801da2e:	4b85      	ldr	r3, [pc, #532]	; (801dc44 <_strtod_l+0xbd4>)
 801da30:	429a      	cmp	r2, r3
 801da32:	f040 8090 	bne.w	801db56 <_strtod_l+0xae6>
 801da36:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 801da3a:	ec49 8b10 	vmov	d0, r8, r9
 801da3e:	f7ff f9b9 	bl	801cdb4 <__ulp>
 801da42:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801da46:	ec51 0b10 	vmov	r0, r1, d0
 801da4a:	f7e2 fdf5 	bl	8000638 <__aeabi_dmul>
 801da4e:	4642      	mov	r2, r8
 801da50:	464b      	mov	r3, r9
 801da52:	f7e2 fc3b 	bl	80002cc <__adddf3>
 801da56:	460b      	mov	r3, r1
 801da58:	4979      	ldr	r1, [pc, #484]	; (801dc40 <_strtod_l+0xbd0>)
 801da5a:	4a7b      	ldr	r2, [pc, #492]	; (801dc48 <_strtod_l+0xbd8>)
 801da5c:	4019      	ands	r1, r3
 801da5e:	4291      	cmp	r1, r2
 801da60:	4680      	mov	r8, r0
 801da62:	d944      	bls.n	801daee <_strtod_l+0xa7e>
 801da64:	ee18 2a90 	vmov	r2, s17
 801da68:	4b78      	ldr	r3, [pc, #480]	; (801dc4c <_strtod_l+0xbdc>)
 801da6a:	429a      	cmp	r2, r3
 801da6c:	d104      	bne.n	801da78 <_strtod_l+0xa08>
 801da6e:	ee18 3a10 	vmov	r3, s16
 801da72:	3301      	adds	r3, #1
 801da74:	f43f ad40 	beq.w	801d4f8 <_strtod_l+0x488>
 801da78:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 801dc4c <_strtod_l+0xbdc>
 801da7c:	f04f 38ff 	mov.w	r8, #4294967295
 801da80:	9916      	ldr	r1, [sp, #88]	; 0x58
 801da82:	4620      	mov	r0, r4
 801da84:	f7fe fe6a 	bl	801c75c <_Bfree>
 801da88:	9905      	ldr	r1, [sp, #20]
 801da8a:	4620      	mov	r0, r4
 801da8c:	f7fe fe66 	bl	801c75c <_Bfree>
 801da90:	4659      	mov	r1, fp
 801da92:	4620      	mov	r0, r4
 801da94:	f7fe fe62 	bl	801c75c <_Bfree>
 801da98:	4629      	mov	r1, r5
 801da9a:	4620      	mov	r0, r4
 801da9c:	f7fe fe5e 	bl	801c75c <_Bfree>
 801daa0:	e609      	b.n	801d6b6 <_strtod_l+0x646>
 801daa2:	f1b8 0f01 	cmp.w	r8, #1
 801daa6:	d103      	bne.n	801dab0 <_strtod_l+0xa40>
 801daa8:	f1b9 0f00 	cmp.w	r9, #0
 801daac:	f43f ad95 	beq.w	801d5da <_strtod_l+0x56a>
 801dab0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 801dc08 <_strtod_l+0xb98>
 801dab4:	4f60      	ldr	r7, [pc, #384]	; (801dc38 <_strtod_l+0xbc8>)
 801dab6:	ed8d 7b06 	vstr	d7, [sp, #24]
 801daba:	2600      	movs	r6, #0
 801dabc:	e7ae      	b.n	801da1c <_strtod_l+0x9ac>
 801dabe:	4f5f      	ldr	r7, [pc, #380]	; (801dc3c <_strtod_l+0xbcc>)
 801dac0:	2600      	movs	r6, #0
 801dac2:	e7a7      	b.n	801da14 <_strtod_l+0x9a4>
 801dac4:	4b5d      	ldr	r3, [pc, #372]	; (801dc3c <_strtod_l+0xbcc>)
 801dac6:	4630      	mov	r0, r6
 801dac8:	4639      	mov	r1, r7
 801daca:	2200      	movs	r2, #0
 801dacc:	f7e2 fdb4 	bl	8000638 <__aeabi_dmul>
 801dad0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dad2:	4606      	mov	r6, r0
 801dad4:	460f      	mov	r7, r1
 801dad6:	2b00      	cmp	r3, #0
 801dad8:	d09c      	beq.n	801da14 <_strtod_l+0x9a4>
 801dada:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801dade:	e79d      	b.n	801da1c <_strtod_l+0x9ac>
 801dae0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 801dc10 <_strtod_l+0xba0>
 801dae4:	ed8d 7b06 	vstr	d7, [sp, #24]
 801dae8:	ec57 6b17 	vmov	r6, r7, d7
 801daec:	e796      	b.n	801da1c <_strtod_l+0x9ac>
 801daee:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801daf2:	9b04      	ldr	r3, [sp, #16]
 801daf4:	46ca      	mov	sl, r9
 801daf6:	2b00      	cmp	r3, #0
 801daf8:	d1c2      	bne.n	801da80 <_strtod_l+0xa10>
 801dafa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801dafe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801db00:	0d1b      	lsrs	r3, r3, #20
 801db02:	051b      	lsls	r3, r3, #20
 801db04:	429a      	cmp	r2, r3
 801db06:	d1bb      	bne.n	801da80 <_strtod_l+0xa10>
 801db08:	4630      	mov	r0, r6
 801db0a:	4639      	mov	r1, r7
 801db0c:	f7e3 f8f4 	bl	8000cf8 <__aeabi_d2lz>
 801db10:	f7e2 fd64 	bl	80005dc <__aeabi_l2d>
 801db14:	4602      	mov	r2, r0
 801db16:	460b      	mov	r3, r1
 801db18:	4630      	mov	r0, r6
 801db1a:	4639      	mov	r1, r7
 801db1c:	f7e2 fbd4 	bl	80002c8 <__aeabi_dsub>
 801db20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801db22:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801db26:	ea43 0308 	orr.w	r3, r3, r8
 801db2a:	4313      	orrs	r3, r2
 801db2c:	4606      	mov	r6, r0
 801db2e:	460f      	mov	r7, r1
 801db30:	d054      	beq.n	801dbdc <_strtod_l+0xb6c>
 801db32:	a339      	add	r3, pc, #228	; (adr r3, 801dc18 <_strtod_l+0xba8>)
 801db34:	e9d3 2300 	ldrd	r2, r3, [r3]
 801db38:	f7e2 fff0 	bl	8000b1c <__aeabi_dcmplt>
 801db3c:	2800      	cmp	r0, #0
 801db3e:	f47f ace5 	bne.w	801d50c <_strtod_l+0x49c>
 801db42:	a337      	add	r3, pc, #220	; (adr r3, 801dc20 <_strtod_l+0xbb0>)
 801db44:	e9d3 2300 	ldrd	r2, r3, [r3]
 801db48:	4630      	mov	r0, r6
 801db4a:	4639      	mov	r1, r7
 801db4c:	f7e3 f804 	bl	8000b58 <__aeabi_dcmpgt>
 801db50:	2800      	cmp	r0, #0
 801db52:	d095      	beq.n	801da80 <_strtod_l+0xa10>
 801db54:	e4da      	b.n	801d50c <_strtod_l+0x49c>
 801db56:	9b04      	ldr	r3, [sp, #16]
 801db58:	b333      	cbz	r3, 801dba8 <_strtod_l+0xb38>
 801db5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801db5c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801db60:	d822      	bhi.n	801dba8 <_strtod_l+0xb38>
 801db62:	a331      	add	r3, pc, #196	; (adr r3, 801dc28 <_strtod_l+0xbb8>)
 801db64:	e9d3 2300 	ldrd	r2, r3, [r3]
 801db68:	4630      	mov	r0, r6
 801db6a:	4639      	mov	r1, r7
 801db6c:	f7e2 ffe0 	bl	8000b30 <__aeabi_dcmple>
 801db70:	b1a0      	cbz	r0, 801db9c <_strtod_l+0xb2c>
 801db72:	4639      	mov	r1, r7
 801db74:	4630      	mov	r0, r6
 801db76:	f7e3 f837 	bl	8000be8 <__aeabi_d2uiz>
 801db7a:	2801      	cmp	r0, #1
 801db7c:	bf38      	it	cc
 801db7e:	2001      	movcc	r0, #1
 801db80:	f7e2 fce0 	bl	8000544 <__aeabi_ui2d>
 801db84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801db86:	4606      	mov	r6, r0
 801db88:	460f      	mov	r7, r1
 801db8a:	bb23      	cbnz	r3, 801dbd6 <_strtod_l+0xb66>
 801db8c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801db90:	9010      	str	r0, [sp, #64]	; 0x40
 801db92:	9311      	str	r3, [sp, #68]	; 0x44
 801db94:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801db98:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801db9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801db9e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801dba0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801dba4:	1a9b      	subs	r3, r3, r2
 801dba6:	930f      	str	r3, [sp, #60]	; 0x3c
 801dba8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801dbac:	eeb0 0a48 	vmov.f32	s0, s16
 801dbb0:	eef0 0a68 	vmov.f32	s1, s17
 801dbb4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801dbb8:	f7ff f8fc 	bl	801cdb4 <__ulp>
 801dbbc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801dbc0:	ec53 2b10 	vmov	r2, r3, d0
 801dbc4:	f7e2 fd38 	bl	8000638 <__aeabi_dmul>
 801dbc8:	ec53 2b18 	vmov	r2, r3, d8
 801dbcc:	f7e2 fb7e 	bl	80002cc <__adddf3>
 801dbd0:	4680      	mov	r8, r0
 801dbd2:	4689      	mov	r9, r1
 801dbd4:	e78d      	b.n	801daf2 <_strtod_l+0xa82>
 801dbd6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801dbda:	e7db      	b.n	801db94 <_strtod_l+0xb24>
 801dbdc:	a314      	add	r3, pc, #80	; (adr r3, 801dc30 <_strtod_l+0xbc0>)
 801dbde:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dbe2:	f7e2 ff9b 	bl	8000b1c <__aeabi_dcmplt>
 801dbe6:	e7b3      	b.n	801db50 <_strtod_l+0xae0>
 801dbe8:	2300      	movs	r3, #0
 801dbea:	930a      	str	r3, [sp, #40]	; 0x28
 801dbec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801dbee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801dbf0:	6013      	str	r3, [r2, #0]
 801dbf2:	f7ff ba7c 	b.w	801d0ee <_strtod_l+0x7e>
 801dbf6:	2a65      	cmp	r2, #101	; 0x65
 801dbf8:	f43f ab75 	beq.w	801d2e6 <_strtod_l+0x276>
 801dbfc:	2a45      	cmp	r2, #69	; 0x45
 801dbfe:	f43f ab72 	beq.w	801d2e6 <_strtod_l+0x276>
 801dc02:	2301      	movs	r3, #1
 801dc04:	f7ff bbaa 	b.w	801d35c <_strtod_l+0x2ec>
 801dc08:	00000000 	.word	0x00000000
 801dc0c:	bff00000 	.word	0xbff00000
 801dc10:	00000000 	.word	0x00000000
 801dc14:	3ff00000 	.word	0x3ff00000
 801dc18:	94a03595 	.word	0x94a03595
 801dc1c:	3fdfffff 	.word	0x3fdfffff
 801dc20:	35afe535 	.word	0x35afe535
 801dc24:	3fe00000 	.word	0x3fe00000
 801dc28:	ffc00000 	.word	0xffc00000
 801dc2c:	41dfffff 	.word	0x41dfffff
 801dc30:	94a03595 	.word	0x94a03595
 801dc34:	3fcfffff 	.word	0x3fcfffff
 801dc38:	3ff00000 	.word	0x3ff00000
 801dc3c:	3fe00000 	.word	0x3fe00000
 801dc40:	7ff00000 	.word	0x7ff00000
 801dc44:	7fe00000 	.word	0x7fe00000
 801dc48:	7c9fffff 	.word	0x7c9fffff
 801dc4c:	7fefffff 	.word	0x7fefffff

0801dc50 <_strtod_r>:
 801dc50:	4b01      	ldr	r3, [pc, #4]	; (801dc58 <_strtod_r+0x8>)
 801dc52:	f7ff ba0d 	b.w	801d070 <_strtod_l>
 801dc56:	bf00      	nop
 801dc58:	200001c4 	.word	0x200001c4

0801dc5c <_strtol_l.constprop.0>:
 801dc5c:	2b01      	cmp	r3, #1
 801dc5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dc62:	d001      	beq.n	801dc68 <_strtol_l.constprop.0+0xc>
 801dc64:	2b24      	cmp	r3, #36	; 0x24
 801dc66:	d906      	bls.n	801dc76 <_strtol_l.constprop.0+0x1a>
 801dc68:	f7fd fe2e 	bl	801b8c8 <__errno>
 801dc6c:	2316      	movs	r3, #22
 801dc6e:	6003      	str	r3, [r0, #0]
 801dc70:	2000      	movs	r0, #0
 801dc72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dc76:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801dd5c <_strtol_l.constprop.0+0x100>
 801dc7a:	460d      	mov	r5, r1
 801dc7c:	462e      	mov	r6, r5
 801dc7e:	f815 4b01 	ldrb.w	r4, [r5], #1
 801dc82:	f81c 7004 	ldrb.w	r7, [ip, r4]
 801dc86:	f017 0708 	ands.w	r7, r7, #8
 801dc8a:	d1f7      	bne.n	801dc7c <_strtol_l.constprop.0+0x20>
 801dc8c:	2c2d      	cmp	r4, #45	; 0x2d
 801dc8e:	d132      	bne.n	801dcf6 <_strtol_l.constprop.0+0x9a>
 801dc90:	782c      	ldrb	r4, [r5, #0]
 801dc92:	2701      	movs	r7, #1
 801dc94:	1cb5      	adds	r5, r6, #2
 801dc96:	2b00      	cmp	r3, #0
 801dc98:	d05b      	beq.n	801dd52 <_strtol_l.constprop.0+0xf6>
 801dc9a:	2b10      	cmp	r3, #16
 801dc9c:	d109      	bne.n	801dcb2 <_strtol_l.constprop.0+0x56>
 801dc9e:	2c30      	cmp	r4, #48	; 0x30
 801dca0:	d107      	bne.n	801dcb2 <_strtol_l.constprop.0+0x56>
 801dca2:	782c      	ldrb	r4, [r5, #0]
 801dca4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801dca8:	2c58      	cmp	r4, #88	; 0x58
 801dcaa:	d14d      	bne.n	801dd48 <_strtol_l.constprop.0+0xec>
 801dcac:	786c      	ldrb	r4, [r5, #1]
 801dcae:	2310      	movs	r3, #16
 801dcb0:	3502      	adds	r5, #2
 801dcb2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801dcb6:	f108 38ff 	add.w	r8, r8, #4294967295
 801dcba:	f04f 0e00 	mov.w	lr, #0
 801dcbe:	fbb8 f9f3 	udiv	r9, r8, r3
 801dcc2:	4676      	mov	r6, lr
 801dcc4:	fb03 8a19 	mls	sl, r3, r9, r8
 801dcc8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801dccc:	f1bc 0f09 	cmp.w	ip, #9
 801dcd0:	d816      	bhi.n	801dd00 <_strtol_l.constprop.0+0xa4>
 801dcd2:	4664      	mov	r4, ip
 801dcd4:	42a3      	cmp	r3, r4
 801dcd6:	dd24      	ble.n	801dd22 <_strtol_l.constprop.0+0xc6>
 801dcd8:	f1be 3fff 	cmp.w	lr, #4294967295
 801dcdc:	d008      	beq.n	801dcf0 <_strtol_l.constprop.0+0x94>
 801dcde:	45b1      	cmp	r9, r6
 801dce0:	d31c      	bcc.n	801dd1c <_strtol_l.constprop.0+0xc0>
 801dce2:	d101      	bne.n	801dce8 <_strtol_l.constprop.0+0x8c>
 801dce4:	45a2      	cmp	sl, r4
 801dce6:	db19      	blt.n	801dd1c <_strtol_l.constprop.0+0xc0>
 801dce8:	fb06 4603 	mla	r6, r6, r3, r4
 801dcec:	f04f 0e01 	mov.w	lr, #1
 801dcf0:	f815 4b01 	ldrb.w	r4, [r5], #1
 801dcf4:	e7e8      	b.n	801dcc8 <_strtol_l.constprop.0+0x6c>
 801dcf6:	2c2b      	cmp	r4, #43	; 0x2b
 801dcf8:	bf04      	itt	eq
 801dcfa:	782c      	ldrbeq	r4, [r5, #0]
 801dcfc:	1cb5      	addeq	r5, r6, #2
 801dcfe:	e7ca      	b.n	801dc96 <_strtol_l.constprop.0+0x3a>
 801dd00:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801dd04:	f1bc 0f19 	cmp.w	ip, #25
 801dd08:	d801      	bhi.n	801dd0e <_strtol_l.constprop.0+0xb2>
 801dd0a:	3c37      	subs	r4, #55	; 0x37
 801dd0c:	e7e2      	b.n	801dcd4 <_strtol_l.constprop.0+0x78>
 801dd0e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801dd12:	f1bc 0f19 	cmp.w	ip, #25
 801dd16:	d804      	bhi.n	801dd22 <_strtol_l.constprop.0+0xc6>
 801dd18:	3c57      	subs	r4, #87	; 0x57
 801dd1a:	e7db      	b.n	801dcd4 <_strtol_l.constprop.0+0x78>
 801dd1c:	f04f 3eff 	mov.w	lr, #4294967295
 801dd20:	e7e6      	b.n	801dcf0 <_strtol_l.constprop.0+0x94>
 801dd22:	f1be 3fff 	cmp.w	lr, #4294967295
 801dd26:	d105      	bne.n	801dd34 <_strtol_l.constprop.0+0xd8>
 801dd28:	2322      	movs	r3, #34	; 0x22
 801dd2a:	6003      	str	r3, [r0, #0]
 801dd2c:	4646      	mov	r6, r8
 801dd2e:	b942      	cbnz	r2, 801dd42 <_strtol_l.constprop.0+0xe6>
 801dd30:	4630      	mov	r0, r6
 801dd32:	e79e      	b.n	801dc72 <_strtol_l.constprop.0+0x16>
 801dd34:	b107      	cbz	r7, 801dd38 <_strtol_l.constprop.0+0xdc>
 801dd36:	4276      	negs	r6, r6
 801dd38:	2a00      	cmp	r2, #0
 801dd3a:	d0f9      	beq.n	801dd30 <_strtol_l.constprop.0+0xd4>
 801dd3c:	f1be 0f00 	cmp.w	lr, #0
 801dd40:	d000      	beq.n	801dd44 <_strtol_l.constprop.0+0xe8>
 801dd42:	1e69      	subs	r1, r5, #1
 801dd44:	6011      	str	r1, [r2, #0]
 801dd46:	e7f3      	b.n	801dd30 <_strtol_l.constprop.0+0xd4>
 801dd48:	2430      	movs	r4, #48	; 0x30
 801dd4a:	2b00      	cmp	r3, #0
 801dd4c:	d1b1      	bne.n	801dcb2 <_strtol_l.constprop.0+0x56>
 801dd4e:	2308      	movs	r3, #8
 801dd50:	e7af      	b.n	801dcb2 <_strtol_l.constprop.0+0x56>
 801dd52:	2c30      	cmp	r4, #48	; 0x30
 801dd54:	d0a5      	beq.n	801dca2 <_strtol_l.constprop.0+0x46>
 801dd56:	230a      	movs	r3, #10
 801dd58:	e7ab      	b.n	801dcb2 <_strtol_l.constprop.0+0x56>
 801dd5a:	bf00      	nop
 801dd5c:	08025a21 	.word	0x08025a21

0801dd60 <_strtol_r>:
 801dd60:	f7ff bf7c 	b.w	801dc5c <_strtol_l.constprop.0>

0801dd64 <__ssputs_r>:
 801dd64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dd68:	688e      	ldr	r6, [r1, #8]
 801dd6a:	461f      	mov	r7, r3
 801dd6c:	42be      	cmp	r6, r7
 801dd6e:	680b      	ldr	r3, [r1, #0]
 801dd70:	4682      	mov	sl, r0
 801dd72:	460c      	mov	r4, r1
 801dd74:	4690      	mov	r8, r2
 801dd76:	d82c      	bhi.n	801ddd2 <__ssputs_r+0x6e>
 801dd78:	898a      	ldrh	r2, [r1, #12]
 801dd7a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801dd7e:	d026      	beq.n	801ddce <__ssputs_r+0x6a>
 801dd80:	6965      	ldr	r5, [r4, #20]
 801dd82:	6909      	ldr	r1, [r1, #16]
 801dd84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801dd88:	eba3 0901 	sub.w	r9, r3, r1
 801dd8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801dd90:	1c7b      	adds	r3, r7, #1
 801dd92:	444b      	add	r3, r9
 801dd94:	106d      	asrs	r5, r5, #1
 801dd96:	429d      	cmp	r5, r3
 801dd98:	bf38      	it	cc
 801dd9a:	461d      	movcc	r5, r3
 801dd9c:	0553      	lsls	r3, r2, #21
 801dd9e:	d527      	bpl.n	801ddf0 <__ssputs_r+0x8c>
 801dda0:	4629      	mov	r1, r5
 801dda2:	f7fc fc17 	bl	801a5d4 <_malloc_r>
 801dda6:	4606      	mov	r6, r0
 801dda8:	b360      	cbz	r0, 801de04 <__ssputs_r+0xa0>
 801ddaa:	6921      	ldr	r1, [r4, #16]
 801ddac:	464a      	mov	r2, r9
 801ddae:	f7fd fdb8 	bl	801b922 <memcpy>
 801ddb2:	89a3      	ldrh	r3, [r4, #12]
 801ddb4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801ddb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ddbc:	81a3      	strh	r3, [r4, #12]
 801ddbe:	6126      	str	r6, [r4, #16]
 801ddc0:	6165      	str	r5, [r4, #20]
 801ddc2:	444e      	add	r6, r9
 801ddc4:	eba5 0509 	sub.w	r5, r5, r9
 801ddc8:	6026      	str	r6, [r4, #0]
 801ddca:	60a5      	str	r5, [r4, #8]
 801ddcc:	463e      	mov	r6, r7
 801ddce:	42be      	cmp	r6, r7
 801ddd0:	d900      	bls.n	801ddd4 <__ssputs_r+0x70>
 801ddd2:	463e      	mov	r6, r7
 801ddd4:	6820      	ldr	r0, [r4, #0]
 801ddd6:	4632      	mov	r2, r6
 801ddd8:	4641      	mov	r1, r8
 801ddda:	f000 fb6f 	bl	801e4bc <memmove>
 801ddde:	68a3      	ldr	r3, [r4, #8]
 801dde0:	1b9b      	subs	r3, r3, r6
 801dde2:	60a3      	str	r3, [r4, #8]
 801dde4:	6823      	ldr	r3, [r4, #0]
 801dde6:	4433      	add	r3, r6
 801dde8:	6023      	str	r3, [r4, #0]
 801ddea:	2000      	movs	r0, #0
 801ddec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ddf0:	462a      	mov	r2, r5
 801ddf2:	f000 ff38 	bl	801ec66 <_realloc_r>
 801ddf6:	4606      	mov	r6, r0
 801ddf8:	2800      	cmp	r0, #0
 801ddfa:	d1e0      	bne.n	801ddbe <__ssputs_r+0x5a>
 801ddfc:	6921      	ldr	r1, [r4, #16]
 801ddfe:	4650      	mov	r0, sl
 801de00:	f7fe fc20 	bl	801c644 <_free_r>
 801de04:	230c      	movs	r3, #12
 801de06:	f8ca 3000 	str.w	r3, [sl]
 801de0a:	89a3      	ldrh	r3, [r4, #12]
 801de0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801de10:	81a3      	strh	r3, [r4, #12]
 801de12:	f04f 30ff 	mov.w	r0, #4294967295
 801de16:	e7e9      	b.n	801ddec <__ssputs_r+0x88>

0801de18 <_svfiprintf_r>:
 801de18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de1c:	4698      	mov	r8, r3
 801de1e:	898b      	ldrh	r3, [r1, #12]
 801de20:	061b      	lsls	r3, r3, #24
 801de22:	b09d      	sub	sp, #116	; 0x74
 801de24:	4607      	mov	r7, r0
 801de26:	460d      	mov	r5, r1
 801de28:	4614      	mov	r4, r2
 801de2a:	d50e      	bpl.n	801de4a <_svfiprintf_r+0x32>
 801de2c:	690b      	ldr	r3, [r1, #16]
 801de2e:	b963      	cbnz	r3, 801de4a <_svfiprintf_r+0x32>
 801de30:	2140      	movs	r1, #64	; 0x40
 801de32:	f7fc fbcf 	bl	801a5d4 <_malloc_r>
 801de36:	6028      	str	r0, [r5, #0]
 801de38:	6128      	str	r0, [r5, #16]
 801de3a:	b920      	cbnz	r0, 801de46 <_svfiprintf_r+0x2e>
 801de3c:	230c      	movs	r3, #12
 801de3e:	603b      	str	r3, [r7, #0]
 801de40:	f04f 30ff 	mov.w	r0, #4294967295
 801de44:	e0d0      	b.n	801dfe8 <_svfiprintf_r+0x1d0>
 801de46:	2340      	movs	r3, #64	; 0x40
 801de48:	616b      	str	r3, [r5, #20]
 801de4a:	2300      	movs	r3, #0
 801de4c:	9309      	str	r3, [sp, #36]	; 0x24
 801de4e:	2320      	movs	r3, #32
 801de50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801de54:	f8cd 800c 	str.w	r8, [sp, #12]
 801de58:	2330      	movs	r3, #48	; 0x30
 801de5a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801e000 <_svfiprintf_r+0x1e8>
 801de5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801de62:	f04f 0901 	mov.w	r9, #1
 801de66:	4623      	mov	r3, r4
 801de68:	469a      	mov	sl, r3
 801de6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801de6e:	b10a      	cbz	r2, 801de74 <_svfiprintf_r+0x5c>
 801de70:	2a25      	cmp	r2, #37	; 0x25
 801de72:	d1f9      	bne.n	801de68 <_svfiprintf_r+0x50>
 801de74:	ebba 0b04 	subs.w	fp, sl, r4
 801de78:	d00b      	beq.n	801de92 <_svfiprintf_r+0x7a>
 801de7a:	465b      	mov	r3, fp
 801de7c:	4622      	mov	r2, r4
 801de7e:	4629      	mov	r1, r5
 801de80:	4638      	mov	r0, r7
 801de82:	f7ff ff6f 	bl	801dd64 <__ssputs_r>
 801de86:	3001      	adds	r0, #1
 801de88:	f000 80a9 	beq.w	801dfde <_svfiprintf_r+0x1c6>
 801de8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801de8e:	445a      	add	r2, fp
 801de90:	9209      	str	r2, [sp, #36]	; 0x24
 801de92:	f89a 3000 	ldrb.w	r3, [sl]
 801de96:	2b00      	cmp	r3, #0
 801de98:	f000 80a1 	beq.w	801dfde <_svfiprintf_r+0x1c6>
 801de9c:	2300      	movs	r3, #0
 801de9e:	f04f 32ff 	mov.w	r2, #4294967295
 801dea2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801dea6:	f10a 0a01 	add.w	sl, sl, #1
 801deaa:	9304      	str	r3, [sp, #16]
 801deac:	9307      	str	r3, [sp, #28]
 801deae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801deb2:	931a      	str	r3, [sp, #104]	; 0x68
 801deb4:	4654      	mov	r4, sl
 801deb6:	2205      	movs	r2, #5
 801deb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801debc:	4850      	ldr	r0, [pc, #320]	; (801e000 <_svfiprintf_r+0x1e8>)
 801debe:	f7e2 f9a7 	bl	8000210 <memchr>
 801dec2:	9a04      	ldr	r2, [sp, #16]
 801dec4:	b9d8      	cbnz	r0, 801defe <_svfiprintf_r+0xe6>
 801dec6:	06d0      	lsls	r0, r2, #27
 801dec8:	bf44      	itt	mi
 801deca:	2320      	movmi	r3, #32
 801decc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ded0:	0711      	lsls	r1, r2, #28
 801ded2:	bf44      	itt	mi
 801ded4:	232b      	movmi	r3, #43	; 0x2b
 801ded6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801deda:	f89a 3000 	ldrb.w	r3, [sl]
 801dede:	2b2a      	cmp	r3, #42	; 0x2a
 801dee0:	d015      	beq.n	801df0e <_svfiprintf_r+0xf6>
 801dee2:	9a07      	ldr	r2, [sp, #28]
 801dee4:	4654      	mov	r4, sl
 801dee6:	2000      	movs	r0, #0
 801dee8:	f04f 0c0a 	mov.w	ip, #10
 801deec:	4621      	mov	r1, r4
 801deee:	f811 3b01 	ldrb.w	r3, [r1], #1
 801def2:	3b30      	subs	r3, #48	; 0x30
 801def4:	2b09      	cmp	r3, #9
 801def6:	d94d      	bls.n	801df94 <_svfiprintf_r+0x17c>
 801def8:	b1b0      	cbz	r0, 801df28 <_svfiprintf_r+0x110>
 801defa:	9207      	str	r2, [sp, #28]
 801defc:	e014      	b.n	801df28 <_svfiprintf_r+0x110>
 801defe:	eba0 0308 	sub.w	r3, r0, r8
 801df02:	fa09 f303 	lsl.w	r3, r9, r3
 801df06:	4313      	orrs	r3, r2
 801df08:	9304      	str	r3, [sp, #16]
 801df0a:	46a2      	mov	sl, r4
 801df0c:	e7d2      	b.n	801deb4 <_svfiprintf_r+0x9c>
 801df0e:	9b03      	ldr	r3, [sp, #12]
 801df10:	1d19      	adds	r1, r3, #4
 801df12:	681b      	ldr	r3, [r3, #0]
 801df14:	9103      	str	r1, [sp, #12]
 801df16:	2b00      	cmp	r3, #0
 801df18:	bfbb      	ittet	lt
 801df1a:	425b      	neglt	r3, r3
 801df1c:	f042 0202 	orrlt.w	r2, r2, #2
 801df20:	9307      	strge	r3, [sp, #28]
 801df22:	9307      	strlt	r3, [sp, #28]
 801df24:	bfb8      	it	lt
 801df26:	9204      	strlt	r2, [sp, #16]
 801df28:	7823      	ldrb	r3, [r4, #0]
 801df2a:	2b2e      	cmp	r3, #46	; 0x2e
 801df2c:	d10c      	bne.n	801df48 <_svfiprintf_r+0x130>
 801df2e:	7863      	ldrb	r3, [r4, #1]
 801df30:	2b2a      	cmp	r3, #42	; 0x2a
 801df32:	d134      	bne.n	801df9e <_svfiprintf_r+0x186>
 801df34:	9b03      	ldr	r3, [sp, #12]
 801df36:	1d1a      	adds	r2, r3, #4
 801df38:	681b      	ldr	r3, [r3, #0]
 801df3a:	9203      	str	r2, [sp, #12]
 801df3c:	2b00      	cmp	r3, #0
 801df3e:	bfb8      	it	lt
 801df40:	f04f 33ff 	movlt.w	r3, #4294967295
 801df44:	3402      	adds	r4, #2
 801df46:	9305      	str	r3, [sp, #20]
 801df48:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801e010 <_svfiprintf_r+0x1f8>
 801df4c:	7821      	ldrb	r1, [r4, #0]
 801df4e:	2203      	movs	r2, #3
 801df50:	4650      	mov	r0, sl
 801df52:	f7e2 f95d 	bl	8000210 <memchr>
 801df56:	b138      	cbz	r0, 801df68 <_svfiprintf_r+0x150>
 801df58:	9b04      	ldr	r3, [sp, #16]
 801df5a:	eba0 000a 	sub.w	r0, r0, sl
 801df5e:	2240      	movs	r2, #64	; 0x40
 801df60:	4082      	lsls	r2, r0
 801df62:	4313      	orrs	r3, r2
 801df64:	3401      	adds	r4, #1
 801df66:	9304      	str	r3, [sp, #16]
 801df68:	f814 1b01 	ldrb.w	r1, [r4], #1
 801df6c:	4825      	ldr	r0, [pc, #148]	; (801e004 <_svfiprintf_r+0x1ec>)
 801df6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801df72:	2206      	movs	r2, #6
 801df74:	f7e2 f94c 	bl	8000210 <memchr>
 801df78:	2800      	cmp	r0, #0
 801df7a:	d038      	beq.n	801dfee <_svfiprintf_r+0x1d6>
 801df7c:	4b22      	ldr	r3, [pc, #136]	; (801e008 <_svfiprintf_r+0x1f0>)
 801df7e:	bb1b      	cbnz	r3, 801dfc8 <_svfiprintf_r+0x1b0>
 801df80:	9b03      	ldr	r3, [sp, #12]
 801df82:	3307      	adds	r3, #7
 801df84:	f023 0307 	bic.w	r3, r3, #7
 801df88:	3308      	adds	r3, #8
 801df8a:	9303      	str	r3, [sp, #12]
 801df8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801df8e:	4433      	add	r3, r6
 801df90:	9309      	str	r3, [sp, #36]	; 0x24
 801df92:	e768      	b.n	801de66 <_svfiprintf_r+0x4e>
 801df94:	fb0c 3202 	mla	r2, ip, r2, r3
 801df98:	460c      	mov	r4, r1
 801df9a:	2001      	movs	r0, #1
 801df9c:	e7a6      	b.n	801deec <_svfiprintf_r+0xd4>
 801df9e:	2300      	movs	r3, #0
 801dfa0:	3401      	adds	r4, #1
 801dfa2:	9305      	str	r3, [sp, #20]
 801dfa4:	4619      	mov	r1, r3
 801dfa6:	f04f 0c0a 	mov.w	ip, #10
 801dfaa:	4620      	mov	r0, r4
 801dfac:	f810 2b01 	ldrb.w	r2, [r0], #1
 801dfb0:	3a30      	subs	r2, #48	; 0x30
 801dfb2:	2a09      	cmp	r2, #9
 801dfb4:	d903      	bls.n	801dfbe <_svfiprintf_r+0x1a6>
 801dfb6:	2b00      	cmp	r3, #0
 801dfb8:	d0c6      	beq.n	801df48 <_svfiprintf_r+0x130>
 801dfba:	9105      	str	r1, [sp, #20]
 801dfbc:	e7c4      	b.n	801df48 <_svfiprintf_r+0x130>
 801dfbe:	fb0c 2101 	mla	r1, ip, r1, r2
 801dfc2:	4604      	mov	r4, r0
 801dfc4:	2301      	movs	r3, #1
 801dfc6:	e7f0      	b.n	801dfaa <_svfiprintf_r+0x192>
 801dfc8:	ab03      	add	r3, sp, #12
 801dfca:	9300      	str	r3, [sp, #0]
 801dfcc:	462a      	mov	r2, r5
 801dfce:	4b0f      	ldr	r3, [pc, #60]	; (801e00c <_svfiprintf_r+0x1f4>)
 801dfd0:	a904      	add	r1, sp, #16
 801dfd2:	4638      	mov	r0, r7
 801dfd4:	f7fc fc2a 	bl	801a82c <_printf_float>
 801dfd8:	1c42      	adds	r2, r0, #1
 801dfda:	4606      	mov	r6, r0
 801dfdc:	d1d6      	bne.n	801df8c <_svfiprintf_r+0x174>
 801dfde:	89ab      	ldrh	r3, [r5, #12]
 801dfe0:	065b      	lsls	r3, r3, #25
 801dfe2:	f53f af2d 	bmi.w	801de40 <_svfiprintf_r+0x28>
 801dfe6:	9809      	ldr	r0, [sp, #36]	; 0x24
 801dfe8:	b01d      	add	sp, #116	; 0x74
 801dfea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dfee:	ab03      	add	r3, sp, #12
 801dff0:	9300      	str	r3, [sp, #0]
 801dff2:	462a      	mov	r2, r5
 801dff4:	4b05      	ldr	r3, [pc, #20]	; (801e00c <_svfiprintf_r+0x1f4>)
 801dff6:	a904      	add	r1, sp, #16
 801dff8:	4638      	mov	r0, r7
 801dffa:	f7fc febb 	bl	801ad74 <_printf_i>
 801dffe:	e7eb      	b.n	801dfd8 <_svfiprintf_r+0x1c0>
 801e000:	08025b21 	.word	0x08025b21
 801e004:	08025b2b 	.word	0x08025b2b
 801e008:	0801a82d 	.word	0x0801a82d
 801e00c:	0801dd65 	.word	0x0801dd65
 801e010:	08025b27 	.word	0x08025b27

0801e014 <__sfputc_r>:
 801e014:	6893      	ldr	r3, [r2, #8]
 801e016:	3b01      	subs	r3, #1
 801e018:	2b00      	cmp	r3, #0
 801e01a:	b410      	push	{r4}
 801e01c:	6093      	str	r3, [r2, #8]
 801e01e:	da08      	bge.n	801e032 <__sfputc_r+0x1e>
 801e020:	6994      	ldr	r4, [r2, #24]
 801e022:	42a3      	cmp	r3, r4
 801e024:	db01      	blt.n	801e02a <__sfputc_r+0x16>
 801e026:	290a      	cmp	r1, #10
 801e028:	d103      	bne.n	801e032 <__sfputc_r+0x1e>
 801e02a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e02e:	f7fd bb54 	b.w	801b6da <__swbuf_r>
 801e032:	6813      	ldr	r3, [r2, #0]
 801e034:	1c58      	adds	r0, r3, #1
 801e036:	6010      	str	r0, [r2, #0]
 801e038:	7019      	strb	r1, [r3, #0]
 801e03a:	4608      	mov	r0, r1
 801e03c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e040:	4770      	bx	lr

0801e042 <__sfputs_r>:
 801e042:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e044:	4606      	mov	r6, r0
 801e046:	460f      	mov	r7, r1
 801e048:	4614      	mov	r4, r2
 801e04a:	18d5      	adds	r5, r2, r3
 801e04c:	42ac      	cmp	r4, r5
 801e04e:	d101      	bne.n	801e054 <__sfputs_r+0x12>
 801e050:	2000      	movs	r0, #0
 801e052:	e007      	b.n	801e064 <__sfputs_r+0x22>
 801e054:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e058:	463a      	mov	r2, r7
 801e05a:	4630      	mov	r0, r6
 801e05c:	f7ff ffda 	bl	801e014 <__sfputc_r>
 801e060:	1c43      	adds	r3, r0, #1
 801e062:	d1f3      	bne.n	801e04c <__sfputs_r+0xa>
 801e064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801e068 <_vfiprintf_r>:
 801e068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e06c:	460d      	mov	r5, r1
 801e06e:	b09d      	sub	sp, #116	; 0x74
 801e070:	4614      	mov	r4, r2
 801e072:	4698      	mov	r8, r3
 801e074:	4606      	mov	r6, r0
 801e076:	b118      	cbz	r0, 801e080 <_vfiprintf_r+0x18>
 801e078:	6a03      	ldr	r3, [r0, #32]
 801e07a:	b90b      	cbnz	r3, 801e080 <_vfiprintf_r+0x18>
 801e07c:	f7fd fa38 	bl	801b4f0 <__sinit>
 801e080:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e082:	07d9      	lsls	r1, r3, #31
 801e084:	d405      	bmi.n	801e092 <_vfiprintf_r+0x2a>
 801e086:	89ab      	ldrh	r3, [r5, #12]
 801e088:	059a      	lsls	r2, r3, #22
 801e08a:	d402      	bmi.n	801e092 <_vfiprintf_r+0x2a>
 801e08c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e08e:	f7fd fc46 	bl	801b91e <__retarget_lock_acquire_recursive>
 801e092:	89ab      	ldrh	r3, [r5, #12]
 801e094:	071b      	lsls	r3, r3, #28
 801e096:	d501      	bpl.n	801e09c <_vfiprintf_r+0x34>
 801e098:	692b      	ldr	r3, [r5, #16]
 801e09a:	b99b      	cbnz	r3, 801e0c4 <_vfiprintf_r+0x5c>
 801e09c:	4629      	mov	r1, r5
 801e09e:	4630      	mov	r0, r6
 801e0a0:	f7fd fb58 	bl	801b754 <__swsetup_r>
 801e0a4:	b170      	cbz	r0, 801e0c4 <_vfiprintf_r+0x5c>
 801e0a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e0a8:	07dc      	lsls	r4, r3, #31
 801e0aa:	d504      	bpl.n	801e0b6 <_vfiprintf_r+0x4e>
 801e0ac:	f04f 30ff 	mov.w	r0, #4294967295
 801e0b0:	b01d      	add	sp, #116	; 0x74
 801e0b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e0b6:	89ab      	ldrh	r3, [r5, #12]
 801e0b8:	0598      	lsls	r0, r3, #22
 801e0ba:	d4f7      	bmi.n	801e0ac <_vfiprintf_r+0x44>
 801e0bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e0be:	f7fd fc2f 	bl	801b920 <__retarget_lock_release_recursive>
 801e0c2:	e7f3      	b.n	801e0ac <_vfiprintf_r+0x44>
 801e0c4:	2300      	movs	r3, #0
 801e0c6:	9309      	str	r3, [sp, #36]	; 0x24
 801e0c8:	2320      	movs	r3, #32
 801e0ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e0ce:	f8cd 800c 	str.w	r8, [sp, #12]
 801e0d2:	2330      	movs	r3, #48	; 0x30
 801e0d4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801e288 <_vfiprintf_r+0x220>
 801e0d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e0dc:	f04f 0901 	mov.w	r9, #1
 801e0e0:	4623      	mov	r3, r4
 801e0e2:	469a      	mov	sl, r3
 801e0e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e0e8:	b10a      	cbz	r2, 801e0ee <_vfiprintf_r+0x86>
 801e0ea:	2a25      	cmp	r2, #37	; 0x25
 801e0ec:	d1f9      	bne.n	801e0e2 <_vfiprintf_r+0x7a>
 801e0ee:	ebba 0b04 	subs.w	fp, sl, r4
 801e0f2:	d00b      	beq.n	801e10c <_vfiprintf_r+0xa4>
 801e0f4:	465b      	mov	r3, fp
 801e0f6:	4622      	mov	r2, r4
 801e0f8:	4629      	mov	r1, r5
 801e0fa:	4630      	mov	r0, r6
 801e0fc:	f7ff ffa1 	bl	801e042 <__sfputs_r>
 801e100:	3001      	adds	r0, #1
 801e102:	f000 80a9 	beq.w	801e258 <_vfiprintf_r+0x1f0>
 801e106:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e108:	445a      	add	r2, fp
 801e10a:	9209      	str	r2, [sp, #36]	; 0x24
 801e10c:	f89a 3000 	ldrb.w	r3, [sl]
 801e110:	2b00      	cmp	r3, #0
 801e112:	f000 80a1 	beq.w	801e258 <_vfiprintf_r+0x1f0>
 801e116:	2300      	movs	r3, #0
 801e118:	f04f 32ff 	mov.w	r2, #4294967295
 801e11c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e120:	f10a 0a01 	add.w	sl, sl, #1
 801e124:	9304      	str	r3, [sp, #16]
 801e126:	9307      	str	r3, [sp, #28]
 801e128:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e12c:	931a      	str	r3, [sp, #104]	; 0x68
 801e12e:	4654      	mov	r4, sl
 801e130:	2205      	movs	r2, #5
 801e132:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e136:	4854      	ldr	r0, [pc, #336]	; (801e288 <_vfiprintf_r+0x220>)
 801e138:	f7e2 f86a 	bl	8000210 <memchr>
 801e13c:	9a04      	ldr	r2, [sp, #16]
 801e13e:	b9d8      	cbnz	r0, 801e178 <_vfiprintf_r+0x110>
 801e140:	06d1      	lsls	r1, r2, #27
 801e142:	bf44      	itt	mi
 801e144:	2320      	movmi	r3, #32
 801e146:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e14a:	0713      	lsls	r3, r2, #28
 801e14c:	bf44      	itt	mi
 801e14e:	232b      	movmi	r3, #43	; 0x2b
 801e150:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e154:	f89a 3000 	ldrb.w	r3, [sl]
 801e158:	2b2a      	cmp	r3, #42	; 0x2a
 801e15a:	d015      	beq.n	801e188 <_vfiprintf_r+0x120>
 801e15c:	9a07      	ldr	r2, [sp, #28]
 801e15e:	4654      	mov	r4, sl
 801e160:	2000      	movs	r0, #0
 801e162:	f04f 0c0a 	mov.w	ip, #10
 801e166:	4621      	mov	r1, r4
 801e168:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e16c:	3b30      	subs	r3, #48	; 0x30
 801e16e:	2b09      	cmp	r3, #9
 801e170:	d94d      	bls.n	801e20e <_vfiprintf_r+0x1a6>
 801e172:	b1b0      	cbz	r0, 801e1a2 <_vfiprintf_r+0x13a>
 801e174:	9207      	str	r2, [sp, #28]
 801e176:	e014      	b.n	801e1a2 <_vfiprintf_r+0x13a>
 801e178:	eba0 0308 	sub.w	r3, r0, r8
 801e17c:	fa09 f303 	lsl.w	r3, r9, r3
 801e180:	4313      	orrs	r3, r2
 801e182:	9304      	str	r3, [sp, #16]
 801e184:	46a2      	mov	sl, r4
 801e186:	e7d2      	b.n	801e12e <_vfiprintf_r+0xc6>
 801e188:	9b03      	ldr	r3, [sp, #12]
 801e18a:	1d19      	adds	r1, r3, #4
 801e18c:	681b      	ldr	r3, [r3, #0]
 801e18e:	9103      	str	r1, [sp, #12]
 801e190:	2b00      	cmp	r3, #0
 801e192:	bfbb      	ittet	lt
 801e194:	425b      	neglt	r3, r3
 801e196:	f042 0202 	orrlt.w	r2, r2, #2
 801e19a:	9307      	strge	r3, [sp, #28]
 801e19c:	9307      	strlt	r3, [sp, #28]
 801e19e:	bfb8      	it	lt
 801e1a0:	9204      	strlt	r2, [sp, #16]
 801e1a2:	7823      	ldrb	r3, [r4, #0]
 801e1a4:	2b2e      	cmp	r3, #46	; 0x2e
 801e1a6:	d10c      	bne.n	801e1c2 <_vfiprintf_r+0x15a>
 801e1a8:	7863      	ldrb	r3, [r4, #1]
 801e1aa:	2b2a      	cmp	r3, #42	; 0x2a
 801e1ac:	d134      	bne.n	801e218 <_vfiprintf_r+0x1b0>
 801e1ae:	9b03      	ldr	r3, [sp, #12]
 801e1b0:	1d1a      	adds	r2, r3, #4
 801e1b2:	681b      	ldr	r3, [r3, #0]
 801e1b4:	9203      	str	r2, [sp, #12]
 801e1b6:	2b00      	cmp	r3, #0
 801e1b8:	bfb8      	it	lt
 801e1ba:	f04f 33ff 	movlt.w	r3, #4294967295
 801e1be:	3402      	adds	r4, #2
 801e1c0:	9305      	str	r3, [sp, #20]
 801e1c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801e298 <_vfiprintf_r+0x230>
 801e1c6:	7821      	ldrb	r1, [r4, #0]
 801e1c8:	2203      	movs	r2, #3
 801e1ca:	4650      	mov	r0, sl
 801e1cc:	f7e2 f820 	bl	8000210 <memchr>
 801e1d0:	b138      	cbz	r0, 801e1e2 <_vfiprintf_r+0x17a>
 801e1d2:	9b04      	ldr	r3, [sp, #16]
 801e1d4:	eba0 000a 	sub.w	r0, r0, sl
 801e1d8:	2240      	movs	r2, #64	; 0x40
 801e1da:	4082      	lsls	r2, r0
 801e1dc:	4313      	orrs	r3, r2
 801e1de:	3401      	adds	r4, #1
 801e1e0:	9304      	str	r3, [sp, #16]
 801e1e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e1e6:	4829      	ldr	r0, [pc, #164]	; (801e28c <_vfiprintf_r+0x224>)
 801e1e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e1ec:	2206      	movs	r2, #6
 801e1ee:	f7e2 f80f 	bl	8000210 <memchr>
 801e1f2:	2800      	cmp	r0, #0
 801e1f4:	d03f      	beq.n	801e276 <_vfiprintf_r+0x20e>
 801e1f6:	4b26      	ldr	r3, [pc, #152]	; (801e290 <_vfiprintf_r+0x228>)
 801e1f8:	bb1b      	cbnz	r3, 801e242 <_vfiprintf_r+0x1da>
 801e1fa:	9b03      	ldr	r3, [sp, #12]
 801e1fc:	3307      	adds	r3, #7
 801e1fe:	f023 0307 	bic.w	r3, r3, #7
 801e202:	3308      	adds	r3, #8
 801e204:	9303      	str	r3, [sp, #12]
 801e206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e208:	443b      	add	r3, r7
 801e20a:	9309      	str	r3, [sp, #36]	; 0x24
 801e20c:	e768      	b.n	801e0e0 <_vfiprintf_r+0x78>
 801e20e:	fb0c 3202 	mla	r2, ip, r2, r3
 801e212:	460c      	mov	r4, r1
 801e214:	2001      	movs	r0, #1
 801e216:	e7a6      	b.n	801e166 <_vfiprintf_r+0xfe>
 801e218:	2300      	movs	r3, #0
 801e21a:	3401      	adds	r4, #1
 801e21c:	9305      	str	r3, [sp, #20]
 801e21e:	4619      	mov	r1, r3
 801e220:	f04f 0c0a 	mov.w	ip, #10
 801e224:	4620      	mov	r0, r4
 801e226:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e22a:	3a30      	subs	r2, #48	; 0x30
 801e22c:	2a09      	cmp	r2, #9
 801e22e:	d903      	bls.n	801e238 <_vfiprintf_r+0x1d0>
 801e230:	2b00      	cmp	r3, #0
 801e232:	d0c6      	beq.n	801e1c2 <_vfiprintf_r+0x15a>
 801e234:	9105      	str	r1, [sp, #20]
 801e236:	e7c4      	b.n	801e1c2 <_vfiprintf_r+0x15a>
 801e238:	fb0c 2101 	mla	r1, ip, r1, r2
 801e23c:	4604      	mov	r4, r0
 801e23e:	2301      	movs	r3, #1
 801e240:	e7f0      	b.n	801e224 <_vfiprintf_r+0x1bc>
 801e242:	ab03      	add	r3, sp, #12
 801e244:	9300      	str	r3, [sp, #0]
 801e246:	462a      	mov	r2, r5
 801e248:	4b12      	ldr	r3, [pc, #72]	; (801e294 <_vfiprintf_r+0x22c>)
 801e24a:	a904      	add	r1, sp, #16
 801e24c:	4630      	mov	r0, r6
 801e24e:	f7fc faed 	bl	801a82c <_printf_float>
 801e252:	4607      	mov	r7, r0
 801e254:	1c78      	adds	r0, r7, #1
 801e256:	d1d6      	bne.n	801e206 <_vfiprintf_r+0x19e>
 801e258:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e25a:	07d9      	lsls	r1, r3, #31
 801e25c:	d405      	bmi.n	801e26a <_vfiprintf_r+0x202>
 801e25e:	89ab      	ldrh	r3, [r5, #12]
 801e260:	059a      	lsls	r2, r3, #22
 801e262:	d402      	bmi.n	801e26a <_vfiprintf_r+0x202>
 801e264:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e266:	f7fd fb5b 	bl	801b920 <__retarget_lock_release_recursive>
 801e26a:	89ab      	ldrh	r3, [r5, #12]
 801e26c:	065b      	lsls	r3, r3, #25
 801e26e:	f53f af1d 	bmi.w	801e0ac <_vfiprintf_r+0x44>
 801e272:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e274:	e71c      	b.n	801e0b0 <_vfiprintf_r+0x48>
 801e276:	ab03      	add	r3, sp, #12
 801e278:	9300      	str	r3, [sp, #0]
 801e27a:	462a      	mov	r2, r5
 801e27c:	4b05      	ldr	r3, [pc, #20]	; (801e294 <_vfiprintf_r+0x22c>)
 801e27e:	a904      	add	r1, sp, #16
 801e280:	4630      	mov	r0, r6
 801e282:	f7fc fd77 	bl	801ad74 <_printf_i>
 801e286:	e7e4      	b.n	801e252 <_vfiprintf_r+0x1ea>
 801e288:	08025b21 	.word	0x08025b21
 801e28c:	08025b2b 	.word	0x08025b2b
 801e290:	0801a82d 	.word	0x0801a82d
 801e294:	0801e043 	.word	0x0801e043
 801e298:	08025b27 	.word	0x08025b27

0801e29c <__sflush_r>:
 801e29c:	898a      	ldrh	r2, [r1, #12]
 801e29e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e2a2:	4605      	mov	r5, r0
 801e2a4:	0710      	lsls	r0, r2, #28
 801e2a6:	460c      	mov	r4, r1
 801e2a8:	d458      	bmi.n	801e35c <__sflush_r+0xc0>
 801e2aa:	684b      	ldr	r3, [r1, #4]
 801e2ac:	2b00      	cmp	r3, #0
 801e2ae:	dc05      	bgt.n	801e2bc <__sflush_r+0x20>
 801e2b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801e2b2:	2b00      	cmp	r3, #0
 801e2b4:	dc02      	bgt.n	801e2bc <__sflush_r+0x20>
 801e2b6:	2000      	movs	r0, #0
 801e2b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e2bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e2be:	2e00      	cmp	r6, #0
 801e2c0:	d0f9      	beq.n	801e2b6 <__sflush_r+0x1a>
 801e2c2:	2300      	movs	r3, #0
 801e2c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801e2c8:	682f      	ldr	r7, [r5, #0]
 801e2ca:	6a21      	ldr	r1, [r4, #32]
 801e2cc:	602b      	str	r3, [r5, #0]
 801e2ce:	d032      	beq.n	801e336 <__sflush_r+0x9a>
 801e2d0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801e2d2:	89a3      	ldrh	r3, [r4, #12]
 801e2d4:	075a      	lsls	r2, r3, #29
 801e2d6:	d505      	bpl.n	801e2e4 <__sflush_r+0x48>
 801e2d8:	6863      	ldr	r3, [r4, #4]
 801e2da:	1ac0      	subs	r0, r0, r3
 801e2dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e2de:	b10b      	cbz	r3, 801e2e4 <__sflush_r+0x48>
 801e2e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e2e2:	1ac0      	subs	r0, r0, r3
 801e2e4:	2300      	movs	r3, #0
 801e2e6:	4602      	mov	r2, r0
 801e2e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e2ea:	6a21      	ldr	r1, [r4, #32]
 801e2ec:	4628      	mov	r0, r5
 801e2ee:	47b0      	blx	r6
 801e2f0:	1c43      	adds	r3, r0, #1
 801e2f2:	89a3      	ldrh	r3, [r4, #12]
 801e2f4:	d106      	bne.n	801e304 <__sflush_r+0x68>
 801e2f6:	6829      	ldr	r1, [r5, #0]
 801e2f8:	291d      	cmp	r1, #29
 801e2fa:	d82b      	bhi.n	801e354 <__sflush_r+0xb8>
 801e2fc:	4a29      	ldr	r2, [pc, #164]	; (801e3a4 <__sflush_r+0x108>)
 801e2fe:	410a      	asrs	r2, r1
 801e300:	07d6      	lsls	r6, r2, #31
 801e302:	d427      	bmi.n	801e354 <__sflush_r+0xb8>
 801e304:	2200      	movs	r2, #0
 801e306:	6062      	str	r2, [r4, #4]
 801e308:	04d9      	lsls	r1, r3, #19
 801e30a:	6922      	ldr	r2, [r4, #16]
 801e30c:	6022      	str	r2, [r4, #0]
 801e30e:	d504      	bpl.n	801e31a <__sflush_r+0x7e>
 801e310:	1c42      	adds	r2, r0, #1
 801e312:	d101      	bne.n	801e318 <__sflush_r+0x7c>
 801e314:	682b      	ldr	r3, [r5, #0]
 801e316:	b903      	cbnz	r3, 801e31a <__sflush_r+0x7e>
 801e318:	6560      	str	r0, [r4, #84]	; 0x54
 801e31a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e31c:	602f      	str	r7, [r5, #0]
 801e31e:	2900      	cmp	r1, #0
 801e320:	d0c9      	beq.n	801e2b6 <__sflush_r+0x1a>
 801e322:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e326:	4299      	cmp	r1, r3
 801e328:	d002      	beq.n	801e330 <__sflush_r+0x94>
 801e32a:	4628      	mov	r0, r5
 801e32c:	f7fe f98a 	bl	801c644 <_free_r>
 801e330:	2000      	movs	r0, #0
 801e332:	6360      	str	r0, [r4, #52]	; 0x34
 801e334:	e7c0      	b.n	801e2b8 <__sflush_r+0x1c>
 801e336:	2301      	movs	r3, #1
 801e338:	4628      	mov	r0, r5
 801e33a:	47b0      	blx	r6
 801e33c:	1c41      	adds	r1, r0, #1
 801e33e:	d1c8      	bne.n	801e2d2 <__sflush_r+0x36>
 801e340:	682b      	ldr	r3, [r5, #0]
 801e342:	2b00      	cmp	r3, #0
 801e344:	d0c5      	beq.n	801e2d2 <__sflush_r+0x36>
 801e346:	2b1d      	cmp	r3, #29
 801e348:	d001      	beq.n	801e34e <__sflush_r+0xb2>
 801e34a:	2b16      	cmp	r3, #22
 801e34c:	d101      	bne.n	801e352 <__sflush_r+0xb6>
 801e34e:	602f      	str	r7, [r5, #0]
 801e350:	e7b1      	b.n	801e2b6 <__sflush_r+0x1a>
 801e352:	89a3      	ldrh	r3, [r4, #12]
 801e354:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e358:	81a3      	strh	r3, [r4, #12]
 801e35a:	e7ad      	b.n	801e2b8 <__sflush_r+0x1c>
 801e35c:	690f      	ldr	r7, [r1, #16]
 801e35e:	2f00      	cmp	r7, #0
 801e360:	d0a9      	beq.n	801e2b6 <__sflush_r+0x1a>
 801e362:	0793      	lsls	r3, r2, #30
 801e364:	680e      	ldr	r6, [r1, #0]
 801e366:	bf08      	it	eq
 801e368:	694b      	ldreq	r3, [r1, #20]
 801e36a:	600f      	str	r7, [r1, #0]
 801e36c:	bf18      	it	ne
 801e36e:	2300      	movne	r3, #0
 801e370:	eba6 0807 	sub.w	r8, r6, r7
 801e374:	608b      	str	r3, [r1, #8]
 801e376:	f1b8 0f00 	cmp.w	r8, #0
 801e37a:	dd9c      	ble.n	801e2b6 <__sflush_r+0x1a>
 801e37c:	6a21      	ldr	r1, [r4, #32]
 801e37e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801e380:	4643      	mov	r3, r8
 801e382:	463a      	mov	r2, r7
 801e384:	4628      	mov	r0, r5
 801e386:	47b0      	blx	r6
 801e388:	2800      	cmp	r0, #0
 801e38a:	dc06      	bgt.n	801e39a <__sflush_r+0xfe>
 801e38c:	89a3      	ldrh	r3, [r4, #12]
 801e38e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e392:	81a3      	strh	r3, [r4, #12]
 801e394:	f04f 30ff 	mov.w	r0, #4294967295
 801e398:	e78e      	b.n	801e2b8 <__sflush_r+0x1c>
 801e39a:	4407      	add	r7, r0
 801e39c:	eba8 0800 	sub.w	r8, r8, r0
 801e3a0:	e7e9      	b.n	801e376 <__sflush_r+0xda>
 801e3a2:	bf00      	nop
 801e3a4:	dfbffffe 	.word	0xdfbffffe

0801e3a8 <_fflush_r>:
 801e3a8:	b538      	push	{r3, r4, r5, lr}
 801e3aa:	690b      	ldr	r3, [r1, #16]
 801e3ac:	4605      	mov	r5, r0
 801e3ae:	460c      	mov	r4, r1
 801e3b0:	b913      	cbnz	r3, 801e3b8 <_fflush_r+0x10>
 801e3b2:	2500      	movs	r5, #0
 801e3b4:	4628      	mov	r0, r5
 801e3b6:	bd38      	pop	{r3, r4, r5, pc}
 801e3b8:	b118      	cbz	r0, 801e3c2 <_fflush_r+0x1a>
 801e3ba:	6a03      	ldr	r3, [r0, #32]
 801e3bc:	b90b      	cbnz	r3, 801e3c2 <_fflush_r+0x1a>
 801e3be:	f7fd f897 	bl	801b4f0 <__sinit>
 801e3c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e3c6:	2b00      	cmp	r3, #0
 801e3c8:	d0f3      	beq.n	801e3b2 <_fflush_r+0xa>
 801e3ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801e3cc:	07d0      	lsls	r0, r2, #31
 801e3ce:	d404      	bmi.n	801e3da <_fflush_r+0x32>
 801e3d0:	0599      	lsls	r1, r3, #22
 801e3d2:	d402      	bmi.n	801e3da <_fflush_r+0x32>
 801e3d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e3d6:	f7fd faa2 	bl	801b91e <__retarget_lock_acquire_recursive>
 801e3da:	4628      	mov	r0, r5
 801e3dc:	4621      	mov	r1, r4
 801e3de:	f7ff ff5d 	bl	801e29c <__sflush_r>
 801e3e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e3e4:	07da      	lsls	r2, r3, #31
 801e3e6:	4605      	mov	r5, r0
 801e3e8:	d4e4      	bmi.n	801e3b4 <_fflush_r+0xc>
 801e3ea:	89a3      	ldrh	r3, [r4, #12]
 801e3ec:	059b      	lsls	r3, r3, #22
 801e3ee:	d4e1      	bmi.n	801e3b4 <_fflush_r+0xc>
 801e3f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e3f2:	f7fd fa95 	bl	801b920 <__retarget_lock_release_recursive>
 801e3f6:	e7dd      	b.n	801e3b4 <_fflush_r+0xc>

0801e3f8 <__swhatbuf_r>:
 801e3f8:	b570      	push	{r4, r5, r6, lr}
 801e3fa:	460c      	mov	r4, r1
 801e3fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e400:	2900      	cmp	r1, #0
 801e402:	b096      	sub	sp, #88	; 0x58
 801e404:	4615      	mov	r5, r2
 801e406:	461e      	mov	r6, r3
 801e408:	da0d      	bge.n	801e426 <__swhatbuf_r+0x2e>
 801e40a:	89a3      	ldrh	r3, [r4, #12]
 801e40c:	f013 0f80 	tst.w	r3, #128	; 0x80
 801e410:	f04f 0100 	mov.w	r1, #0
 801e414:	bf0c      	ite	eq
 801e416:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801e41a:	2340      	movne	r3, #64	; 0x40
 801e41c:	2000      	movs	r0, #0
 801e41e:	6031      	str	r1, [r6, #0]
 801e420:	602b      	str	r3, [r5, #0]
 801e422:	b016      	add	sp, #88	; 0x58
 801e424:	bd70      	pop	{r4, r5, r6, pc}
 801e426:	466a      	mov	r2, sp
 801e428:	f000 f874 	bl	801e514 <_fstat_r>
 801e42c:	2800      	cmp	r0, #0
 801e42e:	dbec      	blt.n	801e40a <__swhatbuf_r+0x12>
 801e430:	9901      	ldr	r1, [sp, #4]
 801e432:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801e436:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801e43a:	4259      	negs	r1, r3
 801e43c:	4159      	adcs	r1, r3
 801e43e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801e442:	e7eb      	b.n	801e41c <__swhatbuf_r+0x24>

0801e444 <__smakebuf_r>:
 801e444:	898b      	ldrh	r3, [r1, #12]
 801e446:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801e448:	079d      	lsls	r5, r3, #30
 801e44a:	4606      	mov	r6, r0
 801e44c:	460c      	mov	r4, r1
 801e44e:	d507      	bpl.n	801e460 <__smakebuf_r+0x1c>
 801e450:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801e454:	6023      	str	r3, [r4, #0]
 801e456:	6123      	str	r3, [r4, #16]
 801e458:	2301      	movs	r3, #1
 801e45a:	6163      	str	r3, [r4, #20]
 801e45c:	b002      	add	sp, #8
 801e45e:	bd70      	pop	{r4, r5, r6, pc}
 801e460:	ab01      	add	r3, sp, #4
 801e462:	466a      	mov	r2, sp
 801e464:	f7ff ffc8 	bl	801e3f8 <__swhatbuf_r>
 801e468:	9900      	ldr	r1, [sp, #0]
 801e46a:	4605      	mov	r5, r0
 801e46c:	4630      	mov	r0, r6
 801e46e:	f7fc f8b1 	bl	801a5d4 <_malloc_r>
 801e472:	b948      	cbnz	r0, 801e488 <__smakebuf_r+0x44>
 801e474:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e478:	059a      	lsls	r2, r3, #22
 801e47a:	d4ef      	bmi.n	801e45c <__smakebuf_r+0x18>
 801e47c:	f023 0303 	bic.w	r3, r3, #3
 801e480:	f043 0302 	orr.w	r3, r3, #2
 801e484:	81a3      	strh	r3, [r4, #12]
 801e486:	e7e3      	b.n	801e450 <__smakebuf_r+0xc>
 801e488:	89a3      	ldrh	r3, [r4, #12]
 801e48a:	6020      	str	r0, [r4, #0]
 801e48c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e490:	81a3      	strh	r3, [r4, #12]
 801e492:	9b00      	ldr	r3, [sp, #0]
 801e494:	6163      	str	r3, [r4, #20]
 801e496:	9b01      	ldr	r3, [sp, #4]
 801e498:	6120      	str	r0, [r4, #16]
 801e49a:	b15b      	cbz	r3, 801e4b4 <__smakebuf_r+0x70>
 801e49c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e4a0:	4630      	mov	r0, r6
 801e4a2:	f000 f849 	bl	801e538 <_isatty_r>
 801e4a6:	b128      	cbz	r0, 801e4b4 <__smakebuf_r+0x70>
 801e4a8:	89a3      	ldrh	r3, [r4, #12]
 801e4aa:	f023 0303 	bic.w	r3, r3, #3
 801e4ae:	f043 0301 	orr.w	r3, r3, #1
 801e4b2:	81a3      	strh	r3, [r4, #12]
 801e4b4:	89a3      	ldrh	r3, [r4, #12]
 801e4b6:	431d      	orrs	r5, r3
 801e4b8:	81a5      	strh	r5, [r4, #12]
 801e4ba:	e7cf      	b.n	801e45c <__smakebuf_r+0x18>

0801e4bc <memmove>:
 801e4bc:	4288      	cmp	r0, r1
 801e4be:	b510      	push	{r4, lr}
 801e4c0:	eb01 0402 	add.w	r4, r1, r2
 801e4c4:	d902      	bls.n	801e4cc <memmove+0x10>
 801e4c6:	4284      	cmp	r4, r0
 801e4c8:	4623      	mov	r3, r4
 801e4ca:	d807      	bhi.n	801e4dc <memmove+0x20>
 801e4cc:	1e43      	subs	r3, r0, #1
 801e4ce:	42a1      	cmp	r1, r4
 801e4d0:	d008      	beq.n	801e4e4 <memmove+0x28>
 801e4d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e4d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 801e4da:	e7f8      	b.n	801e4ce <memmove+0x12>
 801e4dc:	4402      	add	r2, r0
 801e4de:	4601      	mov	r1, r0
 801e4e0:	428a      	cmp	r2, r1
 801e4e2:	d100      	bne.n	801e4e6 <memmove+0x2a>
 801e4e4:	bd10      	pop	{r4, pc}
 801e4e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801e4ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801e4ee:	e7f7      	b.n	801e4e0 <memmove+0x24>

0801e4f0 <strncmp>:
 801e4f0:	b510      	push	{r4, lr}
 801e4f2:	b16a      	cbz	r2, 801e510 <strncmp+0x20>
 801e4f4:	3901      	subs	r1, #1
 801e4f6:	1884      	adds	r4, r0, r2
 801e4f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e4fc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801e500:	429a      	cmp	r2, r3
 801e502:	d103      	bne.n	801e50c <strncmp+0x1c>
 801e504:	42a0      	cmp	r0, r4
 801e506:	d001      	beq.n	801e50c <strncmp+0x1c>
 801e508:	2a00      	cmp	r2, #0
 801e50a:	d1f5      	bne.n	801e4f8 <strncmp+0x8>
 801e50c:	1ad0      	subs	r0, r2, r3
 801e50e:	bd10      	pop	{r4, pc}
 801e510:	4610      	mov	r0, r2
 801e512:	e7fc      	b.n	801e50e <strncmp+0x1e>

0801e514 <_fstat_r>:
 801e514:	b538      	push	{r3, r4, r5, lr}
 801e516:	4d07      	ldr	r5, [pc, #28]	; (801e534 <_fstat_r+0x20>)
 801e518:	2300      	movs	r3, #0
 801e51a:	4604      	mov	r4, r0
 801e51c:	4608      	mov	r0, r1
 801e51e:	4611      	mov	r1, r2
 801e520:	602b      	str	r3, [r5, #0]
 801e522:	f000 fc4b 	bl	801edbc <_fstat>
 801e526:	1c43      	adds	r3, r0, #1
 801e528:	d102      	bne.n	801e530 <_fstat_r+0x1c>
 801e52a:	682b      	ldr	r3, [r5, #0]
 801e52c:	b103      	cbz	r3, 801e530 <_fstat_r+0x1c>
 801e52e:	6023      	str	r3, [r4, #0]
 801e530:	bd38      	pop	{r3, r4, r5, pc}
 801e532:	bf00      	nop
 801e534:	20013794 	.word	0x20013794

0801e538 <_isatty_r>:
 801e538:	b538      	push	{r3, r4, r5, lr}
 801e53a:	4d06      	ldr	r5, [pc, #24]	; (801e554 <_isatty_r+0x1c>)
 801e53c:	2300      	movs	r3, #0
 801e53e:	4604      	mov	r4, r0
 801e540:	4608      	mov	r0, r1
 801e542:	602b      	str	r3, [r5, #0]
 801e544:	f000 fc4a 	bl	801eddc <_isatty>
 801e548:	1c43      	adds	r3, r0, #1
 801e54a:	d102      	bne.n	801e552 <_isatty_r+0x1a>
 801e54c:	682b      	ldr	r3, [r5, #0]
 801e54e:	b103      	cbz	r3, 801e552 <_isatty_r+0x1a>
 801e550:	6023      	str	r3, [r4, #0]
 801e552:	bd38      	pop	{r3, r4, r5, pc}
 801e554:	20013794 	.word	0x20013794

0801e558 <__assert_func>:
 801e558:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e55a:	4614      	mov	r4, r2
 801e55c:	461a      	mov	r2, r3
 801e55e:	4b09      	ldr	r3, [pc, #36]	; (801e584 <__assert_func+0x2c>)
 801e560:	681b      	ldr	r3, [r3, #0]
 801e562:	4605      	mov	r5, r0
 801e564:	68d8      	ldr	r0, [r3, #12]
 801e566:	b14c      	cbz	r4, 801e57c <__assert_func+0x24>
 801e568:	4b07      	ldr	r3, [pc, #28]	; (801e588 <__assert_func+0x30>)
 801e56a:	9100      	str	r1, [sp, #0]
 801e56c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801e570:	4906      	ldr	r1, [pc, #24]	; (801e58c <__assert_func+0x34>)
 801e572:	462b      	mov	r3, r5
 801e574:	f000 fbb4 	bl	801ece0 <fiprintf>
 801e578:	f000 fbc4 	bl	801ed04 <abort>
 801e57c:	4b04      	ldr	r3, [pc, #16]	; (801e590 <__assert_func+0x38>)
 801e57e:	461c      	mov	r4, r3
 801e580:	e7f3      	b.n	801e56a <__assert_func+0x12>
 801e582:	bf00      	nop
 801e584:	200001c0 	.word	0x200001c0
 801e588:	08025b3a 	.word	0x08025b3a
 801e58c:	08025b47 	.word	0x08025b47
 801e590:	08025b75 	.word	0x08025b75

0801e594 <rshift>:
 801e594:	6903      	ldr	r3, [r0, #16]
 801e596:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801e59a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e59e:	ea4f 1261 	mov.w	r2, r1, asr #5
 801e5a2:	f100 0414 	add.w	r4, r0, #20
 801e5a6:	dd45      	ble.n	801e634 <rshift+0xa0>
 801e5a8:	f011 011f 	ands.w	r1, r1, #31
 801e5ac:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801e5b0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801e5b4:	d10c      	bne.n	801e5d0 <rshift+0x3c>
 801e5b6:	f100 0710 	add.w	r7, r0, #16
 801e5ba:	4629      	mov	r1, r5
 801e5bc:	42b1      	cmp	r1, r6
 801e5be:	d334      	bcc.n	801e62a <rshift+0x96>
 801e5c0:	1a9b      	subs	r3, r3, r2
 801e5c2:	009b      	lsls	r3, r3, #2
 801e5c4:	1eea      	subs	r2, r5, #3
 801e5c6:	4296      	cmp	r6, r2
 801e5c8:	bf38      	it	cc
 801e5ca:	2300      	movcc	r3, #0
 801e5cc:	4423      	add	r3, r4
 801e5ce:	e015      	b.n	801e5fc <rshift+0x68>
 801e5d0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801e5d4:	f1c1 0820 	rsb	r8, r1, #32
 801e5d8:	40cf      	lsrs	r7, r1
 801e5da:	f105 0e04 	add.w	lr, r5, #4
 801e5de:	46a1      	mov	r9, r4
 801e5e0:	4576      	cmp	r6, lr
 801e5e2:	46f4      	mov	ip, lr
 801e5e4:	d815      	bhi.n	801e612 <rshift+0x7e>
 801e5e6:	1a9a      	subs	r2, r3, r2
 801e5e8:	0092      	lsls	r2, r2, #2
 801e5ea:	3a04      	subs	r2, #4
 801e5ec:	3501      	adds	r5, #1
 801e5ee:	42ae      	cmp	r6, r5
 801e5f0:	bf38      	it	cc
 801e5f2:	2200      	movcc	r2, #0
 801e5f4:	18a3      	adds	r3, r4, r2
 801e5f6:	50a7      	str	r7, [r4, r2]
 801e5f8:	b107      	cbz	r7, 801e5fc <rshift+0x68>
 801e5fa:	3304      	adds	r3, #4
 801e5fc:	1b1a      	subs	r2, r3, r4
 801e5fe:	42a3      	cmp	r3, r4
 801e600:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801e604:	bf08      	it	eq
 801e606:	2300      	moveq	r3, #0
 801e608:	6102      	str	r2, [r0, #16]
 801e60a:	bf08      	it	eq
 801e60c:	6143      	streq	r3, [r0, #20]
 801e60e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e612:	f8dc c000 	ldr.w	ip, [ip]
 801e616:	fa0c fc08 	lsl.w	ip, ip, r8
 801e61a:	ea4c 0707 	orr.w	r7, ip, r7
 801e61e:	f849 7b04 	str.w	r7, [r9], #4
 801e622:	f85e 7b04 	ldr.w	r7, [lr], #4
 801e626:	40cf      	lsrs	r7, r1
 801e628:	e7da      	b.n	801e5e0 <rshift+0x4c>
 801e62a:	f851 cb04 	ldr.w	ip, [r1], #4
 801e62e:	f847 cf04 	str.w	ip, [r7, #4]!
 801e632:	e7c3      	b.n	801e5bc <rshift+0x28>
 801e634:	4623      	mov	r3, r4
 801e636:	e7e1      	b.n	801e5fc <rshift+0x68>

0801e638 <__hexdig_fun>:
 801e638:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801e63c:	2b09      	cmp	r3, #9
 801e63e:	d802      	bhi.n	801e646 <__hexdig_fun+0xe>
 801e640:	3820      	subs	r0, #32
 801e642:	b2c0      	uxtb	r0, r0
 801e644:	4770      	bx	lr
 801e646:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801e64a:	2b05      	cmp	r3, #5
 801e64c:	d801      	bhi.n	801e652 <__hexdig_fun+0x1a>
 801e64e:	3847      	subs	r0, #71	; 0x47
 801e650:	e7f7      	b.n	801e642 <__hexdig_fun+0xa>
 801e652:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801e656:	2b05      	cmp	r3, #5
 801e658:	d801      	bhi.n	801e65e <__hexdig_fun+0x26>
 801e65a:	3827      	subs	r0, #39	; 0x27
 801e65c:	e7f1      	b.n	801e642 <__hexdig_fun+0xa>
 801e65e:	2000      	movs	r0, #0
 801e660:	4770      	bx	lr
	...

0801e664 <__gethex>:
 801e664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e668:	4617      	mov	r7, r2
 801e66a:	680a      	ldr	r2, [r1, #0]
 801e66c:	b085      	sub	sp, #20
 801e66e:	f102 0b02 	add.w	fp, r2, #2
 801e672:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801e676:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801e67a:	4681      	mov	r9, r0
 801e67c:	468a      	mov	sl, r1
 801e67e:	9302      	str	r3, [sp, #8]
 801e680:	32fe      	adds	r2, #254	; 0xfe
 801e682:	eb02 030b 	add.w	r3, r2, fp
 801e686:	46d8      	mov	r8, fp
 801e688:	f81b 0b01 	ldrb.w	r0, [fp], #1
 801e68c:	9301      	str	r3, [sp, #4]
 801e68e:	2830      	cmp	r0, #48	; 0x30
 801e690:	d0f7      	beq.n	801e682 <__gethex+0x1e>
 801e692:	f7ff ffd1 	bl	801e638 <__hexdig_fun>
 801e696:	4604      	mov	r4, r0
 801e698:	2800      	cmp	r0, #0
 801e69a:	d138      	bne.n	801e70e <__gethex+0xaa>
 801e69c:	49a7      	ldr	r1, [pc, #668]	; (801e93c <__gethex+0x2d8>)
 801e69e:	2201      	movs	r2, #1
 801e6a0:	4640      	mov	r0, r8
 801e6a2:	f7ff ff25 	bl	801e4f0 <strncmp>
 801e6a6:	4606      	mov	r6, r0
 801e6a8:	2800      	cmp	r0, #0
 801e6aa:	d169      	bne.n	801e780 <__gethex+0x11c>
 801e6ac:	f898 0001 	ldrb.w	r0, [r8, #1]
 801e6b0:	465d      	mov	r5, fp
 801e6b2:	f7ff ffc1 	bl	801e638 <__hexdig_fun>
 801e6b6:	2800      	cmp	r0, #0
 801e6b8:	d064      	beq.n	801e784 <__gethex+0x120>
 801e6ba:	465a      	mov	r2, fp
 801e6bc:	7810      	ldrb	r0, [r2, #0]
 801e6be:	2830      	cmp	r0, #48	; 0x30
 801e6c0:	4690      	mov	r8, r2
 801e6c2:	f102 0201 	add.w	r2, r2, #1
 801e6c6:	d0f9      	beq.n	801e6bc <__gethex+0x58>
 801e6c8:	f7ff ffb6 	bl	801e638 <__hexdig_fun>
 801e6cc:	2301      	movs	r3, #1
 801e6ce:	fab0 f480 	clz	r4, r0
 801e6d2:	0964      	lsrs	r4, r4, #5
 801e6d4:	465e      	mov	r6, fp
 801e6d6:	9301      	str	r3, [sp, #4]
 801e6d8:	4642      	mov	r2, r8
 801e6da:	4615      	mov	r5, r2
 801e6dc:	3201      	adds	r2, #1
 801e6de:	7828      	ldrb	r0, [r5, #0]
 801e6e0:	f7ff ffaa 	bl	801e638 <__hexdig_fun>
 801e6e4:	2800      	cmp	r0, #0
 801e6e6:	d1f8      	bne.n	801e6da <__gethex+0x76>
 801e6e8:	4994      	ldr	r1, [pc, #592]	; (801e93c <__gethex+0x2d8>)
 801e6ea:	2201      	movs	r2, #1
 801e6ec:	4628      	mov	r0, r5
 801e6ee:	f7ff feff 	bl	801e4f0 <strncmp>
 801e6f2:	b978      	cbnz	r0, 801e714 <__gethex+0xb0>
 801e6f4:	b946      	cbnz	r6, 801e708 <__gethex+0xa4>
 801e6f6:	1c6e      	adds	r6, r5, #1
 801e6f8:	4632      	mov	r2, r6
 801e6fa:	4615      	mov	r5, r2
 801e6fc:	3201      	adds	r2, #1
 801e6fe:	7828      	ldrb	r0, [r5, #0]
 801e700:	f7ff ff9a 	bl	801e638 <__hexdig_fun>
 801e704:	2800      	cmp	r0, #0
 801e706:	d1f8      	bne.n	801e6fa <__gethex+0x96>
 801e708:	1b73      	subs	r3, r6, r5
 801e70a:	009e      	lsls	r6, r3, #2
 801e70c:	e004      	b.n	801e718 <__gethex+0xb4>
 801e70e:	2400      	movs	r4, #0
 801e710:	4626      	mov	r6, r4
 801e712:	e7e1      	b.n	801e6d8 <__gethex+0x74>
 801e714:	2e00      	cmp	r6, #0
 801e716:	d1f7      	bne.n	801e708 <__gethex+0xa4>
 801e718:	782b      	ldrb	r3, [r5, #0]
 801e71a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801e71e:	2b50      	cmp	r3, #80	; 0x50
 801e720:	d13d      	bne.n	801e79e <__gethex+0x13a>
 801e722:	786b      	ldrb	r3, [r5, #1]
 801e724:	2b2b      	cmp	r3, #43	; 0x2b
 801e726:	d02f      	beq.n	801e788 <__gethex+0x124>
 801e728:	2b2d      	cmp	r3, #45	; 0x2d
 801e72a:	d031      	beq.n	801e790 <__gethex+0x12c>
 801e72c:	1c69      	adds	r1, r5, #1
 801e72e:	f04f 0b00 	mov.w	fp, #0
 801e732:	7808      	ldrb	r0, [r1, #0]
 801e734:	f7ff ff80 	bl	801e638 <__hexdig_fun>
 801e738:	1e42      	subs	r2, r0, #1
 801e73a:	b2d2      	uxtb	r2, r2
 801e73c:	2a18      	cmp	r2, #24
 801e73e:	d82e      	bhi.n	801e79e <__gethex+0x13a>
 801e740:	f1a0 0210 	sub.w	r2, r0, #16
 801e744:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801e748:	f7ff ff76 	bl	801e638 <__hexdig_fun>
 801e74c:	f100 3cff 	add.w	ip, r0, #4294967295
 801e750:	fa5f fc8c 	uxtb.w	ip, ip
 801e754:	f1bc 0f18 	cmp.w	ip, #24
 801e758:	d91d      	bls.n	801e796 <__gethex+0x132>
 801e75a:	f1bb 0f00 	cmp.w	fp, #0
 801e75e:	d000      	beq.n	801e762 <__gethex+0xfe>
 801e760:	4252      	negs	r2, r2
 801e762:	4416      	add	r6, r2
 801e764:	f8ca 1000 	str.w	r1, [sl]
 801e768:	b1dc      	cbz	r4, 801e7a2 <__gethex+0x13e>
 801e76a:	9b01      	ldr	r3, [sp, #4]
 801e76c:	2b00      	cmp	r3, #0
 801e76e:	bf14      	ite	ne
 801e770:	f04f 0800 	movne.w	r8, #0
 801e774:	f04f 0806 	moveq.w	r8, #6
 801e778:	4640      	mov	r0, r8
 801e77a:	b005      	add	sp, #20
 801e77c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e780:	4645      	mov	r5, r8
 801e782:	4626      	mov	r6, r4
 801e784:	2401      	movs	r4, #1
 801e786:	e7c7      	b.n	801e718 <__gethex+0xb4>
 801e788:	f04f 0b00 	mov.w	fp, #0
 801e78c:	1ca9      	adds	r1, r5, #2
 801e78e:	e7d0      	b.n	801e732 <__gethex+0xce>
 801e790:	f04f 0b01 	mov.w	fp, #1
 801e794:	e7fa      	b.n	801e78c <__gethex+0x128>
 801e796:	230a      	movs	r3, #10
 801e798:	fb03 0002 	mla	r0, r3, r2, r0
 801e79c:	e7d0      	b.n	801e740 <__gethex+0xdc>
 801e79e:	4629      	mov	r1, r5
 801e7a0:	e7e0      	b.n	801e764 <__gethex+0x100>
 801e7a2:	eba5 0308 	sub.w	r3, r5, r8
 801e7a6:	3b01      	subs	r3, #1
 801e7a8:	4621      	mov	r1, r4
 801e7aa:	2b07      	cmp	r3, #7
 801e7ac:	dc0a      	bgt.n	801e7c4 <__gethex+0x160>
 801e7ae:	4648      	mov	r0, r9
 801e7b0:	f7fd ff94 	bl	801c6dc <_Balloc>
 801e7b4:	4604      	mov	r4, r0
 801e7b6:	b940      	cbnz	r0, 801e7ca <__gethex+0x166>
 801e7b8:	4b61      	ldr	r3, [pc, #388]	; (801e940 <__gethex+0x2dc>)
 801e7ba:	4602      	mov	r2, r0
 801e7bc:	21e4      	movs	r1, #228	; 0xe4
 801e7be:	4861      	ldr	r0, [pc, #388]	; (801e944 <__gethex+0x2e0>)
 801e7c0:	f7ff feca 	bl	801e558 <__assert_func>
 801e7c4:	3101      	adds	r1, #1
 801e7c6:	105b      	asrs	r3, r3, #1
 801e7c8:	e7ef      	b.n	801e7aa <__gethex+0x146>
 801e7ca:	f100 0a14 	add.w	sl, r0, #20
 801e7ce:	2300      	movs	r3, #0
 801e7d0:	495a      	ldr	r1, [pc, #360]	; (801e93c <__gethex+0x2d8>)
 801e7d2:	f8cd a004 	str.w	sl, [sp, #4]
 801e7d6:	469b      	mov	fp, r3
 801e7d8:	45a8      	cmp	r8, r5
 801e7da:	d342      	bcc.n	801e862 <__gethex+0x1fe>
 801e7dc:	9801      	ldr	r0, [sp, #4]
 801e7de:	f840 bb04 	str.w	fp, [r0], #4
 801e7e2:	eba0 000a 	sub.w	r0, r0, sl
 801e7e6:	1080      	asrs	r0, r0, #2
 801e7e8:	6120      	str	r0, [r4, #16]
 801e7ea:	ea4f 1840 	mov.w	r8, r0, lsl #5
 801e7ee:	4658      	mov	r0, fp
 801e7f0:	f7fe f866 	bl	801c8c0 <__hi0bits>
 801e7f4:	683d      	ldr	r5, [r7, #0]
 801e7f6:	eba8 0000 	sub.w	r0, r8, r0
 801e7fa:	42a8      	cmp	r0, r5
 801e7fc:	dd59      	ble.n	801e8b2 <__gethex+0x24e>
 801e7fe:	eba0 0805 	sub.w	r8, r0, r5
 801e802:	4641      	mov	r1, r8
 801e804:	4620      	mov	r0, r4
 801e806:	f7fe fbf5 	bl	801cff4 <__any_on>
 801e80a:	4683      	mov	fp, r0
 801e80c:	b1b8      	cbz	r0, 801e83e <__gethex+0x1da>
 801e80e:	f108 33ff 	add.w	r3, r8, #4294967295
 801e812:	1159      	asrs	r1, r3, #5
 801e814:	f003 021f 	and.w	r2, r3, #31
 801e818:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801e81c:	f04f 0b01 	mov.w	fp, #1
 801e820:	fa0b f202 	lsl.w	r2, fp, r2
 801e824:	420a      	tst	r2, r1
 801e826:	d00a      	beq.n	801e83e <__gethex+0x1da>
 801e828:	455b      	cmp	r3, fp
 801e82a:	dd06      	ble.n	801e83a <__gethex+0x1d6>
 801e82c:	f1a8 0102 	sub.w	r1, r8, #2
 801e830:	4620      	mov	r0, r4
 801e832:	f7fe fbdf 	bl	801cff4 <__any_on>
 801e836:	2800      	cmp	r0, #0
 801e838:	d138      	bne.n	801e8ac <__gethex+0x248>
 801e83a:	f04f 0b02 	mov.w	fp, #2
 801e83e:	4641      	mov	r1, r8
 801e840:	4620      	mov	r0, r4
 801e842:	f7ff fea7 	bl	801e594 <rshift>
 801e846:	4446      	add	r6, r8
 801e848:	68bb      	ldr	r3, [r7, #8]
 801e84a:	42b3      	cmp	r3, r6
 801e84c:	da41      	bge.n	801e8d2 <__gethex+0x26e>
 801e84e:	4621      	mov	r1, r4
 801e850:	4648      	mov	r0, r9
 801e852:	f7fd ff83 	bl	801c75c <_Bfree>
 801e856:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e858:	2300      	movs	r3, #0
 801e85a:	6013      	str	r3, [r2, #0]
 801e85c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 801e860:	e78a      	b.n	801e778 <__gethex+0x114>
 801e862:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801e866:	2a2e      	cmp	r2, #46	; 0x2e
 801e868:	d014      	beq.n	801e894 <__gethex+0x230>
 801e86a:	2b20      	cmp	r3, #32
 801e86c:	d106      	bne.n	801e87c <__gethex+0x218>
 801e86e:	9b01      	ldr	r3, [sp, #4]
 801e870:	f843 bb04 	str.w	fp, [r3], #4
 801e874:	f04f 0b00 	mov.w	fp, #0
 801e878:	9301      	str	r3, [sp, #4]
 801e87a:	465b      	mov	r3, fp
 801e87c:	7828      	ldrb	r0, [r5, #0]
 801e87e:	9303      	str	r3, [sp, #12]
 801e880:	f7ff feda 	bl	801e638 <__hexdig_fun>
 801e884:	9b03      	ldr	r3, [sp, #12]
 801e886:	f000 000f 	and.w	r0, r0, #15
 801e88a:	4098      	lsls	r0, r3
 801e88c:	ea4b 0b00 	orr.w	fp, fp, r0
 801e890:	3304      	adds	r3, #4
 801e892:	e7a1      	b.n	801e7d8 <__gethex+0x174>
 801e894:	45a8      	cmp	r8, r5
 801e896:	d8e8      	bhi.n	801e86a <__gethex+0x206>
 801e898:	2201      	movs	r2, #1
 801e89a:	4628      	mov	r0, r5
 801e89c:	9303      	str	r3, [sp, #12]
 801e89e:	f7ff fe27 	bl	801e4f0 <strncmp>
 801e8a2:	4926      	ldr	r1, [pc, #152]	; (801e93c <__gethex+0x2d8>)
 801e8a4:	9b03      	ldr	r3, [sp, #12]
 801e8a6:	2800      	cmp	r0, #0
 801e8a8:	d1df      	bne.n	801e86a <__gethex+0x206>
 801e8aa:	e795      	b.n	801e7d8 <__gethex+0x174>
 801e8ac:	f04f 0b03 	mov.w	fp, #3
 801e8b0:	e7c5      	b.n	801e83e <__gethex+0x1da>
 801e8b2:	da0b      	bge.n	801e8cc <__gethex+0x268>
 801e8b4:	eba5 0800 	sub.w	r8, r5, r0
 801e8b8:	4621      	mov	r1, r4
 801e8ba:	4642      	mov	r2, r8
 801e8bc:	4648      	mov	r0, r9
 801e8be:	f7fe f967 	bl	801cb90 <__lshift>
 801e8c2:	eba6 0608 	sub.w	r6, r6, r8
 801e8c6:	4604      	mov	r4, r0
 801e8c8:	f100 0a14 	add.w	sl, r0, #20
 801e8cc:	f04f 0b00 	mov.w	fp, #0
 801e8d0:	e7ba      	b.n	801e848 <__gethex+0x1e4>
 801e8d2:	687b      	ldr	r3, [r7, #4]
 801e8d4:	42b3      	cmp	r3, r6
 801e8d6:	dd73      	ble.n	801e9c0 <__gethex+0x35c>
 801e8d8:	1b9e      	subs	r6, r3, r6
 801e8da:	42b5      	cmp	r5, r6
 801e8dc:	dc34      	bgt.n	801e948 <__gethex+0x2e4>
 801e8de:	68fb      	ldr	r3, [r7, #12]
 801e8e0:	2b02      	cmp	r3, #2
 801e8e2:	d023      	beq.n	801e92c <__gethex+0x2c8>
 801e8e4:	2b03      	cmp	r3, #3
 801e8e6:	d025      	beq.n	801e934 <__gethex+0x2d0>
 801e8e8:	2b01      	cmp	r3, #1
 801e8ea:	d115      	bne.n	801e918 <__gethex+0x2b4>
 801e8ec:	42b5      	cmp	r5, r6
 801e8ee:	d113      	bne.n	801e918 <__gethex+0x2b4>
 801e8f0:	2d01      	cmp	r5, #1
 801e8f2:	d10b      	bne.n	801e90c <__gethex+0x2a8>
 801e8f4:	9a02      	ldr	r2, [sp, #8]
 801e8f6:	687b      	ldr	r3, [r7, #4]
 801e8f8:	6013      	str	r3, [r2, #0]
 801e8fa:	2301      	movs	r3, #1
 801e8fc:	6123      	str	r3, [r4, #16]
 801e8fe:	f8ca 3000 	str.w	r3, [sl]
 801e902:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e904:	f04f 0862 	mov.w	r8, #98	; 0x62
 801e908:	601c      	str	r4, [r3, #0]
 801e90a:	e735      	b.n	801e778 <__gethex+0x114>
 801e90c:	1e69      	subs	r1, r5, #1
 801e90e:	4620      	mov	r0, r4
 801e910:	f7fe fb70 	bl	801cff4 <__any_on>
 801e914:	2800      	cmp	r0, #0
 801e916:	d1ed      	bne.n	801e8f4 <__gethex+0x290>
 801e918:	4621      	mov	r1, r4
 801e91a:	4648      	mov	r0, r9
 801e91c:	f7fd ff1e 	bl	801c75c <_Bfree>
 801e920:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e922:	2300      	movs	r3, #0
 801e924:	6013      	str	r3, [r2, #0]
 801e926:	f04f 0850 	mov.w	r8, #80	; 0x50
 801e92a:	e725      	b.n	801e778 <__gethex+0x114>
 801e92c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e92e:	2b00      	cmp	r3, #0
 801e930:	d1f2      	bne.n	801e918 <__gethex+0x2b4>
 801e932:	e7df      	b.n	801e8f4 <__gethex+0x290>
 801e934:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e936:	2b00      	cmp	r3, #0
 801e938:	d1dc      	bne.n	801e8f4 <__gethex+0x290>
 801e93a:	e7ed      	b.n	801e918 <__gethex+0x2b4>
 801e93c:	080259cc 	.word	0x080259cc
 801e940:	08025865 	.word	0x08025865
 801e944:	08025b76 	.word	0x08025b76
 801e948:	f106 38ff 	add.w	r8, r6, #4294967295
 801e94c:	f1bb 0f00 	cmp.w	fp, #0
 801e950:	d133      	bne.n	801e9ba <__gethex+0x356>
 801e952:	f1b8 0f00 	cmp.w	r8, #0
 801e956:	d004      	beq.n	801e962 <__gethex+0x2fe>
 801e958:	4641      	mov	r1, r8
 801e95a:	4620      	mov	r0, r4
 801e95c:	f7fe fb4a 	bl	801cff4 <__any_on>
 801e960:	4683      	mov	fp, r0
 801e962:	ea4f 1268 	mov.w	r2, r8, asr #5
 801e966:	2301      	movs	r3, #1
 801e968:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801e96c:	f008 081f 	and.w	r8, r8, #31
 801e970:	fa03 f308 	lsl.w	r3, r3, r8
 801e974:	4213      	tst	r3, r2
 801e976:	4631      	mov	r1, r6
 801e978:	4620      	mov	r0, r4
 801e97a:	bf18      	it	ne
 801e97c:	f04b 0b02 	orrne.w	fp, fp, #2
 801e980:	1bad      	subs	r5, r5, r6
 801e982:	f7ff fe07 	bl	801e594 <rshift>
 801e986:	687e      	ldr	r6, [r7, #4]
 801e988:	f04f 0802 	mov.w	r8, #2
 801e98c:	f1bb 0f00 	cmp.w	fp, #0
 801e990:	d04a      	beq.n	801ea28 <__gethex+0x3c4>
 801e992:	68fb      	ldr	r3, [r7, #12]
 801e994:	2b02      	cmp	r3, #2
 801e996:	d016      	beq.n	801e9c6 <__gethex+0x362>
 801e998:	2b03      	cmp	r3, #3
 801e99a:	d018      	beq.n	801e9ce <__gethex+0x36a>
 801e99c:	2b01      	cmp	r3, #1
 801e99e:	d109      	bne.n	801e9b4 <__gethex+0x350>
 801e9a0:	f01b 0f02 	tst.w	fp, #2
 801e9a4:	d006      	beq.n	801e9b4 <__gethex+0x350>
 801e9a6:	f8da 3000 	ldr.w	r3, [sl]
 801e9aa:	ea4b 0b03 	orr.w	fp, fp, r3
 801e9ae:	f01b 0f01 	tst.w	fp, #1
 801e9b2:	d10f      	bne.n	801e9d4 <__gethex+0x370>
 801e9b4:	f048 0810 	orr.w	r8, r8, #16
 801e9b8:	e036      	b.n	801ea28 <__gethex+0x3c4>
 801e9ba:	f04f 0b01 	mov.w	fp, #1
 801e9be:	e7d0      	b.n	801e962 <__gethex+0x2fe>
 801e9c0:	f04f 0801 	mov.w	r8, #1
 801e9c4:	e7e2      	b.n	801e98c <__gethex+0x328>
 801e9c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e9c8:	f1c3 0301 	rsb	r3, r3, #1
 801e9cc:	930f      	str	r3, [sp, #60]	; 0x3c
 801e9ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e9d0:	2b00      	cmp	r3, #0
 801e9d2:	d0ef      	beq.n	801e9b4 <__gethex+0x350>
 801e9d4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801e9d8:	f104 0214 	add.w	r2, r4, #20
 801e9dc:	ea4f 038b 	mov.w	r3, fp, lsl #2
 801e9e0:	9301      	str	r3, [sp, #4]
 801e9e2:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 801e9e6:	2300      	movs	r3, #0
 801e9e8:	4694      	mov	ip, r2
 801e9ea:	f852 1b04 	ldr.w	r1, [r2], #4
 801e9ee:	f1b1 3fff 	cmp.w	r1, #4294967295
 801e9f2:	d01e      	beq.n	801ea32 <__gethex+0x3ce>
 801e9f4:	3101      	adds	r1, #1
 801e9f6:	f8cc 1000 	str.w	r1, [ip]
 801e9fa:	f1b8 0f02 	cmp.w	r8, #2
 801e9fe:	f104 0214 	add.w	r2, r4, #20
 801ea02:	d13d      	bne.n	801ea80 <__gethex+0x41c>
 801ea04:	683b      	ldr	r3, [r7, #0]
 801ea06:	3b01      	subs	r3, #1
 801ea08:	42ab      	cmp	r3, r5
 801ea0a:	d10b      	bne.n	801ea24 <__gethex+0x3c0>
 801ea0c:	1169      	asrs	r1, r5, #5
 801ea0e:	2301      	movs	r3, #1
 801ea10:	f005 051f 	and.w	r5, r5, #31
 801ea14:	fa03 f505 	lsl.w	r5, r3, r5
 801ea18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ea1c:	421d      	tst	r5, r3
 801ea1e:	bf18      	it	ne
 801ea20:	f04f 0801 	movne.w	r8, #1
 801ea24:	f048 0820 	orr.w	r8, r8, #32
 801ea28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ea2a:	601c      	str	r4, [r3, #0]
 801ea2c:	9b02      	ldr	r3, [sp, #8]
 801ea2e:	601e      	str	r6, [r3, #0]
 801ea30:	e6a2      	b.n	801e778 <__gethex+0x114>
 801ea32:	4290      	cmp	r0, r2
 801ea34:	f842 3c04 	str.w	r3, [r2, #-4]
 801ea38:	d8d6      	bhi.n	801e9e8 <__gethex+0x384>
 801ea3a:	68a2      	ldr	r2, [r4, #8]
 801ea3c:	4593      	cmp	fp, r2
 801ea3e:	db17      	blt.n	801ea70 <__gethex+0x40c>
 801ea40:	6861      	ldr	r1, [r4, #4]
 801ea42:	4648      	mov	r0, r9
 801ea44:	3101      	adds	r1, #1
 801ea46:	f7fd fe49 	bl	801c6dc <_Balloc>
 801ea4a:	4682      	mov	sl, r0
 801ea4c:	b918      	cbnz	r0, 801ea56 <__gethex+0x3f2>
 801ea4e:	4b1b      	ldr	r3, [pc, #108]	; (801eabc <__gethex+0x458>)
 801ea50:	4602      	mov	r2, r0
 801ea52:	2184      	movs	r1, #132	; 0x84
 801ea54:	e6b3      	b.n	801e7be <__gethex+0x15a>
 801ea56:	6922      	ldr	r2, [r4, #16]
 801ea58:	3202      	adds	r2, #2
 801ea5a:	f104 010c 	add.w	r1, r4, #12
 801ea5e:	0092      	lsls	r2, r2, #2
 801ea60:	300c      	adds	r0, #12
 801ea62:	f7fc ff5e 	bl	801b922 <memcpy>
 801ea66:	4621      	mov	r1, r4
 801ea68:	4648      	mov	r0, r9
 801ea6a:	f7fd fe77 	bl	801c75c <_Bfree>
 801ea6e:	4654      	mov	r4, sl
 801ea70:	6922      	ldr	r2, [r4, #16]
 801ea72:	1c51      	adds	r1, r2, #1
 801ea74:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801ea78:	6121      	str	r1, [r4, #16]
 801ea7a:	2101      	movs	r1, #1
 801ea7c:	6151      	str	r1, [r2, #20]
 801ea7e:	e7bc      	b.n	801e9fa <__gethex+0x396>
 801ea80:	6921      	ldr	r1, [r4, #16]
 801ea82:	4559      	cmp	r1, fp
 801ea84:	dd0b      	ble.n	801ea9e <__gethex+0x43a>
 801ea86:	2101      	movs	r1, #1
 801ea88:	4620      	mov	r0, r4
 801ea8a:	f7ff fd83 	bl	801e594 <rshift>
 801ea8e:	68bb      	ldr	r3, [r7, #8]
 801ea90:	3601      	adds	r6, #1
 801ea92:	42b3      	cmp	r3, r6
 801ea94:	f6ff aedb 	blt.w	801e84e <__gethex+0x1ea>
 801ea98:	f04f 0801 	mov.w	r8, #1
 801ea9c:	e7c2      	b.n	801ea24 <__gethex+0x3c0>
 801ea9e:	f015 051f 	ands.w	r5, r5, #31
 801eaa2:	d0f9      	beq.n	801ea98 <__gethex+0x434>
 801eaa4:	9b01      	ldr	r3, [sp, #4]
 801eaa6:	441a      	add	r2, r3
 801eaa8:	f1c5 0520 	rsb	r5, r5, #32
 801eaac:	f852 0c04 	ldr.w	r0, [r2, #-4]
 801eab0:	f7fd ff06 	bl	801c8c0 <__hi0bits>
 801eab4:	42a8      	cmp	r0, r5
 801eab6:	dbe6      	blt.n	801ea86 <__gethex+0x422>
 801eab8:	e7ee      	b.n	801ea98 <__gethex+0x434>
 801eaba:	bf00      	nop
 801eabc:	08025865 	.word	0x08025865

0801eac0 <L_shift>:
 801eac0:	f1c2 0208 	rsb	r2, r2, #8
 801eac4:	0092      	lsls	r2, r2, #2
 801eac6:	b570      	push	{r4, r5, r6, lr}
 801eac8:	f1c2 0620 	rsb	r6, r2, #32
 801eacc:	6843      	ldr	r3, [r0, #4]
 801eace:	6804      	ldr	r4, [r0, #0]
 801ead0:	fa03 f506 	lsl.w	r5, r3, r6
 801ead4:	432c      	orrs	r4, r5
 801ead6:	40d3      	lsrs	r3, r2
 801ead8:	6004      	str	r4, [r0, #0]
 801eada:	f840 3f04 	str.w	r3, [r0, #4]!
 801eade:	4288      	cmp	r0, r1
 801eae0:	d3f4      	bcc.n	801eacc <L_shift+0xc>
 801eae2:	bd70      	pop	{r4, r5, r6, pc}

0801eae4 <__match>:
 801eae4:	b530      	push	{r4, r5, lr}
 801eae6:	6803      	ldr	r3, [r0, #0]
 801eae8:	3301      	adds	r3, #1
 801eaea:	f811 4b01 	ldrb.w	r4, [r1], #1
 801eaee:	b914      	cbnz	r4, 801eaf6 <__match+0x12>
 801eaf0:	6003      	str	r3, [r0, #0]
 801eaf2:	2001      	movs	r0, #1
 801eaf4:	bd30      	pop	{r4, r5, pc}
 801eaf6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801eafa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801eafe:	2d19      	cmp	r5, #25
 801eb00:	bf98      	it	ls
 801eb02:	3220      	addls	r2, #32
 801eb04:	42a2      	cmp	r2, r4
 801eb06:	d0f0      	beq.n	801eaea <__match+0x6>
 801eb08:	2000      	movs	r0, #0
 801eb0a:	e7f3      	b.n	801eaf4 <__match+0x10>

0801eb0c <__hexnan>:
 801eb0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb10:	680b      	ldr	r3, [r1, #0]
 801eb12:	6801      	ldr	r1, [r0, #0]
 801eb14:	115e      	asrs	r6, r3, #5
 801eb16:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801eb1a:	f013 031f 	ands.w	r3, r3, #31
 801eb1e:	b087      	sub	sp, #28
 801eb20:	bf18      	it	ne
 801eb22:	3604      	addne	r6, #4
 801eb24:	2500      	movs	r5, #0
 801eb26:	1f37      	subs	r7, r6, #4
 801eb28:	4682      	mov	sl, r0
 801eb2a:	4690      	mov	r8, r2
 801eb2c:	9301      	str	r3, [sp, #4]
 801eb2e:	f846 5c04 	str.w	r5, [r6, #-4]
 801eb32:	46b9      	mov	r9, r7
 801eb34:	463c      	mov	r4, r7
 801eb36:	9502      	str	r5, [sp, #8]
 801eb38:	46ab      	mov	fp, r5
 801eb3a:	784a      	ldrb	r2, [r1, #1]
 801eb3c:	1c4b      	adds	r3, r1, #1
 801eb3e:	9303      	str	r3, [sp, #12]
 801eb40:	b342      	cbz	r2, 801eb94 <__hexnan+0x88>
 801eb42:	4610      	mov	r0, r2
 801eb44:	9105      	str	r1, [sp, #20]
 801eb46:	9204      	str	r2, [sp, #16]
 801eb48:	f7ff fd76 	bl	801e638 <__hexdig_fun>
 801eb4c:	2800      	cmp	r0, #0
 801eb4e:	d14f      	bne.n	801ebf0 <__hexnan+0xe4>
 801eb50:	9a04      	ldr	r2, [sp, #16]
 801eb52:	9905      	ldr	r1, [sp, #20]
 801eb54:	2a20      	cmp	r2, #32
 801eb56:	d818      	bhi.n	801eb8a <__hexnan+0x7e>
 801eb58:	9b02      	ldr	r3, [sp, #8]
 801eb5a:	459b      	cmp	fp, r3
 801eb5c:	dd13      	ble.n	801eb86 <__hexnan+0x7a>
 801eb5e:	454c      	cmp	r4, r9
 801eb60:	d206      	bcs.n	801eb70 <__hexnan+0x64>
 801eb62:	2d07      	cmp	r5, #7
 801eb64:	dc04      	bgt.n	801eb70 <__hexnan+0x64>
 801eb66:	462a      	mov	r2, r5
 801eb68:	4649      	mov	r1, r9
 801eb6a:	4620      	mov	r0, r4
 801eb6c:	f7ff ffa8 	bl	801eac0 <L_shift>
 801eb70:	4544      	cmp	r4, r8
 801eb72:	d950      	bls.n	801ec16 <__hexnan+0x10a>
 801eb74:	2300      	movs	r3, #0
 801eb76:	f1a4 0904 	sub.w	r9, r4, #4
 801eb7a:	f844 3c04 	str.w	r3, [r4, #-4]
 801eb7e:	f8cd b008 	str.w	fp, [sp, #8]
 801eb82:	464c      	mov	r4, r9
 801eb84:	461d      	mov	r5, r3
 801eb86:	9903      	ldr	r1, [sp, #12]
 801eb88:	e7d7      	b.n	801eb3a <__hexnan+0x2e>
 801eb8a:	2a29      	cmp	r2, #41	; 0x29
 801eb8c:	d155      	bne.n	801ec3a <__hexnan+0x12e>
 801eb8e:	3102      	adds	r1, #2
 801eb90:	f8ca 1000 	str.w	r1, [sl]
 801eb94:	f1bb 0f00 	cmp.w	fp, #0
 801eb98:	d04f      	beq.n	801ec3a <__hexnan+0x12e>
 801eb9a:	454c      	cmp	r4, r9
 801eb9c:	d206      	bcs.n	801ebac <__hexnan+0xa0>
 801eb9e:	2d07      	cmp	r5, #7
 801eba0:	dc04      	bgt.n	801ebac <__hexnan+0xa0>
 801eba2:	462a      	mov	r2, r5
 801eba4:	4649      	mov	r1, r9
 801eba6:	4620      	mov	r0, r4
 801eba8:	f7ff ff8a 	bl	801eac0 <L_shift>
 801ebac:	4544      	cmp	r4, r8
 801ebae:	d934      	bls.n	801ec1a <__hexnan+0x10e>
 801ebb0:	f1a8 0204 	sub.w	r2, r8, #4
 801ebb4:	4623      	mov	r3, r4
 801ebb6:	f853 1b04 	ldr.w	r1, [r3], #4
 801ebba:	f842 1f04 	str.w	r1, [r2, #4]!
 801ebbe:	429f      	cmp	r7, r3
 801ebc0:	d2f9      	bcs.n	801ebb6 <__hexnan+0xaa>
 801ebc2:	1b3b      	subs	r3, r7, r4
 801ebc4:	f023 0303 	bic.w	r3, r3, #3
 801ebc8:	3304      	adds	r3, #4
 801ebca:	3e03      	subs	r6, #3
 801ebcc:	3401      	adds	r4, #1
 801ebce:	42a6      	cmp	r6, r4
 801ebd0:	bf38      	it	cc
 801ebd2:	2304      	movcc	r3, #4
 801ebd4:	4443      	add	r3, r8
 801ebd6:	2200      	movs	r2, #0
 801ebd8:	f843 2b04 	str.w	r2, [r3], #4
 801ebdc:	429f      	cmp	r7, r3
 801ebde:	d2fb      	bcs.n	801ebd8 <__hexnan+0xcc>
 801ebe0:	683b      	ldr	r3, [r7, #0]
 801ebe2:	b91b      	cbnz	r3, 801ebec <__hexnan+0xe0>
 801ebe4:	4547      	cmp	r7, r8
 801ebe6:	d126      	bne.n	801ec36 <__hexnan+0x12a>
 801ebe8:	2301      	movs	r3, #1
 801ebea:	603b      	str	r3, [r7, #0]
 801ebec:	2005      	movs	r0, #5
 801ebee:	e025      	b.n	801ec3c <__hexnan+0x130>
 801ebf0:	3501      	adds	r5, #1
 801ebf2:	2d08      	cmp	r5, #8
 801ebf4:	f10b 0b01 	add.w	fp, fp, #1
 801ebf8:	dd06      	ble.n	801ec08 <__hexnan+0xfc>
 801ebfa:	4544      	cmp	r4, r8
 801ebfc:	d9c3      	bls.n	801eb86 <__hexnan+0x7a>
 801ebfe:	2300      	movs	r3, #0
 801ec00:	f844 3c04 	str.w	r3, [r4, #-4]
 801ec04:	2501      	movs	r5, #1
 801ec06:	3c04      	subs	r4, #4
 801ec08:	6822      	ldr	r2, [r4, #0]
 801ec0a:	f000 000f 	and.w	r0, r0, #15
 801ec0e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801ec12:	6020      	str	r0, [r4, #0]
 801ec14:	e7b7      	b.n	801eb86 <__hexnan+0x7a>
 801ec16:	2508      	movs	r5, #8
 801ec18:	e7b5      	b.n	801eb86 <__hexnan+0x7a>
 801ec1a:	9b01      	ldr	r3, [sp, #4]
 801ec1c:	2b00      	cmp	r3, #0
 801ec1e:	d0df      	beq.n	801ebe0 <__hexnan+0xd4>
 801ec20:	f1c3 0320 	rsb	r3, r3, #32
 801ec24:	f04f 32ff 	mov.w	r2, #4294967295
 801ec28:	40da      	lsrs	r2, r3
 801ec2a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801ec2e:	4013      	ands	r3, r2
 801ec30:	f846 3c04 	str.w	r3, [r6, #-4]
 801ec34:	e7d4      	b.n	801ebe0 <__hexnan+0xd4>
 801ec36:	3f04      	subs	r7, #4
 801ec38:	e7d2      	b.n	801ebe0 <__hexnan+0xd4>
 801ec3a:	2004      	movs	r0, #4
 801ec3c:	b007      	add	sp, #28
 801ec3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ec42 <__ascii_mbtowc>:
 801ec42:	b082      	sub	sp, #8
 801ec44:	b901      	cbnz	r1, 801ec48 <__ascii_mbtowc+0x6>
 801ec46:	a901      	add	r1, sp, #4
 801ec48:	b142      	cbz	r2, 801ec5c <__ascii_mbtowc+0x1a>
 801ec4a:	b14b      	cbz	r3, 801ec60 <__ascii_mbtowc+0x1e>
 801ec4c:	7813      	ldrb	r3, [r2, #0]
 801ec4e:	600b      	str	r3, [r1, #0]
 801ec50:	7812      	ldrb	r2, [r2, #0]
 801ec52:	1e10      	subs	r0, r2, #0
 801ec54:	bf18      	it	ne
 801ec56:	2001      	movne	r0, #1
 801ec58:	b002      	add	sp, #8
 801ec5a:	4770      	bx	lr
 801ec5c:	4610      	mov	r0, r2
 801ec5e:	e7fb      	b.n	801ec58 <__ascii_mbtowc+0x16>
 801ec60:	f06f 0001 	mvn.w	r0, #1
 801ec64:	e7f8      	b.n	801ec58 <__ascii_mbtowc+0x16>

0801ec66 <_realloc_r>:
 801ec66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ec6a:	4680      	mov	r8, r0
 801ec6c:	4614      	mov	r4, r2
 801ec6e:	460e      	mov	r6, r1
 801ec70:	b921      	cbnz	r1, 801ec7c <_realloc_r+0x16>
 801ec72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ec76:	4611      	mov	r1, r2
 801ec78:	f7fb bcac 	b.w	801a5d4 <_malloc_r>
 801ec7c:	b92a      	cbnz	r2, 801ec8a <_realloc_r+0x24>
 801ec7e:	f7fd fce1 	bl	801c644 <_free_r>
 801ec82:	4625      	mov	r5, r4
 801ec84:	4628      	mov	r0, r5
 801ec86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ec8a:	f000 f842 	bl	801ed12 <_malloc_usable_size_r>
 801ec8e:	4284      	cmp	r4, r0
 801ec90:	4607      	mov	r7, r0
 801ec92:	d802      	bhi.n	801ec9a <_realloc_r+0x34>
 801ec94:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801ec98:	d812      	bhi.n	801ecc0 <_realloc_r+0x5a>
 801ec9a:	4621      	mov	r1, r4
 801ec9c:	4640      	mov	r0, r8
 801ec9e:	f7fb fc99 	bl	801a5d4 <_malloc_r>
 801eca2:	4605      	mov	r5, r0
 801eca4:	2800      	cmp	r0, #0
 801eca6:	d0ed      	beq.n	801ec84 <_realloc_r+0x1e>
 801eca8:	42bc      	cmp	r4, r7
 801ecaa:	4622      	mov	r2, r4
 801ecac:	4631      	mov	r1, r6
 801ecae:	bf28      	it	cs
 801ecb0:	463a      	movcs	r2, r7
 801ecb2:	f7fc fe36 	bl	801b922 <memcpy>
 801ecb6:	4631      	mov	r1, r6
 801ecb8:	4640      	mov	r0, r8
 801ecba:	f7fd fcc3 	bl	801c644 <_free_r>
 801ecbe:	e7e1      	b.n	801ec84 <_realloc_r+0x1e>
 801ecc0:	4635      	mov	r5, r6
 801ecc2:	e7df      	b.n	801ec84 <_realloc_r+0x1e>

0801ecc4 <__ascii_wctomb>:
 801ecc4:	b149      	cbz	r1, 801ecda <__ascii_wctomb+0x16>
 801ecc6:	2aff      	cmp	r2, #255	; 0xff
 801ecc8:	bf85      	ittet	hi
 801ecca:	238a      	movhi	r3, #138	; 0x8a
 801eccc:	6003      	strhi	r3, [r0, #0]
 801ecce:	700a      	strbls	r2, [r1, #0]
 801ecd0:	f04f 30ff 	movhi.w	r0, #4294967295
 801ecd4:	bf98      	it	ls
 801ecd6:	2001      	movls	r0, #1
 801ecd8:	4770      	bx	lr
 801ecda:	4608      	mov	r0, r1
 801ecdc:	4770      	bx	lr
	...

0801ece0 <fiprintf>:
 801ece0:	b40e      	push	{r1, r2, r3}
 801ece2:	b503      	push	{r0, r1, lr}
 801ece4:	4601      	mov	r1, r0
 801ece6:	ab03      	add	r3, sp, #12
 801ece8:	4805      	ldr	r0, [pc, #20]	; (801ed00 <fiprintf+0x20>)
 801ecea:	f853 2b04 	ldr.w	r2, [r3], #4
 801ecee:	6800      	ldr	r0, [r0, #0]
 801ecf0:	9301      	str	r3, [sp, #4]
 801ecf2:	f7ff f9b9 	bl	801e068 <_vfiprintf_r>
 801ecf6:	b002      	add	sp, #8
 801ecf8:	f85d eb04 	ldr.w	lr, [sp], #4
 801ecfc:	b003      	add	sp, #12
 801ecfe:	4770      	bx	lr
 801ed00:	200001c0 	.word	0x200001c0

0801ed04 <abort>:
 801ed04:	b508      	push	{r3, lr}
 801ed06:	2006      	movs	r0, #6
 801ed08:	f000 f834 	bl	801ed74 <raise>
 801ed0c:	2001      	movs	r0, #1
 801ed0e:	f000 f893 	bl	801ee38 <_exit>

0801ed12 <_malloc_usable_size_r>:
 801ed12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ed16:	1f18      	subs	r0, r3, #4
 801ed18:	2b00      	cmp	r3, #0
 801ed1a:	bfbc      	itt	lt
 801ed1c:	580b      	ldrlt	r3, [r1, r0]
 801ed1e:	18c0      	addlt	r0, r0, r3
 801ed20:	4770      	bx	lr

0801ed22 <_raise_r>:
 801ed22:	291f      	cmp	r1, #31
 801ed24:	b538      	push	{r3, r4, r5, lr}
 801ed26:	4604      	mov	r4, r0
 801ed28:	460d      	mov	r5, r1
 801ed2a:	d904      	bls.n	801ed36 <_raise_r+0x14>
 801ed2c:	2316      	movs	r3, #22
 801ed2e:	6003      	str	r3, [r0, #0]
 801ed30:	f04f 30ff 	mov.w	r0, #4294967295
 801ed34:	bd38      	pop	{r3, r4, r5, pc}
 801ed36:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801ed38:	b112      	cbz	r2, 801ed40 <_raise_r+0x1e>
 801ed3a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ed3e:	b94b      	cbnz	r3, 801ed54 <_raise_r+0x32>
 801ed40:	4620      	mov	r0, r4
 801ed42:	f000 f831 	bl	801eda8 <_getpid_r>
 801ed46:	462a      	mov	r2, r5
 801ed48:	4601      	mov	r1, r0
 801ed4a:	4620      	mov	r0, r4
 801ed4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ed50:	f000 b818 	b.w	801ed84 <_kill_r>
 801ed54:	2b01      	cmp	r3, #1
 801ed56:	d00a      	beq.n	801ed6e <_raise_r+0x4c>
 801ed58:	1c59      	adds	r1, r3, #1
 801ed5a:	d103      	bne.n	801ed64 <_raise_r+0x42>
 801ed5c:	2316      	movs	r3, #22
 801ed5e:	6003      	str	r3, [r0, #0]
 801ed60:	2001      	movs	r0, #1
 801ed62:	e7e7      	b.n	801ed34 <_raise_r+0x12>
 801ed64:	2400      	movs	r4, #0
 801ed66:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801ed6a:	4628      	mov	r0, r5
 801ed6c:	4798      	blx	r3
 801ed6e:	2000      	movs	r0, #0
 801ed70:	e7e0      	b.n	801ed34 <_raise_r+0x12>
	...

0801ed74 <raise>:
 801ed74:	4b02      	ldr	r3, [pc, #8]	; (801ed80 <raise+0xc>)
 801ed76:	4601      	mov	r1, r0
 801ed78:	6818      	ldr	r0, [r3, #0]
 801ed7a:	f7ff bfd2 	b.w	801ed22 <_raise_r>
 801ed7e:	bf00      	nop
 801ed80:	200001c0 	.word	0x200001c0

0801ed84 <_kill_r>:
 801ed84:	b538      	push	{r3, r4, r5, lr}
 801ed86:	4d07      	ldr	r5, [pc, #28]	; (801eda4 <_kill_r+0x20>)
 801ed88:	2300      	movs	r3, #0
 801ed8a:	4604      	mov	r4, r0
 801ed8c:	4608      	mov	r0, r1
 801ed8e:	4611      	mov	r1, r2
 801ed90:	602b      	str	r3, [r5, #0]
 801ed92:	f000 f82b 	bl	801edec <_kill>
 801ed96:	1c43      	adds	r3, r0, #1
 801ed98:	d102      	bne.n	801eda0 <_kill_r+0x1c>
 801ed9a:	682b      	ldr	r3, [r5, #0]
 801ed9c:	b103      	cbz	r3, 801eda0 <_kill_r+0x1c>
 801ed9e:	6023      	str	r3, [r4, #0]
 801eda0:	bd38      	pop	{r3, r4, r5, pc}
 801eda2:	bf00      	nop
 801eda4:	20013794 	.word	0x20013794

0801eda8 <_getpid_r>:
 801eda8:	f000 b810 	b.w	801edcc <_getpid>

0801edac <_close>:
 801edac:	4b02      	ldr	r3, [pc, #8]	; (801edb8 <_close+0xc>)
 801edae:	2258      	movs	r2, #88	; 0x58
 801edb0:	601a      	str	r2, [r3, #0]
 801edb2:	f04f 30ff 	mov.w	r0, #4294967295
 801edb6:	4770      	bx	lr
 801edb8:	20013794 	.word	0x20013794

0801edbc <_fstat>:
 801edbc:	4b02      	ldr	r3, [pc, #8]	; (801edc8 <_fstat+0xc>)
 801edbe:	2258      	movs	r2, #88	; 0x58
 801edc0:	601a      	str	r2, [r3, #0]
 801edc2:	f04f 30ff 	mov.w	r0, #4294967295
 801edc6:	4770      	bx	lr
 801edc8:	20013794 	.word	0x20013794

0801edcc <_getpid>:
 801edcc:	4b02      	ldr	r3, [pc, #8]	; (801edd8 <_getpid+0xc>)
 801edce:	2258      	movs	r2, #88	; 0x58
 801edd0:	601a      	str	r2, [r3, #0]
 801edd2:	f04f 30ff 	mov.w	r0, #4294967295
 801edd6:	4770      	bx	lr
 801edd8:	20013794 	.word	0x20013794

0801eddc <_isatty>:
 801eddc:	4b02      	ldr	r3, [pc, #8]	; (801ede8 <_isatty+0xc>)
 801edde:	2258      	movs	r2, #88	; 0x58
 801ede0:	601a      	str	r2, [r3, #0]
 801ede2:	2000      	movs	r0, #0
 801ede4:	4770      	bx	lr
 801ede6:	bf00      	nop
 801ede8:	20013794 	.word	0x20013794

0801edec <_kill>:
 801edec:	4b02      	ldr	r3, [pc, #8]	; (801edf8 <_kill+0xc>)
 801edee:	2258      	movs	r2, #88	; 0x58
 801edf0:	601a      	str	r2, [r3, #0]
 801edf2:	f04f 30ff 	mov.w	r0, #4294967295
 801edf6:	4770      	bx	lr
 801edf8:	20013794 	.word	0x20013794

0801edfc <_lseek>:
 801edfc:	4b02      	ldr	r3, [pc, #8]	; (801ee08 <_lseek+0xc>)
 801edfe:	2258      	movs	r2, #88	; 0x58
 801ee00:	601a      	str	r2, [r3, #0]
 801ee02:	f04f 30ff 	mov.w	r0, #4294967295
 801ee06:	4770      	bx	lr
 801ee08:	20013794 	.word	0x20013794

0801ee0c <_read>:
 801ee0c:	4b02      	ldr	r3, [pc, #8]	; (801ee18 <_read+0xc>)
 801ee0e:	2258      	movs	r2, #88	; 0x58
 801ee10:	601a      	str	r2, [r3, #0]
 801ee12:	f04f 30ff 	mov.w	r0, #4294967295
 801ee16:	4770      	bx	lr
 801ee18:	20013794 	.word	0x20013794

0801ee1c <_sbrk>:
 801ee1c:	4a04      	ldr	r2, [pc, #16]	; (801ee30 <_sbrk+0x14>)
 801ee1e:	6811      	ldr	r1, [r2, #0]
 801ee20:	4603      	mov	r3, r0
 801ee22:	b909      	cbnz	r1, 801ee28 <_sbrk+0xc>
 801ee24:	4903      	ldr	r1, [pc, #12]	; (801ee34 <_sbrk+0x18>)
 801ee26:	6011      	str	r1, [r2, #0]
 801ee28:	6810      	ldr	r0, [r2, #0]
 801ee2a:	4403      	add	r3, r0
 801ee2c:	6013      	str	r3, [r2, #0]
 801ee2e:	4770      	bx	lr
 801ee30:	2001379c 	.word	0x2001379c
 801ee34:	200137a0 	.word	0x200137a0

0801ee38 <_exit>:
 801ee38:	e7fe      	b.n	801ee38 <_exit>
	...

0801ee3c <_init>:
 801ee3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ee3e:	bf00      	nop
 801ee40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ee42:	bc08      	pop	{r3}
 801ee44:	469e      	mov	lr, r3
 801ee46:	4770      	bx	lr

0801ee48 <_fini>:
 801ee48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ee4a:	bf00      	nop
 801ee4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ee4e:	bc08      	pop	{r3}
 801ee50:	469e      	mov	lr, r3
 801ee52:	4770      	bx	lr
